$\operatorname{Fib}(n)=\left\{\begin{array}{cc} n-1 & (n=1 \text { 或 } 2) \\ \operatorname{Fib}(n-1)+\operatorname{Fib}(n-2) & (n>2) \end{array}\right.$试编写出计算$\operatorname{Fib}(n)$的递归算法和非递归算法, 分析每个算法的时间和空间复杂度。

6. 根据代数中的二项式定理, 二项式$(x+y)^{n}$的展开式的系数序列可以表示成三角形, 如图 4-12 所示,其中除每一行最左和最右两个系数等于 1 以外, 其余各系数均等于上一行左右两系数之和。这个系数三角形称作杨辉三角形。$(x+y)^{0}$(x+y)^{1}$(x+y)^{2}$(x+y)^{3}$(x+y)^{4}$(x+y)^{5}$(x+y)^{6}$(x+y)^{7}$(x+y)^{8}$图 4-12 杨辉三角形

设$C(n, k)$表示杨辉三角形中第$n$行$(n \geqslant 0)$的第$k$个系数$(0 \leqslant k \leqslant n)$, 按照二项式定理,$C(n, k)$可递归定义为:$C(n, k)=\left\{\begin{array}{cc} 1 & (k=0 \text { 或 } k=n) \\ C(n-1, k-1)+C(n-1, k) & (0<k<n) \end{array}\right.$(1) 写出计算$C(n, k)$的递归算法。

(2) 利用二维数组写出计算$C(n, k)$的非递归算法。

(3) 分析递归算法和非递归算法的时间复杂度和空间复杂度。

7. 在一个链队列中只设置队尾指针, 不设置队首指针, 并且让队尾结点的指针域指向队首结点 (称此为循环链队), 试分别写出在循环链队上进行插入和删除操作的算法。

8. 在一个数组空间 stack[StackMaxSize]中可以同时存放两个顺序栈, 栈底分别处在数组的两端, 当第 1 个栈的栈顶指针 top1 等于 -1 时则栈 1 为空, 当第 2 个栈的栈顶指针 top2 等于 MaxSize 时则栈 2 为空。两个栈均向中间增长, 当向栈 1 插入元素时, 使 top1 增 1 得到新的栈顶位置, 当向栈 2 插入元素时,则使 top2 减 1 才能够得到新的栈顶位置。当 top1 等于 top2-1 或者 top2 等于 top1+1 时, 存储空间用完,无法再向任一栈插入元素, 此时可考虑给出错误信息并停止运行。用于双栈操作的顺序存储类型可定义为:

struct BothStack {
    ElemType stack[MaxSize];
    int top1, top2;
};

双栈操作的抽象数据类型可定义为:

DAT BSTACK is
Data:
采用顺序结构存储的双栈,其存储类型为 BothStack
