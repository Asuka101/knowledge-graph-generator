2.6.2 两个多项式相加

下面以多项式的链接存储结构为例讨论两个多项式$P_1$和$P_2$相加的算法，返回它们的和多项式。

两个多项式相加就是使对应项相加，若另一个多项式中没有对应项（即指数相同的项），则把它直接复制到结果中。如：
\[ P_1(x) = 5 + 3x^2 - 6x^3 + 2x^5 \]
\[ P_2(x) = 3 + 4x - 2x^2 + 3x^3 - 2x^5 + 9x^6 \]$P_1$、$P_2$的相加结果为$P_3(x) = 8 + 4x + x^2 - 3x^3 + 9x^6$。

因为每个单链表都是按指数域的值有序的单链有序表，所以此相加过程就是两个单链有序表的合并过程，当然要遵循多项式相加的合并规则。

1. 实现相加运算的第 1 种算法

设计此题的算法时，首先将两个指针 t1 和 t2 分别指向两个多项式单链表 p1 和 p2 的表头结点，并定义和初始化一个新的单链表 p3 作为结果单链表；然后当 t1 和 t2 所指结点非空时，比较它们的指针域值的大小，将较小的一个结点的值插入到 p3 单链表中，若两者相等，则将系数域的值相加，当不为零时同归一结点的指数域的值组成一个元素值插入到 p3 单链表中，让 t1 和 t2 指针后移，以便向下继续比较和处理；最后当出现有一个单链表处理结束时，把另一个单链表中未处理的每个结点的值插入到 p3 单链表中。由此得到的算法如下。

LNode* PolyAdd1(LNode* p1, LNode* p2)
{
    //定义表示结果多项式的单链表 p3 并初始化为空
    LNode* p3;
    InitList(p3);
    //分别定义 t1 和 t2 指针，初始分别指向 p1 和 p2 单链表
    LNode *t1=p1, *t2=p2;
    //当两个表同时不空时的处理过程
    while(t1 && t2) {
        //将 t1 所指结点的值按指数有序插入到 p3 单链表中，实际是插到表尾
        if(t1->data.exp<t2->data.exp) {
            InsertList(p3,t1->data,1);
            t1=t1->next;
        }
        //将 t2 所指结点的值按指数有序插入到 p3 单链表中
        else if(t2->data.exp<t1->data.exp) {
            InsertList(p3,t2->data,-1);
            t2=t2->next;
        }
        //将 t1 和 t2 所指结点的值合并后按指数有序插入到 p3 单链表中
