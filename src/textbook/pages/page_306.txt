```cpp
//给二维数组 A 赋初值, 它等于图的邻接矩阵 GA
for(i=0; i<n; i++)
    for(j=0; j<n; j++)
        A[i][j]=GA[i][j];
//依次以每个顶点作为中间点, 逐步优化数组 A
for(k=0; k<n; k++)
    for(i=0; i<n; i++)
        for(j=0; j<n; j++) {
            if(i==k || j==k || i == j) continue;
            if(A[i][k]+A[k][j]<A[i][j])
                A[i][j]=A[i][k]+A[k][j];
        }

}

用下面程序调试弗洛伊德算法。

#include<iostream.h>
#include<stdlib.h>
#include<strstrea.h> //使用字符串流所需的系统头文件
#include<string.h>

typedef int VertexType; //定义顶点值的类型
typedef int WeightType; //定义边上权值的类型

const int MaxVertexNum=10; //定义图的最多顶点数
const WeightType MaxValue=1000; //定义无边上的特定权值

typedef VertexType vexlist[MaxVertexNum]; //定义 vexlist 为存储顶点信息的数组类型
typedef int adjmatrix[MaxVertexNum][MaxVertexNum]; //定义 adjmatrix 为存储邻接矩阵的数组类型

#include"采用邻接矩阵存储的图的常用运算.cpp"

void Floyed(adjmatrix GA, adjmatrix A, int n)
{
    弗洛伊德算法, 函数定义同上
}

void main()
{
    int n,k1,k2;
    cout<<"输入待处理图的顶点数:";
    cin>>n;
}
```
