3.4.2 稀疏矩阵的存储结构

稀疏矩阵的存储结构包括顺序存储结构和链接存储结构两种。在任一种存储结构中,除了存储三元组线性表中的所有元素之外，通常还需要存储稀疏矩阵的行数、列数和非零元素的个数这 3 个整型量。

1. 顺序存储

稀疏矩阵的顺序存储就是对其相应的三元组线性表进行顺序存储。假定每个非零元素的三元组用如下记录结构定义。

struct Triple {
    int row, col;
    ElemType val;
};

其中, row 和 col 用来分别存储元素的行号和列号, val 用来存储元素值。

一个稀疏矩阵的顺序存储类型定义如下。

struct SMatrix {
    int m, n, t;
    Triple sm[MaxTerms+1];
};

其中, m、n 和 t 域分别用来存储稀疏矩阵的行数、列数和非零元素的个数, sm 数组域用来顺序存储每个三元组元素, 假定下标为 0 的元素 sm[0]不用, 从下标为 1 起使用.MaxTerms 为一个事先定义的全局常量, 由它决定 sm 数组的大小, 该数组最多能够存储 MaxTerms 个三元组元素。例如, 若用 SMatrix 类型的对象存储图 3-3(b) 所示的稀疏矩阵, 则 m、n 和 t 域的值应分别为 5、6 和 7, MaxTerms 常量应大于等于 7, sm 数组中的内容如图 3-4 所示。

下标
1 | 1 | 1 | 3 |
2 | 1 | 4 | 5 |
3 | 2 | 3 | -2 |
4 | 3 | 1 | 1 |
5 | 3 | 3 | 4 |
6 | 3 | 5 | 6 |
7 | 5 | 3 | -1 |
| ... | ... | ... | ... |
MaxTerms | ... | ... | ... |

图 3-4 稀疏矩阵的顺序存储结构
