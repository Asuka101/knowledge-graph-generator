以后为简便起见，一般使用 C++语言进行算法描述，若读者只会使用 C 语言，则掌握上面所述差别后，不难把每个算法转换为相应的 C 语言算法。

数据对象 (data object) 简称对象，它属于一种数据类型中的特定实例，该数据类型既可以是一般数据类型，也可以是抽象数据类型。如 25 为一个整型数据对象，'A'为一个字符数数据对象，语句 char* p 定义 p 为一个字符指针对象，可以用来指向一个字符串，int a[10]定义 a 为一个含有 10 个整型数的数组对象，struct Rectangle r1 定义 r1 为一个 Rectangle 结构类型的对象，RECTangle rec 定义 rec 为一个具有 RECTangle 抽象数据类型的对象。

算法 (algorithm) 就是解决特定问题的方法。描述一个算法可以采用文字叙述，也可以采用传统流程图、N-S 图或 PAD 图等，但要在计算机上实现，则最终必须采用一种程序设计语言编写为程序。作为一个算法应具备如下 5 个特性。

(1) 有穷性。一个算法必须在执行有穷步之后结束。

(2) 确定性。算法中的每一步都必须具有确切的含义，无二义性。

(3) 可行性。算法中的每一步都必须是可行的，也就是说，每一步都能够通过手工或机器可以接受的有限次操作在有限时间内实现。

(4) 输入。一个算法可以有 0 个、1 个或多个输入量，在算法被执行之前提供给算法。

(5) 输出。一个算法执行结束后至少要有一个输出量，它是利用算法对输入量进行运算和处理的结果。

需要人们解决的特定问题可分为数值的和非数值的两类。解决数值问题的算法叫做数值算法，科学和工程计算方面的算法大都属于数值算法，如求解数值积分、求解线性方程组、求解代数方程和求解微分方程等。解决非数值问题的算法叫做非数值算法，数据处理方面的算法大都属于非数值算法，如在各种数据结构上进行的排序算法、查找算法、插入算法、删除算法和遍历算法等。数值算法和非数值算法并没有严格的区别，一般说来，在数值算法中主要进行算术运算，而在非数值算法中，则主要进行比较和逻辑运算。另一方面，特定的问题可能是递归的，也可能是非递归的，因而解决它们的算法就有递归算法和非递归算法之分。当然，从理论上讲，任何递归算法都可以通过使用循环、堆栈等技术转化为非递归算法。

在计算机领域，一个算法实质上是针对所处理问题的需要，在数据的逻辑结构和存储结构的基础上施加的一种运算。由于数据的逻辑结构和存储结构不是唯一的，在很大程度上可以由用户自行选择和设计，所以处理同一个问题的算法也不是唯一的。另外，即使对于具有相同的逻辑结构和存储结构而言，其算法的设计思想和技巧不同，编写出的算法也大不相同。学习数据结构课程的目的，就是学会根据数据处理问题的需要，为待处理的数据选择合适的逻辑结构和存储结构，进而按照结构化、模块化以及面向对象的程序设计方法设计出比较满意的算法（程序）。

\section*{1.2 算法描述}

算法就是解决特定问题的方法，该方法可以借助各种工具描述出来。如从$n$个整数元素中查找出最大值，用流程图描述则如图 1-6 所示。
