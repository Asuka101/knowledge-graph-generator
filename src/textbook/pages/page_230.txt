些常用操作，即搜索（查找）、更新、插入和删除元素的操作。假定二叉搜索树中的结点类型为 BTreeNode，指向二叉搜索树的树根结点的指针为 BST，则对二叉搜索树 BST 的查找、更新、插入和删除元素的操作声明如下。

bool Find(BTreeNode*BST, ElemType&item);
bool Update(BTreeNode*BST, const ElemType&item);
void Insert(BTreeNode*&BST, const ElemType&item);
bool Delete(BTreeNode*&BST, const ElemType&item);

查找函数 find 从二叉搜索树 BST 中查找等于给定值 item 的元素，若查找成功则返回 true，并由 item 带回该元素的值，否则返回 false。更新函数 Update 从二叉搜索树 BST 中查找等于给定值 item 的元素，若查找成功则用 item 的值更新该元素并返回 true，否则返回 false。插入函数 Insert 向二叉搜索树 BST 中插入一个元素 item，使得插入后仍保持为一棵二叉搜索树。删除函数 Delete 从二叉搜索树中删除等于给定值 item 的结点，若删除成功则返回 true，否则返回 false。

\section*{6.1 .3 二叉搜索树的运算}

1. 查找

根据二叉搜索树的定义，查找等于给定值 item 的元素时，若二叉搜索树为空，则表明查找失败，应返回假。否则，若 item 等于当前树根结点的值，则表明查找成功，应由引用参数 item 带回根结点的值并返回真；若 item 小于根结点的值，则继续在根的左子树中查找；若 item 大于根结点的值，则继续在根的右子树中查找。这是一个递归查找过程，其递归算法描述如下。

bool Find(BTreeNode*BST, ElemType&item)
//从二叉搜索树中查找等于给定值 item 的元素
{
    if(BST==NULL) return false; //查找失败返回假
    else {
        if(item==BST->data) { //若查找成功则带回元素值并返回真
            item=BST->data;
            return true;
        }
        else if (item<BST->data) //向左子树继续查找
            return Find(BST->left, item);
        else //向右子树继续查找
            return Find(BST->right, item);
    }
}

由于此递归算法中的递归调用属于末尾递归的调用，即递归调用语句是函数体中最后一条可执行语句，每次递归调用返回后不执行任何语句又返回到上一层，因此原先保存在数据堆栈中的信息都是没有用处的。所以为了避免无效花费在进出数据栈操作上的时间和
