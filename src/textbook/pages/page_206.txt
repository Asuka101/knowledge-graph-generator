struct BTreeNode {
    ElemType data;
    BTreeNode* left;
    BTreeNode* right;
};

若采用元素结点，则结点类型可定义为：

struct ABTreeNode {
    ElemType data;
    int left, right;
};

在元素结点中，left 和 right 域分别存储左、右孩子结点所在单元的下标，所以被定义为整型。为建立二叉链表而提供元素结点的数组类型可定义为：

typedef ABTreeNode ABTList[BTreeMaxSize];

其中，BTreeMaxSize 为全局整型常量，其值由用户事先定义，由它决定建立二叉链表的最大结点数。

设用 ABTList 类型的一维数组存储图 5-11（b）所示的二叉链表，由于在链接存储中，结点之间的逻辑关系是通过指针实现的，所以各结点在数组中占用的下标位置可以按照任何一种次序安排，假定按照层数从小到大、同一层从左到右的次序为各结点分配存储位置，则得到该二叉链表的存储映像，如图 5-12 所示。

data | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | BTreeMaxSize-1
:---:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:
A | B | D | C | E | H | F | G | I |   |   |
left | 1 | 2 | 4 | 5 | 0 | 7 | 0 | 0 | 0 |   |   |
right | 10 | 3 | 0 | 6 | 0 | 8 | 9 | 0 | 0 | 11 | 0 |

图 5-12 利用数组建立二叉树的链接存储结构

注意：元素结点从下标为 1 的位置起使用，下标为 0 的位置的左指针域通常用来存储树根指针，右指针域通常用来存储空链表的表头指针，空闲链表由空闲结点的 right 域链接而成。

在数组中建立二叉树的好处是：建立好后可以把整个数组写入到一个文件中保存起来，当需要时再从文件整体读入到数组中进行处理。

\section*{5.3 二叉树遍历}

设二叉树由具有 BTreeNode 类型的、通过动态分配产生的独立结点链接而成，并设 BT 为指向树根结点的指针，从树根指针出发可以访问到树中的每一个结点，所以可以用树根指针来指定一棵二叉树。

二叉树的遍历是二叉树中最重要的运算。二叉树的遍历是指按照一定次序访问树中所有结点，并且每个结点的值仅被访问一次的过程。根据二叉树的递归定义，一棵非空二叉
