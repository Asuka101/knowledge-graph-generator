当r1记录的grade域的值大于r2记录的grade域的值时则返回1, 表示$r1>r2$, 否则返回0, 表示$r1<=r2$。

在上面进行的大于运算符重载中，若一个参数为记录，另一个参数为整型数时，则重载函数如下:

int operator>(pupil r, int key){
    return r.grade>key;
}

在一个程序中使用以上运算符重载函数后，下面的各表达式都是合法的，其中假定ra和rb为pupil类型的对象，key为char*或int类型的对象。

ra==rb;  //若ra和rb的pnum域相等则返回真(1)，否则返回假（0）
ra==key;  //若ra的pnum域等于key则返回真，否则返回假
ra>rb;  //若ra的grade域值大于rb的grade域值则返1，否返0
ra>key;  //若ra的grade域值大于key值则返回1，否则返回0

程序1-17是从pupil类型的数组a[5]中分别查找出学号为020301的记录和分数为最大的记录。

//程序1-17.cpp
#include<iostream.h>
#include<string.h>
struct pupil{char pnum[8]; int grade;};
bool operator==(pupil r1, pupil r2){
    if (strcmp(r1.pnum, r2.pnum)==0) return true;
    else return false;
}

bool operator==(pupil r, char* key){
    if (strcmp(r.pnum, key)==0) return true;
    else return false;
}

int operator>(pupil r1, pupil r2){
    return r1.grade>r2.grade;
}

int operator>(pupil r, int key){
    return r.grade>key;
}

void main()
{
    pupil a[5]={{"010203",78},{"010204",92},{"020101",85},
                {"020301",63},{"040502",87}};
}
