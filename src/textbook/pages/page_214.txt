把指向根结点的指针置空。由此可知它是一个递归过程，类似于后序递归遍历。

void ClearBTree(BTreeNode*&BT)
{
    if(BT!=NULL) {
        ClearBTree(BT->left);     //删除左子树
        ClearBTree(BT->right);    //删除右子树
        delete BT;                //释放根结点
        BT=NULL;                  //置根指针为空
    }
}

采用下面程序上机调试对二叉树运算的算法。

#include<iostream.h>
#include<stdlib.h>

typedef char ElemType;            //定义二叉树结点值的类型为字符型

struct BTreeNode {
    ElemType data;
    BTreeNode* left;
    BTreeNode* right;
};

#include"二叉树运算.cpp"          //保存对二叉树各种运算的算法

void main()
{
    BTreeNode* bt;                //定义指向二叉树结点的指针,并用它作为树根指针
    InitBTree(bt);                //初始化二叉树,即置树根指针bt为空
    char b[50];                   //定义一个用于存放二叉树广义表的字符数组
    cout<<"输入二叉树用广义表表示的字符串:"<<endl;
    cin.getline(b,sizeof(b));     //输入的字符串被放入b数组中
    CreateBTree(bt,b);            //建立以bt作为树根指针的二叉树的链接存储结构
    PrintBTree(bt); cout<<endl;   //以广义表形式输出二叉树
    cout<<"前序: "; PreOrder(bt); cout<<endl;
    cout<<"中序: "; InOrder(bt); cout<<endl;
}
