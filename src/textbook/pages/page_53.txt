```cpp
        if (ch=='\n') i=i+1;
        if1.get(ch);
    }
    cout<<endl<<if1.tellg()<<endl;
    if1.close();
    cout<<i+1<<endl;  //加1表示文件结束符所在的行
}

在程序中, 表达式 if1.get(ch) 可替换为 ch=if1.get(), 表达式 ch!=EOF 可替换为 !if1.eof()。

\section*{1.4 .3 函数}

在 C/C++语言中，一个程序由若干个功能相对独立的函数模块所组成，其中必有一个定名为 main 的主函数模块。程序执行时将自动从主函数模块开始，其余为一般函数模块。主函数模块可以调用其他函数模块，其他函数模块之间也可以相互调用。允许一个函数（除主函数外）直接或间接地调用自身，这种情况称为直接或间接递归调用。

一个函数可以不返回任何值，此时函数类型被定义为 void。对这种函数的调用只能作为函数语句使用。一个函数也可以返回一个简单或记录类型的值，此时函数类型被定义为一种简单类型（如 int、int*、char、char* 等）或记录类型（如 student、person 等），对这种函数的调用不能作为左值使用，只能作为右值使用。一个函数还可以返回一个简单类型或记录类型的引用，此时函数类型被定义为一种类型后缀引用说明符 &（如 int&、student& 等），对这种函数的调用既可以作为左值使用，也可以作为右值使用。

程序 1-14 包含有一个主函数和 3 个重载的 find 函数，为了使它们在具有相同参数个数和类型的情况下重载，改变了参数之间的次序，使其各不相同。这 3 个 find 重载函数都是从数组 b[n] 中顺序查找找出 pnum 域的值为 k（即 k 所指向的字符串）的元素，但返回值各不相同。int 类型的 find 函数返回其元素的下标，若查找失败则返回 n 值；pupil* 型的 find 函数返回其元素的指针（即存储地址），若查找失败则返回空值 NULL；pupil& 型的 find 函数返回其元素的引用，这样可对被返回的变量赋值，若查找失败则显示错误信息后结束运行。

在主函数中，首先定义数组 a[PN]，并为其赋初值，每个元素值为 pupil 类型的学生记录，包括学号和分数，如第 1 个学生的学号为 010203，分数为 78；接着按行显示出数组 a 中每个元素的值；再接着定义一个待修改的学生记录 x，其学号为 020101，其分数修改值为 98；然后根据从键盘上输入的数字 1、2 和 3 决定调用哪一个 find 函数查找与 x 记录的学号相同的元素，从而对该元素进行修改；主函数最后又显示出数组 a 中每个元素的值，从显示结果可以看到，a[2] 元素被修改了。

//程序 1-14.cpp
#include<iostream.h>
#include<string.h>
#include<stdlib.h>
const int PN=5;
struct pupil {char pnum[8]; int grade;};
int find(pupil b[], int n, char* k);
```
