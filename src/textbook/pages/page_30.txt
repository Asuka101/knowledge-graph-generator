x=a[0]; i=1;
while(i<n){
    if(a[i]>x) x=a[i];
    i++;
}
cout<<"10个整数中的最大值为: "<<x<<endl;

本书对所有算法一般采用文字和 C++语言两种描述, 文字描述给出算法的思路和执行步骤, C++语言描述给出在机器上实现的代码。

\section*{1.3 算法评价}

对于解决同一个问题, 往往能够编写出许多不同的算法。例如, 对于数组排序问题,就能够根据不同的排序方法对应编写出各不相同的多种算法。进行算法评价的目的, 既在于从解决同一问题的不同算法中选择出较为合适的一种, 也在于知道如何对现有算法进行改进或者独立创新, 从而设计出更好的算法。一般从如下 5 个方面对算法进行评价。

\section*{1. 正确性}

正确性 (correctness) 是设计和评价一个算法的首要条件, 如果一个算法不正确, 即不能完成或不能较好地完成所要求的任务, 其他方面也就无从谈起。一个正确的算法是指在合理的数据输入下, 能够在有限的运行时间内得出正确的结果。通过采用各种典型的输入数据上机反复调试算法, 使得算法中的每段代码都被测试过, 若发现错误及时修正, 最终可以验证出算法的正确性。当然, 要从理论上证明一个算法的正确性, 并不是一件容易的事, 也不属于本课程所研究的范围, 故不进行讨论。

\section*{2. 稳健性}

稳健性 (robustness) 是指一个算法对不合理（又称不正确、非法、错误等）数据输入的反应和处理能力。一个好的算法应该能够识别错误数据并进行相应的处理。对错误数据的处理一般包括打印错误信息、调用错误处理程序、返回标识错误的特定信息、中止程序运行等。

\section*{3. 可读性}

可读性 (readability) 是指一个算法供人们阅读的容易程度。一个可读性好的算法, 应该使用便于识别和记忆的、与描述的事物或实现的功能相一致的标识符, 应该符合结构化和模块化的程序设计思想, 应该对其中的每个功能模块、重要数据类型或语句加以注释, 应该建立有相应的文档, 对整个算法的功能、结构、使用及有关事项进行说明。

\section*{4. 时间复杂度}

时间复杂度 (time complexity) 或称时间复杂性, 又称计算复杂度 (computational
