顺序依次存储到计算机存储器中的从指定存储位置开始的一块连续的存储空间中，线性表中的第一个元素的存储位置就是被指定存储空间中的开始存储位置，第$i$个元素$(2 \leq i \leq n)$被紧接着存储在第$i-1$个元素的存储位置的后面。

设线性表的元素类型为 ElemType，则每个元素所占用存储空间的大小（即字节数）为 sizeof(ElemType)，整个线性表所占用存储空间的大小为$n \times$sizeof(ElemType)，第$i$个元素的存储位置为$a + (i - 1) \times$sizeof(ElemType)，其中$n$表示线性表的长度，$1 \leq i \leq n$，$a$为整个线性表占用的存储空间的开始位置。

在 C/C++语言中，定义了一个数组就定义了一块可供用户使用的连续存储空间，该存储空间的起始位置就是由数组名表示的地址常量。因此，线性表的顺序存储结构是利用数组来实现的，数组的基本类型就是线性表中元素的类型，数组的大小（又称数组长度，它等于数组中包含的元素个数，亦即存储元素的位置数）要大于等于线性表的长度。线性表中的第 1 个元素被存储在数组的起始位置，即下标为 0 的位置上，第 2 个元素被存储在下标为 1 的位置上，以此类推，第$n$个元素（即最后表尾元素）被存储在下标为$n-1$的位置上。用具有 ElemType 类型的数组 list[MaxSize]存储线性表$A=(a_1, a_2, \cdots, a_i, a_{i+1}, \cdots, a_n)$，则$A$所对应的顺序存储结构如图 2-2 所示。

\begin{tabular}{c|c}
\hline 下标位置 & 数组（线性表）存储空间 \\
\hline 0 &$a_1$\\
\hline 1 &$a_2$\\
\hline$\vdots$&$\vdots$\\
\hline$i-1$&$a_i$\\
\hline$i$&$a_{i+1}$\\
\hline$\vdots$&$\vdots$\\
\hline$n-1$&$a_n$\\
\hline$\vdots$&$\vdots$\\
\hline MaxSize-1 & \\
\hline
\end{tabular}

图 2-2 线性表的顺序存储结构示意图

数组 list 下标的上界 MaxSize 决定了所有线性表的最大长度，当线性表的长度大于 MaxSize 时，其尾部多余的元素将无法被存储，发生这种情况时需要重新分配存储空间，使得 MaxSize 的值更大一些。

在定义一个线性表的顺序存储类型时，需要定义一个数组来存储线性表中的所有元素和定义一个整型变量来存储线性表的长度。假定数组用 list[MaxSize]表示，整型变量用 size 表示，则元素类型为 ElemType 的线性表的顺序存储类型可描述为：

ElemType list[MaxSize];
int size;

为了便于进行线性表的操作，可以把用于存储线性表元素的数组和存储线性表长度的变量统一说明在一个记录类型中，设该记录类型用 List 表示，则定义如下。

struct List {
    ElemType list[MaxSize];
};
