上面讨论的树的一些运算都需要访问树中的所有结点，并且每个结点的值仅被访问一次，访问时也只是做些简单的操作，所以每个算法的时间复杂度均为$O(n)$，其中$n$表示树中的结点数。各算法的空间复杂度最好情况为$O(\log n)$，最差情况为$O(n)$。

用下面程序调试对一般树运算的算法。

\#include<iostream.h>  
\#include<stdlib.h>  
const int k=3;  //假定k定义为常数3  

typedef char DataType;  //为了与队列中使用的元素类型ElemType相区别,树中的元素类型用标识符DataType表示  
struct GTreeNode {  //一般树中的结点类型  
    DataType data;  //结点值域  
    GTreeNode *t[k];  //结点指针域t[0]~t[k-1]  
};  

typedef struct GTreeNode* ElemType;  //定义队列的元素类型  
struct Queue {  //队列的顺序存储类型  
    ElemType *queue;  //指向存储队列的数组空间  
    int front,rear;  //队首指针、队尾指针变量  
    int MaxSize;  //queue数组长度  
};  

\#include"顺序队列运算.cpp"  

\#include"一般树运算.cpp"  //注意把查找算法中的ElemType修改为DataType  

void main()  
{  
    GTreeNode*gt;  
    InitGTree(gt);  
    char b[50];  
    cout<<"输入一棵"<k<广义表字符串;"<<endl;  
    cin.getline(b,sizeof(b));  //从键盘输入树的广义表字符串  
    CreateGTree(gt,b);  //建立k叉树的链接存储结构  
    cout<<"先根遍历结果:"; PreRoot(gt); cout<<endl;  
    cout<<"后根遍历结果:"; PostRoot(gt); cout<<endl;  
    cout<<"按层遍历结果:"; LayerOrder(gt); cout<<endl;  
    cout<<"按广义表形式输出的k叉树为:";  
    PrintGTree(gt);  
    cout<<endl;  
    cout<<"树的深度:"; cout<<GTreeDepth(gt)<<endl;
