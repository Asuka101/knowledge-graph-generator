二叉树的顺序存储结构对于存储完全二叉树是合适的，它能够充分利用存储空间，但对于一般二叉树，特别是对于那些单支结点较多的二叉树来说是很不合适的，因为可能只有少数存储位置被利用，而多数或绝大多数的存储位置空闲着。因此，对于一般二叉树通常采用下面介绍的链接存储结构。

\section*{2. 链接存储结构}

在二叉树的链接存储中，通常采用的方法是，在每个结点中设置 3 个域：值域、左指针域和右指针域。其结点结构为：$\begin{array}{|c|c|c|}\hline \text { left } & \text { data } & \text { right } \\\hline\end{array}$其中，data 表示值域，用来存储对应的数据元素，left 和 right 分别表示左指针域和右指针域，用来分别存储左孩子和右孩子结点的存储位置（即指针）。

链接存储的另一种方法是：在上面的结点结构中再增加一个 parent 指针域，用来指向其双亲结点。这种存储结构既便于查找孩子结点，也便于查找双亲结点，当然也带来存储空间的相应增加。

对于如图 5-11 (a) 所示的二叉树，不带双亲指针的链接存储结构（称作二叉链表）如图 5-11 (b) 所示，其中 f1 为指向树根结点的指针，简称树根指针或根指针；带双亲指针的链接存储结构（称作带双亲指针的二叉链表）如图 5-11 (c) 所示，其中 f2 为树根指针。

(a) 二叉树

(b) 不带双亲指针的链接存储结构

(c) 带双亲指针的链接存储结构

图 5-11 二叉树的链接存储结构

同单链表相同，二叉链表既可由独立分配的结点链接而成，也可由数组中的元素结点链接而成。若采用独立结点，则结点类型可定义为：
