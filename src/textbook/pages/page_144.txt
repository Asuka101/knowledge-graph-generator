该算法需要扫描输入广义表中的所有字符，并且处理每个字符都是简单的比较或赋值操作，其时间复杂度为$O(1)$，所以整个算法的时间复杂度为$O(n)$，$n$表示广义表中所有字符的个数。由于平均每两个字符可以生成一个表结点或单元素结点，所以$n$也可以看做生成的广义表中所有结点的个数。在这个算法中，既包含向子表的递归调用，也包含向后继表的递归调用，所以递归调用的最大深度（即动态堆栈的最大深度）不会超过生成的广义表中所有结点的个数，因此其空间复杂度也为$O(n)$。

4. 打印输出广义表

根据以 GL 为带表头附加结点的广义表的表头指针，打印输出该广义表同样需要向子表递归调用和向后继表递归调用。当 GL 结点为元素结点时，则应首先输出作为一个表的起始符号的左括号，然后再输出以 GL->sublist 为表头指针的表；当 GL 结点为单元素结点时，则应输出该元素的值。当以 GL->sublist 为表头指针的表输出完毕后，应在其最后输出一个作为表终止符的右括号。当 GL 结点输出结束后，若存在后继结点，则应首先输出一个逗号作为分隔符，然后再递归输出由 GL->next 指针所指向的后继表。

打印输出一个广义表的算法描述如下，其中值参 GL 指向一个带有表头附加结点的广义表，GL 也可采用指针引用参数。

void Print(GLNode* GL)
{
    if (GL->tag==true) {
        cout<<'(';
        if (GL->sublist ==NULL)
            cout<<'#';
        else
            Print(GL->sublist);
        cout<<')';
    }
    else cout<<GL->data;
    if (GL->next!=NULL) {
        cout<<',';
        Print(GL->next);
    }
}

该算法的时间复杂度和空间复杂度与建立广义表存储结构的情况相同，均为$O(n)$，$n$为广义表中所有结点的个数。

3.5.4 简单程序举例

以上介绍的几种进行广义表运算的算法假定被保存在 “广义表运算.cpp” 程序文件中，现要求利用它们编写一个程序，首先建立广义表 “(a,(b,(c)),((#),((d,e))),f,(g))” 的存储结构，然后输出该广义表，最后求该广义表的长度和深度。

该程序比较简单，如下所示。
