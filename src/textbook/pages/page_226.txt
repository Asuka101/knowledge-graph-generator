else {
    StreeNode*mt;
    if(ST->data==X) return ST->parent;
    else if(mt=PN(ST->lchild,X)) return mt;
    else if(mt=PN(ST->rchild,X)) return mt;
    return NULL;
}
}

4. 指出下面函数的功能。

void BTC(BTreeNode*BT)
{
    if(BT!=NULL) {
        if(BT->left!=NULL & BT->right!=NULL)
            if(BT->left->data>BT->right->data) {
                BTreeNode*t = BT->left;
                BT->left = BT->right;
                BT->right=t;
            }
        BTC(BT->left);
        BTC(BT->right);
    }
}

5. 设 BT 指向一棵二叉树，该二叉树的广义表表示为 a(b(a,d(f)),c(e,a(k)),b)，则依次使用 BTC1(BT,'a',C)、BTC1(BT,'b',C)、BTC1(BT,'c',C)和 BTC1(BT,'g',C)调用下面算法时，假定每次调用时 C 的初值均为 0，引用变量 C 的带回值依次为$(1)$、$(2)$、$(3)$和$(4)$。
void BTC1(BTreeNode*BT, char x, int& k)
{
    if(BT!=NULL) {
        if(BT->data==x) k++;
        BTC1(BT->left, x, k);
        BTC1(BT->right, x, k);
    }
}

6. 下面函数的功能是从二叉树 BT 中查找值为 x 的结点，若查找成功则返回结点地址，否则返回空。请在划有横线的地方填合适内容。
BTreeNode*BTf(BTreeNode*BT, ElemType x)
{
    if(BT==NULL)____(1)____;
    else {
        if(BT->data==x)____(2)____;
        else {
            BTreeNode* t;
