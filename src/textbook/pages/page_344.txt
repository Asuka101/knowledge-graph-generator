```cpp
{ /*清除HT散列表，即回收每个单链表中的所有结点 */
    LNode*p;
    for(int i=0; i<HashMaxSize; i++) {
        p=HT[i];
        while(p!=NULL) {
            HT[i]=p->next; delete p; p=HT[i];
        }
    }
}

(3) 向散列表插入一个元素。

bool Insert(LinkHashList HT, int m, ElemType item)
{ /*向长度为m的带链接的散列表HT中插入一个元素item */
    int d=Hash(item.key,m);          //得到新元素的散列地址
    LNode*p=new LNode;               //为新元素分配存储结点
    if(p==NULL) return false;        //内存空间用完,返回假表示插入失败
    p->data=item;                    //为新结点赋值
    p->next=HT[d]; HT[d]=p;          //把新结点插入到d单链表的表头
    return true;                     //返回真表示插入成功
}

(4) 从散列表中查找一个元素。

ElemType* Search(LinkHashList HT, int m, ElemType item)
{ /*从长度为m的带链接的散列表HT中查找元素 */
    int d=Hash(item.key,m);          //得到待查元素的散列地址
    LNode*p=HT[d];                   //得到对应单链表的表头指针
    while(p!=NULL) {                 //顺序查找元素,查找成功返回元素地址
        if(p->data.key==item.key)
            return &(p->data);
        else p=p->next;
    }
    return NULL;                     //查找失败返回空指针
}

(5) 从散列表中删除一个元素。

bool Delete(LinkHashList HT, int m, ElemType item)
{ /*从长度为m的带链接的散列表HT中删除元素 */
    int d=Hash(item.key,m);          //求出待删除元素的散列地址
    LNode*p=HT[d],*q;                //p指向对应单链表的表头指针
    if(p==NULL) return false;        //若单链表为空,返回假表示删除失败
    if(p->data.key==item.key) {      //删除表头结点,返回真表示删除成功
        HT[d]=p->next;
        delete p;
        return true;
    }
}
```
