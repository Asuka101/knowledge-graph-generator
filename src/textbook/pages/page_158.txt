```c
int BracketsCheck(char* fname) {
    //函数体同上
}

void main() {
    int b=BracketsCheck("xxk4-1.cpp");
    //“xxk4-1.cpp”为当前目录下的一个C++程序文件中括号配对正确!"<<endl;
    if(b) cout<<"xxk4-1.cpp 程序文件中括号配对正确!"<<endl;
    else cout<<"xxk4-1.cpp 程序文件中括号配对错误!"<<endl;
}

【例 4-3】把十进制整数转换为二至九之间的任一进制数输出。

分析：由计算机基础知识可知，把一个十进制整数$x$转换为任一种$r$进制数得到的是一个$r$进制的整数，假定为$y$，转换方法是逐次除基数$r$取余法。具体叙述为：首先用十进制整数$x$除以基数$r$，得到的整余数是$r$进制数$y$的最低位$y_0$，接着以$x$除以$r$的整数商作为被除数，用它除以$r$得到的整余数是$y$的次最低位$y_1$，以此类推，直到商为 0 时得到的整余数是$y$的最高位$y_m$，这里假设$y$共有$m+1$位。这样得到的$y$与$x$等值，$y$的按权展开式为：$y=y_0+y_1\cdot r+y_2\cdot r^2+\cdots+y_m\cdot r^m$若十进制整数为 3425，把它转换为八进制数的过程，如图 4-3 所示。

8 | 3425 余数 对应的八进制数位
8 | 428 ... 1 y_0
8 | 53 ... 4 y_1
8 | 6 ... 5 y_2
0 ... 6 y_3

图 4-3 十进制整数 3425 转换为八进制数的过程

最后得到的八进制数为$(6541)_8$，对应的十进制数为$6\times8^3+5\times8^2+4\times8+1=3425$，即为被转换的十进制数，证明转换过程是正确的。

从十进制整数转换为$r$进制数的过程中，由低到高依次得到$r$进制数中的每一位数字，而输出时又需要由高到低依次输出每一位。所以此问题适合利用栈来解决，具体算法描述如下。

void Transform(long num, int r)
    //把一个长整型数 num 转换为一个 r 进制数输出
{
    SNode* a; 
    InitStack(a); 
    while(num!=0) { 
        int k=num % r;
        Push(a,k);
        num/=r;
    }
}
```
