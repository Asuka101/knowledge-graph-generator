每对顶点之间的最短路径。下面分别进行讨论。

\section*{8.2 .2 从一顶点到其余各顶点的最短路径}

对于一个具有$n$个顶点和$e$条边的图$G$, 从某一项点$v_i$(称此为源点) 到其余任一项点$v_j$(称此为终点) 的最短路径, 可能是它们之间的边$(i,j)$或$\langle i,j\rangle$, 也可能是经过$k$个$(1 \leq k \leq n-2$, 最多经过除源点和终点之外的所有顶点) 中间顶点和$k+1$条边所形成的路径。在图 8-6 中, 从$v_0$到$v_1$的最短路径就是它们之间的有向边$\langle 0,1\rangle$, 其长度为 3; 从$v_0$到$v_4$的最短路径经过两个中间点$v_1$和$v_3$以及 3 条有向边$\langle 0,1\rangle,\langle 1,3\rangle$和$\langle 3,4\rangle$, 其长度为 23。

那么, 如何求出从源点$i$到图中其余每一个顶点的最短路径呢? 狄克斯特拉 (Dijkstra) 于 1959 年提出了解决此问题的一般算法, 具体做法是按照从源点到其余每一顶点的最短路径长度的升序依次求出从源点到各顶点的最短路径及长度, 每次求出从源点$i$到一个终点$m$的最短路径及长度后, 都要以该顶点$m$作为新考虑的中间点, 用$v_i$到$v_m$的最短路径和最短路径长度对$v_i$到其他尚未求出最短路径的那些终点的当前最短路径及长度作必要地修改, 使之成为当前新的最短路径和最短路径长度, 当进行$n-2$次 (因最多考虑$n-2$个中间点) 后算法结束。

狄克斯特拉算法需要设置一个集合, 用$S$表示, 其作用是保存已求得最短路径的终点序号, 它的初值中只有一个元素, 即源点$i$, 以后每求出一个从源点$i$到终点$m$的最短路径, 就将该顶点$m$并入$S$集合中, 以便作为新考虑的中间点; 还需要设置一个具有权值类型的一维数组$\text { dist}[n]$, 该数组中的第$j$个元素$\text { dist}[j]$用来保存从源点$i$到终点$j$的目前最短路径长度, 它的初值为$(i,j)$或$\langle i,j\rangle$边上的权值, 若$v_i$到$v_j$没有边, 则权值为 MaxValue, 以后每考虑一个新的中间点时,$\text { dist}[j]$的值可能变小; 另外, 再设置一个与$\text { dist}$数组相对应的、类型为 edgenode* 的一维指针数组 path, 该数组中的第$j$个元素$\text { path}[j]$指向一个单链表, 该单链表中保存着从源点$i$到终点$j$的目前最短路径, 即一个顶点序列, 当$v_i$到$v_j$存在着一条边时, 则$\text { path}[j]$初始指向由顶点$i$和$j$构成的单链表, 否则$\text { path}[j]$的初值为空。

此算法的执行过程是: 首先从$S$集合以外的顶点 (即待求出最短路径的终点) 所对应的$\text { dist}$数组元素中, 查找出其值最小的元素, 假定为$\text { dist}[m]$, 该元素值就是从源点$i$到终点$m$的最短路径长度 (证明从略), 对应$\text { path}$数组中的元素$\text { path}[m]$所指向的单链表链接着从源点$i$到终点$m$的最短路径, 即经过的顶点序列或称边序列; 接着把己求得最短路径的终点$m$并入集合$S$中; 然后以$v_m$作为新考虑的中间点, 对$S$集合以外的每个顶点$j$, 比较$\text { dist}[m]+\text { GA}[m][j]$($\text { GA}$为图$G$的邻接矩阵) 与$\text { dist}[j]$的大小, 若前者小于后者, 表明加入了新的中间点$v_m$之后, 从$v_i$到$v_j$的路径长度比原来变短, 应用它替换$\text { dist}[j]$的原值, 使$\text { dist}[j]$始终保持到目前为止最短的路径长度, 同时把$\text { path}[m]$单链表复制到$\text { path}[j]$上, 并在其后插入$v_j$结点, 使之构成从源点$i$到终点$j$的目前最短路径。重复$n-2$次上述运算过程, 即可在$\text { dist}$数组中得到从源点$i$到其余每个顶点的最短路径长度, 在$\text { path}$数组中得到相应的最短路径。

为了简便起见, 可采用一维数组$s[n]$来保存已求得最短路径的终点的集合$S$, 具体做法是: 若顶点$j$在集合$S$中, 则令数组元素$s[j]$的值为真, 否则为假。这样, 当判断一个顶点$j$是否在集合$S$以外时, 只要判断对应的数组元素$s[j]$是否为假即可。
