bool EmptySet(SetT& S); //判断集合是否为空
bool InSet(SetT& S, ElemType item); //判断一个元素是否属于集合
void OutputSet(SetT& S); //输出集合中所有元素
bool FindSet(SetT& S, ElemType& item); //从集合中查找一个元素
bool ModifySet(SetT& S, const ElemType& item); //修改集合元素
bool InsertSet(SetT& S, ElemType item); //向集合插入一个元素
bool DeleteSet(SetT& S, ElemType& item); //从集合删除一个元素
void UnionSet(SetT& S1, SetT& S2, SetT& S); //求两个集合的并集
void InterseSet(SetT& S1, SetT& S2, SetT& S); //求两个集合的交集
void DifferenceSet(SetT& S1, SetT& S2, SetT& S); //求两个集合的差集
end SET

在以上列出的各种运算操作中，第 1、2、8~13 种运算需要改变集合 S 的状态，所以 S 必须为引用参数，而其他运算中的 S 参数和 11~13 种运算中的 S1 和 S2 参数，由于不需要改变它们，所以可采用常量引用，即在参数前加上 const 保留字。

\section*{3.2 集合的顺序存储结构和操作实现}

集合的顺序存储就是定义一个数组类型的对象来存储集合元素，同时要定义一个整数变量来存储当前集合长度和定义一个整型常量或变量来存储数组类型的长度。这 3 个对象的定义假定如下。

const int MaxSize=20; //定义存储集合元素的数组的长度
ElemType set[MaxSize]; //定义存储集合所有元素的数组
int len; //定义集合当前长度变量，取值在 0~MaxSize 之间

集合中的元素可以按任何次序存入到 set 数组中，不妨按照元素在集合中的位置次序相应保存到对应元素中，即第 1 个元素保存到下标为 0 的元素 set[0]中，第 2 个元素保存到下标为 1 的元素 set[1]中，以此类推。因为集合中的元素与次序无关，所以新添的元素则直接加到后面，删除一个元素后则把最后一个元素调到这个空出的位置上，使得插入和删除不需要移动任何元素，从而节省运算时间。

为了集合操作方便，可以把 set 数组和 len 变量封装在一个结构类型中，结构类型名用 Set 表示，具体定义如下。

struct Set {
    ElemType set[MaxSize];
    int len;
};

若对存储集合的数组空间采用动态分配，并且其数组长度能够随之改变，则可以定义出如下的 Set 类型。

struct Set {
    ElemType *set; //set 指向动态分配的数组空间
    int len; //存集合当前长度
    int MaxSize; //存 set 数组长度，亦即所能存储集合的最大长度
};
