示, 下面给出对由 HS 所指向的链栈进行每一种栈操作的算法。

1. 初始化链栈

void InitStack(SNode*& HS)
{
    HS=NULL; //将链栈置空
}

2. 向链栈中插入一个元素

void Push(SNode*& HS, const ElemType& item)
{
    //为插入元素获取动态结点
    SNode* newptr=new SNode;
    //给新分配的结点赋值
    newptr->data=item;
    //向栈顶插入新结点
    newptr->next=HS;
    HS=newptr;
}

3. 从链栈中删除一个元素并返回

ElemType Pop(SNode*& HS)
{
    if(HS==NULL) {
        //不能从空栈删除
        cerr<<"Linked stack is empty!"<<endl;
        exit(1);
    }
    SNode* p=HS;                //暂存栈顶结点指针
    HS=HS->next;                //使栈顶指针指向下—结点
    ElemType temp=p->data;      //暂存原栈顶元素
    delete p;                   //回收原栈顶结点
    return temp;                //返回原栈顶元素
}

4. 读取栈顶元素

ElemType Peek(SNode* HS)       //HS 为值参或引用形参均可
{
    if(HS==NULL) {
        //无法从空栈中操作
        cerr<<"Linked stack is empty!"<<endl;
        exit(1);
    }
    return HS->data;            //返回栈顶结点的值
}
