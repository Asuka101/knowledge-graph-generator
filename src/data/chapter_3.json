{
  "entities": [
    {
      "type": "数据结构",
      "ID": "03DS001",
      "name": "集合",
      "attributes": {
        "难度": "入门",
        "内容": "用于存储和组织数据的方式，定义了数据元素之间的逻辑关系及操作方式。由具有相同属性的数据元素组合而成，数据之间没有任何前驱和后继关系。长度可变，元素类型可为任何一种。操作包括初始化、清除、求长度、判空、判属、输出、查找、删除、插入、修改、求并集、求交集、求差集。适用场景：描述一组无序、不重复元素的集合。",
        "存储开销": "取决于具体实现（顺序存储或链接存储），可能需要动态调整空间。",
        "核心特性": "无序性，元素唯一性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON001",
      "name": "抽象数据类型",
      "attributes": {
        "难度": "入门",
        "内容": "包括数据和操作两部分，描述数据的逻辑结构和允许的操作，不关注具体实现。适用场景：数据结构设计的抽象描述。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS002",
      "name": "线性表",
      "attributes": {
        "难度": "入门",
        "内容": "具有一对一逻辑关系的数据元素有限序列。特性：元素有序性，相邻元素有前驱和后继关系。适用场景：存储顺序或按位置访问的数据。",
        "存储开销": "未知",
        "核心特性": "有序性，有前驱后继关系。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS003",
      "name": "顺序表",
      "attributes": {
        "难度": "入门",
        "内容": "使用数组存储线性表元素的一种实现方式。元素按其在集合中的位置次序相应保存到数组中。适用场景：需要频繁按位置查找或修改。",
        "存储开销": "连续内存空间，可能需要预分配或动态扩展。",
        "核心特性": "连续存储，随机访问。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON006",
      "name": "顺序存储",
      "attributes": {
        "难度": "入门",
        "内容": "将数据元素存储在一块连续的内存区域中，元素之间的逻辑关系通过其存储位置的相邻性体现。适用场景：适用于需要快速随机访问、元素大小固定且不常变动的数据结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS004",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "使用链接（指针）连接存储结点，每个结点包含数据和指向后继结点的指针。通常用于实现集合的链接存储结构。适用场景：需要频繁插入和删除。",
        "存储开销": "非连续内存空间，每个结点有额外指针开销。",
        "核心特性": "离散存储，灵活插入删除，通过指针连接。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON007",
      "name": "链接存储",
      "attributes": {
        "难度": "入门",
        "内容": "数据元素分散存储在内存中，元素之间的逻辑关系通过存储地址的指针链接表示。适用场景：适用于数据元素大小可变、需要频繁插入删除或无法预知存储规模的数据结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG001",
      "name": "顺序查找",
      "attributes": {
        "难度": "入门",
        "内容": "原理：从序列一端开始，依次比较元素与目标值，直到找到或遍历结束。伪代码：通过循环遍历数组或链表实现。适用场景：适用于任何线性结构，特别是无序或元素较少的情况。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历",
        "适用场景": "适用于任何线性结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG002",
      "name": "简单插入排序",
      "attributes": {
        "难度": "入门",
        "内容": "原理：假设前面部分有序，将当前元素插入到已排序部分的正确位置。适用场景：适用于小规模或基本有序的数据。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1)",
        "设计思想": "增量构建有序序列",
        "适用场景": "适用于小规模或基本有序的数据。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG003",
      "name": "简单选择排序",
      "attributes": {
        "难度": "入门",
        "内容": "原理：每次从未排序部分选取最小（或最大）元素，放到已排序部分的末尾。伪代码： provided. 适用场景：适用于小规模数据。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1)",
        "设计思想": "选择、交换",
        "适用场景": "适用于小规模数据。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG004",
      "name": "集合并集运算",
      "attributes": {
        "难度": "中等",
        "内容": "原理：求两个集合所有元素的并集，结果不含重复元素。伪代码： provided for sequential and linked implementations. 适用场景：合并两个集合。",
        "时间复杂度": "顺序存储实现为 O(nm)，链式存储实现为 O(t1+t2)。",
        "空间复杂度": "取决于实现方式，可能为 O(n+m) 或 O(t1+t2)。",
        "设计思想": "合并，去重。",
        "适用场景": "合并两个集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG005",
      "name": "集合交集运算",
      "attributes": {
        "难度": "中等",
        "内容": "原理：求两个集合共有元素的集合。伪代码： provided for sequential and linked implementations. 适用场景：找出两个集合的共同部分。",
        "时间复杂度": "顺序存储实现为 O(nm)，链式存储实现为 O(nm)。",
        "空间复杂度": "O(min(n,m))。",
        "设计思想": "查找，筛选。",
        "适用场景": "找出两个集合的共同部分。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG006",
      "name": "集合差集运算",
      "attributes": {
        "难度": "中等",
        "内容": "原理：求属于第一个集合但不属于第二个集合的元素集合。伪代码： provided for sequential and linked implementations. 适用场景：找出在第一个集合中独有的元素。",
        "时间复杂度": "顺序存储实现为 O(nm)，链式存储实现为 O(nm)。",
        "空间复杂度": "O(n)。",
        "设计思想": "遍历，排除。",
        "适用场景": "找出在第一个集合中独有的元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS005",
      "name": "稀疏矩阵",
      "attributes": {
        "难度": "中等",
        "内容": "非零元素个数远远小于零元素个数的矩阵。采用特殊存储方法（如三元组线性表）可以节省存储空间。操作包括转置、加法、乘法等。适用场景：存储包含大量零元素的二维数据，如大型网络连接矩阵。",
        "存储开销": "采用特殊存储方法（如三元组线性表）可大大节省存储空间。",
        "核心特性": "大量零元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON004",
      "name": "矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "具有m行n列的数表，共m*n个数，每个元素由行号和列号唯一对应。适用场景：数学、工程等领域表示和处理二维数据。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON005",
      "name": "三元组",
      "attributes": {
        "难度": "入门",
        "内容": "(i,j,a_ij)，表示稀疏矩阵中非零元素的行号i、列号j和元素值a_ij。适用场景：表示稀疏矩阵中的非零元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS006",
      "name": "三元组线性表",
      "attributes": {
        "难度": "中等",
        "内容": "表示稀疏矩阵的一种方法，使用三元组(i,j,a_ij)存储每个非零元素的行号、列号和值，并按行号为主序、列号为辅序排列。可以采用顺序或链接方式存储。特性：是稀疏矩阵的抽象存储表示。适用场景：存储稀疏矩阵以节省空间。",
        "存储开销": "仅存储非零元素的三元组及少量矩阵信息。",
        "核心特性": "存储非零元素的三元组，按序排列。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG007",
      "name": "稀疏矩阵转置运算",
      "attributes": {
        "难度": "中等",
        "内容": "原理：将原矩阵的行变为列，列变为行。适用场景：矩阵代数运算。",
        "时间复杂度": "取决于具体算法（普通或快速）。",
        "空间复杂度": "取决于具体算法。",
        "设计思想": "交换行列索引。",
        "适用场景": "矩阵代数运算。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG008",
      "name": "稀疏矩阵加法运算",
      "attributes": {
        "难度": "中等",
        "内容": "原理：两个大小相同的矩阵对应元素相加。伪代码： provided for linked implementation. 适用场景：矩阵代数运算。",
        "时间复杂度": "链式存储实现为 O(t1+t2)。",
        "空间复杂度": "O(t1+t2)。",
        "设计思想": "按行合并有序的三元组列表。",
        "适用场景": "矩阵代数运算。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG009",
      "name": "稀疏矩阵乘法运算",
      "attributes": {
        "难度": "高级",
        "内容": "原理：结果矩阵C[i][j]等于A第i行与B第j列对应元素乘积之累加和。条件：A的列数等于B的行数。适用场景：矩阵代数运算。",
        "时间复杂度": "取决于具体算法和矩阵结构。",
        "空间复杂度": "取决于具体算法。",
        "设计思想": "矩阵乘法。",
        "适用场景": "矩阵代数运算。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG010",
      "name": "稀疏矩阵普通转置算法",
      "attributes": {
        "难度": "中等",
        "内容": "原理：按列扫描原矩阵三元组，交换行列值后写入结果矩阵。伪代码： provided. 适用场景：稀疏矩阵转置，效率较低。",
        "时间复杂度": "O(nt) (n=cols, t=non-zeros).",
        "空间复杂度": "O(t).",
        "设计思想": "扫描，重排。",
        "适用场景": "稀疏矩阵转置，效率较低。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG011",
      "name": "稀疏矩阵快速转置算法",
      "attributes": {
        "难度": "中等",
        "内容": "原理：两次扫描，第一次统计每列非零元素个数及计算结果中每行首元素位置，第二次按计算位置直接写入。伪代码： provided. 适用场景：稀疏矩阵转置，效率较高。",
        "时间复杂度": "O(n+t) (n=cols, t=non-zeros).",
        "空间复杂度": "O(n).",
        "设计思想": "计数，定位，直接写入。",
        "适用场景": "稀疏矩阵转置，效率较高。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON008",
      "name": "行指针向量",
      "attributes": {
        "难度": "中等",
        "内容": "存储稀疏矩阵每行对应的单链表表头指针的一维数组。适用场景：用于稀疏矩阵的链接存储结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON009",
      "name": "十字链接",
      "attributes": {
        "难度": "高级",
        "内容": "稀疏矩阵的一种链接存储方式，每个非零元素结点既包含指向同一行下一结点的指针，也包含指向同一列下一结点的指针。结合行指针向量和列指针向量使用。适用场景：稀疏矩阵的链接存储，方便按行和按列访问。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS007",
      "name": "广义表",
      "attributes": {
        "难度": "高级",
        "内容": "线性表的推广，是n(n>=0)个元素的一个有限序列，元素可以是单元素或子表。定义是递归的。适用场景：表示结构复杂的层次关系或嵌套数据。",
        "存储开销": "采用动态链接结构，每个结点有标志域、数据/子表指针域和后继指针域。",
        "核心特性": "递归结构，元素可以是单元素或子表。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON010",
      "name": "广义表单元素",
      "attributes": {
        "难度": "高级",
        "内容": "广义表中的一种元素类型，是某一确定类型的对象，不是表。适用场景：构成广义表的基本非表元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON011",
      "name": "广义表子表",
      "attributes": {
        "难度": "高级",
        "内容": "广义表中的一种元素类型，本身又是一个广义表。适用场景：构成广义表的嵌套结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON012",
      "name": "递归",
      "attributes": {
        "难度": "中等",
        "内容": "函数或过程直接或间接调用自身的编程技术。适用场景：解决具有递归定义性质的问题，如树、图遍历，分治算法，以及广义表处理。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG012",
      "name": "求广义表长度",
      "attributes": {
        "难度": "高级",
        "内容": "原理：递归计算，长度等于1加上后继表的长度。伪代码： provided. 适用场景：获取广义表顶层元素的数量。",
        "时间复杂度": "O(n) (n为广义表长度).",
        "空间复杂度": "O(n) (递归栈深度).",
        "设计思想": "递归",
        "适用场景": "获取广义表顶层元素的数量。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG013",
      "name": "求广义表深度",
      "attributes": {
        "难度": "高级",
        "content": "原理：递归计算，深度等于所有子表的最大深度加1。伪代码： provided. 适用场景：获取广义表的最大嵌套层级。",
        "时间复杂度": "O(N) (N为广义表中结点总数).",
        "空间复杂度": "O(D) (D为广义表深度).",
        "设计思想": "递归，遍历子表。",
        "适用场景": "获取广义表的最大嵌套层级。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON013",
      "name": "递归算法",
      "attributes": {
        "难度": "中等",
        "内容": "使用递归技术实现的算法。特性：通常包含递归基（终止条件）和递归步骤。适用场景：处理递归数据结构（如广义表）或解决可分解为同类子问题的问题。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG014",
      "name": "建立广义表存储结构",
      "attributes": {
        "难度": "高级",
        "内容": "原理：根据输入格式递归解析字符流，构建链接存储结构。伪代码： provided. 适用场景：将广义表的文本表示转换为内存结构。",
        "时间复杂度": "O(n) (n为输入字符数或结点数).",
        "空间复杂度": "O(n) (递归栈/结点数).",
        "设计思想": "递归下降解析",
        "适用场景": "将广义表的文本表示转换为内存结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG015",
      "name": "打印广义表",
      "attributes": {
        "难度": "高级",
        "content": "原理：递归遍历广义表存储结构，按格式输出字符。伪代码： provided. 适用场景：将内存中的广义表结构转换为文本表示。",
        "time_complexity": "O(n) (n为广义表中结点总数).",
        "space_complexity": "O(n) (递归栈深度).",
        "design_pattern": "递归遍历",
        "适用场景": "将内存中的广义表结构转换为文本表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON014",
      "name": "表头指针",
      "attributes": {
        "难度": "入门",
        "内容": "在链接存储结构中，指向第一个结点的指针。对于空表，表头指针通常为NULL。适用场景：访问和操作链接表（如单链表、广义表）的入口。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "ID": "03REL001",
      "source": "03DS001",
      "target": "03CON001"
    },
    {
      "type": "使用",
      "ID": "03REL002",
      "source": "03DS001",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "ID": "03REL003",
      "source": "03DS001",
      "target": "03DS004"
    },
    {
      "type": "继承",
      "ID": "03REL004",
      "source": "03DS003",
      "target": "03DS002"
    },
    {
      "type": "继承",
      "ID": "03REL005",
      "source": "03DS004",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL006",
      "source": "03ALG004",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "ID": "03REL007",
      "source": "03ALG005",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "ID": "03REL008",
      "source": "03ALG006",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "ID": "03REL009",
      "source": "03ALG001",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "ID": "03REL010",
      "source": "03ALG001",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL011",
      "source": "03ALG001",
      "target": "03DS004"
    },
    {
      "type": "操作绑定",
      "ID": "03REL012",
      "source": "03ALG003",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL013",
      "source": "03ALG002",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "ID": "03REL014",
      "source": "03DS005",
      "target": "03DS006"
    },
    {
      "type": "使用",
      "ID": "03REL015",
      "source": "03DS006",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "ID": "03REL016",
      "source": "03DS006",
      "target": "03DS004"
    },
    {
      "type": "操作绑定",
      "ID": "03REL017",
      "source": "03ALG007",
      "target": "03DS005"
    },
    {
      "type": "操作绑定",
      "ID": "03REL018",
      "source": "03ALG008",
      "target": "03DS005"
    },
    {
      "type": "操作绑定",
      "ID": "03REL019",
      "source": "03ALG009",
      "target": "03DS005"
    },
    {
      "type": "操作绑定",
      "ID": "03REL020",
      "source": "03ALG010",
      "target": "03DS005"
    },
    {
      "type": "操作绑定",
      "ID": "03REL021",
      "source": "03ALG011",
      "target": "03DS005"
    },
    {
      "type": "优化",
      "ID": "03REL022",
      "source": "03ALG011",
      "target": "03ALG010"
    },
    {
      "type": "理论依赖",
      "ID": "03REL023",
      "source": "03DS005",
      "target": "03CON004"
    },
    {
      "type": "使用",
      "ID": "03REL024",
      "source": "03DS007",
      "target": "03DS004"
    },
    {
      "type": "理论依赖",
      "ID": "03REL025",
      "source": "03DS007",
      "target": "03CON012"
    },
    {
      "type": "操作绑定",
      "ID": "03REL026",
      "source": "03ALG012",
      "target": "03DS007"
    },
    {
      "type": "操作绑定",
      "ID": "03REL027",
      "source": "03ALG013",
      "target": "03DS007"
    },
    {
      "type": "操作绑定",
      "ID": "03REL028",
      "source": "03ALG014",
      "target": "03DS007"
    },
    {
      "type": "操作绑定",
      "ID": "03REL029",
      "source": "03ALG015",
      "target": "03DS007"
    },
    {
      "type": "理论依赖",
      "ID": "03REL030",
      "source": "03ALG012",
      "target": "03CON013"
    },
    {
      "type": "理论依赖",
      "ID": "03REL031",
      "source": "03ALG013",
      "target": "03CON013"
    },
    {
      "type": "理论依赖",
      "ID": "03REL032",
      "source": "03ALG014",
      "target": "03CON013"
    },
    {
      "type": "理论依赖",
      "ID": "03REL033",
      "source": "03ALG015",
      "target": "03CON013"
    },
    {
      "type": "理论依赖",
      "ID": "03REL034",
      "source": "03CON013",
      "target": "03CON012"
    },
    {
      "type": "理论依赖",
      "ID": "03REL035",
      "source": "03DS006",
      "target": "03CON008"
    },
    {
      "type": "理论依赖",
      "ID": "03REL036",
      "source": "03DS006",
      "target": "03CON009"
    }
  ]
}