{
  "entities": [
    {
      "type": "数据结构",
      "ID": "03DS001",
      "name": "集合",
      "attributes": {
        "难度": "入门",
        "内容": "由具有相同属性的数据元素组合而成的数据结构，数据元素之间没有任何前驱和后继关系。集合中的元素无序且唯一。支持插入、删除、查找、并集、交集、差集等操作。",
        "存储开销": "取决于具体实现（顺序或链接）和元素数量。",
        "核心特性": "无序性、唯一性",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS002",
      "name": "集合的顺序存储",
      "attributes": {
        "难度": "入门",
        "内容": "使用数组存储集合元素，并用一个变量记录当前长度。元素存储顺序任意，插入通常在末尾进行，删除时用末尾元素填补空位，以提高效率。",
        "存储开销": "O(MaxSize)，可能存在空间浪费或需要动态扩展。",
        "核心特性": "基于数组实现，随机访问（虽然对集合意义不大），插入删除（特定策略下）O(1)（不考虑查找）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG001",
      "name": "初始化集合为空（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "为存储集合的数组分配内存空间（静态或动态），并将集合长度置为0。",
        "时间复杂度": "O(1)（静态）或 O(MaxSize)（动态初始化）",
        "空间复杂度": "O(1)",
        "设计思想": "初始化",
        "适用场景": "创建新的顺序存储集合实例。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG002",
      "name": "清除集合（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "若使用动态内存，则释放数组空间并将长度和容量置为0；若为静态数组，则仅将长度置为0。",
        "时间复杂度": "O(1) 或 O(n) （取决于是否需要释放元素）",
        "空间复杂度": "O(1)",
        "设计思想": "资源管理",
        "适用场景": "销毁或重置顺序存储的集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG003",
      "name": "求集合长度（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "返回存储当前集合元素数量的变量值。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "状态获取",
        "适用场景": "获取顺序存储集合的大小。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG004",
      "name": "判断集合是否为空（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "检查集合长度是否为0。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "状态检查",
        "适用场景": "判断顺序存储的集合是否包含元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG005",
      "name": "判断元素是否属于集合（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历数组，查找是否存在指定元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "检查元素在顺序存储集合中的存在性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG006",
      "name": "输出集合元素（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历数组，依次输出每个元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历",
        "适用场景": "展示顺序存储集合的所有内容。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG007",
      "name": "有序输出集合元素（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "将集合元素复制到临时数组，使用排序算法（如简单选择排序）排序后输出。",
        "时间复杂度": "O(n^2) (使用简单选择排序)",
        "空间复杂度": "O(n) (临时数组)",
        "设计思想": "排序、遍历",
        "适用场景": "按特定顺序展示顺序存储集合的内容，同时不改变原集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG008",
      "name": "查找集合元素（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "顺序查找具有特定关键字的元素，找到则返回完整元素信息。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "在顺序存储的集合中根据关键字检索元素的完整信息。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG009",
      "name": "修改集合元素（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "顺序查找具有特定关键字的元素，找到则用新值替换。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找、更新",
        "适用场景": "更新顺序存储集合中某个元素的值。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG010",
      "name": "向集合插入元素（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "首先检查元素是否存在（防止重复），若不存在且空间足够（或动态扩展后），则在数组末尾添加元素并增加长度。",
        "时间复杂度": "O(n) (主要耗时在查重)",
        "空间复杂度": "O(1) (不考虑动态扩展时的复制开销)",
        "设计思想": "顺序查找、插入、空间管理",
        "适用场景": "向顺序存储的集合添加新元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG011",
      "name": "从集合删除元素（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "顺序查找指定元素，找到后用数组最后一个元素覆盖该位置，然后长度减1。可选择在空间利用率低时缩减数组空间。",
        "时间复杂度": "O(n) (主要耗时在查找)",
        "空间复杂度": "O(1) (不考虑动态缩减时的复制开销)",
        "设计思想": "顺序查找、删除（覆盖法）、空间管理",
        "适用场景": "从顺序存储的集合移除指定元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG012",
      "name": "求两集合并集（顺序存储）",
      "attributes": {
        "难度": "中等",
        "内容": "将第一个集合复制到结果集合，然后遍历第二个集合，将不在结果集合中的元素插入结果集合。",
        "时间复杂度": "O(n*m) (n, m分别为两集合大小)",
        "空间复杂度": "O(n+m) (结果集)",
        "设计思想": "复制、遍历、插入（查重）",
        "适用场景": "计算两个顺序存储集合的并集。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG013",
      "name": "求两集合交集（顺序存储）",
      "attributes": {
        "难度": "中等",
        "内容": "遍历一个集合（如S2），对于其中每个元素，检查它是否存在于另一个集合（S1）中，若存在则加入结果集合。",
        "时间复杂度": "O(n*m)",
        "空间复杂度": "O(min(n,m)) 或 O(k) (k为交集大小)",
        "设计思想": "遍历、查找",
        "适用场景": "计算两个顺序存储集合的交集。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG014",
      "name": "求两集合差集（顺序存储）",
      "attributes": {
        "难度": "中等",
        "内容": "遍历第一个集合（S1），对于其中每个元素，检查它是否存在于第二个集合（S2）中，若不存在则加入结果集合。",
        "时间复杂度": "O(n*m)",
        "空间复杂度": "O(n) 或 O(k) (k为差集大小)",
        "设计思想": "遍历、查找",
        "适用场景": "计算两个顺序存储集合的差集 (S1 - S2)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG015",
      "name": "简单选择排序",
      "attributes": {
        "难度": "入门",
        "内容": "每次从未排序部分选取最小（或最大）元素，放到已排序部分的末尾。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1)",
        "设计思想": "选择",
        "适用场景": "数据量小的排序，教学演示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG016",
      "name": "顺序查找",
      "attributes": {
        "难度": "入门",
        "内容": "从列表（如数组）的开头逐个比较元素，直到找到目标元素或遍历完列表。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "线性扫描",
        "适用场景": "无序列表查找，或列表较小的情况。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS003",
      "name": "集合的链接存储",
      "attributes": {
        "难度": "入门",
        "内容": "使用链表（通常是单链表）存储集合元素，每个节点包含元素值和指向下一个节点的指针。元素在链表中的顺序任意。",
        "存储开销": "O(n)，每个元素需要额外存储指针。",
        "核心特性": "基于链表实现，动态大小，插入删除（特定位置，如表头）O(1)（不考虑查找）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS004",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "一种线性数据结构，由一系列节点组成，每个节点包含数据域和指向下一个节点的指针域。",
        "存储开销": "O(n)，每个节点需要额外存储一个指针。",
        "核心特性": "动态大小，非连续存储，插入删除效率高（已知位置），访问元素需遍历。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG017",
      "name": "初始化集合为空（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "将链表的头指针设置为空（NULL）。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "初始化",
        "适用场景": "创建新的链接存储集合实例。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG018",
      "name": "清除集合（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，逐个释放所有节点的内存空间，最后将头指针置为空。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历、资源管理",
        "适用场景": "销毁链接存储的集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG019",
      "name": "求集合长度（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，计数节点数量。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历、计数",
        "适用场景": "获取链接存储集合的大小。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG020",
      "name": "判断集合是否为空（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "检查链表的头指针是否为空。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "状态检查",
        "适用场景": "判断链接存储的集合是否包含元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG021",
      "name": "判断元素是否属于集合（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，查找是否存在包含指定元素的节点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "检查元素在链接存储集合中的存在性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG022",
      "name": "输出集合元素（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，依次输出每个节点的数据域。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历",
        "适用场景": "展示链接存储集合的所有内容。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG023",
      "name": "查找集合元素（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表查找具有特定关键字的节点，找到则返回节点信息。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "在链接存储的集合中根据关键字检索元素的完整信息。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG024",
      "name": "修改集合元素（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表查找具有特定关键字的节点，找到则用新值更新该节点的数据域。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找、更新",
        "适用场景": "更新链接存储集合中某个元素的值。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG025",
      "name": "向集合插入元素（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "首先检查元素是否存在（防止重复），若不存在，则创建新节点，通常插入到链表头部（效率高）。",
        "时间复杂度": "O(n) (主要耗时在查重)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找、插入（头插法）",
        "适用场景": "向链接存储的集合添加新元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG026",
      "name": "从集合删除元素（链接存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表查找指定元素所在的节点及其前驱节点，找到后修改前驱节点的指针以跳过当前节点，并释放当前节点的内存。",
        "时间复杂度": "O(n) (主要耗时在查找)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找、删除（指针修改）",
        "适用场景": "从链接存储的集合移除指定元素。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG027",
      "name": "求两集合并集（链接存储）",
      "attributes": {
        "难度": "中等",
        "内容": "将第一个集合复制到结果集合链表，然后遍历第二个集合链表，将不在结果链表中的元素插入结果链表。",
        "时间复杂度": "O(n*m) (n, m分别为两集合大小)",
        "空间复杂度": "O(n+m) (结果集)",
        "设计思想": "复制、遍历、插入（查重）",
        "适用场景": "计算两个链接存储集合的并集。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG028",
      "name": "求两集合交集（链接存储）",
      "attributes": {
        "难度": "中等",
        "内容": "遍历一个集合链表（如S2），对于其中每个元素，在另一个集合链表（S1）中查找是否存在，若存在则将该元素插入结果链表。",
        "时间复杂度": "O(n*m)",
        "空间复杂度": "O(min(n,m)) 或 O(k) (k为交集大小)",
        "设计思想": "遍历、查找",
        "适用场景": "计算两个链接存储集合的交集。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG029",
      "name": "求两集合差集（链接存储）",
      "attributes": {
        "难度": "中等",
        "内容": "遍历第一个集合链表（S1），对于其中每个元素，在第二个集合链表（S2）中查找是否存在，若不存在则将该元素插入结果链表。",
        "时间复杂度": "O(n*m)",
        "空间复杂度": "O(n) 或 O(k) (k为差集大小)",
        "设计思想": "遍历、查找",
        "适用场景": "计算两个链接存储集合的差集 (S1 - S2)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS005",
      "name": "稀疏矩阵",
      "attributes": {
        "难度": "中等",
        "内容": "矩阵中非零元素的个数远小于零元素个数的矩阵。为了节省存储空间和计算时间，通常只存储非零元素的信息（行号、列号、值）。",
        "存储开销": "取决于非零元素个数t，远小于m*n。",
        "核心特性": "稀疏性，空间优化存储",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON001",
      "name": "矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "一个m行n列的数表，包含m*n个元素，每个元素由其行号和列号唯一确定。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS006",
      "name": "三元组线性表",
      "attributes": {
        "难度": "中等",
        "内容": "用于表示稀疏矩阵的一种线性结构，表中每个元素是一个三元组(i, j, value)，分别表示非零元素的行号、列号和值。通常按行号主序、列号辅序排列。",
        "存储开销": "O(t)，t为非零元素个数。",
        "核心特性": "线性结构，有序性（按行列）",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS007",
      "name": "稀疏矩阵的顺序存储",
      "attributes": {
        "难度": "中等",
        "内容": "使用数组（结构数组）存储稀疏矩阵对应的三元组线性表。通常还需要存储矩阵的行数、列数和非零元素总数。",
        "存储开销": "O(t)，t为非零元素个数。",
        "核心特性": "基于数组，按序存储三元组。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS008",
      "name": "稀疏矩阵的链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "使用链式结构存储稀疏矩阵的三元组。常见的有带行指针向量的链表和十字链表。",
        "存储开销": "O(t)，每个三元组需要额外的指针开销。",
        "核心特性": "基于链表，动态存储。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS009",
      "name": "带行指针向量的链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "一种稀疏矩阵的链接存储方式。使用一个指针数组（行指针向量），每个元素指向对应行的非零元素单链表的头结点。同一行内的节点按列号升序链接。",
        "存储开销": "O(m+t)，m为行数，t为非零元素数。",
        "核心特性": "按行快速访问，行内有序。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS010",
      "name": "十字链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "一种稀疏矩阵的链接存储方式。每个非零元素节点包含行号、列号、值，以及指向同一行下一个节点的指针和指向同一列下一个节点的指针。同时使用行指针向量和列指针向量。",
        "存储开销": "O(m+n+t)，m为行数，n为列数，t为非零元素数。",
        "核心特性": "按行、按列均可快速访问。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG030",
      "name": "初始化稀疏矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "根据不同的存储结构（顺序、行指针向量、十字链表），初始化矩阵的行数、列数、非零元个数为0，并初始化相应的存储结构（如清空数组、将指针向量置空）。",
        "时间复杂度": "O(1) 或 O(m) 或 O(m+n)",
        "空间复杂度": "O(1)",
        "设计思想": "初始化",
        "适用场景": "创建新的稀疏矩阵实例。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG031",
      "name": "输入稀疏矩阵（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "读取矩阵的行数、列数，然后逐个读取非零元素的三元组(行, 列, 值)，按顺序存入三元组数组，直到遇到结束标记（如0,0,0）。最后记录非零元素总数。",
        "时间复杂度": "O(t)，t为非零元素个数。",
        "空间复杂度": "O(1)",
        "设计思想": "数据加载、序列化",
        "适用场景": "从外部源（如键盘）构建顺序存储的稀疏矩阵。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG032",
      "name": "输入稀疏矩阵（十字链表）",
      "attributes": {
        "难度": "中等",
        "内容": "读取矩阵的行数、列数，然后逐个读取非零元素的三元组，为每个三元组创建新的十字链表节点，并将其正确链接到对应行链表和列链表的末尾。最后记录非零元素总数。",
        "时间复杂度": "O(t * (行链表平均长度 + 列链表平均长度))，若优化插入位置则可改善",
        "空间复杂度": "O(t)",
        "设计思想": "数据加载、链表操作",
        "适用场景": "从外部源构建十字链表存储的稀疏矩阵。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG033",
      "name": "输出稀疏矩阵（顺序存储）",
      "attributes": {
        "难度": "入门",
        "内容": "遍历存储三元组的数组，按指定格式（如三元组线性表）输出每个非零元素的行号、列号和值。",
        "时间复杂度": "O(t)，t为非零元素个数。",
        "空间复杂度": "O(1)",
        "设计思想": "遍历、格式化输出",
        "适用场景": "展示顺序存储的稀疏矩阵的内容。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG034",
      "name": "稀疏矩阵转置（普通转置）",
      "attributes": {
        "难度": "中等",
        "内容": "对原矩阵（顺序存储）按列扫描。对每一列col，遍历原三元组列表，找到所有列号为col的元素，将其(行,列,值)转换为(列,行,值)后，按原行号（即新列号）顺序存入结果三元组列表。",
        "时间复杂度": "O(n*t)，n为原矩阵列数，t为非零元素数。",
        "空间复杂度": "O(t) (结果矩阵)",
        "设计思想": "按列扫描、转置",
        "适用场景": "计算稀疏矩阵的转置，实现简单但效率不高。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG035",
      "name": "稀疏矩阵转置（快速转置）",
      "attributes": {
        "难度": "中等",
        "内容": "通过两次遍历实现高效转置。第一次遍历统计原矩阵每一列的非零元素个数，并计算转置后每一行（即原每一列）的起始存储位置。第二次遍历将原三元组按计算好的位置直接放入结果三元组列表。",
        "时间复杂度": "O(n+t)，n为原矩阵列数，t为非零元素数。",
        "空间复杂度": "O(n+t) (结果矩阵和辅助数组)",
        "设计思想": "空间换时间、计数、定位",
        "适用场景": "高效计算稀疏矩阵的转置。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG036",
      "name": "稀疏矩阵加法（带行指针向量）",
      "attributes": {
        "难度": "中等",
        "内容": "逐行处理两个输入矩阵（M1, M2）。对每一行i，同时遍历M1和M2的第i行链表，按列号合并节点：若列号不同，将列号小的节点复制到结果行链表；若列号相同，将元素值相加，若和不为零则创建新节点加入结果行链表。最后处理某一行链表剩余的节点。",
        "时间复杂度": "O(t1+t2)，t1, t2分别为两矩阵非零元素数。",
        "空间复杂度": "O(m + t1 + t2) (结果矩阵和指针向量)",
        "设计思想": "归并、按行处理",
        "适用场景": "计算两个使用带行指针向量存储的稀疏矩阵的和。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS011",
      "name": "广义表",
      "attributes": {
        "难度": "中等",
        "内容": "线性表的推广，是n(n>=0)个元素（单元素或子表）的有限序列。定义是递归的，可以表示复杂的树状或嵌套结构。",
        "存储开销": "取决于具体实现（通常是链接）以及元素和嵌套深度。",
        "核心特性": "递归定义、元素可以是原子或子表、可表示复杂结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON002",
      "name": "单元素",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中的原子性元素，不可再分解，通常是某种确定类型的对象（如数字、字符）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON003",
      "name": "子表",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中的表元素，其本身也是一个广义表。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON004",
      "name": "空表",
      "attributes": {
        "难度": "入门",
        "内容": "不包含任何元素的广义表，长度为0。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON005",
      "name": "广义表的长度",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中最顶层元素的个数。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "03CON006",
      "name": "广义表的深度",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中括号嵌套的最大层数。空表深度为1，仅含单元素的表深度为1。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS012",
      "name": "广义表的链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "采用链式结构存储广义表。节点分为单元素节点和子表节点，通过标志位区分。单元素节点包含值域和后继指针；子表节点包含指向子表头结点的指针和后继指针。",
        "存储开销": "O(N)，N为表中原子和子表的总数，每个节点有额外指针和标志位开销。",
        "核心特性": "递归结构体现、动态存储、可以表示复杂嵌套。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS013",
      "name": "带表头附加结点的广义表链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "在广义表链接存储的基础上，为每个表（包括顶层表和所有子表）增加一个额外的表头节点（通常是tag为true的子表类型节点），其sublist指针指向该表的第一个实际元素节点，next指针通常为空。方便某些操作的统一处理。",
        "存储开销": "O(N+M)，N为原子和子表总数，M为表的数量（包括子表）。",
        "核心特性": "简化某些操作（如空表判断、插入删除），统一表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG037",
      "name": "求广义表长度",
      "attributes": {
        "难度": "中等",
        "内容": "计算广义表顶层元素的个数。对于链接存储，即计算顶层链表的节点数。通常使用递归或迭代遍历顶层节点的next指针实现。",
        "时间复杂度": "O(L)，L为广义表长度。",
        "空间复杂度": "O(L)（递归）或 O(1)（迭代）",
        "设计思想": "遍历（递归或迭代）",
        "适用场景": "获取广义表的顶层元素数量。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG038",
      "name": "求广义表深度",
      "attributes": {
        "难度": "中等",
        "内容": "计算广义表中括号嵌套的最大层数。通常使用递归实现：表的深度等于1加上所有子表深度的最大值；空表或只含单元素的表深度为1。",
        "时间复杂度": "O(N)，N为广义表中节点总数。",
        "空间复杂度": "O(D)，D为广义表深度（递归栈深度）。",
        "设计思想": "递归、深度优先遍历",
        "适用场景": "确定广义表的嵌套层级。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG039",
      "name": "建立广义表存储结构",
      "attributes": {
        "难度": "中等",
        "内容": "根据输入的广义表字符串表示（如'(a,(b,c))'），递归地构建其链接存储结构。遇到'('开始构建子表，遇到字母构建单元素节点，遇到','处理后继节点，遇到')'结束当前层级。",
        "时间复杂度": "O(S)，S为输入字符串长度或节点总数。",
        "空间复杂度": "O(S) （递归栈深度和节点存储）",
        "设计思想": "递归、解析",
        "适用场景": "从字符串表示创建广义表的内存表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG040",
      "name": "打印输出广义表",
      "attributes": {
        "难度": "中等",
        "内容": "将广义表的链接存储结构转换回其字符串表示形式。递归地处理：遇到子表节点先打印'('，递归打印子表，再打印')'；遇到单元素节点打印其值；处理完一个节点后若有后继，打印','并递归处理后继。",
        "时间复杂度": "O(N)，N为广义表中节点总数。",
        "空间复杂度": "O(D)，D为广义表深度（递归栈深度）。",
        "设计思想": "递归、序列化、深度优先遍历",
        "适用场景": "以可读形式展示广义表的内容。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS014",
      "name": "数组",
      "attributes": {
        "难度": "入门",
        "内容": "一种线性数据结构，用连续的内存空间存储相同类型的数据元素集合。可以通过索引快速访问元素。",
        "存储开销": "O(N)，N为数组大小。",
        "核心特性": "连续存储、随机访问（O(1)）、固定大小（静态数组）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    }
  ],
  "relations": [
    {
      "type": "使用",
      "ID": "03REL001",
      "source": "03DS002",
      "target": "03DS001"
    },
    {
      "type": "使用",
      "ID": "03REL002",
      "source": "03DS003",
      "target": "03DS001"
    },
    {
      "type": "使用",
      "ID": "03REL003",
      "source": "03DS002",
      "target": "03DS014"
    },
    {
      "type": "操作绑定",
      "ID": "03REL004",
      "source": "03ALG001",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL005",
      "source": "03ALG002",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL006",
      "source": "03ALG003",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL007",
      "source": "03ALG004",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL008",
      "source": "03ALG005",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL009",
      "source": "03ALG005",
      "target": "03ALG016"
    },
    {
      "type": "操作绑定",
      "ID": "03REL010",
      "source": "03ALG006",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL011",
      "source": "03ALG007",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL012",
      "source": "03ALG007",
      "target": "03ALG015"
    },
    {
      "type": "操作绑定",
      "ID": "03REL013",
      "source": "03ALG008",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL014",
      "source": "03ALG008",
      "target": "03ALG016"
    },
    {
      "type": "操作绑定",
      "ID": "03REL015",
      "source": "03ALG009",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL016",
      "source": "03ALG009",
      "target": "03ALG016"
    },
    {
      "type": "操作绑定",
      "ID": "03REL017",
      "source": "03ALG010",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL018",
      "source": "03ALG010",
      "target": "03ALG016"
    },
    {
      "type": "操作绑定",
      "ID": "03REL019",
      "source": "03ALG011",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL020",
      "source": "03ALG011",
      "target": "03ALG016"
    },
    {
      "type": "操作绑定",
      "ID": "03REL021",
      "source": "03ALG012",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL022",
      "source": "03ALG013",
      "target": "03DS002"
    },
    {
      "type": "操作绑定",
      "ID": "03REL023",
      "source": "03ALG014",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "ID": "03REL024",
      "source": "03DS003",
      "target": "03DS004"
    },
    {
      "type": "操作绑定",
      "ID": "03REL025",
      "source": "03ALG017",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL026",
      "source": "03ALG018",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL027",
      "source": "03ALG019",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL028",
      "source": "03ALG020",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL029",
      "source": "03ALG021",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL030",
      "source": "03ALG022",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL031",
      "source": "03ALG023",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL032",
      "source": "03ALG024",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL033",
      "source": "03ALG025",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL034",
      "source": "03ALG026",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "ID": "03REL035",
      "source": "03ALG027",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "ID": "03REL036",
      "source": "03ALG027",
      "target": "03ALG025"
    },
    {
      "type": "操作绑定",
      "ID": "03REL037",
      "source": "03ALG028",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "ID": "03REL038",
      "source": "03ALG028",
      "target": "03ALG023"
    },
    {
      "type": "使用",
      "ID": "03REL039",
      "source": "03ALG028",
      "target": "03ALG025"
    },
    {
      "type": "操作绑定",
      "ID": "03REL040",
      "source": "03ALG029",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "ID": "03REL041",
      "source": "03ALG029",
      "target": "03ALG023"
    },
    {
      "type": "使用",
      "ID": "03REL042",
      "source": "03ALG029",
      "target": "03ALG025"
    },
    {
      "type": "理论依赖",
      "ID": "03REL043",
      "source": "03DS005",
      "target": "03CON001"
    },
    {
      "type": "使用",
      "ID": "03REL044",
      "source": "03DS005",
      "target": "03DS006"
    },
    {
      "type": "使用",
      "ID": "03REL045",
      "source": "03DS007",
      "target": "03DS006"
    },
    {
      "type": "使用",
      "ID": "03REL046",
      "source": "03DS008",
      "target": "03DS006"
    },
    {
      "type": "变体",
      "ID": "03REL047",
      "source": "03DS009",
      "target": "03DS008"
    },
    {
      "type": "变体",
      "ID": "03REL048",
      "source": "03DS010",
      "target": "03DS008"
    },
    {
      "type": "操作绑定",
      "ID": "03REL049",
      "source": "03ALG030",
      "target": "03DS005"
    },
    {
      "type": "操作绑定",
      "ID": "03REL050",
      "source": "03ALG031",
      "target": "03DS007"
    },
    {
      "type": "操作绑定",
      "ID": "03REL051",
      "source": "03ALG032",
      "target": "03DS010"
    },
    {
      "type": "操作绑定",
      "ID": "03REL052",
      "source": "03ALG033",
      "target": "03DS007"
    },
    {
      "type": "操作绑定",
      "ID": "03REL053",
      "source": "03ALG034",
      "target": "03DS007"
    },
    {
      "type": "操作绑定",
      "ID": "03REL054",
      "source": "03ALG035",
      "target": "03DS007"
    },
    {
      "type": "优化",
      "ID": "03REL055",
      "source": "03ALG035",
      "target": "03ALG034"
    },
    {
      "type": "操作绑定",
      "ID": "03REL056",
      "source": "03ALG036",
      "target": "03DS009"
    },
    {
      "type": "理论依赖",
      "ID": "03REL057",
      "source": "03DS011",
      "target": "03CON002"
    },
    {
      "type": "理论依赖",
      "ID": "03REL058",
      "source": "03DS011",
      "target": "03CON003"
    },
    {
      "type": "理论依赖",
      "ID": "03REL059",
      "source": "03DS011",
      "target": "03CON004"
    },
    {
      "type": "使用",
      "ID": "03REL060",
      "source": "03DS012",
      "target": "03DS011"
    },
    {
      "type": "变体",
      "ID": "03REL061",
      "source": "03DS013",
      "target": "03DS012"
    },
    {
      "type": "操作绑定",
      "ID": "03REL062",
      "source": "03ALG037",
      "target": "03DS012"
    },
    {
      "type": "理论依赖",
      "ID": "03REL063",
      "source": "03ALG037",
      "target": "03CON005"
    },
    {
      "type": "操作绑定",
      "ID": "03REL064",
      "source": "03ALG038",
      "target": "03DS012"
    },
    {
      "type": "理论依赖",
      "ID": "03REL065",
      "source": "03ALG038",
      "target": "03CON006"
    },
    {
      "type": "操作绑定",
      "ID": "03REL066",
      "source": "03ALG039",
      "target": "03DS012"
    },
    {
      "type": "操作绑定",
      "ID": "03REL067",
      "source": "03ALG040",
      "target": "03DS012"
    }
  ]
}