{
  "entities": [
    {
      "type": "数据结构",
      "ID": "03DS001",
      "name": "集合",
      "attributes": {
        "难度": "入门",
        "内容": "由具有相同属性的数据元素组合而成，数据之间没有任何前驱和后继关系。集合中元素不重复，无序。",
        "存储开销": "顺序存储下取决于预分配数组大小，动态调整；链接存储下取决于元素个数。",
        "核心特性": "无序性、唯一性"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS002",
      "name": "稀疏矩阵",
      "attributes": {
        "难度": "中等",
        "内容": "非零元素的个数远远小于零元素的个数的矩阵。通常使用三元组线性表来存储非零元素以节省空间。",
        "存储开销": "主要取决于非零元素的个数，远小于使用二维数组存储整个矩阵的开销。",
        "核心特性": "稀疏性"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS003",
      "name": "广义表",
      "attributes": {
        "难度": "中等",
        "内容": "线性表的推广，是n(n≥0)个元素的一个有限序列，其元素可以是单元素或子表。是一种递归的数据结构。",
        "存储开销": "通常采用动态链接结构，开销取决于元素和子表的总数及嵌套深度。",
        "核心特性": "递归结构、元素可以是原子或子表"
      }
    },
    {
      "type": "概念",
      "ID": "03CON001",
      "name": "空集",
      "attributes": {
        "难度": "入门",
        "内容": "不包含任何元素的集合，其长度为0。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON002",
      "name": "集合的抽象数据类型",
      "attributes": {
        "难度": "入门",
        "内容": "定义了集合的数据（一个集合S）和操作（如初始化、清空、求长度、判空、判断元素归属、插入、删除、并、交、差等）。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG001",
      "name": "初始化集合",
      "attributes": {
        "难度": "入门",
        "内容": "将集合设置为空集。对于动态顺序存储，分配初始空间并将长度置0；对于链式存储，将头指针置NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)（不计结构本身空间）",
        "设计思想": "初始化",
        "适用场景": "创建新的集合对象时。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG002",
      "name": "清除集合",
      "attributes": {
        "难度": "入门",
        "内容": "移除集合中的所有元素。对于动态存储，需要释放分配的空间。",
        "时间复杂度": "O(1)（顺序动态数组释放）或 O(n)（链表逐个释放）",
        "空间复杂度": "O(1)",
        "设计思想": "资源释放",
        "适用场景": "销毁集合对象或重用前清空。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG003",
      "name": "求集合长度",
      "attributes": {
        "难度": "入门",
        "内容": "返回集合中元素的个数。",
        "时间复杂度": "O(1)（顺序存储）或 O(n)（链式存储）",
        "空间复杂度": "O(1)",
        "设计思想": "计数",
        "适用场景": "获取集合大小。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG004",
      "name": "判断集合是否为空",
      "attributes": {
        "难度": "入门",
        "内容": "检查集合长度是否为0。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "状态检查",
        "适用场景": "在进行某些操作（如删除）前检查集合状态。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG005",
      "name": "判断元素是否属于集合",
      "attributes": {
        "难度": "入门",
        "内容": "在集合中查找是否存在指定元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "检查元素成员资格。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG006",
      "name": "输出集合元素",
      "attributes": {
        "难度": "入门",
        "内容": "遍历并打印集合中的所有元素。可以实现无序输出或有序输出（需额外排序）。",
        "时间复杂度": "O(n)（无序）或 O(n^2)（若使用简单选择排序等进行有序输出）",
        "空间复杂度": "O(1)（无序）或 O(n)（有序输出临时数组）",
        "设计思想": "遍历",
        "适用场景": "展示集合内容。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG007",
      "name": "查找集合元素",
      "attributes": {
        "难度": "入门",
        "内容": "在集合中查找指定元素，若找到则返回该元素的完整信息。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "获取集合中特定元素的数据。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG008",
      "name": "修改集合元素",
      "attributes": {
        "难度": "入门",
        "内容": "在集合中查找指定元素（通常通过关键字），若找到则用新值更新该元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找与更新",
        "适用场景": "更新集合中已存在的元素信息。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG009",
      "name": "向集合插入元素",
      "attributes": {
        "难度": "入门",
        "内容": "首先检查元素是否已存在，若不存在则添加到集合中。对于顺序存储，可能需要检查空间并进行扩容。",
        "时间复杂度": "平均O(n)（查找）+ 可能的O(n)（扩容）或 O(1)（链表头插）",
        "空间复杂度": "O(1)（均摊）",
        "设计思想": "查找与添加",
        "适用场景": "向集合中增加新元素。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG010",
      "name": "从集合删除元素",
      "attributes": {
        "难度": "入门",
        "内容": "在集合中查找指定元素，若找到则移除。对于顺序存储，通常用末尾元素填补空位；对于链式存储，修改指针。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找与移除",
        "适用场景": "从集合中移除元素。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG011",
      "name": "求集合并集",
      "attributes": {
        "难度": "入门",
        "内容": "计算两个集合S1和S2的并集，结果存入新集合S。将S1复制到S，然后将S2中不在S中的元素插入S。",
        "时间复杂度": "O(n*m)（基本实现）",
        "空间复杂度": "O(n+m)（结果集）",
        "设计思想": "合并与去重",
        "适用场景": "计算两个集合的所有元素的组合。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG012",
      "name": "求集合交集",
      "attributes": {
        "难度": "入门",
        "内容": "计算两个集合S1和S2的交集，结果存入新集合S。遍历S2，检查每个元素是否在S1中，若在则插入S。",
        "时间复杂度": "O(n*m)",
        "空间复杂度": "O(min(n, m))（结果集）",
        "设计思想": "查找共同元素",
        "适用场景": "找出两个集合共有的元素。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG013",
      "name": "求集合差集",
      "attributes": {
        "难度": "入门",
        "内容": "计算两个集合S1和S2的差集 (S1-S2)，结果存入新集合S。遍历S1，检查每个元素是否在S2中，若不在则插入S。",
        "时间复杂度": "O(n*m)",
        "空间复杂度": "O(n)（结果集）",
        "设计思想": "排除共同元素",
        "适用场景": "找出只存在于第一个集合而不存在于第二个集合的元素。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON003",
      "name": "顺序存储",
      "attributes": {
        "难度": "入门",
        "内容": "将逻辑上相邻的数据元素存储在物理位置也相邻的存储单元中的存储方式，通常使用数组实现。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON004",
      "name": "链接存储",
      "attributes": {
        "难度": "入门",
        "内容": "数据元素的存储单元不一定连续，通过指针将逻辑上相邻的元素链接起来的存储方式。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS004",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "一种链式存储结构，每个结点包含数据域和指向下一个结点的指针域。",
        "存储开销": "每个元素需要额外存储一个指针。",
        "核心特性": "非连续存储、动态性、插入删除效率高（特定位置）"
      }
    },
    {
      "type": "概念",
      "ID": "03CON005",
      "name": "三元组",
      "attributes": {
        "难度": "入门",
        "内容": "由三个数据项组成的有序对，在稀疏矩阵中通常指 (行号, 列号, 元素值)。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS005",
      "name": "三元组线性表",
      "attributes": {
        "难度": "入门",
        "内容": "用一个线性表（顺序或链式）存储稀疏矩阵的非零元素的三元组 (行号, 列号, 值)，通常按行号主序、列号辅序排列。",
        "存储开销": "存储非零元素的个数 * 3 + 存储矩阵维度信息。",
        "核心特性": "紧凑存储稀疏矩阵非零元"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG014",
      "name": "稀疏矩阵转置",
      "attributes": {
        "难度": "中等",
        "内容": "计算稀疏矩阵的转置矩阵，即将原矩阵的(i, j)处的元素放到新矩阵的(j, i)处。有普通转置和快速转置等方法。",
        "时间复杂度": "依赖具体实现（如O(n*t)或O(n+t))",
        "空间复杂度": "O(t)（存储转置结果）",
        "设计思想": "行列互换",
        "适用场景": "需要对稀疏矩阵进行转置操作时。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG015",
      "name": "普通转置",
      "attributes": {
        "难度": "中等",
        "内容": "一种稀疏矩阵转置算法，按列扫描原三元组表，将对应列的元素转换后写入新的三元组表。",
        "时间复杂度": "O(列数 * 非零元素数)",
        "空间复杂度": "O(非零元素数)",
        "设计思想": "按列扫描转换",
        "适用场景": "实现稀疏矩阵转置的基础方法。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG016",
      "name": "快速转置",
      "attributes": {
        "难度": "中等",
        "内容": "一种优化的稀疏矩阵转置算法，通过两次扫描三元组表完成。第一次统计每列非零元个数确定在新表中的起始位置，第二次直接放置元素。",
        "时间复杂度": "O(列数 + 非零元素数)",
        "空间复杂度": "O(列数 + 非零元素数)",
        "设计思想": "空间换时间、预计算位置",
        "适用场景": "高效进行稀疏矩阵转置。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG017",
      "name": "稀疏矩阵加法",
      "attributes": {
        "难度": "中等",
        "内容": "计算两个相同维度的稀疏矩阵的和。通常需要遍历两个矩阵的三元组表（或链表），合并对应位置的元素。",
        "时间复杂度": "O(M1.t + M2.t)（对于链接存储）",
        "空间复杂度": "O(M1.t + M2.t)（最坏情况）",
        "设计思想": "按行（或整体）合并",
        "适用场景": "计算两个稀疏矩阵的和。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON006",
      "name": "行指针向量",
      "attributes": {
        "难度": "中等",
        "内容": "在稀疏矩阵的带行指针向量的链接存储中，用于存储每一行对应单链表的头指针的一维数组。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON007",
      "name": "十字链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "稀疏矩阵的一种链式存储结构，每个非零元素结点同时属于所在行的链表和所在列的链表，需要行、列两个指针向量。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON008",
      "name": "单元素",
      "attributes": {
        "难度": "入门",
        "内容": "在广义表中，指非列表类型的基本数据元素，也称原子。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON009",
      "name": "子表",
      "attributes": {
        "难度": "入门",
        "内容": "在广义表中，指作为另一个广义表元素的表。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON010",
      "name": "深度",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中括号嵌套的最大层数。空表或仅含单元素的表深度为1。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG018",
      "name": "求广义表长度",
      "attributes": {
        "难度": "入门",
        "内容": "计算广义表顶层元素的个数。可通过遍历顶层链表实现，递归或非递归均可。",
        "时间复杂度": "O(n)（n为顶层元素个数）",
        "空间复杂度": "O(1)（非递归）或 O(n)（递归）",
        "设计思想": "遍历计数",
        "适用场景": "获取广义表顶层的元素数量。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG019",
      "name": "求广义表深度",
      "attributes": {
        "难度": "中等",
        "内容": "计算广义表中括号嵌套的最大层数。通常使用递归实现，深度等于所有子表深度的最大值加1。",
        "时间复杂度": "O(N)（N为表中结点总数）",
        "空间复杂度": "O(m)（m为广义表深度，递归栈开销）",
        "设计思想": "递归遍历",
        "适用场景": "分析广义表的嵌套层级。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG020",
      "name": "建立广义表",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的字符串表示（如'(a,(b,c))'）构建广义表的链接存储结构。通常使用递归实现。",
        "时间复杂度": "O(N)（N为输入字符串长度或结点数）",
        "空间复杂度": "O(N)（递归栈开销）",
        "设计思想": "递归构建",
        "适用场景": "从外部表示创建广义表内存结构。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG021",
      "name": "打印广义表",
      "attributes": {
        "难度": "中等",
        "内容": "将广义表的链接存储结构转换回其字符串表示形式并输出。通常使用递归实现。",
        "时间复杂度": "O(N)（N为表中结点总数）",
        "空间复杂度": "O(m)（m为广义表深度，递归栈开销）",
        "设计思想": "递归遍历与格式化输出",
        "适用场景": "展示广义表内容。"
      }
    }
  ],
  "relations": [
    {
      "type": "操作绑定",
      "source": "03ALG001",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG002",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG003",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG004",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG005",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG006",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG007",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG008",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG009",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG010",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG011",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG012",
      "target": "03DS001"
    },
    {
      "type": "操作绑定",
      "source": "03ALG013",
      "target": "03DS001"
    },
    {
      "type": "理论依赖",
      "source": "03DS001",
      "target": "03CON001"
    },
    {
      "type": "理论依赖",
      "source": "03DS001",
      "target": "03CON002"
    },
    {
      "type": "使用",
      "source": "03DS001",
      "target": "03CON003"
    },
    {
      "type": "使用",
      "source": "03DS001",
      "target": "03CON004"
    },
    {
      "type": "使用",
      "source": "03DS001",
      "target": "03DS004"
    },
    {
      "type": "使用",
      "source": "03DS002",
      "target": "03DS005"
    },
    {
      "type": "理论依赖",
      "source": "03DS005",
      "target": "03CON005"
    },
    {
      "type": "使用",
      "source": "03DS005",
      "target": "03CON003"
    },
    {
      "type": "使用",
      "source": "03DS005",
      "target": "03CON004"
    },
    {
      "type": "操作绑定",
      "source": "03ALG014",
      "target": "03DS002"
    },
    {
      "type": "变体",
      "source": "03ALG015",
      "target": "03ALG014"
    },
    {
      "type": "变体",
      "source": "03ALG016",
      "target": "03ALG014"
    },
    {
      "type": "优化",
      "source": "03ALG016",
      "target": "03ALG015"
    },
    {
      "type": "操作绑定",
      "source": "03ALG017",
      "target": "03DS002"
    },
    {
      "type": "使用",
      "source": "03DS002",
      "target": "03CON006"
    },
    {
      "type": "使用",
      "source": "03DS002",
      "target": "03CON007"
    },
    {
      "type": "使用",
      "source": "03DS002",
      "target": "03DS004"
    },
    {
      "type": "理论依赖",
      "source": "03DS003",
      "target": "03CON008"
    },
    {
      "type": "理论依赖",
      "source": "03DS003",
      "target": "03CON009"
    },
    {
      "type": "理论依赖",
      "source": "03DS003",
      "target": "03CON010"
    },
    {
      "type": "操作绑定",
      "source": "03ALG018",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "source": "03ALG019",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "source": "03ALG020",
      "target": "03DS003"
    },
    {
      "type": "操作绑定",
      "source": "03ALG021",
      "target": "03DS003"
    },
    {
      "type": "使用",
      "source": "03DS003",
      "target": "03CON004"
    },
    {
      "type": "使用",
      "source": "03DS003",
      "target": "03DS004"
    }
  ]
}