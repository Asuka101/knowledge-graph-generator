{
  "entities": [
    {
      "type": "概念",
      "ID": "08CON001",
      "name": "连通图",
      "attributes": {
        "难度": "入门",
        "内容": "图中任意两个顶点之间都存在路径的图。生成树和最小生成树是定义在连通图或连通网上的。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON002",
      "name": "子图",
      "attributes": {
        "难度": "入门",
        "内容": "一个图G'是另一个图G的子图，如果G'的顶点集是G的顶点集的子集，且G'的边集是G的边集的子集。生成树是原图的一个特定子图。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS001",
      "name": "生成树",
      "attributes": {
        "难度": "中等",
        "内容": "连通图G的一个子图G'，包含G的所有顶点，且边集是G的边集的子集，使得G'是连通的且无回路。具有n个顶点的生成树恰好有n-1条边，是极小连通子图。",
        "存储开销": "O(V) （边列表）",
        "核心特性": "连通性、无回路、包含所有顶点"
      }
    },
    {
      "type": "概念",
      "ID": "08CON003",
      "name": "回路",
      "attributes": {
        "难度": "入门",
        "内容": "图中一条起点和终点相同的路径。生成树不能包含回路。在AOV网中，回路会导致活动无法进行（死锁）。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG001",
      "name": "深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "一种图遍历算法，尽可能深地搜索图的分支。可用于生成深度优先生成树。",
        "时间复杂度": "O(V+E)（邻接表）或 O(V^2)（邻接矩阵）",
        "空间复杂度": "O(V)（递归栈或显式栈）",
        "设计思想": "递归、栈",
        "适用场景": "遍历图、查找路径、生成树、拓扑排序等"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS002",
      "name": "深度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过深度优先搜索遍历连通图生成的生成树。",
        "存储开销": "O(V)",
        "核心特性": "反映DFS遍历顺序"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG002",
      "name": "广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "一种图遍历算法，从起始点开始，逐层向外扩展搜索。可用于生成广度优先生成树。",
        "时间复杂度": "O(V+E)（邻接表）或 O(V^2)（邻接矩阵）",
        "空间复杂度": "O(V)（队列）",
        "设计思想": "队列、层次遍历",
        "适用场景": "遍历图、查找最短路径（无权图）、生成树等"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS003",
      "name": "广度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过广度优先搜索遍历连通图生成的生成树。",
        "存储开销": "O(V)",
        "核心特性": "反映BFS遍历顺序，通常较矮"
      }
    },
    {
      "type": "概念",
      "ID": "08CON004",
      "name": "极小连通子图",
      "attributes": {
        "难度": "入门",
        "内容": "连通图的包含所有顶点的连通子图，其边数最少。生成树是极小连通子图。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS004",
      "name": "连通网",
      "attributes": {
        "难度": "入门",
        "内容": "带权的连通图，即边上具有权值的连通图。最小生成树是针对连通网定义的。",
        "存储开销": "O(V^2)（邻接矩阵）或 O(V+E)（邻接表）",
        "核心特性": "连通性、带权边"
      }
    },
    {
      "type": "概念",
      "ID": "08CON005",
      "name": "权",
      "attributes": {
        "难度": "入门",
        "内容": "赋给图的边或顶点的值，通常表示成本、距离、容量或持续时间等。带权图和AOE网中使用。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS005",
      "name": "最小生成树",
      "attributes": {
        "难度": "中等",
        "内容": "在连通网中，连接所有顶点且权值总和最小的生成树。用于解决网络建设成本最低等问题。",
        "存储开销": "O(V) （边列表）",
        "核心特性": "连通性、无回路、权值和最小"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG003",
      "name": "普里姆算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解最小生成树的贪心算法。从一个顶点开始，逐步扩展生成树，每次选择连接已选顶点集和未选顶点集之间权值最小的边。",
        "时间复杂度": "O(n^2)（邻接矩阵实现）",
        "空间复杂度": "O(n)（辅助数组）",
        "设计思想": "贪心算法",
        "适用场景": "求解稠密图的最小生成树"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG004",
      "name": "克鲁斯卡尔算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解最小生成树的贪心算法。将所有边按权值排序，依次选择权值最小的边，若该边连接的两个顶点不在同一连通分量（即不形成回路），则加入生成树。",
        "时间复杂度": "O(E log E) 或 O(E log V)（主要取决于排序和并查集操作），文中提及 O(n^2)",
        "空间复杂度": "O(E) 或 O(V)（取决于边存储和并查集实现），文中提及 O(n^2)",
        "设计思想": "贪心算法、并查集",
        "适用场景": "求解稀疏图的最小生成树"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS006",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "表示图的一种存储方式。使用二维数组存储顶点间的邻接关系和边的权值。",
        "存储开销": "O(V^2)",
        "核心特性": "快速判断边是否存在，空间开销大，不适合稀疏图"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS007",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "存储图所有边信息（起点、终点、权值）的数组结构。常用于克鲁斯卡尔算法。",
        "存储开销": "O(E)",
        "核心特性": "直接表示边，便于按权值排序"
      }
    },
    {
      "type": "概念",
      "ID": "08CON006",
      "name": "连通分量",
      "attributes": {
        "难度": "入门",
        "内容": "无向图的极大连通子图。克鲁斯卡尔算法利用此概念判断是否形成回路。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON007",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "图中从一个顶点到另一个顶点的顶点序列（或边序列）。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON008",
      "name": "路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "路径上所经过的边的数目（无权图）或边的权值之和（带权图）。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON009",
      "name": "最短路径",
      "attributes": {
        "难度": "入门",
        "内容": "图中两个顶点之间路径长度最短的路径。对于带权图，指带权路径长度最小的路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON010",
      "name": "最短距离",
      "attributes": {
        "难度": "入门",
        "内容": "图中两个顶点之间最短路径的路径长度（或带权路径长度）。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS008",
      "name": "带权图",
      "attributes": {
        "难度": "入门",
        "内容": "边上带有权值的图。最短路径和最小生成树问题通常在带权图上讨论。",
        "存储开销": "O(V^2)（邻接矩阵）或 O(V+E)（邻接表）",
        "核心特性": "边具有权值"
      }
    },
    {
      "type": "概念",
      "ID": "08CON011",
      "name": "带权路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "带权图中一条路径上所有边的权值之和。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS009",
      "name": "有向图",
      "attributes": {
        "难度": "入门",
        "内容": "边具有方向的图。适用于表示流向、依赖关系等。",
        "存储开销": "O(V^2)（邻接矩阵）或 O(V+E)（邻接表）",
        "核心特性": "边有方向性"
      }
    },
    {
      "type": "概念",
      "ID": "08CON012",
      "name": "源点",
      "attributes": {
        "难度": "入门",
        "内容": "在路径问题或网络流问题中定义的起始顶点。如单源最短路径的起点，AOE网的工程起点。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON013",
      "name": "终点",
      "attributes": {
        "难度": "入门",
        "内容": "在路径问题中定义的目标顶点。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG005",
      "name": "狄克斯特拉算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解带权图中单源最短路径的贪心算法。按路径长度递增的顺序，依次确定源点到各顶点的最短路径。不能处理负权边。",
        "时间复杂度": "O(n^2)（邻接矩阵实现）",
        "空间复杂度": "O(n)（辅助数组）",
        "设计思想": "贪心算法、广度优先思想的扩展",
        "适用场景": "求解无负权边的单源最短路径问题"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG006",
      "name": "弗洛伊德算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解图中每对顶点之间最短路径的动态规划算法。通过考虑中间顶点，逐步更新任意两点间的最短距离。可以处理负权边（但不能处理负权回路）。",
        "时间复杂度": "O(n^3)",
        "空间复杂度": "O(n^2)（距离矩阵）",
        "设计思想": "动态规划",
        "适用场景": "求解所有顶点对之间的最短路径，允许负权边（无负权回路）"
      }
    },
    {
      "type": "概念",
      "ID": "08CON014",
      "name": "活动",
      "attributes": {
        "难度": "入门",
        "内容": "表示工程中的一个子工程或任务。在AOV网中用顶点表示，在AOE网中用边表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON015",
      "name": "前驱活动",
      "attributes": {
        "难度": "入门",
        "内容": "在工程计划中，必须在某个活动开始之前完成的活动。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS010",
      "name": "顶点活动网",
      "attributes": {
        "难度": "中等",
        "内容": "用顶点表示活动，用有向边表示活动之间的先后（前驱）关系的图。用于表示工程活动依赖关系，必须是无环图。",
        "存储开销": "O(V+E)（邻接表）",
        "核心特性": "顶点表示活动、边表示优先关系、有向无环"
      }
    },
    {
      "type": "概念",
      "ID": "08CON016",
      "name": "后续活动",
      "attributes": {
        "难度": "入门",
        "内容": "在工程计划中，必须在某个活动完成之后才能开始的活动。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS011",
      "name": "有向无环图",
      "attributes": {
        "难度": "入门",
        "内容": "不包含有向回路的有向图。AOV网和AOE网通常是DAG。",
        "存储开销": "O(V^2)（邻接矩阵）或 O(V+E)（邻接表）",
        "核心特性": "有向性、无回路"
      }
    },
    {
      "type": "概念",
      "ID": "08CON017",
      "name": "死锁",
      "attributes": {
        "难度": "入门",
        "内容": "在AOV网中，由于存在回路（循环依赖）导致所有相关活动都无法开始的状态。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON018",
      "name": "拓扑序列",
      "attributes": {
        "难度": "入门",
        "内容": "有向无环图（AOV网）中所有顶点的一个线性排序，使得对于图中任意一条有向边(u, v)，u在该序列中都出现在v之前。拓扑序列可能不唯一。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG007",
      "name": "拓扑排序",
      "attributes": {
        "难度": "中等",
        "内容": "生成有向无环图（AOV网）的拓扑序列的过程。常用方法是重复选择并输出入度为0的顶点，然后删除该顶点及其出边。",
        "时间复杂度": "O(n+e)（邻接表实现）",
        "空间复杂度": "O(n)（入度数组和栈/队列）",
        "设计思想": "基于入度的迭代移除、基于DFS",
        "适用场景": "任务调度、依赖解析、判断图是否有环"
      }
    },
    {
      "type": "概念",
      "ID": "08CON019",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，指向某个顶点的边的数量。拓扑排序算法依赖于入度计算。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON020",
      "name": "出边",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，从某个顶点出发的边。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS012",
      "name": "邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "表示图的一种存储方式。为每个顶点维护一个链表，存储所有与该顶点邻接的顶点（及其边信息）。",
        "存储开销": "O(V+E)",
        "核心特性": "空间高效（尤其稀疏图），遍历邻接点方便"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS013",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "一种后进先出（LIFO）的线性数据结构。常用于DFS和拓扑排序算法中存储待处理顶点或入度为0的顶点。",
        "存储开销": "O(n)",
        "核心特性": "后进先出（LIFO）"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS014",
      "name": "边活动网",
      "attributes": {
        "难度": "中等",
        "内容": "用带权有向边表示活动及其持续时间，用顶点表示事件（活动的开始或结束）的网络图。用于工程计划和关键路径分析。",
        "存储开销": "O(V+E)（邻接表）",
        "核心特性": "边表示活动、顶点表示事件、带权、有向无环"
      }
    },
    {
      "type": "概念",
      "ID": "08CON021",
      "name": "事件",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，表示某些活动完成和另一些活动开始的转接点，通常用顶点表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON022",
      "name": "持续时间",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，表示完成一个活动所需的时间，通常作为边的权值。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON023",
      "name": "汇点",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中表示整个工程结束的事件顶点，只有入边没有出边。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON024",
      "name": "入边",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，指向某个顶点的边。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON025",
      "name": "最早发生时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，一个事件（顶点）可能发生的最早时间点。等于从源点到该事件顶点的最长路径长度。用ve表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON026",
      "name": "最早开始时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，一个活动（边）可能开始的最早时间点。等于该活动起点事件的最早发生时间。用e表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON027",
      "name": "最长路径",
      "attributes": {
        "难度": "中等",
        "内容": "在带权图中，两个顶点之间带权路径长度最大的路径。在AOE网中用于计算事件最早发生时间。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON028",
      "name": "拓扑有序",
      "attributes": {
        "难度": "入门",
        "内容": "按照拓扑序列的顺序。计算AOE网事件最早发生时间需要按拓扑有序进行。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON029",
      "name": "最迟发生时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，一个事件（顶点）在不延误整个工程完成的前提下，必须发生的最晚时间点。用vl表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON030",
      "name": "最迟开始时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，一个活动（边）在不延误整个工程完成的前提下，必须开始的最晚时间点。等于该活动终点事件的最迟发生时间减去活动持续时间。用l表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON031",
      "name": "逆拓扑有序",
      "attributes": {
        "难度": "入门",
        "内容": "按照拓扑序列的逆序。计算AOE网事件最迟发生时间需要按逆拓扑有序进行。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON032",
      "name": "开始时间余量",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，活动的最迟开始时间与最早开始时间之差（l[i] - e[i]）。表示该活动可以推迟开始而不影响总工期的时间。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON033",
      "name": "关键活动",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，开始时间余量为0的活动。这些活动是影响工程总工期的关键环节。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON034",
      "name": "关键路径",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，从源点到汇点的、完全由关键活动组成的路径。关键路径的长度等于整个工程的最短完成时间。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG008",
      "name": "关键路径算法",
      "attributes": {
        "难度": "中等",
        "内容": "计算AOE网中关键路径的过程。包括计算所有事件的最早和最迟发生时间，进而计算活动的开始时间余量，找出关键活动和关键路径。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n) 或 O(n+e)",
        "设计思想": "拓扑排序、动态规划思想",
        "适用场景": "工程项目管理、进度优化"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS015",
      "name": "队列",
      "attributes": {
        "难度": "入门",
        "内容": "一种先进先出（FIFO）的线性数据结构。常用于广度优先搜索（BFS）。",
        "存储开销": "O(n)",
        "核心特性": "先进先出（FIFO）"
      }
    }
  ],
  "relations": [
    {
      "type": "继承",
      "source": "08DS002",
      "target": "08DS001"
    },
    {
      "type": "继承",
      "source": "08DS003",
      "target": "08DS001"
    },
    {
      "type": "继承",
      "source": "08DS005",
      "target": "08DS001"
    },
    {
      "type": "操作绑定",
      "source": "08ALG001",
      "target": "08DS009"
    },
    {
      "type": "操作绑定",
      "source": "08ALG002",
      "target": "08DS009"
    },
    {
      "type": "使用",
      "source": "08ALG001",
      "target": "08DS013"
    },
    {
      "type": "使用",
      "source": "08ALG002",
      "target": "08DS015"
    },
    {
      "type": "操作绑定",
      "source": "08ALG003",
      "target": "08DS005"
    },
    {
      "type": "操作绑定",
      "source": "08ALG004",
      "target": "08DS005"
    },
    {
      "type": "使用",
      "source": "08ALG003",
      "target": "08DS006"
    },
    {
      "type": "使用",
      "source": "08ALG004",
      "target": "08DS007"
    },
    {
      "type": "理论依赖",
      "source": "08ALG004",
      "target": "08CON006"
    },
    {
      "type": "理论依赖",
      "source": "08DS001",
      "target": "08CON001"
    },
    {
      "type": "理论依赖",
      "source": "08DS001",
      "target": "08CON003"
    },
    {
      "type": "理论依赖",
      "source": "08DS001",
      "target": "08CON002"
    },
    {
      "type": "理论依赖",
      "source": "08DS001",
      "target": "08CON004"
    },
    {
      "type": "继承",
      "source": "08DS005",
      "target": "08DS004"
    },
    {
      "type": "理论依赖",
      "source": "08DS005",
      "target": "08CON005"
    },
    {
      "type": "操作绑定",
      "source": "08ALG005",
      "target": "08CON009"
    },
    {
      "type": "使用",
      "source": "08ALG005",
      "target": "08DS006"
    },
    {
      "type": "理论依赖",
      "source": "08ALG005",
      "target": "08CON012"
    },
    {
      "type": "操作绑定",
      "source": "08ALG006",
      "target": "08CON009"
    },
    {
      "type": "使用",
      "source": "08ALG006",
      "target": "08DS006"
    },
    {
      "type": "操作绑定",
      "source": "08ALG007",
      "target": "08DS011"
    },
    {
      "type": "使用",
      "source": "08ALG007",
      "target": "08DS012"
    },
    {
      "type": "使用",
      "source": "08ALG007",
      "target": "08DS013"
    },
    {
      "type": "理论依赖",
      "source": "08ALG007",
      "target": "08CON019"
    },
    {
      "type": "理论依赖",
      "source": "08ALG007",
      "target": "08CON018"
    },
    {
      "type": "继承",
      "source": "08DS010",
      "target": "08DS011"
    },
    {
      "type": "理论依赖",
      "source": "08DS010",
      "target": "08CON014"
    },
    {
      "type": "理论依赖",
      "source": "08DS010",
      "target": "08CON015"
    },
    {
      "type": "理论依赖",
      "source": "08CON017",
      "target": "08CON003"
    },
    {
      "type": "继承",
      "source": "08DS014",
      "target": "08DS011"
    },
    {
      "type": "理论依赖",
      "source": "08DS014",
      "target": "08CON014"
    },
    {
      "type": "理论依赖",
      "source": "08DS014",
      "target": "08CON021"
    },
    {
      "type": "理论依赖",
      "source": "08DS014",
      "target": "08CON005"
    },
    {
      "type": "理论依赖",
      "source": "08DS014",
      "target": "08CON022"
    },
    {
      "type": "操作绑定",
      "source": "08ALG008",
      "target": "08DS014"
    },
    {
      "type": "操作绑定",
      "source": "08ALG008",
      "target": "08CON034"
    },
    {
      "type": "使用",
      "source": "08ALG008",
      "target": "08ALG007"
    },
    {
      "type": "理论依赖",
      "source": "08ALG008",
      "target": "08CON025"
    },
    {
      "type": "理论依赖",
      "source": "08ALG008",
      "target": "08CON029"
    },
    {
      "type": "理论依赖",
      "source": "08ALG008",
      "target": "08CON032"
    },
    {
      "type": "理论依赖",
      "source": "08CON034",
      "target": "08CON033"
    },
    {
      "type": "理论依赖",
      "source": "08CON033",
      "target": "08CON032"
    },
    {
      "type": "理论依赖",
      "source": "08CON025",
      "target": "08CON027"
    },
    {
      "type": "理论依赖",
      "source": "08CON025",
      "target": "08CON028"
    },
    {
      "type": "理论依赖",
      "source": "08CON029",
      "target": "08CON031"
    },
    {
      "type": "继承",
      "source": "08DS004",
      "target": "08DS008"
    },
    {
      "type": "理论依赖",
      "source": "08DS004",
      "target": "08CON001"
    },
    {
      "type": "理论依赖",
      "source": "08DS008",
      "target": "08CON005"
    },
    {
      "type": "理论依赖",
      "source": "08CON009",
      "target": "08CON007"
    },
    {
      "type": "理论依赖",
      "source": "08CON009",
      "target": "08CON008"
    },
    {
      "type": "理论依赖",
      "source": "08CON010",
      "target": "08CON009"
    }
  ]
}