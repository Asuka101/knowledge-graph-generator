{
  "entities": [
    {
      "type": "数据结构",
      "ID": "07DS001",
      "name": "图",
      "attributes": {
        "难度": "中等",
        "内容": "一种复杂的非线性数据结构，由顶点集(V)和边集(E)组成。V是顶点集合，E是V上顶点对（无序或有序）的集合，表示顶点之间的关系。",
        "存储开销": "依赖于存储结构，如邻接矩阵为O(n^2)，邻接表为O(n+e)",
        "核心特性": "非线性结构，顶点间关系复杂（多对多）"
      }
    },
    {
      "type": "概念",
      "ID": "07CON001",
      "name": "顶点",
      "attributes": {
        "难度": "入门",
        "内容": "图的基本组成单元，通常代表现实世界中的实体或对象。用V表示顶点集合。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON002",
      "name": "边",
      "attributes": {
        "难度": "入门",
        "内容": "连接图中两个顶点的线，表示顶点之间的关系。可以是无向边或有向边。用E表示边集合。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON003",
      "name": "有向边",
      "attributes": {
        "难度": "入门",
        "内容": "具有方向性的边，从一个顶点（起点）指向另一个顶点（终点）。在有向图中表示为序偶 <vi, vj>。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON004",
      "name": "无向边",
      "attributes": {
        "难度": "入门",
        "内容": "没有方向性的边，连接两个顶点，关系是双向的。在无向图中表示为无序对 (vi, vj)。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS002",
      "name": "有向图",
      "attributes": {
        "难度": "中等",
        "内容": "边集E(G)中均为有向边的图。",
        "存储开销": "依赖于存储结构，如邻接矩阵为O(n^2)，邻接表为O(n+e)",
        "核心特性": "边具有方向性"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS003",
      "name": "无向图",
      "attributes": {
        "难度": "中等",
        "内容": "边集E(G)中均为无向边的图。",
        "存储开销": "依赖于存储结构，如邻接矩阵为O(n^2)，邻接表为O(n+2e)",
        "核心特性": "边没有方向性"
      }
    },
    {
      "type": "概念",
      "ID": "07CON005",
      "name": "邻接点",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，若存在边(vi, vj)，则vi和vj互为邻接点。在有向图中，若存在边<vi, vj>，则称vj是vi的出边邻接点，vi是vj的入边邻接点。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON006",
      "name": "出边",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，从顶点vi出发的有向边<vi, vj>称为vi的一条出边。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON007",
      "name": "入边",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，指向顶点vj的有向边<vi, vj>称为vj的一条入边。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON008",
      "name": "度",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中顶点v的度为以该顶点为一个端点的边的数目。有向图中顶点v的度等于其入度和出度之和。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON009",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中顶点v的入度是该顶点的入边的数目，记为ID(v)。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON010",
      "name": "出度",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中顶点v的出度是该顶点的出边的数目，记为OD(v)。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON011",
      "name": "完全图",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中每对顶点之间都存在边，或有向图中每对顶点之间都存在方向相反的两条边。n个顶点的无向完全图有n(n-1)/2条边，有向完全图有n(n-1)条边。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON012",
      "name": "稠密图",
      "attributes": {
        "难度": "入门",
        "内容": "边数接近完全图的图，即边数e接近n(n-1)数量级。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON013",
      "name": "稀疏图",
      "attributes": {
        "难度": "入门",
        "内容": "边数远少于完全图的图，通常边数e与顶点数n同数量级（e << n(n-1)）。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON014",
      "name": "子图",
      "attributes": {
        "难度": "入门",
        "内容": "设有两个图G=(V,E)和G'=(V',E')，若V'是V的子集，E'是E的子集，并且E'中所涉及到的顶点全部包含在V'中，则称G'是G的子图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON015",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "图中从一个顶点到另一个顶点的顶点序列，序列中相邻顶点间必须有边相连。路径长度是路径上边的数目。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON016",
      "name": "回路",
      "attributes": {
        "难度": "入门",
        "内容": "起点和终点相同的路径，也称为环。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON017",
      "name": "简单路径",
      "attributes": {
        "难度": "入门",
        "内容": "路径序列中顶点不重复出现的路径。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON018",
      "name": "简单回路",
      "attributes": {
        "难度": "入门",
        "内容": "除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，也称为简单环。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON019",
      "name": "连通",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，若从顶点vi到顶点vj有路径存在，则称vi和vj是连通的。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON020",
      "name": "连通图",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，如果任意两个顶点之间都存在路径，则称此无向图为连通图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON021",
      "name": "非连通图",
      "attributes": {
        "难度": "入门",
        "内容": "存在顶点之间不连通的无向图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON022",
      "name": "连通分量",
      "attributes": {
        "难度": "中等",
        "内容": "无向图G的极大连通子图称为G的连通分量。连通图只有一个连通分量，非连通图有多个连通分量。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON023",
      "name": "强连通图",
      "attributes": {
        "难度": "中等",
        "内容": "在有向图中，如果对于任意两个顶点vi和vj，都存在从vi到vj和从vj到vi的路径，则称此有向图为强连通图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON024",
      "name": "强连通分量",
      "attributes": {
        "难度": "中等",
        "内容": "有向图G的极大强连通子图称为G的强连通分量。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON025",
      "name": "权",
      "attributes": {
        "难度": "入门",
        "内容": "图中每条边可以标上的具有某种含义的数值，通常为非负实数，称为该边的权(weight)。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS004",
      "name": "带权图",
      "attributes": {
        "难度": "中等",
        "内容": "边上带有权的图，也常称做网(network)。",
        "存储开销": "同图，但边信息需额外存储权值",
        "核心特性": "边具有权重信息"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG001",
      "name": "初始化图",
      "attributes": {
        "难度": "入门",
        "内容": "初始化图的存储空间，例如将邻接矩阵置零或无穷大，或将邻接表头指针置空。",
        "时间复杂度": "O(n^2)或O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "初始化",
        "适用场景": "创建图之前准备存储结构"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG002",
      "name": "创建图",
      "attributes": {
        "难度": "入门",
        "内容": "根据输入的顶点和边集信息，构建图的具体存储表示（如邻接矩阵、邻接表）。",
        "时间复杂度": "取决于输入方式和存储结构，通常与边数e相关",
        "空间复杂度": "O(1)（操作本身）",
        "设计思想": "构建",
        "适用场景": "从数据源生成图的内存表示"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG003",
      "name": "遍历图",
      "attributes": {
        "难度": "中等",
        "内容": "按照特定规则（如深度优先或广度优先）访问图中所有可达顶点一次且仅一次。",
        "时间复杂度": "O(n+e) (邻接表) / O(n^2) (邻接矩阵)",
        "空间复杂度": "O(n) (辅助空间)",
        "设计思想": "搜索",
        "适用场景": "系统性地访问图的每个部分，是许多图算法的基础"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS005",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "使用n阶方阵存储n个顶点之间的邻接关系。A[i][j]的值表示顶点vi到vj是否存在边（或边的权值）。",
        "存储开销": "O(n^2)",
        "核心特性": "判断边存在O(1)，求顶点度/邻接点O(n)，适合稠密图"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS006",
      "name": "邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "为图中每个顶点维护一个单链表，存储所有与该顶点邻接的边（或顶点）。使用数组存储每个链表的头指针。",
        "存储开销": "O(n+e)",
        "核心特性": "节省空间（稀疏图），查找顶点所有邻接点高效，不方便查找入边（对有向图）"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS007",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "使用一个数组存储图中所有的边，每个数组元素包含一条边的起点、终点和权值（可选）。",
        "存储开销": "O(e)",
        "核心特性": "直观表示边，适合需要直接操作边的算法（如Kruskal），查找特定边或顶点邻接点效率低O(e)"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS008",
      "name": "逆邻接表",
      "attributes": {
        "难度": "中等",
        "内容": "邻接表的变体，用于有向图。每个顶点的链表存储所有指向该顶点的入边信息（即存储入边邻接点）。",
        "存储开销": "O(n+e)",
        "核心特性": "方便查找顶点的入边和计算入度"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS009",
      "name": "十字邻接表",
      "attributes": {
        "难度": "中等",
        "内容": "用于有向图的存储结构。每个顶点和每条边都有结点。边结点包含起点、终点、权值以及指向同起点下一条出边和同终点下一条入边的指针。",
        "存储开销": "O(n+e)",
        "核心特性": "同时方便查找顶点的出边和入边信息，以及计算出度和入度"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG004",
      "name": "深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "图遍历算法。从起始顶点出发，沿一条路径尽可能深地访问，直到末端再回溯，访问其他分支。通常使用递归或栈实现。",
        "时间复杂度": "O(n+e) (邻接表) / O(n^2) (邻接矩阵)",
        "空间复杂度": "O(n) (递归栈或辅助栈)",
        "设计思想": "递归/回溯/栈",
        "适用场景": "查找路径、检测环、拓扑排序、连通性判断"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG005",
      "name": "广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "图遍历算法。从起始顶点出发，逐层访问其邻接点。首先访问距离起点为1的所有顶点，然后是距离为2的，以此类推。通常使用队列实现。",
        "时间复杂度": "O(n+e) (邻接表) / O(n^2) (邻接矩阵)",
        "空间复杂度": "O(n) (队列)",
        "设计思想": "队列/层次遍历",
        "适用场景": "查找无权图最短路径、连通性判断"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "source": "07DS001",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "source": "07DS001",
      "target": "07CON002"
    },
    {
      "type": "继承",
      "source": "07CON003",
      "target": "07CON002"
    },
    {
      "type": "继承",
      "source": "07CON004",
      "target": "07CON002"
    },
    {
      "type": "继承",
      "source": "07DS002",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07DS002",
      "target": "07CON003"
    },
    {
      "type": "继承",
      "source": "07DS003",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07DS003",
      "target": "07CON004"
    },
    {
      "type": "理论依赖",
      "source": "07CON005",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "source": "07CON005",
      "target": "07CON002"
    },
    {
      "type": "理论依赖",
      "source": "07CON006",
      "target": "07CON003"
    },
    {
      "type": "理论依赖",
      "source": "07CON007",
      "target": "07CON003"
    },
    {
      "type": "理论依赖",
      "source": "07CON008",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "source": "07CON008",
      "target": "07CON002"
    },
    {
      "type": "理论依赖",
      "source": "07CON009",
      "target": "07CON008"
    },
    {
      "type": "理论依赖",
      "source": "07CON009",
      "target": "07CON007"
    },
    {
      "type": "理论依赖",
      "source": "07CON010",
      "target": "07CON008"
    },
    {
      "type": "理论依赖",
      "source": "07CON010",
      "target": "07CON006"
    },
    {
      "type": "理论依赖",
      "source": "07CON011",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07CON012",
      "target": "07CON011"
    },
    {
      "type": "理论依赖",
      "source": "07CON013",
      "target": "07CON011"
    },
    {
      "type": "理论依赖",
      "source": "07CON014",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07CON015",
      "target": "07DS001"
    },
    {
      "type": "继承",
      "source": "07CON016",
      "target": "07CON015"
    },
    {
      "type": "继承",
      "source": "07CON017",
      "target": "07CON015"
    },
    {
      "type": "继承",
      "source": "07CON018",
      "target": "07CON016"
    },
    {
      "type": "继承",
      "source": "07CON018",
      "target": "07CON017"
    },
    {
      "type": "理论依赖",
      "source": "07CON019",
      "target": "07CON015"
    },
    {
      "type": "理论依赖",
      "source": "07CON019",
      "target": "07DS003"
    },
    {
      "type": "理论依赖",
      "source": "07CON020",
      "target": "07CON019"
    },
    {
      "type": "理论依赖",
      "source": "07CON021",
      "target": "07CON019"
    },
    {
      "type": "理论依赖",
      "source": "07CON022",
      "target": "07CON020"
    },
    {
      "type": "理论依赖",
      "source": "07CON022",
      "target": "07CON014"
    },
    {
      "type": "理论依赖",
      "source": "07CON023",
      "target": "07CON015"
    },
    {
      "type": "理论依赖",
      "source": "07CON023",
      "target": "07DS002"
    },
    {
      "type": "理论依赖",
      "source": "07CON024",
      "target": "07CON023"
    },
    {
      "type": "理论依赖",
      "source": "07CON024",
      "target": "07CON014"
    },
    {
      "type": "理论依赖",
      "source": "07CON025",
      "target": "07CON002"
    },
    {
      "type": "继承",
      "source": "07DS004",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07DS004",
      "target": "07CON025"
    },
    {
      "type": "操作绑定",
      "source": "07ALG001",
      "target": "07DS001"
    },
    {
      "type": "操作绑定",
      "source": "07ALG002",
      "target": "07DS001"
    },
    {
      "type": "操作绑定",
      "source": "07ALG003",
      "target": "07DS001"
    },
    {
      "type": "使用",
      "source": "07DS005",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07DS005",
      "target": "07CON012"
    },
    {
      "type": "使用",
      "source": "07DS006",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07DS006",
      "target": "07CON013"
    },
    {
      "type": "使用",
      "source": "07DS007",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "source": "07DS007",
      "target": "07CON013"
    },
    {
      "type": "变体",
      "source": "07DS008",
      "target": "07DS006"
    },
    {
      "type": "使用",
      "source": "07DS008",
      "target": "07DS002"
    },
    {
      "type": "变体",
      "source": "07DS009",
      "target": "07DS006"
    },
    {
      "type": "变体",
      "source": "07DS009",
      "target": "07DS008"
    },
    {
      "type": "使用",
      "source": "07DS009",
      "target": "07DS002"
    },
    {
      "type": "继承",
      "source": "07ALG004",
      "target": "07ALG003"
    },
    {
      "type": "继承",
      "source": "07ALG005",
      "target": "07ALG003"
    }
  ]
}