{
  "entities": [
    {
      "type": "数据结构",
      "ID": "05DS001",
      "name": "树",
      "attributes": {
        "难度": "入门",
        "内容": "一种重要的非线性数据结构，是树形结构的简称。由n(n>=0)个有限结点组成一个具有层次关系的集合。它或者为空树，或者由一个根结点和若干棵互不相交的子树组成。",
        "存储开销": "取决于存储方式和树的形态",
        "核心特性": "层次性、递归定义",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了分层管理、自顶向下的组织思想，如同社会结构、知识体系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON001",
      "name": "根",
      "attributes": {
        "难度": "入门",
        "内容": "树中唯一没有前驱结点的结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "事物的本源、核心，抓住主要矛盾。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON002",
      "name": "子树",
      "attributes": {
        "难度": "入门",
        "内容": "在一棵非空树中，除根结点外，其余所有结点被分为m棵(m>=0)互不相交的集合，每个集合本身又是一棵树，被称为根的子树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "整体与部分的关系，体现递归思想。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON003",
      "name": "结点",
      "attributes": {
        "难度": "入门",
        "内容": "树的基本组成单元，包含数据元素及指向子树的分支。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "系统中的个体单元，每个单元都有其特定作用。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON004",
      "name": "度",
      "attributes": {
        "难度": "入门",
        "内容": "结点拥有的子树数目（或后继结点数）称为结点的度。树中所有结点度的最大值称为树的度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "衡量节点复杂性或连接性的指标。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON005",
      "name": "叶子结点",
      "attributes": {
        "难度": "入门",
        "内容": "度为0的结点，也称为终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "事物发展的终点或基础单元。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON006",
      "name": "分支结点",
      "attributes": {
        "难度": "入门",
        "内容": "度大于0的结点，也称为非终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "承上启下的关键节点，连接不同部分。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON007",
      "name": "孩子结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的直接后继结点（子树的根）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "传承与发展的关系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON008",
      "name": "双亲结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的直接前驱结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "来源与归属的关系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON009",
      "name": "兄弟结点",
      "attributes": {
        "难度": "入门",
        "内容": "具有相同双亲结点的结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同级平等、协作或竞争的关系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON010",
      "name": "层数",
      "attributes": {
        "难度": "入门",
        "内容": "结点的层数从根开始定义，根为第1层，根的孩子为第2层，以此类推。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "事物发展的阶段性或组织结构的层级性。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON011",
      "name": "深度",
      "attributes": {
        "难度": "入门",
        "内容": "树中结点的最大层数，也称为高度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "衡量系统复杂度或规模的指标。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON012",
      "name": "有序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中各结点的子树是按照一定的次序从左向右安排的，次序不能互换。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "强调顺序和规则的重要性。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON013",
      "name": "无序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中各结点的子树之间没有固定的次序，可以任意交换位置。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "灵活性和包容性，不强调固定顺序。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON014",
      "name": "森林",
      "attributes": {
        "难度": "入门",
        "内容": "m(m>=0)棵互不相交的树的集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "由多个独立系统组成的更大集合，体现多样性。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS002",
      "name": "二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "度为2的有序树。递归定义为空树，或者由一个根结点加上左、右两棵互不相交的二叉子树组成。左、右子树次序不能颠倒。",
        "存储开销": "顺序存储可能浪费空间，链式存储相对灵活",
        "核心特性": "有序性、最大度为2、左右子树区分",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "二分法思想的体现，简化复杂问题，广泛应用于查找和排序。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON015",
      "name": "左子树",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树根结点的左边分支所代表的二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "有序结构中的特定位置概念。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON016",
      "name": "右子树",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树根结点的右边分支所代表的二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "有序结构中的特定位置概念。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON017",
      "name": "左孩子",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树中一个结点的左子树的根结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "有序结构中的特定关系概念。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON018",
      "name": "右孩子",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树中一个结点的右子树的根结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "有序结构中的特定关系概念。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS003",
      "name": "满二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "一棵深度为h且有2^h-1个结点的二叉树。每一层都达到了最大结点数。",
        "存储开销": "顺序存储效率高",
        "核心特性": "结构规整、层序结点编号连续",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "理想化、完美结构的模型。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS004",
      "name": "完全二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "深度为h、有n个结点的二叉树，当且仅当其每个结点都与深度为h的满二叉树中编号为1至n的结点一一对应时，称为完全二叉树。除最后一层外，其余层都是满的，最后一层结点从左到右连续排列。",
        "存储开销": "适合顺序存储",
        "核心特性": "结点编号与满二叉树部分对应、适用于堆",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "接近完美、结构紧凑的模型，体现资源有效利用。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS005",
      "name": "理想平衡二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "除最后一层外，其余各层都是满的二叉树。最后一层结点可以任意分布。",
        "存储开销": "比完全二叉树可能稍差",
        "核心特性": "层数尽可能少",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "追求效率和平衡的优化思想。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON019",
      "name": "顺序存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "使用一组地址连续的存储单元依次存储数据元素，数据元素之间的逻辑关系通过存储位置（下标）隐含表示。对于树（特别是完全二叉树），通常按层序编号存储。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "结构化、规整化的存储方式，便于随机访问但插入删除困难。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON020",
      "name": "链接存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "使用指针链接结点来表示数据元素之间的逻辑关系。每个结点包含数据域和指向其他结点的指针域。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "灵活、动态的存储方式，便于插入删除但访问效率可能较低。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON021",
      "name": "二叉链表",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的常用链接存储结构，每个结点包含数据域、指向左孩子的指针域和指向右孩子的指针域。有时还包含指向双亲的指针。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "针对特定结构（二叉树）设计的有效链式表示。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG001",
      "name": "前序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树遍历算法。访问顺序：根结点 -> 左子树 -> 右子树。递归实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (h为树高，递归栈深度)",
        "设计思想": "递归、深度优先",
        "适用场景": "复制二叉树、输出树结构（前缀表示）",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "先总后分的处理思路。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG002",
      "name": "中序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树遍历算法。访问顺序：左子树 -> 根结点 -> 右子树。递归实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (h为树高，递归栈深度)",
        "设计思想": "递归、深度优先",
        "适用场景": "对二叉排序树可得到有序序列",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "按特定顺序（如从小到大）处理问题的思路。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG003",
      "name": "后序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树遍历算法。访问顺序：左子树 -> 右子树 -> 根结点。递归实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (h为树高，递归栈深度)",
        "设计思想": "递归、深度优先",
        "适用场景": "计算表达式树、释放树结点空间",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "先分后总的处理思路，常用于清理或汇总。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS006",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "一种后进先出（LIFO）的线性数据结构。常用于实现递归算法的非递归版本、表达式求值等。",
        "存储开销": "通常为O(n)或O(h)",
        "核心特性": "后进先出",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了处理具有嵌套或回溯性质问题的有效机制。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG004",
      "name": "按层遍历",
      "attributes": {
        "难度": "入门",
        "内容": "树/二叉树遍历算法。按照从上到下、同一层从左到右的次序访问结点。非递归实现，通常使用队列。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(W) (W为树的最大宽度)",
        "设计思想": "广度优先",
        "适用场景": "查找最短路径（在图中）、按层级处理问题",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "逐层推进、稳步扩展的解决问题思路。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS007",
      "name": "队列",
      "attributes": {
        "难度": "入门",
        "内容": "一种先进先出（FIFO）的线性数据结构。常用于实现按层遍历、排队系统模拟等。",
        "存储开销": "通常为O(n)或O(W)",
        "核心特性": "先进先出",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "公平排队、按序处理问题的机制。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG005",
      "name": "初始化二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树设置为空树的操作，通常是将根指针置为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建新的二叉树之前",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "万事开头，清零复位。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON022",
      "name": "广义表",
      "attributes": {
        "难度": "入门",
        "内容": "一种列表表示方法，常用于表示树或图的结构，特别是 Lisp 语言风格的表示。例如 A(B(C),D) 表示 A 为根，B, D 为子结点，C 为 B 的子结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "一种文本化、结构化的数据表示方式。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG006",
      "name": "建立二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的输入（如广义表字符串、前序/中序序列等）创建二叉树的链接存储结构。使用广义表创建时通常需要栈辅助。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (栈深度)",
        "设计思想": "递归或迭代（使用栈）",
        "适用场景": "从外部表示构造内存中的二叉树",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "将抽象表示实例化为具体结构的过程。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG007",
      "name": "判空二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "判断二叉树是否为空的操作，通常检查根指针是否为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本状态检查",
        "适用场景": "在进行其他操作前检查树是否有效",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "执行操作前的条件判断，确保安全有效。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG008",
      "name": "求二叉树深度",
      "attributes": {
        "难度": "入门",
        "内容": "计算二叉树的最大层数。递归定义：空树深度0，非空树深度 = max(左子树深度, 右子树深度) + 1。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "了解树的规模和平衡性",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "通过分解子问题解决整体问题的递归思想。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG009",
      "name": "查找二叉树结点",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉树中查找具有特定值的结点。通常采用类似遍历的方式进行。",
        "时间复杂度": "O(n) (最坏)",
        "空间复杂度": "O(h) (递归)",
        "设计思想": "递归搜索",
        "适用场景": "定位树中特定元素",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "系统性搜索策略的应用。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG010",
      "name": "输出二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树的结构以某种形式（如广义表）打印输出。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归（类前序遍历）",
        "适用场景": "可视化或调试树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "结构化信息的有效展示。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG011",
      "name": "清除二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "删除二叉树中的所有结点，释放其占用的内存空间，使树变为空树。通常采用后序遍历的递归思想。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归（类后序遍历）",
        "适用场景": "销毁不再使用的树",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "资源回收、善后处理的重要性。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS008",
      "name": "k叉树",
      "attributes": {
        "难度": "入门",
        "内容": "树中任意结点的度最多为k的树，也称多叉树或多元树。是树的一般形式。",
        "存储开销": "取决于存储方式，标准链接方式指针域较多",
        "核心特性": "最大度为k",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "更一般化的层次结构模型。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG012",
      "name": "初始化树",
      "attributes": {
        "难度": "入门",
        "内容": "将普通树（k叉树）设置为空树的操作。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建新树之前",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同初始化二叉树。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG013",
      "name": "建立树",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的输入（如广义表字符串）创建普通树（k叉树）的链接存储结构。通常需要栈辅助。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "迭代（使用栈）",
        "适用场景": "从外部表示构造内存中的树",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同建立二叉树。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG014",
      "name": "查找树结点",
      "attributes": {
        "难度": "入门",
        "内容": "在普通树（k叉树）中查找具有特定值的结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归搜索（类先根遍历）",
        "适用场景": "定位树中特定元素",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同查找二叉树结点。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG015",
      "name": "输出树",
      "attributes": {
        "难度": "入门",
        "内容": "将普通树（k叉树）的结构以广义表形式打印输出。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归（类先根遍历）",
        "适用场景": "可视化或调试树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同输出二叉树。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG016",
      "name": "清除树",
      "attributes": {
        "难度": "入门",
        "内容": "删除普通树（k叉树）中的所有结点，释放其占用的内存空间。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归（类后根遍历）",
        "适用场景": "销毁不再使用的树",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同清除二叉树。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG017",
      "name": "判空树",
      "attributes": {
        "难度": "入门",
        "内容": "判断普通树（k叉树）是否为空的操作。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本状态检查",
        "适用场景": "在进行其他操作前检查树是否有效",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同判空二叉树。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG018",
      "name": "先根遍历",
      "attributes": {
        "难度": "入门",
        "内容": "普通树（k叉树）的遍历算法。访问顺序：根结点 -> 从左到右依次遍历各子树。递归实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归、深度优先",
        "适用场景": "复制树、输出树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同前序遍历。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG019",
      "name": "后根遍历",
      "attributes": {
        "难度": "入门",
        "内容": "普通树（k叉树）的遍历算法。访问顺序：从左到右依次遍历各子树 -> 根结点。递归实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归、深度优先",
        "适用场景": "计算树的某些属性（如高度）、释放树结点",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同后序遍历。"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "ID": "05REL001",
      "source": "05DS001",
      "target": "05CON001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL002",
      "source": "05DS001",
      "target": "05CON002"
    },
    {
      "type": "理论依赖",
      "ID": "05REL003",
      "source": "05DS001",
      "target": "05CON003"
    },
    {
      "type": "理论依赖",
      "ID": "05REL004",
      "source": "05DS001",
      "target": "05CON004"
    },
    {
      "type": "理论依赖",
      "ID": "05REL005",
      "source": "05DS001",
      "target": "05CON005"
    },
    {
      "type": "理论依赖",
      "ID": "05REL006",
      "source": "05DS001",
      "target": "05CON006"
    },
    {
      "type": "理论依赖",
      "ID": "05REL007",
      "source": "05DS001",
      "target": "05CON007"
    },
    {
      "type": "理论依赖",
      "ID": "05REL008",
      "source": "05DS001",
      "target": "05CON008"
    },
    {
      "type": "理论依赖",
      "ID": "05REL009",
      "source": "05DS001",
      "target": "05CON009"
    },
    {
      "type": "理论依赖",
      "ID": "05REL010",
      "source": "05DS001",
      "target": "05CON010"
    },
    {
      "type": "理论依赖",
      "ID": "05REL011",
      "source": "05DS001",
      "target": "05CON011"
    },
    {
      "type": "理论依赖",
      "ID": "05REL012",
      "source": "05DS001",
      "target": "05CON012"
    },
    {
      "type": "理论依赖",
      "ID": "05REL013",
      "source": "05DS001",
      "target": "05CON013"
    },
    {
      "type": "理论依赖",
      "ID": "05REL014",
      "source": "05DS001",
      "target": "05CON014"
    },
    {
      "type": "继承",
      "ID": "05REL015",
      "source": "05DS002",
      "target": "05DS001"
    },
    {
      "type": "继承",
      "ID": "05REL016",
      "source": "05DS008",
      "target": "05DS001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL017",
      "source": "05DS002",
      "target": "05CON015"
    },
    {
      "type": "理论依赖",
      "ID": "05REL018",
      "source": "05DS002",
      "target": "05CON016"
    },
    {
      "type": "理论依赖",
      "ID": "05REL019",
      "source": "05DS002",
      "target": "05CON017"
    },
    {
      "type": "理论依赖",
      "ID": "05REL020",
      "source": "05DS002",
      "target": "05CON018"
    },
    {
      "type": "继承",
      "ID": "05REL021",
      "source": "05DS003",
      "target": "05DS002"
    },
    {
      "type": "继承",
      "ID": "05REL022",
      "source": "05DS004",
      "target": "05DS002"
    },
    {
      "type": "继承",
      "ID": "05REL023",
      "source": "05DS005",
      "target": "05DS002"
    },
    {
      "type": "继承",
      "ID": "05REL024",
      "source": "05DS003",
      "target": "05DS004"
    },
    {
      "type": "继承",
      "ID": "05REL025",
      "source": "05DS004",
      "target": "05DS005"
    },
    {
      "type": "理论依赖",
      "ID": "05REL026",
      "source": "05DS002",
      "target": "05CON019"
    },
    {
      "type": "理论依赖",
      "ID": "05REL027",
      "source": "05DS002",
      "target": "05CON020"
    },
     {
      "type": "理论依赖",
      "ID": "05REL028",
      "source": "05DS008",
      "target": "05CON019"
    },
    {
      "type": "理论依赖",
      "ID": "05REL029",
      "source": "05DS008",
      "target": "05CON020"
    },
    {
      "type": "理论依赖",
      "ID": "05REL030",
      "source": "05CON020",
      "target": "05CON021"
    },
    {
      "type": "操作绑定",
      "ID": "05REL031",
      "source": "05ALG001",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL032",
      "source": "05ALG002",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL033",
      "source": "05ALG003",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL034",
      "source": "05ALG004",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL035",
      "source": "05ALG005",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL036",
      "source": "05ALG006",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL037",
      "source": "05ALG007",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL038",
      "source": "05ALG008",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL039",
      "source": "05ALG009",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL040",
      "source": "05ALG010",
      "target": "05DS002"
    },
    {
      "type": "操作绑定",
      "ID": "05REL041",
      "source": "05ALG011",
      "target": "05DS002"
    },
    {
      "type": "使用",
      "ID": "05REL042",
      "source": "05ALG001",
      "target": "05DS006"
    },
    {
      "type": "使用",
      "ID": "05REL043",
      "source": "05ALG002",
      "target": "05DS006"
    },
    {
      "type": "使用",
      "ID": "05REL044",
      "source": "05ALG003",
      "target": "05DS006"
    },
    {
      "type": "使用",
      "ID": "05REL045",
      "source": "05ALG004",
      "target": "05DS007"
    },
     {
      "type": "使用",
      "ID": "05REL046",
      "source": "05ALG006",
      "target": "05DS006"
    },
     {
      "type": "理论依赖",
      "ID": "05REL047",
      "source": "05ALG006",
      "target": "05CON022"
    },
     {
      "type": "操作绑定",
      "ID": "05REL048",
      "source": "05ALG012",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL049",
      "source": "05ALG013",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL050",
      "source": "05ALG014",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL051",
      "source": "05ALG015",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL052",
      "source": "05ALG016",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL053",
      "source": "05ALG017",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL054",
      "source": "05ALG018",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL055",
      "source": "05ALG019",
      "target": "05DS008"
    },
     {
      "type": "操作绑定",
      "ID": "05REL056",
      "source": "05ALG004",
      "target": "05DS008"
    },
     {
      "type": "使用",
      "ID": "05REL057",
      "source": "05ALG013",
      "target": "05DS006"
    },
    {
      "type": "使用",
      "ID": "05REL058",
      "source": "05ALG018",
      "target": "05DS006"
    },
    {
      "type": "使用",
      "ID": "05REL059",
      "source": "05ALG019",
      "target": "05DS006"
    },
    {
      "type": "理论依赖",
      "ID": "05REL060",
      "source": "05ALG013",
      "target": "05CON022"
    },
    {
      "type": "理论依赖",
      "ID": "05REL061",
      "source": "05ALG015",
      "target": "05CON022"
    },
    {
      "type": "理论依赖",
      "ID": "05REL062",
      "source": "05ALG010",
      "target": "05CON022"
    }
  ]
}