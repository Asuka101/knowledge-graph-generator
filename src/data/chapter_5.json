{
  "entities": [
    {
      "type": "数据结构",
      "ID": "05DS001",
      "name": "树",
      "attributes": {
        "难度": "入门",
        "内容": "树是n(n>=0)个结点的有限集。n=0时称为空树。在任意一棵非空树中：(1)有且仅有一个特定的称为根(Root)的结点；(2)当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1, T2,..., Tm，其中每一个集合本身又是一棵树，并且称为根的子树(Subtree)。树是一种重要的非线性、递归定义的数据结构，广泛用于表示层次关系。",
        "存储开销": "取决于存储方式（顺序或链接）和树的形态。",
        "核心特性": "层次性、递归性",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了分层管理、逐级展开的组织思想，如同社会结构、知识体系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON001",
      "name": "结点",
      "attributes": {
        "难度": "入门",
        "内容": "树结构中的基本单元，包含数据元素及指向其子树的分支。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "每个结点承上启下，如同社会中的个体，既有传承也有发展。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON002",
      "name": "根",
      "attributes": {
        "难度": "入门",
        "内容": "树中唯一没有前驱的结点，是树的起始点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "万物皆有源，根是基础和核心。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON003",
      "name": "子树",
      "attributes": {
        "难度": "入门",
        "内容": "非空树中，除根结点外，其余结点按照定义构成的独立的树结构，是根结点的后继集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "整体由部分组成，部分体现整体特征，体现了系统思维。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON004",
      "name": "前驱",
      "attributes": {
        "难度": "入门",
        "内容": "在树结构中，指一个结点的直接上层结点（双亲结点）。根结点没有前驱。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "事物发展具有联系性，存在因果关系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON005",
      "name": "后继",
      "attributes": {
        "难度": "入门",
        "内容": "在树结构中，指一个结点的直接下层结点（孩子结点）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "传承与发展，后继是未来的延续。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON006",
      "name": "度",
      "attributes": {
        "难度": "入门",
        "内容": "结点拥有的子树数目（或后继结点数）称为结点的度。树中所有结点度的最大值称为树的度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "衡量结点的分支能力和树的复杂度。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON007",
      "name": "叶子结点",
      "attributes": {
        "难度": "入门",
        "内容": "度为0的结点，也称为终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "代表了结构的基础单元或最终状态。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON008",
      "name": "分支结点",
      "attributes": {
        "难度": "入门",
        "内容": "度大于0的结点，也称为非终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "承担着连接和扩展结构的功能。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON009",
      "name": "孩子结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的子树的根结点，即该结点的直接后继。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了层级关系中的下一级。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON010",
      "name": "双亲结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的直接前驱结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了层级关系中的上一级。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON011",
      "name": "兄弟结点",
      "attributes": {
        "难度": "入门",
        "内容": "具有相同双亲结点的结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了同一层级、同一来源的并列关系。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON012",
      "name": "祖先",
      "attributes": {
        "难度": "入门",
        "内容": "从根结点到某结点路径上的所有结点（不含该结点本身）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "追溯事物的起源和发展脉络。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON013",
      "name": "子孙",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的所有子树中的所有结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "表示由某一点衍生出的所有后续部分。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON014",
      "name": "层数",
      "attributes": {
        "难度": "入门",
        "内容": "结点的层数从根开始定义，根为第1层，根的孩子为第2层，以此类推。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "清晰地表示了结构的层次深度。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON015",
      "name": "深度",
      "attributes": {
        "难度": "入门",
        "内容": "树中结点的最大层数，也称为树的高度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "衡量树的整体规模和复杂度。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS002",
      "name": "有序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中任意结点的各子树按一定次序从左至右排列，不可互换位置的树。例如，家族树中兄弟按长幼排序。",
        "存储开销": "同一般树，取决于存储方式。",
        "核心特性": "子树有序",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "强调了顺序和规则在组织结构中的重要性。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS003",
      "name": "无序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中任意结点的各子树之间没有顺序关系，可以任意交换位置。",
        "存储开销": "同一般树，取决于存储方式。",
        "核心特性": "子树无序",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "关注集合关系而非顺序。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON016",
      "name": "森林",
      "attributes": {
        "难度": "入门",
        "内容": "m(m>=0)棵互不相交的树的集合。删除树的根结点，其各子树即构成森林。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了从单一到多元，从整体到部分集合的视角转换。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS004",
      "name": "k叉树",
      "attributes": {
        "难度": "中等",
        "内容": "树中所有结点的度都不超过k的树，也称多叉树或多元树。是树的一种推广形式。",
        "存储开销": "顺序存储可能浪费空间，链接存储根据k值确定指针域数量。",
        "核心特性": "结点度数受限",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "模型化了分支数量受限的层级结构。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS005",
      "name": "二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "度为2的有序树。每个结点最多有两个孩子，分别称为左孩子和右孩子，且左右次序不能颠倒。二叉树可以是空树，或者由一个根结点加上左子树和右子树组成，左右子树也都是二叉树。是计算机科学中应用最广泛的树结构之一。",
        "存储开销": "顺序存储对完全二叉树效率高，链接存储（二叉链表）通用性强。",
        "核心特性": "有序性、结点度最大为2、左右子树区分",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了二分思想，是许多高效算法和数据结构的基础。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS006",
      "name": "满二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "一棵深度为h，且含有2^h - 1个结点的二叉树。即树中的每一层都含有最多的结点。",
        "存储开销": "非常适合顺序存储。",
        "核心特性": "结构规整、结点满层",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "代表了理想化的、完全对称的二叉结构。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS007",
      "name": "完全二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "深度为h、有n个结点的二叉树，当且仅当其每一个结点都与深度为h的满二叉树中编号为1至n的结点一一对应时，称为完全二叉树。特点是叶子结点只可能在层次最大的两层上出现，且最大层次上的叶子结点都集中在最左边的若干位置。",
        "存储开销": "适合顺序存储，空间利用率高。",
        "核心特性": "层序编号连续、叶子结点靠左集中",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "在保持树的平衡性和存储效率方面做了很好的折衷，是堆的基础结构。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS008",
      "name": "理想平衡二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "除最后一层外，其余各层都是满的，而最后一层上的结点可以任意分布的二叉树。完全二叉树是其特例。",
        "存储开销": "链接存储较常见。",
        "核心特性": "除最后一层外均满层",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "放宽了完全二叉树的限制，关注整体的层级满度。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON017",
      "name": "顺序存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "使用一组地址连续的存储单元（如数组）依次存储数据元素。对于树（特别是完全二叉树），可以通过计算下标来确定结点间的父子关系。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了利用数学关系映射逻辑结构的简洁性，但也可能造成空间浪费。"
      }
    },
    {
      "type": "概念",
      "ID": "05CON018",
      "name": "链接存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "使用指针将逻辑上相邻的元素链接起来。每个结点包含数据域和指向其他结点的指针域。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "灵活性强，按需分配空间，体现了动态管理的思想。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS009",
      "name": "二叉链表",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的一种链式存储结构。每个结点包含一个数据域和两个指针域，分别指向其左孩子和右孩子结点。",
        "存储开销": "每个结点需要额外存储两个指针。",
        "核心特性": "通过指针表示父子关系",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "是实现二叉树各种操作的基础物理结构。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS010",
      "name": "带双亲指针的二叉链表",
      "attributes": {
        "难度": "中等",
        "内容": "在二叉链表的基础上，为每个结点增加一个指向其双亲结点的指针域。方便查找双亲结点。",
        "存储开销": "每个结点需要额外存储三个指针。",
        "核心特性": "方便向上查找",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "通过增加冗余信息提升特定操作的效率，体现了时空权衡。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG001",
      "name": "前序遍历",
      "attributes": {
        "难度": "中等",
        "内容": "二叉树遍历算法之一。访问顺序：根结点 -> 左子树 -> 右子树。递归定义。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、深度优先",
        "适用场景": "复制二叉树、输出树的结构（带括号表示法）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了先总后分的处理逻辑。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG002",
      "name": "中序遍历",
      "attributes": {
        "难度": "中等",
        "内容": "二叉树遍历算法之一。访问顺序：左子树 -> 根结点 -> 右子树。递归定义。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、深度优先",
        "适用场景": "对二叉排序树进行中序遍历可得到有序序列。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了对称、有序的处理逻辑。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG003",
      "name": "后序遍历",
      "attributes": {
        "难度": "中等",
        "内容": "二叉树遍历算法之一。访问顺序：左子树 -> 右子树 -> 根结点。递归定义。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、深度优先",
        "适用场景": "计算表达式树的值、删除（释放）树结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了先细后总、自底向上的处理逻辑。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG004",
      "name": "按层遍历",
      "attributes": {
        "难度": "中等",
        "内容": "树/二叉树遍历算法之一。按照从上到下、同一层从左到右的次序访问结点。非递归算法，通常借助队列实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(w)，w为树的最大宽度（队列最大长度）",
        "设计思想": "广度优先、队列辅助",
        "适用场景": "求解最短路径问题（如树的层数）、按层输出。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了逐层推进、广度探索的策略。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG005",
      "name": "初始化二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树设置为空树的操作，通常是将根指针置为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建新的二叉树实例前。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "万事开头难，初始化是规范操作的起点。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG006",
      "name": "建立二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的输入（如广义表表示、前序+中序序列等）构造二叉树的链接存储结构。广义表法常使用栈辅助实现。",
        "时间复杂度": "O(n)，n为结点数或输入字符串长度",
        "空间复杂度": "O(h)，h为树高（递归或栈深度）",
        "设计思想": "递归或栈辅助、解析输入",
        "适用场景": "从外部表示恢复二叉树结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "将抽象表示转化为具体实现，体现了建模和构造能力。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG007",
      "name": "判断二叉树是否为空",
      "attributes": {
        "难度": "入门",
        "内容": "检查二叉树是否为空的操作，通常是判断根指针是否为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "在执行其他操作前进行边界检查。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "严谨性要求，处理边界情况是程序健壮性的保证。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG008",
      "name": "求二叉树深度",
      "attributes": {
        "难度": "中等",
        "内容": "计算二叉树的最大层数。通常使用递归实现：空树深度为0，非空树深度 = max(左子树深度, 右子树深度) + 1。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、分治",
        "适用场景": "分析树的规模和平衡性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "将复杂问题分解为子问题求解，体现了分治思想。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG009",
      "name": "查找二叉树结点",
      "attributes": {
        "难度": "中等",
        "内容": "在二叉树中查找具有特定值的结点。通常采用类似遍历的方式（如前序）进行递归查找。",
        "时间复杂度": "O(n)（最坏情况）",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、遍历",
        "适用场景": "数据检索。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "系统性搜索是解决查找问题的基本方法。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG010",
      "name": "输出二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "将二叉树的结构以某种形式（如广义表）打印输出。通常基于遍历算法（如前序）修改实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、遍历",
        "适用场景": "可视化树结构、调试。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "将内部结构以易于理解的方式呈现出来。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG011",
      "name": "清除二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "释放二叉树占用的所有内存空间，使其变为空树。通常采用后序遍历的递归思想，先释放子树再释放根结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、后序遍历",
        "适用场景": "程序结束前或不再需要该树时回收资源。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "资源管理的重要性，有借有还，保持系统清洁。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG012",
      "name": "初始化树",
      "attributes": {
        "难度": "入门",
        "内容": "将普通树（k叉树）设置为空树的操作。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建新的树实例前。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同初始化二叉树。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG013",
      "name": "建立树",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的输入（如广义表表示）构造普通树（k叉树）的链接存储结构。广义表法常使用两个栈（一个存结点指针，一个存孩子序号）辅助实现。",
        "时间复杂度": "O(n)，n为结点数或输入字符串长度",
        "空间复杂度": "O(h)，h为树高（栈深度）",
        "设计思想": "栈辅助、解析输入",
        "适用场景": "从外部表示恢复树结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "处理更一般化的树结构构造。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG014",
      "name": "先根遍历",
      "attributes": {
        "难度": "中等",
        "内容": "普通树（k叉树）的遍历算法之一。访问顺序：根结点 -> 从左到右依次遍历各子树。递归定义。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、深度优先",
        "适用场景": "类似二叉树前序遍历。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "处理多分枝情况下的先总后分逻辑。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG015",
      "name": "后根遍历",
      "attributes": {
        "难度": "中等",
        "内容": "普通树（k叉树）的遍历算法之一。访问顺序：从左到右依次遍历各子树 -> 根结点。递归定义。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、深度优先",
        "适用场景": "计算依赖子结点结果的操作、释放树空间。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "处理多分枝情况下的先细后总逻辑。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG016",
      "name": "查找树结点",
      "attributes": {
        "难度": "中等",
        "内容": "在普通树（k叉树）中查找具有特定值的结点。通常采用类似先根遍历的方式进行递归查找。",
        "时间复杂度": "O(n)（最坏情况）",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、遍历",
        "适用场景": "数据检索。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "在更一般化的树结构中进行搜索。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG017",
      "name": "输出树",
      "attributes": {
        "难度": "中等",
        "内容": "将普通树（k叉树）的结构以某种形式（如广义表）打印输出。通常基于先根遍历算法修改实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、遍历",
        "适用场景": "可视化树结构、调试。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "将复杂的多叉结构清晰呈现。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG018",
      "name": "求树深度",
      "attributes": {
        "难度": "中等",
        "内容": "计算普通树（k叉树）的最大层数。递归实现：空树深度为0，非空树深度 = max(所有子树深度) + 1。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、分治",
        "适用场景": "分析树的规模。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "处理多分枝情况下的深度计算。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG019",
      "name": "清除树",
      "attributes": {
        "难度": "中等",
        "内容": "释放普通树（k叉树）占用的所有内存空间。通常采用后根遍历的递归思想，先释放所有子树再释放根结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)，h为树高（递归栈深度）",
        "设计思想": "递归、后根遍历",
        "适用场景": "资源回收。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "在更复杂的结构中进行彻底的资源清理。"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG020",
      "name": "判空树",
      "attributes": {
        "难度": "入门",
        "内容": "检查普通树（k叉树）是否为空的操作。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "操作前边界检查。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "同判断二叉树是否为空。"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS011",
      "name": "满k叉树",
      "attributes": {
        "难度": "中等",
        "内容": "深度为h的k叉树，其结点总数达到最大值 (k^h - 1) / (k - 1)。即每一层都达到了最大结点数。",
        "存储开销": "适合顺序存储。",
        "核心特性": "结构规整、结点满层",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "k叉树的理想化、完全对称形态。"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "ID": "05REL001",
      "source": "05DS001",
      "target": "05CON001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL002",
      "source": "05DS001",
      "target": "05CON002"
    },
    {
      "type": "理论依赖",
      "ID": "05REL003",
      "source": "05DS001",
      "target": "05CON003"
    },
    {
      "type": "理论依赖",
      "ID": "05REL004",
      "source": "05DS001",
      "target": "05CON004"
    },
    {
      "type": "理论依赖",
      "ID": "05REL005",
      "source": "05DS001",
      "target": "05CON005"
    },
    {
      "type": "理论依赖",
      "ID": "05REL006",
      "source": "05DS001",
      "target": "05CON006"
    },
    {
      "type": "理论依赖",
      "ID": "05REL007",
      "source": "05DS001",
      "target": "05CON007"
    },
    {
      "type": "理论依赖",
      "ID": "05REL008",
      "source": "05DS001",
      "target": "05CON008"
    },
    {
      "type": "理论依赖",
      "ID": "05REL009",
      "source": "05DS001",
      "target": "05CON009"
    },
    {
      "type": "理论依赖",
      "ID": "05REL010",
      "source": "05DS001",
      "target": "05CON010"
    },
    {
      "type": "理论依赖",
      "ID": "05REL011",
      "source": "05DS001",
      "target": "05CON011"
    },
    {
      "type": "理论依赖",
      "ID": "05REL012",
      "source": "05DS001",
      "target": "05CON012"
    },
    {
      "type": "理论依赖",
      "ID": "05REL013",
      "source": "05DS001",
      "target": "05CON013"
    },
    {
      "type": "理论依赖",
      "ID": "05REL014",
      "source": "05DS001",
      "target": "05CON014"
    },
    {
      "type": "理论依赖",
      "ID": "05REL015",
      "source": "05DS001",
      "target": "05CON015"
    },
    {
      "type": "变体",
      "ID": "05REL016",
      "source": "05DS002",
      "target": "05DS001"
    },
    {
      "type": "变体",
      "ID": "05REL017",
      "source": "05DS003",
      "target": "05DS001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL018",
      "source": "05CON016",
      "target": "05DS001"
    },
    {
      "type": "继承",
      "ID": "05REL019",
      "source": "05DS004",
      "target": "05DS001"
    },
    {
      "type": "继承",
      "ID": "05REL020",
      "source": "05DS005",
      "target": "05DS002"
    },
    {
      "type": "理论依赖",
      "ID": "05REL021",
      "source": "05DS005",
      "target": "05CON001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL022",
      "source": "05DS005",
      "target": "05CON002"
    },
    {
      "type": "理论依赖",
      "ID": "05REL023",
      "source": "05DS005",
      "target": "05CON003"
    },
    {
      "type": "理论依赖",
      "ID": "05REL024",
      "source": "05DS005",
      "target": "05CON006"
    },
    {
      "type": "理论依赖",
      "ID": "05REL025",
      "source": "05DS005",
      "target": "05CON007"
    },
    {
      "type": "理论依赖",
      "ID": "05REL026",
      "source": "05DS005",
      "target": "05CON008"
    },
    {
      "type": "理论依赖",
      "ID": "05REL027",
      "source": "05DS005",
      "target": "05CON009"
    },
    {
      "type": "理论依赖",
      "ID": "05REL028",
      "source": "05DS005",
      "target": "05CON010"
    },
    {
      "type": "理论依赖",
      "ID": "05REL029",
      "source": "05DS005",
      "target": "05CON014"
    },
    {
      "type": "理论依赖",
      "ID": "05REL030",
      "source": "05DS005",
      "target": "05CON015"
    },
    {
      "type": "继承",
      "ID": "05REL031",
      "source": "05DS006",
      "target": "05DS005"
    },
    {
      "type": "继承",
      "ID": "05REL032",
      "source": "05DS007",
      "target": "05DS005"
    },
    {
      "type": "继承",
      "ID": "05REL033",
      "source": "05DS006",
      "target": "05DS007"
    },
    {
      "type": "继承",
      "ID": "05REL034",
      "source": "05DS008",
      "target": "05DS005"
    },
    {
      "type": "继承",
      "ID": "05REL035",
      "source": "05DS007",
      "target": "05DS008"
    },
    {
      "type": "使用",
      "ID": "05REL036",
      "source": "05DS005",
      "target": "05CON017"
    },
    {
      "type": "使用",
      "ID": "05REL037",
      "source": "05DS005",
      "target": "05CON018"
    },
    {
      "type": "继承",
      "ID": "05REL038",
      "source": "05DS009",
      "target": "05CON018"
    },
    {
      "type": "继承",
      "ID": "05REL039",
      "source": "05DS010",
      "target": "05DS009"
    },
    {
      "type": "使用",
      "ID": "05REL040",
      "source": "05DS005",
      "target": "05DS009"
    },
    {
      "type": "操作绑定",
      "ID": "05REL041",
      "source": "05ALG001",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL042",
      "source": "05ALG002",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL043",
      "source": "05ALG003",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL044",
      "source": "05ALG004",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL045",
      "source": "05ALG005",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL046",
      "source": "05ALG006",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL047",
      "source": "05ALG007",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL048",
      "source": "05ALG008",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL049",
      "source": "05ALG009",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL050",
      "source": "05ALG010",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL051",
      "source": "05ALG011",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL052",
      "source": "05ALG012",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL053",
      "source": "05ALG013",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL054",
      "source": "05ALG014",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL055",
      "source": "05ALG015",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL056",
      "source": "05ALG004",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL057",
      "source": "05ALG016",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL058",
      "source": "05ALG017",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL059",
      "source": "05ALG018",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL060",
      "source": "05ALG019",
      "target": "05DS001"
    },
    {
      "type": "操作绑定",
      "ID": "05REL061",
      "source": "05ALG020",
      "target": "05DS001"
    },
    {
      "type": "使用",
      "ID": "05REL062",
      "source": "05DS001",
      "target": "05CON017"
    },
    {
      "type": "使用",
      "ID": "05REL063",
      "source": "05DS001",
      "target": "05CON018"
    },
    {
      "type": "继承",
      "ID": "05REL064",
      "source": "05DS011",
      "target": "05DS004"
    }
  ]
}