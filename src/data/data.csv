记录类型,实体类型,ID,名称,难度,内容,存储开销,核心特性,时间复杂度,空间复杂度,设计思想,适用场景,关系类型,源实体,目标实体
实体,数据结构,01DS001,数据结构,入门,"指数据以及相互之间的联系。它是根据人们解决实际问题的需要从问题本身所含数据之间的内在联系而抽象出来的。包括数据的逻辑结构和存储结构（物理结构）。通常采用二元组 B=(K,R) 表示，其中K是数据元素的集合，R是K上关系的集合。",依赖于所选用的具体存储结构（顺序、链接、索引、散列等）,数据元素及其关系（逻辑结构），数据在计算机中的存储方式（存储结构）,,,,,,,
实体,算法,01ALG001,算法,入门,解决特定问题的方法或步骤。应具备有穷性、确定性、可行性、输入（0或多个）、输出（1或多个）五个特性。分为数值算法和非数值算法。在计算机领域，是针对问题需求在数据的逻辑结构和存储结构基础上施加的一种运算。,,,评价算法效率的度量，衡量算法运行时间随问题规模增长的趋势。,评价算法效率的度量，衡量算法运行过程中临时占用存储空间的大小。,多种多样，如结构化、模块化、面向对象、分治、贪心等（绪论中提到结构化、模块化、面向对象）,解决各类数值计算和非数值处理问题。,,,
实体,概念,01CON001,逻辑结构,入门,指数据元素之间的逻辑关系，是数据结构在抽象层面的描述，与数据的存储方式无关。基本类型包括集合、线性结构、树形结构、图形结构。,,,,,,,,,
实体,概念,01CON002,存储结构,入门,指数据结构在计算机内存中的表示方式，也称为物理结构。主要有顺序存储、链接存储、索引存储、散列存储四种基本方法。,,,,,,,,,
实体,数据结构,01DS002,集合,入门,一种基本的逻辑结构，其中的数据元素除了同属于一个集合外，相互之间没有其他特定的关系。,依赖具体实现方式,元素间无特定关系,,,,,,,
实体,数据结构,01DS003,线性结构,入门,一种基本的逻辑结构，其中的数据元素之间存在一对一的线性关系。除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继。,依赖具体实现（如顺序表、链表）,一对一关系，有序性,,,,,,,
实体,数据结构,01DS004,树形结构,入门,一种基本的逻辑结构，其中的数据元素之间存在一对多的层次关系。除根结点外，每个结点有且仅有一个直接前驱；每个结点可以有零个或多个直接后继。,依赖具体实现,一对多关系，层次性,,,,,,,
实体,数据结构,01DS005,图形结构,入门,一种基本的逻辑结构，其中的数据元素（顶点）之间存在多对多的关系。每个结点可以有任意多个直接前驱和直接后继。,依赖具体实现,多对多关系，网状性,,,,,,,
实体,数据结构,01DS006,非线性结构,入门,相对于线性结构而言的逻辑结构，数据元素之间存在非一对一的关系。主要包括树形结构和图形结构。,依赖具体实现,元素间关系非一对一（一对多或多对多）,,,,,,,
实体,概念,01CON003,时间复杂度,中等,算法效率的度量指标，用于评估算法执行时间随输入数据规模增长的趋势。通常使用大O表示法（O(g(n))）来表示其数量级。,,,,,,,,,
实体,概念,01CON004,空间复杂度,中等,算法效率的度量指标，用于评估算法在运行过程中临时占用的存储空间大小。包括算法本身、输入输出数据以及临时变量和工作栈等占用的空间。,,,,,,,,,
实体,概念,01CON005,抽象数据类型,中等,"（Abstract Data Type, ADT）由一个数据结构以及定义在该结构上的一组操作组成。它强调数据的逻辑结构和操作，隐藏其内部存储表示和实现细节，体现了信息隐藏和封装的思想。在C++等面向对象语言中常通过类来实现。",,,,,,,,,
实体,概念,01CON006,数据,入门,对现实世界事物及其活动的符号记录，是信息的载体。可以是数值、字符、文本、图像等多种形式。在计算机中通常以二进制形式存储和处理。,,,,,,,,,
实体,概念,01CON007,数据元素,入门,数据的基本单位，是数据整体中相对独立的个体。通常作为一个整体进行考虑和处理。在某些情况下等同于数据或记录。,,,,,,,,,
实体,概念,01CON008,数据项,入门,构成数据元素或数据记录的不可分割的最小单位。一个数据元素（或记录）可以由若干个数据项组成。可以是简单数据项或组合数据项。,,,,,,,,,
实体,概念,01CON009,关键字,入门,（Keyword或Key）能唯一标识一个数据记录（或数据元素）的数据项的值。对应的那个能唯一标识记录的数据项称为关键项（Key Item）。,,,,,,,,,
实体,概念,01CON013,顺序存储,入门,一种基本的存储结构（物理结构）实现方法，将逻辑上相邻的数据元素存储在物理位置也相邻的存储单元中。,,,,,,,,,
实体,概念,01CON014,链接存储,入门,一种基本的存储结构（物理结构）实现方法，数据元素的存储单元不一定连续，元素间的逻辑关系通过存储指针（地址）来表示。,,,,,,,,,
实体,概念,01CON015,索引存储,入门,一种基本的存储结构（物理结构）实现方法，在存储数据元素信息的同时，还建立附加的索引表来标识元素的地址。,,,,,,,,,
实体,概念,01CON016,散列存储,入门,一种基本的存储结构（物理结构）实现方法，根据元素的关键字直接计算出该元素的存储地址，也称哈希存储。,,,,,,,,,
实体,概念,01CON017,结点,入门,数据结构中数据元素的图形表示，也称为顶点（Vertex）。在线性结构、树形结构和图形结构中广泛使用。,,,,,,,,,
实体,概念,01CON018,有向边,入门,在图形结构中表示两个结点之间有向关系的连线，也称为弧（Arc）。边从起始结点指向终止结点。,,,,,,,,,
实体,概念,01CON019,直接前驱,入门,"在线性结构或序偶关系 <x, y> 中，元素 x 是元素 y 的直接前驱。",,,,,,,,,
实体,概念,01CON020,直接后继,入门,"在线性结构或序偶关系 <x, y> 中，元素 y 是元素 x 的直接后继。",,,,,,,,,
实体,概念,01CON021,树根结点,入门,在树形结构中，没有直接前驱的唯一结点。,,,,,,,,,
实体,概念,01CON022,树叶结点,入门,在树形结构中，没有直接后继（度为0）的结点。,,,,,,,,,
实体,概念,01CON023,树枝结点,入门,在树形结构中，除了树根结点和树叶结点之外的中间结点。有时树根结点也视为特殊的树枝结点。,,,,,,,,,
实体,概念,01CON024,类,中等,面向对象程序设计中的核心概念，是创建对象的蓝图或模板。在C++中常用于实现抽象数据类型，封装数据成员和成员函数（操作）。,,,,,,,,,
实体,概念,01CON025,数据记录,入门,数据处理领域组织数据的基本单位，由一个或多个数据项组成。文件通常由多条记录构成。,,,,,,,,,
实体,数据结构,02DS001,线性表,入门,具有相同属性的数据元素的一个有限序列。序列中所含元素的个数称为线性表的长度。元素之间具有一对一的前驱和后继关系（首元素无前驱，尾元素无后继）。是线性结构的典型代表。,取决于具体的存储实现（顺序或链式）。,元素之间逻辑上呈线性有序，长度可变。,,,,,,,
实体,数据结构,02DS002,顺序表,入门,使用顺序存储结构实现的线性表。通常使用数组实现。需要预先分配存储空间，可能存在空间浪费或溢出问题（动态数组可缓解）。,主要为n个元素占用的连续空间，加上存储长度等信息的辅助变量。通常为 n * sizeof(ElemType) + O(1)。,支持随机访问（通过下标访问元素时间复杂度为O(1)），插入和删除操作平均需要移动大量元素（时间复杂度为O(n)）。,,,,,,,
实体,数据结构,02DS003,链表,入门,使用链式存储结构实现的线性表。由一系列结点组成，结点之间通过指针链接。根据指针域的不同可分为单向链表、双向链表、循环链表等。,每个结点都需要存储数据和指针，总开销为 n * (sizeof(ElemType) + 指针数量 * sizeof(pointer))。,插入和删除操作效率高（若已知位置，时间复杂度为O(1)），无需预估存储空间，但访问元素需要顺序遍历（时间复杂度为O(n)）。,,,,,,,
实体,数据结构,02DS004,单向链表,入门,链表的一种基本形式。每个结点只包含一个指向其直接后继结点的指针域。,n * (sizeof(ElemType) + sizeof(pointer))。,只能从头到尾单向遍历。查找前驱结点困难。,,,,,,,
实体,概念,02CON004,表头指针,入门,一个指向链表中第一个有效数据结点的指针变量。对于空链表，其值为NULL。,,,,,,,,,
实体,数据结构,02DS005,双向链表,入门,链表的一种形式。每个结点包含两个指针域，一个指向直接前驱结点，一个指向直接后继结点。,n * (sizeof(ElemType) + 2 * sizeof(pointer))。,支持双向遍历，方便查找前驱和后继结点，插入删除操作相对单链表稍微复杂。,,,,,,,
实体,概念,02CON005,表头附加结点,入门,在链表的第一个有效数据结点之前额外增加的一个结点，也称为哑结点(Dummy Node)。该结点不存储实际数据，其指针域指向第一个有效数据结点。它可以统一对链表（包括空表和非空表）的首结点操作，简化插入和删除算法的实现。,,,,,,,,,
实体,数据结构,02DS006,循环链表,入门,链表的一种变体。表中最后一个结点的指针域不再为空，而是指向链表的第一个结点（或表头附加结点），形成一个环状结构。可以是单向循环链表或双向循环链表。,与对应的非循环链表（单向或双向）相同。,可以从表中任一结点出发遍历整个链表。适用于需要循环处理数据的场景，如约瑟夫问题。,,,,,,,
实体,算法,02ALG001,初始化线性表,入门,创建一个空的线性表实例。对于顺序表，通常是分配数组空间并设置长度为0；对于链表，通常是将头指针设为NULL或创建表头附加结点。,,,O(1),O(1) 或 O(MaxSize)（取决于是否为静态数组）,初始化,使用线性表之前。,,,
实体,算法,02ALG002,清除线性表,入门,删除线性表中的所有元素，使其变为空表。对于动态分配内存的顺序表或链表，还需要释放所有结点占用的内存空间。,,,O(1)（顺序表仅重置长度），O(n)（链表需要遍历释放）,O(1),重置/遍历释放,销毁或重用线性表。,,,
实体,算法,02ALG003,求线性表长度,入门,返回线性表中当前包含的元素个数。,,,O(1)（带长度属性的顺序表或链表），O(n)（不带长度属性的链表需要遍历）,O(1),访问属性/遍历计数,获取线性表的大小。,,,
实体,算法,02ALG004,判断线性表是否为空,入门,检查线性表中是否没有任何元素。,,,O(1),O(1),检查长度属性或头指针,进行操作前的状态判断。,,,
实体,算法,02ALG005,获取线性表元素,入门,根据给定的位置序号（通常从1开始）返回线性表中对应元素的值。,,,O(1)（顺序表），O(n)（链表需要遍历查找）,O(1),直接索引（顺序表）/顺序遍历（链表）,访问线性表中特定位置的元素。,,,
实体,算法,02ALG006,遍历线性表,入门,按照元素的逻辑顺序访问线性表中的每一个元素，且每个元素仅访问一次。,,,O(n),O(1),迭代/递归,处理线性表中的所有元素，如打印、计算总和等。,,,
实体,算法,02ALG007,查找线性表元素,入门,在线性表中查找第一个值等于给定值的元素，返回其位置或是否存在。,,,O(n)（顺序查找）,O(1),顺序比较,确定某个元素是否在线性表中或找到其位置。,,,
实体,算法,02ALG008,更新线性表元素,入门,在线性表中查找指定元素（按值或按位置），并用新值替换其旧值。,,,O(n)（需要先查找）,O(1),查找 + 赋值,修改线性表中已存在的元素值。,,,
实体,算法,02ALG009,插入线性表元素,入门,在（或按条件确定）线性表的指定位置插入一个新的数据元素。,,,O(n)（顺序表需要移动元素，链表需要查找位置），O(1)（特定情况，如链表头插或尾插且有尾指针）,O(1)（忽略动态扩容开销）,移动元素（顺序表）/修改指针（链表）,向线性表中增加数据。,,,
实体,算法,02ALG010,删除线性表元素,入门,从线性表中删除指定位置的元素或第一个值等于给定值的元素。,,,O(n)（顺序表需要移动元素，链表需要查找位置），O(1)（特定情况，如链表头删或已知前驱结点）,O(1),移动元素（顺序表）/修改指针（链表）,从线性表中移除数据。,,,
实体,算法,02ALG011,排序线性表,入门,将线性表中的元素按照某种规则（如值的升序或降序）重新排列。,,,取决于所用排序算法，本章示例为O(n^2)（插入排序）,取决于所用排序算法，本章示例为O(1)或O(n),比较、交换/移动元素,需要有序访问线性表元素时。,,,
实体,算法,02ALG012,插入排序,入门,一种简单的排序算法。将线性表分为已排序和未排序两部分，每次从未排序部分取出一个元素，插入到已排序部分的合适位置，直到所有元素都排好序。,,,O(n^2)（平均和最坏情况），O(n)（最好情况）,O(1)（原地排序）,比较、插入、移动,数据量较小，或数据基本有序的情况。,,,
实体,概念,02CON006,多项式,入门,数学概念，表示为变量的幂与其系数乘积之和。例如 P(x) = a_n*x^n + ... + a_1*x + a_0。在本章中作为线性表应用的一个实例，讨论其表示和运算。,,,,,,,,,
实体,算法,02ALG013,多项式求值,入门,给定变量x的值，计算多项式P(x)的结果。可以使用线性表存储多项式系数或非零项进行计算。,,,O(n)（n为多项式项数，使用线性表遍历计算，未考虑幂运算复杂度）,O(1),遍历、累加、幂运算,计算多项式在特定点的值。,,,
实体,算法,02ALG014,多项式加法,中等,计算两个多项式P1(x)和P2(x)的和，生成结果多项式P3(x)。需要合并两个多项式中指数相同的项。,,,"O(m+n)（m, n分别为两个多项式非零项的个数，使用有序链表归并实现）",O(m+n)（存储结果多项式）,归并、链表操作,符号计算、代数运算。,,,
实体,概念,02CON007,随机存取,入门,一种数据存取方式，访问存储器中任何位置的数据所需时间都是相同或相近的，与数据所在的物理位置无关。数组（顺序存储）支持随机存取。,,,,,,,,,
实体,概念,02CON008,顺序存取,入门,一种数据存取方式，必须按照特定的线性顺序访问数据。访问第n个元素前必须先访问前面的n-1个元素。链表是典型的顺序存取结构。,,,,,,,,,
实体,数据结构,03DS002,集合的顺序存储,入门,使用数组存储集合元素，并用一个变量记录当前长度。元素存储顺序任意，插入通常在末尾进行，删除时用末尾元素填补空位，以提高效率。,O(MaxSize)，可能存在空间浪费或需要动态扩展。,基于数组实现，随机访问（虽然对集合意义不大），插入删除（特定策略下）O(1)（不考虑查找）。,,,,,,,
实体,算法,03ALG001,初始化集合为空（顺序存储）,入门,为存储集合的数组分配内存空间（静态或动态），并将集合长度置为0。,,,O(1)（静态）或 O(MaxSize)（动态初始化）,O(1),初始化,创建新的顺序存储集合实例。,,,
实体,算法,03ALG002,清除集合（顺序存储）,入门,若使用动态内存，则释放数组空间并将长度和容量置为0；若为静态数组，则仅将长度置为0。,,,O(1) 或 O(n) （取决于是否需要释放元素）,O(1),资源管理,销毁或重置顺序存储的集合。,,,
实体,算法,03ALG003,求集合长度（顺序存储）,入门,返回存储当前集合元素数量的变量值。,,,O(1),O(1),状态获取,获取顺序存储集合的大小。,,,
实体,算法,03ALG004,判断集合是否为空（顺序存储）,入门,检查集合长度是否为0。,,,O(1),O(1),状态检查,判断顺序存储的集合是否包含元素。,,,
实体,算法,03ALG005,判断元素是否属于集合（顺序存储）,入门,遍历数组，查找是否存在指定元素。,,,O(n),O(1),顺序查找,检查元素在顺序存储集合中的存在性。,,,
实体,算法,03ALG006,输出集合元素（顺序存储）,入门,遍历数组，依次输出每个元素。,,,O(n),O(1),遍历,展示顺序存储集合的所有内容。,,,
实体,算法,03ALG007,有序输出集合元素（顺序存储）,入门,将集合元素复制到临时数组，使用排序算法（如简单选择排序）排序后输出。,,,O(n^2) (使用简单选择排序),O(n) (临时数组),排序、遍历,按特定顺序展示顺序存储集合的内容，同时不改变原集合。,,,
实体,算法,03ALG008,查找集合元素（顺序存储）,入门,顺序查找具有特定关键字的元素，找到则返回完整元素信息。,,,O(n),O(1),顺序查找,在顺序存储的集合中根据关键字检索元素的完整信息。,,,
实体,算法,03ALG009,修改集合元素（顺序存储）,入门,顺序查找具有特定关键字的元素，找到则用新值替换。,,,O(n),O(1),顺序查找、更新,更新顺序存储集合中某个元素的值。,,,
实体,算法,03ALG010,向集合插入元素（顺序存储）,入门,首先检查元素是否存在（防止重复），若不存在且空间足够（或动态扩展后），则在数组末尾添加元素并增加长度。,,,O(n) (主要耗时在查重),O(1) (不考虑动态扩展时的复制开销),顺序查找、插入、空间管理,向顺序存储的集合添加新元素。,,,
实体,算法,03ALG011,从集合删除元素（顺序存储）,入门,顺序查找指定元素，找到后用数组最后一个元素覆盖该位置，然后长度减1。可选择在空间利用率低时缩减数组空间。,,,O(n) (主要耗时在查找),O(1) (不考虑动态缩减时的复制开销),顺序查找、删除（覆盖法）、空间管理,从顺序存储的集合移除指定元素。,,,
实体,算法,03ALG012,求两集合并集（顺序存储）,中等,将第一个集合复制到结果集合，然后遍历第二个集合，将不在结果集合中的元素插入结果集合。,,,"O(n*m) (n, m分别为两集合大小)",O(n+m) (结果集),复制、遍历、插入（查重）,计算两个顺序存储集合的并集。,,,
实体,算法,03ALG013,求两集合交集（顺序存储）,中等,遍历一个集合（如S2），对于其中每个元素，检查它是否存在于另一个集合（S1）中，若存在则加入结果集合。,,,O(n*m),"O(min(n,m)) 或 O(k) (k为交集大小)",遍历、查找,计算两个顺序存储集合的交集。,,,
实体,算法,03ALG014,求两集合差集（顺序存储）,中等,遍历第一个集合（S1），对于其中每个元素，检查它是否存在于第二个集合（S2）中，若不存在则加入结果集合。,,,O(n*m),O(n) 或 O(k) (k为差集大小),遍历、查找,计算两个顺序存储集合的差集 (S1 - S2)。,,,
实体,算法,03ALG015,简单选择排序,入门,每次从未排序部分选取最小（或最大）元素，放到已排序部分的末尾。,,,O(n^2),O(1),选择,数据量小的排序，教学演示。,,,
实体,算法,03ALG016,顺序查找,入门,从列表（如数组）的开头逐个比较元素，直到找到目标元素或遍历完列表。,,,O(n),O(1),线性扫描,无序列表查找，或列表较小的情况。,,,
实体,数据结构,03DS003,集合的链接存储,入门,使用链表（通常是单链表）存储集合元素，每个节点包含元素值和指向下一个节点的指针。元素在链表中的顺序任意。,O(n)，每个元素需要额外存储指针。,基于链表实现，动态大小，插入删除（特定位置，如表头）O(1)（不考虑查找）。,,,,,,,
实体,算法,03ALG017,初始化集合为空（链接存储）,入门,将链表的头指针设置为空（NULL）。,,,O(1),O(1),初始化,创建新的链接存储集合实例。,,,
实体,算法,03ALG018,清除集合（链接存储）,入门,遍历链表，逐个释放所有节点的内存空间，最后将头指针置为空。,,,O(n),O(1),遍历、资源管理,销毁链接存储的集合。,,,
实体,算法,03ALG019,求集合长度（链接存储）,入门,遍历链表，计数节点数量。,,,O(n),O(1),遍历、计数,获取链接存储集合的大小。,,,
实体,算法,03ALG020,判断集合是否为空（链接存储）,入门,检查链表的头指针是否为空。,,,O(1),O(1),状态检查,判断链接存储的集合是否包含元素。,,,
实体,算法,03ALG021,判断元素是否属于集合（链接存储）,入门,遍历链表，查找是否存在包含指定元素的节点。,,,O(n),O(1),顺序查找,检查元素在链接存储集合中的存在性。,,,
实体,算法,03ALG022,输出集合元素（链接存储）,入门,遍历链表，依次输出每个节点的数据域。,,,O(n),O(1),遍历,展示链接存储集合的所有内容。,,,
实体,算法,03ALG023,查找集合元素（链接存储）,入门,遍历链表查找具有特定关键字的节点，找到则返回节点信息。,,,O(n),O(1),顺序查找,在链接存储的集合中根据关键字检索元素的完整信息。,,,
实体,算法,03ALG024,修改集合元素（链接存储）,入门,遍历链表查找具有特定关键字的节点，找到则用新值更新该节点的数据域。,,,O(n),O(1),顺序查找、更新,更新链接存储集合中某个元素的值。,,,
实体,算法,03ALG025,向集合插入元素（链接存储）,入门,首先检查元素是否存在（防止重复），若不存在，则创建新节点，通常插入到链表头部（效率高）。,,,O(n) (主要耗时在查重),O(1),顺序查找、插入（头插法）,向链接存储的集合添加新元素。,,,
实体,算法,03ALG026,从集合删除元素（链接存储）,入门,遍历链表查找指定元素所在的节点及其前驱节点，找到后修改前驱节点的指针以跳过当前节点，并释放当前节点的内存。,,,O(n) (主要耗时在查找),O(1),顺序查找、删除（指针修改）,从链接存储的集合移除指定元素。,,,
实体,算法,03ALG027,求两集合并集（链接存储）,中等,将第一个集合复制到结果集合链表，然后遍历第二个集合链表，将不在结果链表中的元素插入结果链表。,,,"O(n*m) (n, m分别为两集合大小)",O(n+m) (结果集),复制、遍历、插入（查重）,计算两个链接存储集合的并集。,,,
实体,算法,03ALG028,求两集合交集（链接存储）,中等,遍历一个集合链表（如S2），对于其中每个元素，在另一个集合链表（S1）中查找是否存在，若存在则将该元素插入结果链表。,,,O(n*m),"O(min(n,m)) 或 O(k) (k为交集大小)",遍历、查找,计算两个链接存储集合的交集。,,,
实体,算法,03ALG029,求两集合差集（链接存储）,中等,遍历第一个集合链表（S1），对于其中每个元素，在第二个集合链表（S2）中查找是否存在，若不存在则将该元素插入结果链表。,,,O(n*m),O(n) 或 O(k) (k为差集大小),遍历、查找,计算两个链接存储集合的差集 (S1 - S2)。,,,
实体,数据结构,03DS005,稀疏矩阵,中等,矩阵中非零元素的个数远小于零元素个数的矩阵。为了节省存储空间和计算时间，通常只存储非零元素的信息（行号、列号、值）。,取决于非零元素个数t，远小于m*n。,稀疏性，空间优化存储,,,,,,,
实体,概念,03CON001,矩阵,入门,一个m行n列的数表，包含m*n个元素，每个元素由其行号和列号唯一确定。,,,,,,,,,
实体,数据结构,03DS006,三元组线性表,中等,"用于表示稀疏矩阵的一种线性结构，表中每个元素是一个三元组(i, j, value)，分别表示非零元素的行号、列号和值。通常按行号主序、列号辅序排列。",O(t)，t为非零元素个数。,线性结构，有序性（按行列）,,,,,,,
实体,数据结构,03DS007,稀疏矩阵的顺序存储,中等,使用数组（结构数组）存储稀疏矩阵对应的三元组线性表。通常还需要存储矩阵的行数、列数和非零元素总数。,O(t)，t为非零元素个数。,基于数组，按序存储三元组。,,,,,,,
实体,数据结构,03DS008,稀疏矩阵的链接存储,中等,使用链式结构存储稀疏矩阵的三元组。常见的有带行指针向量的链表和十字链表。,O(t)，每个三元组需要额外的指针开销。,基于链表，动态存储。,,,,,,,
实体,数据结构,03DS009,带行指针向量的链接存储,中等,一种稀疏矩阵的链接存储方式。使用一个指针数组（行指针向量），每个元素指向对应行的非零元素单链表的头结点。同一行内的节点按列号升序链接。,O(m+t)，m为行数，t为非零元素数。,按行快速访问，行内有序。,,,,,,,
实体,数据结构,03DS010,十字链接存储,中等,一种稀疏矩阵的链接存储方式。每个非零元素节点包含行号、列号、值，以及指向同一行下一个节点的指针和指向同一列下一个节点的指针。同时使用行指针向量和列指针向量。,O(m+n+t)，m为行数，n为列数，t为非零元素数。,按行、按列均可快速访问。,,,,,,,
实体,算法,03ALG030,初始化稀疏矩阵,入门,根据不同的存储结构（顺序、行指针向量、十字链表），初始化矩阵的行数、列数、非零元个数为0，并初始化相应的存储结构（如清空数组、将指针向量置空）。,,,O(1) 或 O(m) 或 O(m+n),O(1),初始化,创建新的稀疏矩阵实例。,,,
实体,算法,03ALG031,输入稀疏矩阵（顺序存储）,入门,"读取矩阵的行数、列数，然后逐个读取非零元素的三元组(行, 列, 值)，按顺序存入三元组数组，直到遇到结束标记（如0,0,0）。最后记录非零元素总数。",,,O(t)，t为非零元素个数。,O(1),数据加载、序列化,从外部源（如键盘）构建顺序存储的稀疏矩阵。,,,
实体,算法,03ALG032,输入稀疏矩阵（十字链表）,中等,读取矩阵的行数、列数，然后逐个读取非零元素的三元组，为每个三元组创建新的十字链表节点，并将其正确链接到对应行链表和列链表的末尾。最后记录非零元素总数。,,,O(t * (行链表平均长度 + 列链表平均长度))，若优化插入位置则可改善,O(t),数据加载、链表操作,从外部源构建十字链表存储的稀疏矩阵。,,,
实体,算法,03ALG033,输出稀疏矩阵（顺序存储）,入门,遍历存储三元组的数组，按指定格式（如三元组线性表）输出每个非零元素的行号、列号和值。,,,O(t)，t为非零元素个数。,O(1),遍历、格式化输出,展示顺序存储的稀疏矩阵的内容。,,,
实体,算法,03ALG034,稀疏矩阵转置（普通转置）,中等,"对原矩阵（顺序存储）按列扫描。对每一列col，遍历原三元组列表，找到所有列号为col的元素，将其(行,列,值)转换为(列,行,值)后，按原行号（即新列号）顺序存入结果三元组列表。",,,O(n*t)，n为原矩阵列数，t为非零元素数。,O(t) (结果矩阵),按列扫描、转置,计算稀疏矩阵的转置，实现简单但效率不高。,,,
实体,算法,03ALG035,稀疏矩阵转置（快速转置）,中等,通过两次遍历实现高效转置。第一次遍历统计原矩阵每一列的非零元素个数，并计算转置后每一行（即原每一列）的起始存储位置。第二次遍历将原三元组按计算好的位置直接放入结果三元组列表。,,,O(n+t)，n为原矩阵列数，t为非零元素数。,O(n+t) (结果矩阵和辅助数组),空间换时间、计数、定位,高效计算稀疏矩阵的转置。,,,
实体,算法,03ALG036,稀疏矩阵加法（带行指针向量）,中等,"逐行处理两个输入矩阵（M1, M2）。对每一行i，同时遍历M1和M2的第i行链表，按列号合并节点：若列号不同，将列号小的节点复制到结果行链表；若列号相同，将元素值相加，若和不为零则创建新节点加入结果行链表。最后处理某一行链表剩余的节点。",,,"O(t1+t2)，t1, t2分别为两矩阵非零元素数。",O(m + t1 + t2) (结果矩阵和指针向量),归并、按行处理,计算两个使用带行指针向量存储的稀疏矩阵的和。,,,
实体,数据结构,03DS011,广义表,中等,线性表的推广，是n(n>=0)个元素（单元素或子表）的有限序列。定义是递归的，可以表示复杂的树状或嵌套结构。,取决于具体实现（通常是链接）以及元素和嵌套深度。,递归定义、元素可以是原子或子表、可表示复杂结构。,,,,,,,
实体,概念,03CON002,单元素,入门,广义表中的原子性元素，不可再分解，通常是某种确定类型的对象（如数字、字符）。,,,,,,,,,
实体,概念,03CON003,子表,入门,广义表中的表元素，其本身也是一个广义表。,,,,,,,,,
实体,概念,03CON004,空表,入门,不包含任何元素的广义表，长度为0。,,,,,,,,,
实体,概念,03CON005,广义表的长度,入门,广义表中最顶层元素的个数。,,,,,,,,,
实体,概念,03CON006,广义表的深度,入门,广义表中括号嵌套的最大层数。空表深度为1，仅含单元素的表深度为1。,,,,,,,,,
实体,数据结构,03DS012,广义表的链接存储,中等,采用链式结构存储广义表。节点分为单元素节点和子表节点，通过标志位区分。单元素节点包含值域和后继指针；子表节点包含指向子表头结点的指针和后继指针。,O(N)，N为表中原子和子表的总数，每个节点有额外指针和标志位开销。,递归结构体现、动态存储、可以表示复杂嵌套。,,,,,,,
实体,数据结构,03DS013,带表头附加结点的广义表链接存储,中等,在广义表链接存储的基础上，为每个表（包括顶层表和所有子表）增加一个额外的表头节点（通常是tag为true的子表类型节点），其sublist指针指向该表的第一个实际元素节点，next指针通常为空。方便某些操作的统一处理。,O(N+M)，N为原子和子表总数，M为表的数量（包括子表）。,简化某些操作（如空表判断、插入删除），统一表示。,,,,,,,
实体,算法,03ALG037,求广义表长度,中等,计算广义表顶层元素的个数。对于链接存储，即计算顶层链表的节点数。通常使用递归或迭代遍历顶层节点的next指针实现。,,,O(L)，L为广义表长度。,O(L)（递归）或 O(1)（迭代）,遍历（递归或迭代）,获取广义表的顶层元素数量。,,,
实体,算法,03ALG038,求广义表深度,中等,计算广义表中括号嵌套的最大层数。通常使用递归实现：表的深度等于1加上所有子表深度的最大值；空表或只含单元素的表深度为1。,,,O(N)，N为广义表中节点总数。,O(D)，D为广义表深度（递归栈深度）。,递归、深度优先遍历,确定广义表的嵌套层级。,,,
实体,算法,03ALG039,建立广义表存储结构,中等,"根据输入的广义表字符串表示（如'(a,(b,c))'），递归地构建其链接存储结构。遇到'('开始构建子表，遇到字母构建单元素节点，遇到','处理后继节点，遇到')'结束当前层级。",,,O(S)，S为输入字符串长度或节点总数。,O(S) （递归栈深度和节点存储）,递归、解析,从字符串表示创建广义表的内存表示。,,,
实体,算法,03ALG040,打印输出广义表,中等,"将广义表的链接存储结构转换回其字符串表示形式。递归地处理：遇到子表节点先打印'('，递归打印子表，再打印')'；遇到单元素节点打印其值；处理完一个节点后若有后继，打印','并递归处理后继。",,,O(N)，N为广义表中节点总数。,O(D)，D为广义表深度（递归栈深度）。,递归、序列化、深度优先遍历,以可读形式展示广义表的内容。,,,
实体,数据结构,03DS014,数组,入门,一种线性数据结构，用连续的内存空间存储相同类型的数据元素集合。可以通过索引快速访问元素。,O(N)，N为数组大小。,连续存储、随机访问（O(1)）、固定大小（静态数组）。,,,,,,,
实体,数据结构,04DS002,栈,入门,又称堆栈，是一种运算受限的线性表。其限制是仅允许在表的一端（称为栈顶）进行插入（入栈）和删除（出栈）运算，另一端称为栈底。特点是后进先出（LIFO）。常用于表达式求值、括号匹配、递归实现等。,O(n)，n为元素个数,后进先出（LIFO）、单端操作,,,,,,,
实体,数据结构,04DS003,队列,入门,简称队，是一种运算受限的线性表。其限制是仅允许在表的一端（称为队尾）进行插入（入队），而在表的另一端（称为队首）进行删除（出队）。特点是先进先出（FIFO）。常用于广度优先搜索、任务调度、缓冲区管理等。,O(n)，n为元素个数,先进先出（FIFO）、双端操作（一端入、一端出）,,,,,,,
实体,数据结构,04DS004,顺序栈,入门,使用数组（顺序存储结构）实现的栈。通常需要一个数组和一个栈顶指针（top）来指示栈顶元素的位置。插入和删除操作的时间复杂度为O(1)，但可能存在空间溢出问题（栈满）或需要动态扩容。,O(N)，N为预分配数组大小,顺序存储、O(1)操作（无扩容时）、可能栈满,,,,,,,
实体,数据结构,04DS005,链栈,入门,使用链表（链接存储结构）实现的栈。通常使用单链表实现，栈顶指针指向链表头结点。插入和删除操作的时间复杂度为O(1)，空间可以动态增长，理论上不存在栈满问题（受限于内存）。,O(n)，n为元素个数,链式存储、O(1)操作、动态空间,,,,,,,
实体,数据结构,04DS006,顺序队列,入门,使用数组（顺序存储结构）实现的队列。通常需要一个数组以及队首（front）和队尾（rear）两个指针。为了有效利用空间，常实现为循环队列，通过取模运算处理边界。入队和出队操作的时间复杂度为O(1)，但可能存在“假溢出”问题（通过循环队列解决）或队列满需要扩容。,O(N)，N为预分配数组大小,顺序存储、循环利用空间、O(1)操作（无扩容时）、可能队满,,,,,,,
实体,数据结构,04DS007,链队,入门,使用链表（链接存储结构）实现的队列。通常使用带头尾指针的单链表实现，队首指针指向头结点，队尾指针指向尾结点。入队和出队操作的时间复杂度为O(1)，空间可以动态增长。,O(n)，n为元素个数,链式存储、O(1)操作、动态空间,,,,,,,
实体,数据结构,04DS008,优先级队列,中等,一种特殊的队列，队列中的每个元素都关联一个优先级。出队时，总是优先级最高的元素先出队。插入元素时需要维护优先级顺序。通常使用堆来实现。,通常O(n)，取决于实现,按优先级出队,,,,,,,
实体,算法,04ALG001,初始化栈,入门,创建一个空栈。对于顺序栈，通常是将栈顶指针设为-1或特定初始值，并可能分配存储空间；对于链栈，是将栈顶指针设为NULL。,,,O(1) 或 O(MaxSize)（如果涉及初始化数组）,O(1) 或 O(MaxSize),初始化,使用栈之前,,,
实体,算法,04ALG002,进栈,入门,将一个新元素添加到栈顶。对于顺序栈，是将栈顶指针加1，然后将元素存入指针指向的位置（需检查栈满）；对于链栈，是创建一个新结点，使其指向原栈顶结点，然后更新栈顶指针。,,,O(1) （顺序栈不考虑扩容时）,O(1),插入,向栈中添加元素,,,
实体,算法,04ALG003,出栈,入门,删除栈顶元素并返回其值。对于顺序栈，是先获取栈顶元素值，然后将栈顶指针减1（需检查栈空）；对于链栈，是获取头结点数据，更新栈顶指针指向下一个结点，并释放原头结点（需检查栈空）。,,,O(1),O(1),删除,从栈中移除并获取元素,,,
实体,算法,04ALG004,读取栈顶元素,入门,返回栈顶元素的值，但不删除它。对于顺序栈，是直接返回栈顶指针指向位置的元素；对于链栈，是返回头结点的数据（需检查栈空）。,,,O(1),O(1),访问,查看栈顶元素而不修改栈,,,
实体,算法,04ALG005,判断栈空,入门,检查栈是否包含任何元素。对于顺序栈，通常是检查栈顶指针是否等于-1或特定初始值；对于链栈，是检查栈顶指针是否为NULL。,,,O(1),O(1),状态检查,执行出栈或读取栈顶元素前的安全检查,,,
实体,算法,04ALG006,清空栈,入门,移除栈中所有元素，使其变为空栈。对于顺序栈，只需重置栈顶指针；对于链栈，需要遍历并释放所有结点。,,,O(1) (顺序栈) 或 O(n) (链栈),O(1),重置/清理,重用栈结构或释放资源,,,
实体,算法,04ALG007,初始化队列,入门,创建一个空队列。对于顺序队列，通常是将队首和队尾指针设为相同值（如0），并可能分配存储空间；对于链队，是将队首和队尾指针都设为NULL。,,,O(1) 或 O(MaxSize),O(1) 或 O(MaxSize),初始化,使用队列之前,,,
实体,算法,04ALG008,进队,入门,将一个新元素添加到队尾。对于顺序（循环）队列，是将元素存入队尾指针指向的位置，然后队尾指针加1（取模）（需检查队满）；对于链队，是创建新结点，链接到队尾，并更新队尾指针。,,,O(1) （顺序队列不考虑扩容时）,O(1),插入,向队列中添加元素,,,
实体,算法,04ALG009,出队,入门,删除队首元素并返回其值。对于顺序（循环）队列，是获取队首指针加1（取模）位置的元素，然后队首指针加1（取模）（需检查队空）；对于链队，是获取头结点数据，更新队首指针指向下一个结点，并释放原头结点（若删除后队列为空，需更新队尾指针）。,,,O(1),O(1),删除,从队列中移除并获取元素,,,
实体,算法,04ALG010,读取队首元素,入门,返回队首元素的值，但不删除它。对于顺序（循环）队列，是返回队首指针加1（取模）位置的元素；对于链队，是返回头结点的数据（需检查队空）。,,,O(1),O(1),访问,查看队首元素而不修改队列,,,
实体,算法,04ALG011,判断队空,入门,检查队列是否包含任何元素。对于顺序（循环）队列，通常是检查队首和队尾指针是否相等；对于链队，是检查队首（或队尾）指针是否为NULL。,,,O(1),O(1),状态检查,执行出队或读取队首元素前的安全检查,,,
实体,算法,04ALG012,清空队列,入门,移除队列中所有元素，使其变为空队列。对于顺序队列，只需重置队首和队尾指针；对于链队，需要遍历并释放所有结点。,,,O(1) (顺序队列) 或 O(n) (链队),O(1),重置/清理,重用队列结构或释放资源,,,
实体,算法,04ALG013,括号配对检查,入门,"检查一个表达式或代码段中的括号（如(), [], {}）是否正确配对。算法通常遍历字符串，遇到左括号则入栈，遇到右括号则检查栈顶是否为对应左括号，若是则出栈，否则配对失败。结束后若栈为空则配对成功。",,,O(n)，n为字符串长度,O(n)，最坏情况下所有左括号入栈,栈应用、匹配,编译器语法分析、代码编辑器检查,,,
实体,算法,04ALG014,进制转换,入门,将一个十进制数转换为其他进制（如二进制、八进制、十六进制）的数。常用方法是“除基取余法”，将每次得到的余数入栈，转换完成后依次出栈即可得到正确顺序的转换结果。,,,O(log_r N)，N为十进制数，r为目标进制基数,O(log_r N)，栈的深度,栈应用、数制转换,数值表示转换,,,
实体,算法,04ALG015,后缀表达式求值,中等,计算后缀表达式（逆波兰表示法）的值。算法从左到右扫描表达式，遇到操作数则入栈，遇到运算符则从栈中弹出所需数量的操作数进行运算，并将结果压回栈中。表达式扫描完毕后，栈中唯一的值即为结果。,,,O(n)，n为表达式长度,O(n)，最坏情况下操作数栈的大小,栈应用、表达式求值,计算器实现、编译器中间代码执行,,,
实体,算法,04ALG016,中缀转后缀,中等,将普通的中缀算术表达式转换为后缀表达式（逆波兰表示法）。算法使用一个栈来暂存运算符，根据运算符优先级和括号来决定运算符的出栈顺序并添加到后缀表达式中，操作数则直接添加到后缀表达式。,,,O(n)，n为表达式长度,O(n)，最坏情况下运算符栈的大小,栈应用、表达式转换、优先级处理,编译器语法分析、后缀表达式求值的前置步骤,,,
实体,算法,04ALG017,求n阶乘,入门,计算非负整数n的阶乘（n! = 1 * 2 * ... * n，0! = 1）。可以使用循环或递归实现。递归定义为 f(n) = n * f(n-1) 当 n>0，f(0) = 1。,,,O(n),O(1)（循环）或 O(n)（递归栈深度）,循环、递归,数学计算、组合问题,,,
实体,算法,04ALG018,输出布尔组合,中等,生成n个布尔变量所有可能的真/假组合（共2^n种）。通常使用递归实现，每次递归决定一个变量的取值（0或1），递归到第n层时输出当前组合。,,,O(n * 2^n)，因为有2^n种组合，每种组合输出需要O(n),O(n)，递归栈深度,递归、回溯,枚举所有可能性、真值表生成,,,
实体,算法,04ALG019,全排列,中等,生成n个不同元素的所有排列（共n!种）。常用递归实现，通过交换元素来确定每个位置的元素，并对剩余元素进行递归排列。,,,O(n * n!)，因为有n!种排列，每种排列输出或生成需要O(n),O(n)，递归栈深度,递归、回溯、交换,组合优化问题、枚举所有排列,,,
实体,算法,04ALG020,迷宫问题求解,中等,寻找从迷宫入口到出口的一条路径。可以使用深度优先搜索（DFS，通常用递归或栈实现）或广度优先搜索（BFS，通常用队列实现）。DFS找到的是任意一条路径，BFS找到的是最短路径（按步数）。,,,"O(m*n)，m,n为迷宫尺寸",O(m*n)，最坏情况下访问所有格子,搜索（DFS/BFS）、回溯、栈/队列应用,路径查找、图搜索,,,
实体,算法,04ALG021,汉诺塔问题求解,中等,将n个大小不同的圆盘从起始柱借助辅助柱移动到目标柱，每次只能移动一个，且大盘不能在小盘之上。这是一个经典的递归问题。将n个盘从A移到C（B为辅助）：1. 将n-1个盘从A移到B（C为辅助）；2. 将第n个盘从A移到C；3. 将n-1个盘从B移到C（A为辅助）。,,,O(2^n),O(n)，递归栈深度,递归、分治,递归教学示例、理解递归思想,,,
实体,概念,04CON001,后进先出,入门,"Last-In, First-Out (LIFO)。一种数据访问顺序原则，最后存入的数据最先被取出。栈是典型的LIFO结构。",,,,,,,,,
实体,概念,04CON002,先进先出,入门,"First-In, First-Out (FIFO)。一种数据访问顺序原则，最先存入的数据最先被取出。队列是典型的FIFO结构。",,,,,,,,,
实体,概念,04CON003,中缀表达式,入门,一种常见的算术表达式表示法，其中运算符位于其操作数之间（例如 a + b）。计算时需要考虑运算符优先级和括号。,,,,,,,,,
实体,概念,04CON004,后缀表达式,中等,"也称为逆波兰表示法（Reverse Polish Notation, RPN）。一种算术表达式表示法，其中运算符位于其操作数之后（例如 a b +）。计算时不需要考虑优先级或括号，只需从左到右扫描，使用栈即可方便求值。",,,,,,,,,
实体,概念,04CON005,运算符优先级,入门,在算术表达式中，不同运算符具有不同的计算优先顺序。例如，乘除通常优先于加减。括号可以改变运算顺序。在中缀表达式求值和转换中必须考虑优先级。,,,,,,,,,
实体,概念,04CON006,递归,中等,一种解决问题的方法，其中函数直接或间接调用自身来解决规模更小的相同问题。递归需要包含基本情况（终止条件）以防止无限调用。系统通常使用栈来管理递归调用的上下文。,,,,,,,,,
实体,数据结构,05DS001,树,入门,一种重要的非线性数据结构，是树形结构的简称。由n(n>=0)个有限结点组成一个具有层次关系的集合。它或者为空树，或者由一个根结点和若干棵互不相交的子树组成。,取决于存储方式和树的形态,层次性、递归定义,,,,,,,
实体,概念,05CON002,子树,入门,在一棵非空树中，除根结点外，其余所有结点被分为m棵(m>=0)互不相交的集合，每个集合本身又是一棵树，被称为根的子树。,,,,,,,,,
实体,概念,05CON004,度,入门,结点拥有的子树数目（或后继结点数）称为结点的度。树中所有结点度的最大值称为树的度。,,,,,,,,,
实体,概念,05CON007,孩子结点,入门,一个结点的直接后继结点（子树的根）。,,,,,,,,,
实体,概念,05CON008,双亲结点,入门,一个结点的直接前驱结点。,,,,,,,,,
实体,概念,05CON009,兄弟结点,入门,具有相同双亲结点的结点。,,,,,,,,,
实体,概念,05CON010,层数,入门,结点的层数从根开始定义，根为第1层，根的孩子为第2层，以此类推。,,,,,,,,,
实体,概念,05CON011,深度,入门,树中结点的最大层数，也称为高度。,,,,,,,,,
实体,概念,05CON012,有序树,入门,树中各结点的子树是按照一定的次序从左向右安排的，次序不能互换。,,,,,,,,,
实体,概念,05CON013,无序树,入门,树中各结点的子树之间没有固定的次序，可以任意交换位置。,,,,,,,,,
实体,概念,05CON014,森林,入门,m(m>=0)棵互不相交的树的集合。,,,,,,,,,
实体,数据结构,05DS002,二叉树,入门,度为2的有序树。递归定义为空树，或者由一个根结点加上左、右两棵互不相交的二叉子树组成。左、右子树次序不能颠倒。,顺序存储可能浪费空间，链式存储相对灵活,有序性、最大度为2、左右子树区分,,,,,,,
实体,概念,05CON015,左子树,入门,二叉树根结点的左边分支所代表的二叉树。,,,,,,,,,
实体,概念,05CON016,右子树,入门,二叉树根结点的右边分支所代表的二叉树。,,,,,,,,,
实体,概念,05CON017,左孩子,入门,二叉树中一个结点的左子树的根结点。,,,,,,,,,
实体,概念,05CON018,右孩子,入门,二叉树中一个结点的右子树的根结点。,,,,,,,,,
实体,数据结构,05DS003,满二叉树,入门,一棵深度为h且有2^h-1个结点的二叉树。每一层都达到了最大结点数。,顺序存储效率高,结构规整、层序结点编号连续,,,,,,,
实体,数据结构,05DS004,完全二叉树,入门,深度为h、有n个结点的二叉树，当且仅当其每个结点都与深度为h的满二叉树中编号为1至n的结点一一对应时，称为完全二叉树。除最后一层外，其余层都是满的，最后一层结点从左到右连续排列。,适合顺序存储,结点编号与满二叉树部分对应、适用于堆,,,,,,,
实体,数据结构,05DS005,理想平衡二叉树,中等,除最后一层外，其余各层都是满的二叉树。最后一层结点可以任意分布。,比完全二叉树可能稍差,层数尽可能少,,,,,,,
实体,概念,05CON021,二叉链表,入门,二叉树的常用链接存储结构，每个结点包含数据域、指向左孩子的指针域和指向右孩子的指针域。有时还包含指向双亲的指针。,,,,,,,,,
实体,算法,05ALG001,前序遍历,入门,二叉树遍历算法。访问顺序：根结点 -> 左子树 -> 右子树。递归实现。,,,O(n),O(h) (h为树高，递归栈深度),递归、深度优先,复制二叉树、输出树结构（前缀表示）,,,
实体,算法,05ALG002,中序遍历,入门,二叉树遍历算法。访问顺序：左子树 -> 根结点 -> 右子树。递归实现。,,,O(n),O(h) (h为树高，递归栈深度),递归、深度优先,对二叉排序树可得到有序序列,,,
实体,算法,05ALG003,后序遍历,入门,二叉树遍历算法。访问顺序：左子树 -> 右子树 -> 根结点。递归实现。,,,O(n),O(h) (h为树高，递归栈深度),递归、深度优先,计算表达式树、释放树结点空间,,,
实体,算法,05ALG004,按层遍历,入门,树/二叉树遍历算法。按照从上到下、同一层从左到右的次序访问结点。非递归实现，通常使用队列。,,,O(n),O(W) (W为树的最大宽度),广度优先,查找最短路径（在图中）、按层级处理问题,,,
实体,算法,05ALG005,初始化二叉树,入门,将二叉树设置为空树的操作，通常是将根指针置为NULL。,,,O(1),O(1),基本操作,创建新的二叉树之前,,,
实体,算法,05ALG006,建立二叉树,中等,根据给定的输入（如广义表字符串、前序/中序序列等）创建二叉树的链接存储结构。使用广义表创建时通常需要栈辅助。,,,O(n),O(h) (栈深度),递归或迭代（使用栈）,从外部表示构造内存中的二叉树,,,
实体,算法,05ALG007,判空二叉树,入门,判断二叉树是否为空的操作，通常检查根指针是否为NULL。,,,O(1),O(1),基本状态检查,在进行其他操作前检查树是否有效,,,
实体,算法,05ALG008,求二叉树深度,入门,"计算二叉树的最大层数。递归定义：空树深度0，非空树深度 = max(左子树深度, 右子树深度) + 1。",,,O(n),O(h),递归,了解树的规模和平衡性,,,
实体,算法,05ALG009,查找二叉树结点,入门,在二叉树中查找具有特定值的结点。通常采用类似遍历的方式进行。,,,O(n) (最坏),O(h) (递归),递归搜索,定位树中特定元素,,,
实体,算法,05ALG010,输出二叉树,入门,将二叉树的结构以某种形式（如广义表）打印输出。,,,O(n),O(h),递归（类前序遍历）,可视化或调试树结构,,,
实体,算法,05ALG011,清除二叉树,入门,删除二叉树中的所有结点，释放其占用的内存空间，使树变为空树。通常采用后序遍历的递归思想。,,,O(n),O(h),递归（类后序遍历）,销毁不再使用的树,,,
实体,数据结构,05DS008,k叉树,入门,树中任意结点的度最多为k的树，也称多叉树或多元树。是树的一般形式。,取决于存储方式，标准链接方式指针域较多,最大度为k,,,,,,,
实体,算法,05ALG012,初始化树,入门,将普通树（k叉树）设置为空树的操作。,,,O(1),O(1),基本操作,创建新树之前,,,
实体,算法,05ALG013,建立树,中等,根据给定的输入（如广义表字符串）创建普通树（k叉树）的链接存储结构。通常需要栈辅助。,,,O(n),O(h),迭代（使用栈）,从外部表示构造内存中的树,,,
实体,算法,05ALG014,查找树结点,入门,在普通树（k叉树）中查找具有特定值的结点。,,,O(n),O(h),递归搜索（类先根遍历）,定位树中特定元素,,,
实体,算法,05ALG015,输出树,入门,将普通树（k叉树）的结构以广义表形式打印输出。,,,O(n),O(h),递归（类先根遍历）,可视化或调试树结构,,,
实体,算法,05ALG016,清除树,入门,删除普通树（k叉树）中的所有结点，释放其占用的内存空间。,,,O(n),O(h),递归（类后根遍历）,销毁不再使用的树,,,
实体,算法,05ALG017,判空树,入门,判断普通树（k叉树）是否为空的操作。,,,O(1),O(1),基本状态检查,在进行其他操作前检查树是否有效,,,
实体,算法,05ALG018,先根遍历,入门,普通树（k叉树）的遍历算法。访问顺序：根结点 -> 从左到右依次遍历各子树。递归实现。,,,O(n),O(h),递归、深度优先,复制树、输出树结构,,,
实体,算法,05ALG019,后根遍历,入门,普通树（k叉树）的遍历算法。访问顺序：从左到右依次遍历各子树 -> 根结点。递归实现。,,,O(n),O(h),递归、深度优先,计算树的某些属性（如高度）、释放树结点,,,
实体,数据结构,06DS001,二叉搜索树,中等,定义: 又称二叉排序树，它或是一棵空树，或者是一棵具有如下特性的非空二叉树：(1)若左子树非空，则左子树上所有结点的关键字均小于根结点的关键字；(2)若右子树非空，则右子树上所有结点的关键字均大于等于根结点的关键字；(3)左、右子树本身又各是一棵二叉搜索树。特性: 中序遍历结果为有序序列。适用场景: 需要高效查找、插入、删除有序数据的场景。,O(n)，通常采用链式存储结构。,有序性（中序遍历）、支持高效查找,,,,,,,
实体,数据结构,06DS002,堆,中等,定义: 具有特定性质的完全二叉树，分为小根堆（父结点值<=子结点值）和大根堆（父结点值>=子结点值）。特性: 根结点是整个堆中的最小值（小根堆）或最大值（大根堆）。适用场景: 优先队列实现、堆排序。,O(n)，通常采用顺序存储结构（数组）。,部分有序（堆性质）、根为极值、完全二叉树结构,,,,,,,
实体,数据结构,06DS003,小根堆,中等,定义: 堆的一种，满足特性：(1)若根存在左孩子，则根结点值<=左孩子值；(2)若根存在右孩子，则根结点值<=右孩子值；(3)左右子树也分别为小根堆。特性: 堆顶（根结点）存放的是整个堆中的最小值。适用场景: 高效获取最小值、优先队列（小顶）。,O(n)，通常采用顺序存储结构。,根为最小值,,,,,,,
实体,数据结构,06DS004,大根堆,中等,定义: 堆的一种，满足特性：(1)若根存在左孩子，则根结点值>=左孩子值；(2)若根存在右孩子，则根结点值>=右孩子值；(3)左右子树也分别为大根堆。特性: 堆顶（根结点）存放的是整个堆中的最大值。适用场景: 高效获取最大值、优先队列（大顶）。,O(n)，通常采用顺序存储结构。,根为最大值,,,,,,,
实体,数据结构,06DS005,哈夫曼树,中等,定义: 又称最优二叉树，指对于n个带权叶子结点构成的所有二叉树中，带权路径长度(WPL)最小的二叉树。特性: 权值越大的叶子结点离根越近，树中只有度为0（叶子）和度为2（分支）的结点。适用场景: 数据压缩（哈夫曼编码）。,O(n)，通常采用链式存储结构。,带权路径长度最小,,,,,,,
实体,数据结构,06DS006,线索二叉树,中等,定义: 利用二叉树结点中的空指针域（原本指向NULL的指针）存放指向该结点在某种遍历次序下的前驱或后继结点的指针（线索）。特性: 便于快速查找结点的直接前驱和后继，实现非递归遍历。适用场景: 需要频繁查找前驱/后继或进行非递归遍历的二叉树应用。,O(n)，链式存储，每个结点增加两个标志位以区分指针是孩子还是线索。,利用空指针域存储前驱/后继信息,,,,,,,
实体,数据结构,06DS007,平衡二叉树,高级,"定义: 又称AVL树，它或者是一棵空树，或者是一棵左右子树的高度差的绝对值不超过1，并且左右两棵子树也都是平衡二叉树的二叉搜索树。特性: 通过旋转操作（LL, RR, LR, RL）维持树的平衡，确保查找、插入、删除操作的时间复杂度稳定在O(log n)。适用场景: 对查找性能要求较高且数据动态变化的场景。",O(n)，链式存储，结点通常需要额外存储平衡因子。,自平衡性、高效稳定的查找性能,,,,,,,
实体,算法,06ALG001,查找 (二叉搜索树),入门,"原理: 从根结点开始，若查找值等于当前结点值，则成功；若小于，则在左子树中查找；若大于，则在右子树中查找。递归或迭代实现。伪代码: 见教材 bool Find(BST, item) 和 bool Find1(BST, item)。",,,平均O(log n)，最坏O(n),递归: 平均O(log n)，最坏O(n); 非递归: O(1),比较、分治,在二叉搜索树中定位特定值的结点。,,,
实体,算法,06ALG002,更新 (二叉搜索树),入门,原理: 首先执行查找操作定位到目标结点，若找到，则用新值更新该结点的数据域。,,,平均O(log n)，最坏O(n),递归: 平均O(log n)，最坏O(n); 非递归: O(1),查找与修改,修改二叉搜索树中已存在结点的值。,,,
实体,算法,06ALG003,插入 (二叉搜索树),入门,"原理: 从根结点开始查找待插入值的位置，直到找到一个空链接，将新结点插入此处。递归或迭代实现。伪代码: 见教材 void Insert(BST, item) 和 void Insert1(BST, item)。",,,平均O(log n)，最坏O(n),递归: 平均O(log n)，最坏O(n); 非递归: O(1),查找插入点、链接,向二叉搜索树中添加新元素，保持其性质。,,,
实体,算法,06ALG004,删除 (二叉搜索树),中等,"原理: 查找到待删除结点后，分三种情况处理：(1) 叶子结点：直接删除。(2) 单分支结点：用其子结点替换。(3) 双分支结点：用其右子树的最小结点（中序后继）或左子树的最大结点（中序前驱）替换，然后删除那个替换结点。伪代码: 见教材 bool Delete(BST, item)。",,,平均O(log n)，最坏O(n),递归: 平均O(log n)，最坏O(n); 非递归: O(1),分情况讨论、替换,从二叉搜索树中移除指定元素，保持其性质。,,,
实体,算法,06ALG005,插入 (堆),入门,"原理: 将新元素添加到堆的末尾（数组末尾），然后通过与其父结点比较并交换（向上调整或sift-up），直到满足堆性质或到达根结点。伪代码: 见教材 void InsertHeap(HBT, item)。",,,O(log n),O(1),添加、向上调整,向堆中添加元素，维持堆结构。,,,
实体,算法,06ALG006,删除 (堆),入门,原理: 删除堆顶元素（通常是最大或最小值）。将堆底元素移到堆顶，然后通过与子结点比较并交换（向下调整或sift-down），恢复堆性质。伪代码: 见教材 ElemType DeleteHeap(HBT)。,,,O(log n),O(1),替换、向下调整,从堆中移除并获取极值元素。,,,
实体,算法,06ALG008,线索化,中等,"原理: 在对二叉树进行某种遍历（如中序）的过程中，检查结点的空左/右指针域，将其设置为指向该结点在此遍历序列中的前驱/后继结点的线索，并设置相应的标志位。伪代码: 见教材 void InThread(HBT, pre)。",,,O(n),O(h)（递归栈）,遍历、指针修改,将普通二叉树转换为线索二叉树。,,,
实体,算法,06ALG009,CreateHuffman,中等,"原理: (1) 初始化n棵只有一个带权根结点的二叉树森林。(2) 重复n-1次：选取森林中权值最小的两棵树，合并成一棵新树（新根权值为两者之和），用新树替换原来的两棵树。(3) 最终得到唯一的哈夫曼树。伪代码: 见教材 BTreeNode CreateHuffman(a, n)。",,,O(n log n)（使用优先队列优化选择）或 O(n^2)（简单查找）,O(n),贪心算法,根据给定的权值构造哈夫曼树。,,,
实体,算法,06ALG010,WeightPathLength,入门,"原理: 递归计算哈夫曼树的带权路径长度。若当前结点是叶子，返回其权值乘以其深度；否则，返回左右子树的WPL之和。伪代码: 见教材 ElemType WeightPathLength(FBT, len)。",,,O(n),O(h)，h为树高,递归,计算哈夫曼树的总权值（WPL）。,,,
实体,算法,06ALG011,HuffmanCoding,中等,"原理: 从哈夫曼树的根结点开始递归遍历，向左子树走路径编码加'0'，向右子树走加'1'。到达叶子结点时，记录下的路径编码即为该叶子结点代表字符的哈夫曼编码。伪代码: 见教材 void HuffManCoding(FBT, len)。",,,O(n),O(h)，h为树高,递归、回溯,根据哈夫曼树生成各字符的哈夫曼编码。,,,
实体,算法,06ALG012,LL型调整,中等,原理: 当在平衡二叉树的某个结点(A)的左孩子(B)的左子树上插入新结点导致A失衡时进行。执行一次右旋转操作：B提升为新的根，A成为B的右孩子，B原来的右子树成为A的左子树。伪代码: 见教材图6-16。,,,O(1),O(1),单旋转（右旋）,恢复平衡二叉树因LL型插入导致的失衡。,,,
实体,算法,06ALG013,RR型调整,中等,原理: 当在平衡二叉树的某个结点(A)的右孩子(B)的右子树上插入新结点导致A失衡时进行。执行一次左旋转操作：B提升为新的根，A成为B的左孩子，B原来的左子树成为A的右子树。伪代码: 见教材图6-18。,,,O(1),O(1),单旋转（左旋）,恢复平衡二叉树因RR型插入导致的失衡。,,,
实体,算法,06ALG014,LR型调整,中等,原理: 当在平衡二叉树的某个结点(A)的左孩子(B)的右子树(根为C)上插入新结点导致A失衡时进行。先对B执行一次左旋转（RR型），再对A执行一次右旋转（LL型）。伪代码: 见教材图6-19。,,,O(1),O(1),双旋转（先左后右）,恢复平衡二叉树因LR型插入导致的失衡。,,,
实体,算法,06ALG015,RL型调整,中等,原理: 当在平衡二叉树的某个结点(A)的右孩子(B)的左子树(根为C)上插入新结点导致A失衡时进行。先对B执行一次右旋转（LL型），再对A执行一次左旋转（RR型）。伪代码: 见教材图6-21。,,,O(1),O(1),双旋转（先右后左）,恢复平衡二叉树因RL型插入导致的失衡。,,,
实体,算法,06ALG016,CreateBSTree,入门,"原理: 初始化一个空二叉搜索树，然后遍历给定的元素数组，依次调用二叉搜索树的插入算法将每个元素插入树中。伪代码: 见教材 void CreateBSTree(BST, a, n)。",,,平均O(n log n)，最坏O(n^2),取决于插入算法（递归或非递归）,迭代调用插入,根据一组初始数据构建二叉搜索树。,,,
实体,算法,06ALG017,CreateThread1,中等,"原理: 初始化一个空树，然后遍历给定的元素数组，依次调用专门的带线索链接的插入算法（如InsertThread1）将每个元素插入，构建带线索的二叉搜索树。伪代码: 见教材 void CreateThread1(HBT, a, n)。",,,平均O(n log n)，最坏O(n^2),O(1)（若插入非递归）,迭代调用带线索插入,根据一组初始数据直接构建线索二叉搜索树。,,,
实体,算法,06ALG018,ThInorder,入门,原理: 利用中序线索进行非递归中序遍历。(1)找到中序序列的第一个结点（最左下结点）。(2)循环：访问当前结点，然后利用InorderNext算法找到下一个中序后继结点，直到后继为空。伪代码: 见教材 void ThInorder(HBT)。,,,O(n),O(1),利用线索迭代,高效、无栈的中序遍历线索二叉树。,,,
实体,算法,06ALG019,InThread,中等,"原理: 通过递归中序遍历二叉树，在访问结点V时：(1)如果V的左指针为空，则将其指向其中序前驱。(2)如果其中序前驱的右指针为空，则将其指向V。同时更新线索标志。伪代码: 见教材 void InThread(HBT, pre)。",,,O(n),O(h)，h为树高（递归栈）,递归遍历，线索链接,将普通二叉树转换为中序线索二叉树。,,,
实体,概念,06CON003,路径,入门,定义: 树中从一个结点到另一个结点的结点序列。,,,,,,,,,
实体,概念,06CON004,路径长度,入门,定义: 路径上所包含的分支（边）的数量。,,,,,,,,,
实体,概念,06CON005,结点的权,入门,定义: 赋予树中结点的具有特定含义的数值。在哈夫曼树中通常代表字符频率或重要性。,,,,,,,,,
实体,概念,06CON006,带权路径长度,中等,定义: 树中所有叶子结点的带权路径长度之和，记为WPL。其中，叶子结点的带权路径长度 = 该叶子结点的权值 × 根到该叶子的路径长度。哈夫曼树的目标是最小化WPL。,,,,,,,,,
实体,概念,06CON007,线索,中等,定义: 在线索二叉树中，利用空闲指针域存储的指向结点在特定遍历序列中的前驱或后继结点的指针。分为左线索（指向前驱）和右线索（指向后继）。,,,,,,,,,
实体,概念,06CON008,平衡因子,中等,定义: 二叉树中结点的左子树高度减去右子树高度的值。在平衡二叉树（AVL树）中，每个结点的平衡因子只能是-1、0或1。,,,,,,,,,
实体,概念,06CON009,最小不平衡子树,中等,定义: 在向平衡二叉树插入或删除结点导致失衡后，以距离插入/删除点最近的那个平衡因子绝对值大于1的结点为根的子树。是进行平衡调整的目标。,,,,,,,,,
实体,概念,06CON011,前驱,入门,定义: 在某个线性序列（如遍历序列）中，紧邻于某结点之前的那个结点。,,,,,,,,,
实体,概念,06CON012,后继,入门,定义: 在某个线性序列（如遍历序列）中，紧邻于某结点之后的那个结点。,,,,,,,,,
实体,概念,06CON013,中序前驱,入门,定义: 在二叉树的中序遍历序列中，某结点的前驱结点。,,,,,,,,,
实体,概念,06CON014,中序后继,入门,定义: 在二叉树的中序遍历序列中，某结点的后继结点。,,,,,,,,,
实体,数据结构,07DS001,图,中等,"图(graph)是图型结构的简称，是一种复杂的非线性数据结构。由顶点集V和边集E组成，G=(V,E)。V是顶点集合，E是V上顶点对（序偶或无序对）的集合，即边的集合。允许每个顶点有任意多个前驱和后继。线性表和树可看作图的特例。广泛应用于交通图、线路图、结构图等。","依赖于具体表示法（邻接矩阵O(n^2), 邻接表O(n+e), 边集数组O(e))",非线性、顶点间关系灵活（多对多）,,,,,,,
实体,概念,07CON001,顶点,入门,图的基本组成单元，代表实体。通常用 V 表示顶点集合。,,,,,,,,,
实体,概念,07CON002,边,入门,连接图中两个顶点，表示它们之间关系的线。可以是序偶（有向边）或无序对（无向边）。通常用 E 表示边集合。,,,,,,,,,
实体,概念,07CON003,顶点集,入门,图中所有顶点的集合，通常记为V(G)。,,,,,,,,,
实体,概念,07CON004,边集,入门,图中所有边的集合，通常记为E(G)。边可以是序偶（有向图）或无序对（无向图）。,,,,,,,,,
实体,概念,07CON006,无向边,入门,"没有方向的边，由一个无序顶点对 (vi, vj) 表示。",,,,,,,,,
实体,数据结构,07DS002,有向图,中等,边集 E(G) 由有向边（序偶）组成的图。,同图，具体取决于存储结构。,边具有方向性。,,,,,,,
实体,数据结构,07DS003,无向图,中等,边集 E(G) 由无向边（无序对）组成的图。,同图，具体取决于存储结构。,边没有方向性。,,,,,,,
实体,概念,07CON007,端点,入门,"一条边所连接的两个顶点。在无向图中，一条边 (vi, vj) 的两个端点是 vi 和 vj。在有向图中，边 <vi, vj> 的起点是 vi，终点是 vj。",,,,,,,,,
实体,概念,07CON008,邻接点,入门,"在无向图中，若存在边 (vi, vj)，则 vi 和 vj 互为邻接点。在有向图中，若存在边 <vi, vj>，则称 vi 和 vj 互为邻接点，vj 是 vi 的出边邻接点，vi 是 vj 的入边邻接点。",,,,,,,,,
实体,概念,07CON009,出边,入门,"在有向图中，从顶点 vi 出发的边 <vi, vj> 称为 vi 的一条出边。",,,,,,,,,
实体,概念,07CON010,入边,入门,"在有向图中，指向顶点 vj 的边 <vi, vj> 称为 vj 的一条入边。",,,,,,,,,
实体,概念,07CON011,出边邻接点,入门,"在有向图中，若存在边 <vi, vj>，则 vj 是 vi 的出边邻接点。",,,,,,,,,
实体,概念,07CON012,入边邻接点,入门,"在有向图中，若存在边 <vi, vj>，则 vi 是 vj 的入边邻接点。",,,,,,,,,
实体,概念,07CON014,入度,入门,有向图中顶点 v 的入度 ID(v) 是以该顶点为终点的入边的数目。,,,,,,,,,
实体,概念,07CON015,出度,入门,有向图中顶点 v 的出度 OD(v) 是以该顶点为起点的出边的数目。,,,,,,,,,
实体,概念,07CON016,完全图,入门,无向图中任意两个顶点间都存在边；有向图中任意两个顶点间都存在方向相反的两条边。n 个顶点的无向完全图有 n(n-1)/2 条边，有向完全图有 n(n-1) 条边。,,,,,,,,,
实体,概念,07CON017,稠密图,入门,边数接近完全图的图。,,,,,,,,,
实体,概念,07CON018,稀疏图,入门,边数远小于完全图边数的图，通常边数 e 与顶点数 n 同数量级。,,,,,,,,,
实体,概念,07CON019,子图,入门,"设有两个图 G=(V,E) 和 G'=(V',E')，若 V' 是 V 的子集，E' 是 E 的子集，且 E' 中涉及的顶点都在 V' 中，则称 G' 是 G 的子图。",,,,,,,,,
实体,概念,07CON022,简单路径,入门,路径序列中所有顶点均不相同的路径。,,,,,,,,,
实体,概念,07CON023,回路,入门,路径的起点和终点相同的路径，也称为环。,,,,,,,,,
实体,概念,07CON024,简单回路,入门,除路径的起点和终点相同外，其余顶点均不相同的回路。,,,,,,,,,
实体,概念,07CON025,连通,入门,在无向图中，若从顶点 vi 到顶点 vj 有路径，则称 vi 和 vj 是连通的。,,,,,,,,,
实体,概念,07CON026,连通图,入门,无向图中任意两个顶点都连通的图。,,,,,,,,,
实体,概念,07CON027,非连通图,入门,存在不连通顶点的无向图。,,,,,,,,,
实体,概念,07CON028,连通分量,中等,无向图的极大连通子图。非连通图有多个连通分量。,,,,,,,,,
实体,概念,07CON029,强连通图,中等,有向图中，任意两个顶点 vi 和 vj 之间都存在从 vi 到 vj 和从 vj 到 vi 的路径。,,,,,,,,,
实体,概念,07CON030,强连通分量,中等,有向图的极大强连通子图。非强连通图有多个强连通分量。,,,,,,,,,
实体,概念,07CON031,权,入门,图中每条边上标定的具有某种含义的数值，通常为非负实数。,,,,,,,,,
实体,数据结构,07DS004,带权图,中等,边上带有权的图，也常称为网(network)。,需要在存储结构中额外记录边的权值信息。,边附带权值。,,,,,,,
实体,数据结构,07DS005,邻接矩阵,入门,"用n阶方阵A表示n个顶点的图。A[i,j]=1（或权值）表示顶点i到j有边，A[i,j]=0（或无穷大）表示无边。无向图矩阵对称。",O(n^2)。,"查找边(i,j)时间O(1)；求顶点度或邻接点时间O(n)；适用于稠密图。",,,,,,,
实体,数据结构,07DS006,邻接表,入门,对图中每个顶点vi建立一个单链表，存储其所有邻接点（对有向图通常是出边邻接点）以及边的信息（如权值）。各链表的头指针存储在一个数组中。,O(n+e)。,查找顶点vi的出边邻接点时间O(度(vi))；查找入边不便（需逆邻接表或遍历）；适用于稀疏图。,,,,,,,
实体,数据结构,07DS007,边集数组,入门,用一个一维数组存储图中所有边的信息，每个数组元素包含一条边的起点、终点和权值。,O(e)。,适合对边进行遍历处理的算法；查找特定边或顶点相关信息（度、邻接点）效率低，需O(e)；适用于稀疏图。,,,,,,,
实体,数据结构,07DS008,逆邻接表,入门,类似于邻接表，但每个顶点的链表存储的是指向该顶点的所有入边信息（主要是入边邻接点序号和权值）。,O(n+e)。,方便查找有向图中顶点的入度、入边和入边邻接点。,,,,,,,
实体,数据结构,07DS009,十字邻接表,中等,用于有向图的一种链式存储结构。每个顶点有一个入边链表头指针和出边链表头指针。每个边结点包含起点、终点、权值、指向同起点的下一条出边结点的指针、指向同终点的下一条入边结点的指针。,O(n+e)。,方便地查找顶点的出边信息和入边信息。,,,,,,,
实体,算法,07ALG001,图的遍历,入门,从图中某一顶点出发，按照某种搜索策略访问图中所有顶点一次且仅一次的过程。需要使用辅助数组标记顶点访问状态以避免重复访问。,,,邻接矩阵O(n^2)，邻接表O(n+e),O(n),搜索,图的基本操作，是许多图算法的基础，如连通性判断、路径查找等。,,,
实体,算法,07ALG002,深度优先搜索,入门,一种图遍历策略。从初始点出发，访问该顶点，然后选择一个未访问的邻接点深入访问，直到该路径到达尽头，再回溯到上一个顶点，选择另一未访问邻接点继续深入。类似树的先根遍历，通常用递归或栈实现。,,,邻接矩阵O(n^2)，邻接表O(n+e),O(n)（递归栈或辅助栈）,递归、回溯、栈,查找路径、判断连通性、拓扑排序、查找关节点/桥等。,,,
实体,算法,07ALG003,广度优先搜索,入门,一种图遍历策略。从初始点出发，访问该顶点，然后依次访问其所有未访问过的邻接点，再按这些邻接点被访问的顺序，依次访问它们各自未被访问过的邻接点。类似树的层序遍历，通常用队列实现。,,,邻接矩阵O(n^2)，邻接表O(n+e),O(n)（队列）,迭代、队列,查找无权图最短路径、层序遍历。,,,
实体,概念,08CON003,生成树,中等,连通图G的一个子图G'，如果G'包含了G的所有顶点，并且G'是树（即连通且无回路），则称G'为G的生成树。生成树包含n个顶点和n-1条边。,,,,,,,,,
实体,概念,08CON004,最小生成树,中等,在一个带权连通图中，所有生成树中边权值总和最小的那棵生成树，称为最小生成树（MST）。用于解决网络建设中成本最低的问题。,,,,,,,,,
实体,算法,08ALG001,普里姆算法,中等,从一个顶点开始，逐步扩展生成树，每次选择连接已选顶点集与未选顶点集之间权值最小的边，直到包含所有顶点。,,,O(n^2)（使用邻接矩阵），O(e log n)（使用优先队列和邻接表）,O(n)或O(n^2)取决于实现,贪心,求解稠密图的最小生成树,,,
实体,算法,08ALG002,克鲁斯卡尔算法,中等,将所有边按权值从小到大排序，依次选择权值最小且不会形成回路的边加入生成树，直到选够n-1条边。,,,O(e log e)或O(e log n)（主要取决于排序和并查集操作）,O(e+n) 或 O(n^2)（取决于实现和边集存储）,贪心,求解稀疏图的最小生成树,,,
实体,概念,08CON006,最短路径,中等,在图中，从一个顶点到另一个顶点的所有路径中，经过的边数最少（无权图）或边权值之和最小（带权图）的路径。,,,,,,,,,
实体,算法,08ALG003,狄克斯特拉算法,中等,用于计算带权图中单个源点到所有其他顶点的最短路径。采用贪心策略，每次选择距离源点最近且未访问的顶点加入已确定最短路径的集合。,,,O(n^2)（使用邻接矩阵），O(e log n)（使用优先队列和邻接表）,O(n),贪心,求解单源最短路径问题（边权非负）,,,
实体,算法,08ALG004,弗洛伊德算法,中等,用于计算带权图中任意两个顶点之间的最短路径。通过动态规划思想，逐步考虑中间顶点来更新所有顶点对之间的最短距离。,,,O(n^3),O(n^2),动态规划,求解所有顶点对之间的最短路径（可处理负权边，不能处理负权回路）,,,
实体,概念,08CON007,AOV网,中等,顶点活动网（Activity On Vertex network），用顶点表示活动，用有向边表示活动之间的先后（前驱）关系。常用于表示工程或项目计划，必须是无环图。,,,,,,,,,
实体,概念,08CON008,拓扑序列,中等,"对有向无环图（DAG）的所有顶点进行线性排序，使得图中任意一条有向边<u, v>，顶点u都在顶点v之前出现。一个图的拓扑序列可能不唯一。",,,,,,,,,
实体,算法,08ALG005,拓扑排序,中等,生成有向无环图（DAG）的拓扑序列的过程。常用方法是重复选择入度为0的顶点并输出，然后移除该顶点及其出边。,,,O(n+e),O(n),基于入度/DFS,判断图是否有环、任务调度、依赖解析等,,,
实体,概念,08CON011,AOE网,中等,边活动网（Activity On Edge network），用带权有向边表示活动及其持续时间，用顶点表示事件（活动的开始或结束）。用于工程估时和关键路径分析，必须是无环图。,,,,,,,,,
实体,概念,08CON012,事件,中等,在AOE网中，表示活动的开始或结束状态的点，是活动的转接点。事件本身不消耗时间。,,,,,,,,,
实体,概念,08CON013,活动,中等,在AOE网中，表示工程中的具体任务，由带权有向边表示，权值代表活动持续时间。,,,,,,,,,
实体,概念,08CON014,源点,入门,图中一个特殊的顶点，通常指没有入边的顶点（在AOE/AOV网中表示工程开始）或最短路径问题的起点。,,,,,,,,,
实体,概念,08CON015,汇点,入门,图中一个特殊的顶点，通常指没有出边的顶点（在AOE/AOV网中表示工程结束）。,,,,,,,,,
实体,概念,08CON016,关键路径,高级,在AOE网中，从源点到汇点的所有路径中，长度（总持续时间）最长的那条（或多条）路径。关键路径的长度决定了整个工程的最短完成时间。,,,,,,,,,
实体,概念,08CON017,关键活动,中等,在AOE网中，位于关键路径上的活动。这些活动的开始时间余量为0，任何延迟都会导致整个工程延期。,,,,,,,,,
实体,算法,08ALG006,关键路径算法,高级,计算AOE网中关键路径的过程。通常涉及计算每个事件的最早发生时间（正向拓扑排序）和最迟发生时间（逆向拓扑排序），然后确定每个活动的最早、最迟开始时间，找出时间余量为0的关键活动，从而确定关键路径。,,,O(n+e),O(n+e),拓扑排序、动态规划思想,项目管理、工程进度安排与优化,,,
关系,,,,,,,,,,,,理论依赖,01DS001,01CON001
关系,,,,,,,,,,,,理论依赖,01DS001,01CON002
关系,,,,,,,,,,,,理论依赖,01DS002,01CON001
关系,,,,,,,,,,,,理论依赖,01DS003,01CON001
关系,,,,,,,,,,,,理论依赖,01DS004,01CON001
关系,,,,,,,,,,,,理论依赖,01DS005,01CON001
关系,,,,,,,,,,,,继承,01DS004,01DS006
关系,,,,,,,,,,,,继承,01DS005,01DS006
关系,,,,,,,,,,,,理论依赖,01ALG001,01CON003
关系,,,,,,,,,,,,理论依赖,01ALG001,01CON004
关系,,,,,,,,,,,,理论依赖,01CON005,01DS001
关系,,,,,,,,,,,,理论依赖,01CON002,01CON013
关系,,,,,,,,,,,,理论依赖,01CON002,01CON014
关系,,,,,,,,,,,,理论依赖,01CON002,01CON015
关系,,,,,,,,,,,,理论依赖,01CON002,01CON016
关系,,,,,,,,,,,,理论依赖,01CON007,01CON008
关系,,,,,,,,,,,,理论依赖,01CON009,01CON008
关系,,,,,,,,,,,,理论依赖,01DS003,01CON019
关系,,,,,,,,,,,,理论依赖,01DS003,01CON020
关系,,,,,,,,,,,,理论依赖,01DS004,01CON021
关系,,,,,,,,,,,,理论依赖,01DS004,01CON022
关系,,,,,,,,,,,,理论依赖,01DS004,01CON023
关系,,,,,,,,,,,,理论依赖,01DS005,01CON017
关系,,,,,,,,,,,,理论依赖,01DS005,01CON018
关系,,,,,,,,,,,,理论依赖,01CON005,01CON024
关系,,,,,,,,,,,,理论依赖,01DS001,01CON007
关系,,,,,,,,,,,,理论依赖,01CON006,01CON007
关系,,,,,,,,,,,,使用,01ALG001,01DS001
关系,,,,,,,,,,,,理论依赖,01CON025,01CON008
关系,,,,,,,,,,,,理论依赖,01CON009,01CON025
关系,,,,,,,,,,,,理论依赖,01CON007,01CON025
关系,,,,,,,,,,,,继承,02DS002,02DS001
关系,,,,,,,,,,,,继承,02DS003,02DS001
关系,,,,,,,,,,,,继承,02DS004,02DS003
关系,,,,,,,,,,,,继承,02DS005,02DS003
关系,,,,,,,,,,,,变体,02DS006,02DS003
关系,,,,,,,,,,,,理论依赖,02DS002,01CON013
关系,,,,,,,,,,,,理论依赖,02DS003,01CON014
关系,,,,,,,,,,,,理论依赖,02DS003,01CON017
关系,,,,,,,,,,,,理论依赖,02DS003,02CON004
关系,,,,,,,,,,,,理论依赖,02DS003,02CON005
关系,,,,,,,,,,,,理论依赖,02DS002,02CON007
关系,,,,,,,,,,,,理论依赖,02DS003,02CON008
关系,,,,,,,,,,,,操作绑定,02ALG001,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG002,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG003,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG004,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG005,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG006,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG007,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG008,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG009,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG010,02DS001
关系,,,,,,,,,,,,操作绑定,02ALG011,02DS001
关系,,,,,,,,,,,,使用,02ALG011,02ALG012
关系,,,,,,,,,,,,使用,02ALG013,02DS001
关系,,,,,,,,,,,,使用,02ALG014,02DS001
关系,,,,,,,,,,,,理论依赖,02ALG013,02CON006
关系,,,,,,,,,,,,理论依赖,02ALG014,02CON006
关系,,,,,,,,,,,,使用,03DS002,01DS002
关系,,,,,,,,,,,,使用,03DS003,01DS002
关系,,,,,,,,,,,,使用,03DS002,03DS014
关系,,,,,,,,,,,,操作绑定,03ALG001,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG002,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG003,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG004,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG005,03DS002
关系,,,,,,,,,,,,使用,03ALG005,03ALG016
关系,,,,,,,,,,,,操作绑定,03ALG006,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG007,03DS002
关系,,,,,,,,,,,,使用,03ALG007,03ALG015
关系,,,,,,,,,,,,操作绑定,03ALG008,03DS002
关系,,,,,,,,,,,,使用,03ALG008,03ALG016
关系,,,,,,,,,,,,操作绑定,03ALG009,03DS002
关系,,,,,,,,,,,,使用,03ALG009,03ALG016
关系,,,,,,,,,,,,操作绑定,03ALG010,03DS002
关系,,,,,,,,,,,,使用,03ALG010,03ALG016
关系,,,,,,,,,,,,操作绑定,03ALG011,03DS002
关系,,,,,,,,,,,,使用,03ALG011,03ALG016
关系,,,,,,,,,,,,操作绑定,03ALG012,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG013,03DS002
关系,,,,,,,,,,,,操作绑定,03ALG014,03DS002
关系,,,,,,,,,,,,使用,03DS003,02DS004
关系,,,,,,,,,,,,操作绑定,03ALG017,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG018,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG019,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG020,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG021,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG022,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG023,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG024,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG025,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG026,03DS003
关系,,,,,,,,,,,,操作绑定,03ALG027,03DS003
关系,,,,,,,,,,,,使用,03ALG027,03ALG025
关系,,,,,,,,,,,,操作绑定,03ALG028,03DS003
关系,,,,,,,,,,,,使用,03ALG028,03ALG023
关系,,,,,,,,,,,,使用,03ALG028,03ALG025
关系,,,,,,,,,,,,操作绑定,03ALG029,03DS003
关系,,,,,,,,,,,,使用,03ALG029,03ALG023
关系,,,,,,,,,,,,使用,03ALG029,03ALG025
关系,,,,,,,,,,,,理论依赖,03DS005,03CON001
关系,,,,,,,,,,,,使用,03DS005,03DS006
关系,,,,,,,,,,,,使用,03DS007,03DS006
关系,,,,,,,,,,,,使用,03DS008,03DS006
关系,,,,,,,,,,,,变体,03DS009,03DS008
关系,,,,,,,,,,,,变体,03DS010,03DS008
关系,,,,,,,,,,,,操作绑定,03ALG030,03DS005
关系,,,,,,,,,,,,操作绑定,03ALG031,03DS007
关系,,,,,,,,,,,,操作绑定,03ALG032,03DS010
关系,,,,,,,,,,,,操作绑定,03ALG033,03DS007
关系,,,,,,,,,,,,操作绑定,03ALG034,03DS007
关系,,,,,,,,,,,,操作绑定,03ALG035,03DS007
关系,,,,,,,,,,,,优化,03ALG035,03ALG034
关系,,,,,,,,,,,,操作绑定,03ALG036,03DS009
关系,,,,,,,,,,,,理论依赖,03DS011,03CON002
关系,,,,,,,,,,,,理论依赖,03DS011,03CON003
关系,,,,,,,,,,,,理论依赖,03DS011,03CON004
关系,,,,,,,,,,,,使用,03DS012,03DS011
关系,,,,,,,,,,,,变体,03DS013,03DS012
关系,,,,,,,,,,,,操作绑定,03ALG037,03DS012
关系,,,,,,,,,,,,理论依赖,03ALG037,03CON005
关系,,,,,,,,,,,,操作绑定,03ALG038,03DS012
关系,,,,,,,,,,,,理论依赖,03ALG038,03CON006
关系,,,,,,,,,,,,操作绑定,03ALG039,03DS012
关系,,,,,,,,,,,,操作绑定,03ALG040,03DS012
关系,,,,,,,,,,,,继承,04DS002,02DS001
关系,,,,,,,,,,,,继承,04DS003,02DS001
关系,,,,,,,,,,,,继承,04DS004,04DS002
关系,,,,,,,,,,,,继承,04DS005,04DS002
关系,,,,,,,,,,,,继承,04DS006,04DS003
关系,,,,,,,,,,,,继承,04DS007,04DS003
关系,,,,,,,,,,,,变体,04DS008,04DS003
关系,,,,,,,,,,,,操作绑定,04ALG001,04DS002
关系,,,,,,,,,,,,操作绑定,04ALG002,04DS002
关系,,,,,,,,,,,,操作绑定,04ALG003,04DS002
关系,,,,,,,,,,,,操作绑定,04ALG004,04DS002
关系,,,,,,,,,,,,操作绑定,04ALG005,04DS002
关系,,,,,,,,,,,,操作绑定,04ALG006,04DS002
关系,,,,,,,,,,,,操作绑定,04ALG007,04DS003
关系,,,,,,,,,,,,操作绑定,04ALG008,04DS003
关系,,,,,,,,,,,,操作绑定,04ALG009,04DS003
关系,,,,,,,,,,,,操作绑定,04ALG010,04DS003
关系,,,,,,,,,,,,操作绑定,04ALG011,04DS003
关系,,,,,,,,,,,,操作绑定,04ALG012,04DS003
关系,,,,,,,,,,,,使用,04ALG013,04DS002
关系,,,,,,,,,,,,使用,04ALG014,04DS002
关系,,,,,,,,,,,,使用,04ALG015,04DS002
关系,,,,,,,,,,,,理论依赖,04ALG015,04CON004
关系,,,,,,,,,,,,使用,04ALG016,04DS002
关系,,,,,,,,,,,,理论依赖,04ALG016,04CON003
关系,,,,,,,,,,,,理论依赖,04ALG016,04CON004
关系,,,,,,,,,,,,理论依赖,04ALG016,04CON005
关系,,,,,,,,,,,,理论依赖,04ALG017,04CON006
关系,,,,,,,,,,,,理论依赖,04ALG018,04CON006
关系,,,,,,,,,,,,理论依赖,04ALG019,04CON006
关系,,,,,,,,,,,,理论依赖,04ALG020,04CON006
关系,,,,,,,,,,,,使用,04ALG020,04DS002
关系,,,,,,,,,,,,使用,04ALG020,04DS003
关系,,,,,,,,,,,,理论依赖,04ALG021,04CON006
关系,,,,,,,,,,,,理论依赖,04DS002,04CON001
关系,,,,,,,,,,,,理论依赖,04DS003,04CON002
关系,,,,,,,,,,,,理论依赖,04CON006,04DS002
关系,,,,,,,,,,,,理论依赖,05DS001,01CON021
关系,,,,,,,,,,,,理论依赖,05DS001,05CON002
关系,,,,,,,,,,,,理论依赖,05DS001,01CON017
关系,,,,,,,,,,,,理论依赖,05DS001,05CON004
关系,,,,,,,,,,,,理论依赖,05DS001,01CON022
关系,,,,,,,,,,,,理论依赖,05DS001,01CON023
关系,,,,,,,,,,,,理论依赖,05DS001,05CON007
关系,,,,,,,,,,,,理论依赖,05DS001,05CON008
关系,,,,,,,,,,,,理论依赖,05DS001,05CON009
关系,,,,,,,,,,,,理论依赖,05DS001,05CON010
关系,,,,,,,,,,,,理论依赖,05DS001,05CON011
关系,,,,,,,,,,,,理论依赖,05DS001,05CON012
关系,,,,,,,,,,,,理论依赖,05DS001,05CON013
关系,,,,,,,,,,,,理论依赖,05DS001,05CON014
关系,,,,,,,,,,,,继承,05DS002,05DS001
关系,,,,,,,,,,,,继承,05DS008,05DS001
关系,,,,,,,,,,,,理论依赖,05DS002,05CON015
关系,,,,,,,,,,,,理论依赖,05DS002,05CON016
关系,,,,,,,,,,,,理论依赖,05DS002,05CON017
关系,,,,,,,,,,,,理论依赖,05DS002,05CON018
关系,,,,,,,,,,,,继承,05DS003,05DS002
关系,,,,,,,,,,,,继承,05DS004,05DS002
关系,,,,,,,,,,,,继承,05DS005,05DS002
关系,,,,,,,,,,,,继承,05DS003,05DS004
关系,,,,,,,,,,,,继承,05DS004,05DS005
关系,,,,,,,,,,,,理论依赖,05DS002,01CON013
关系,,,,,,,,,,,,理论依赖,05DS002,01CON014
关系,,,,,,,,,,,,理论依赖,05DS008,01CON013
关系,,,,,,,,,,,,理论依赖,05DS008,01CON014
关系,,,,,,,,,,,,理论依赖,01CON014,05CON021
关系,,,,,,,,,,,,操作绑定,05ALG001,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG002,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG003,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG004,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG005,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG006,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG007,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG008,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG009,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG010,05DS002
关系,,,,,,,,,,,,操作绑定,05ALG011,05DS002
关系,,,,,,,,,,,,使用,05ALG001,04DS002
关系,,,,,,,,,,,,使用,05ALG002,04DS002
关系,,,,,,,,,,,,使用,05ALG003,04DS002
关系,,,,,,,,,,,,使用,05ALG004,04DS003
关系,,,,,,,,,,,,使用,05ALG006,04DS002
关系,,,,,,,,,,,,理论依赖,05ALG006,03DS011
关系,,,,,,,,,,,,操作绑定,05ALG012,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG013,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG014,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG015,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG016,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG017,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG018,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG019,05DS008
关系,,,,,,,,,,,,操作绑定,05ALG004,05DS008
关系,,,,,,,,,,,,使用,05ALG013,04DS002
关系,,,,,,,,,,,,使用,05ALG018,04DS002
关系,,,,,,,,,,,,使用,05ALG019,04DS002
关系,,,,,,,,,,,,理论依赖,05ALG013,03DS011
关系,,,,,,,,,,,,理论依赖,05ALG015,03DS011
关系,,,,,,,,,,,,理论依赖,05ALG010,03DS011
关系,,,,,,,,,,,,继承,06DS001,05DS002
关系,,,,,,,,,,,,继承,06DS002,05DS004
关系,,,,,,,,,,,,变体,06DS003,06DS002
关系,,,,,,,,,,,,变体,06DS004,06DS002
关系,,,,,,,,,,,,继承,06DS005,05DS002
关系,,,,,,,,,,,,变体,06DS006,05DS002
关系,,,,,,,,,,,,继承,06DS007,06DS001
关系,,,,,,,,,,,,操作绑定,06ALG001,06DS001
关系,,,,,,,,,,,,操作绑定,06ALG002,06DS001
关系,,,,,,,,,,,,操作绑定,06ALG003,06DS001
关系,,,,,,,,,,,,操作绑定,06ALG004,06DS001
关系,,,,,,,,,,,,操作绑定,06ALG005,06DS002
关系,,,,,,,,,,,,操作绑定,06ALG006,06DS002
关系,,,,,,,,,,,,操作绑定,05ALG002,06DS001
关系,,,,,,,,,,,,操作绑定,05ALG002,06DS006
关系,,,,,,,,,,,,操作绑定,06ALG008,06DS006
关系,,,,,,,,,,,,操作绑定,06ALG009,06DS005
关系,,,,,,,,,,,,操作绑定,06ALG010,06DS005
关系,,,,,,,,,,,,操作绑定,06ALG011,06DS005
关系,,,,,,,,,,,,操作绑定,06ALG012,06DS007
关系,,,,,,,,,,,,操作绑定,06ALG013,06DS007
关系,,,,,,,,,,,,操作绑定,06ALG014,06DS007
关系,,,,,,,,,,,,操作绑定,06ALG015,06DS007
关系,,,,,,,,,,,,使用,06ALG016,06ALG003
关系,,,,,,,,,,,,使用,06ALG017,06DS006
关系,,,,,,,,,,,,使用,06ALG018,06CON007
关系,,,,,,,,,,,,使用,06ALG019,06CON007
关系,,,,,,,,,,,,使用,06ALG009,05CON014
关系,,,,,,,,,,,,使用,06ALG009,06CON005
关系,,,,,,,,,,,,使用,06ALG011,06DS005
关系,,,,,,,,,,,,理论依赖,06ALG010,06CON006
关系,,,,,,,,,,,,理论依赖,06DS005,06CON005
关系,,,,,,,,,,,,理论依赖,06DS005,06CON006
关系,,,,,,,,,,,,理论依赖,06DS006,06CON007
关系,,,,,,,,,,,,理论依赖,06DS006,06CON011
关系,,,,,,,,,,,,理论依赖,06DS006,06CON012
关系,,,,,,,,,,,,理论依赖,06DS007,06CON008
关系,,,,,,,,,,,,理论依赖,06DS007,06CON009
关系,,,,,,,,,,,,理论依赖,06ALG012,06CON008
关系,,,,,,,,,,,,理论依赖,06ALG013,06CON008
关系,,,,,,,,,,,,理论依赖,06ALG014,06CON008
关系,,,,,,,,,,,,理论依赖,06ALG015,06CON008
关系,,,,,,,,,,,,理论依赖,06ALG012,06CON009
关系,,,,,,,,,,,,理论依赖,06ALG013,06CON009
关系,,,,,,,,,,,,理论依赖,06ALG014,06CON009
关系,,,,,,,,,,,,理论依赖,06ALG015,06CON009
关系,,,,,,,,,,,,理论依赖,06CON006,06CON003
关系,,,,,,,,,,,,理论依赖,06CON006,06CON004
关系,,,,,,,,,,,,理论依赖,06CON006,06CON005
关系,,,,,,,,,,,,理论依赖,06CON007,06CON011
关系,,,,,,,,,,,,理论依赖,06CON007,06CON012
关系,,,,,,,,,,,,继承,06CON013,06CON011
关系,,,,,,,,,,,,继承,06CON014,06CON012
关系,,,,,,,,,,,,使用,06ALG004,06CON013
关系,,,,,,,,,,,,使用,06ALG018,06CON014
关系,,,,,,,,,,,,操作绑定,06ALG016,06DS001
关系,,,,,,,,,,,,操作绑定,06ALG017,06DS006
关系,,,,,,,,,,,,操作绑定,06ALG018,06DS006
关系,,,,,,,,,,,,操作绑定,06ALG019,06DS006
关系,,,,,,,,,,,,继承,07DS002,07DS001
关系,,,,,,,,,,,,继承,07DS003,07DS001
关系,,,,,,,,,,,,继承,07DS004,07DS001
关系,,,,,,,,,,,,理论依赖,07DS001,07CON001
关系,,,,,,,,,,,,理论依赖,07DS001,07CON002
关系,,,,,,,,,,,,理论依赖,07DS001,07CON003
关系,,,,,,,,,,,,理论依赖,07DS001,07CON004
关系,,,,,,,,,,,,理论依赖,07DS002,01CON018
关系,,,,,,,,,,,,理论依赖,07DS003,07CON006
关系,,,,,,,,,,,,理论依赖,07DS004,07CON031
关系,,,,,,,,,,,,理论依赖,07CON002,07CON007
关系,,,,,,,,,,,,理论依赖,07CON008,07CON002
关系,,,,,,,,,,,,继承,01CON018,07CON002
关系,,,,,,,,,,,,继承,07CON006,07CON002
关系,,,,,,,,,,,,理论依赖,07CON009,01CON018
关系,,,,,,,,,,,,理论依赖,07CON010,01CON018
关系,,,,,,,,,,,,继承,07CON011,07CON008
关系,,,,,,,,,,,,继承,07CON012,07CON008
关系,,,,,,,,,,,,理论依赖,05CON004,07CON001
关系,,,,,,,,,,,,继承,07CON014,05CON004
关系,,,,,,,,,,,,继承,07CON015,05CON004
关系,,,,,,,,,,,,理论依赖,07CON014,07CON010
关系,,,,,,,,,,,,理论依赖,07CON015,07CON009
关系,,,,,,,,,,,,理论依赖,07CON016,07DS001
关系,,,,,,,,,,,,理论依赖,07CON017,07DS001
关系,,,,,,,,,,,,理论依赖,07CON018,07DS001
关系,,,,,,,,,,,,理论依赖,07CON019,07DS001
关系,,,,,,,,,,,,理论依赖,06CON003,07DS001
关系,,,,,,,,,,,,理论依赖,06CON004,06CON003
关系,,,,,,,,,,,,继承,07CON022,06CON003
关系,,,,,,,,,,,,继承,07CON023,06CON003
关系,,,,,,,,,,,,继承,07CON024,07CON023
关系,,,,,,,,,,,,理论依赖,07CON024,07CON022
关系,,,,,,,,,,,,理论依赖,07CON025,07DS003
关系,,,,,,,,,,,,理论依赖,07CON025,06CON003
关系,,,,,,,,,,,,理论依赖,07CON026,07CON025
关系,,,,,,,,,,,,理论依赖,07CON026,07DS003
关系,,,,,,,,,,,,理论依赖,07CON027,07CON026
关系,,,,,,,,,,,,理论依赖,07CON027,07DS003
关系,,,,,,,,,,,,理论依赖,07CON028,07CON027
关系,,,,,,,,,,,,继承,07CON028,07CON019
关系,,,,,,,,,,,,理论依赖,07CON029,07DS002
关系,,,,,,,,,,,,理论依赖,07CON029,06CON003
关系,,,,,,,,,,,,理论依赖,07CON030,07CON029
关系,,,,,,,,,,,,继承,07CON030,07CON019
关系,,,,,,,,,,,,变体,07DS008,07DS006
关系,,,,,,,,,,,,变体,07DS009,07DS006
关系,,,,,,,,,,,,操作绑定,07ALG001,07DS001
关系,,,,,,,,,,,,继承,07ALG002,07ALG001
关系,,,,,,,,,,,,继承,07ALG003,07ALG001
关系,,,,,,,,,,,,使用,07DS005,07DS001
关系,,,,,,,,,,,,使用,07DS006,07DS001
关系,,,,,,,,,,,,使用,07DS007,07DS001
关系,,,,,,,,,,,,使用,07DS008,07DS002
关系,,,,,,,,,,,,使用,07DS009,07DS002
关系,,,,,,,,,,,,操作绑定,08ALG001,08CON004
关系,,,,,,,,,,,,操作绑定,08ALG002,08CON004
关系,,,,,,,,,,,,使用,08ALG001,07DS005
关系,,,,,,,,,,,,使用,08ALG002,07DS007
关系,,,,,,,,,,,,操作绑定,08ALG003,08CON006
关系,,,,,,,,,,,,操作绑定,08ALG004,08CON006
关系,,,,,,,,,,,,使用,08ALG003,07DS005
关系,,,,,,,,,,,,使用,08ALG004,07DS005
关系,,,,,,,,,,,,操作绑定,08ALG005,08CON008
关系,,,,,,,,,,,,使用,08ALG005,07DS006
关系,,,,,,,,,,,,理论依赖,08ALG005,07CON014
关系,,,,,,,,,,,,操作绑定,08ALG006,08CON016
关系,,,,,,,,,,,,使用,08ALG006,07DS006
关系,,,,,,,,,,,,理论依赖,08ALG006,08ALG005
关系,,,,,,,,,,,,理论依赖,08CON004,08CON003
关系,,,,,,,,,,,,理论依赖,08CON003,07CON026
关系,,,,,,,,,,,,理论依赖,08CON004,07DS004
关系,,,,,,,,,,,,理论依赖,08CON006,07DS001
关系,,,,,,,,,,,,理论依赖,08CON006,07DS004
关系,,,,,,,,,,,,理论依赖,08CON007,07DS002
关系,,,,,,,,,,,,理论依赖,08CON007,07CON023
关系,,,,,,,,,,,,理论依赖,08CON011,07DS002
关系,,,,,,,,,,,,理论依赖,08CON011,07DS004
关系,,,,,,,,,,,,理论依赖,08CON011,07CON023
关系,,,,,,,,,,,,理论依赖,08CON011,08CON012
关系,,,,,,,,,,,,理论依赖,08CON011,08CON013
关系,,,,,,,,,,,,理论依赖,08CON016,08CON011
关系,,,,,,,,,,,,理论依赖,08CON016,08CON017
关系,,,,,,,,,,,,理论依赖,07CON026,07DS001
关系,,,,,,,,,,,,理论依赖,07CON019,07DS001
关系,,,,,,,,,,,,理论依赖,07DS004,07DS001
关系,,,,,,,,,,,,理论依赖,07CON014,07DS001
关系,,,,,,,,,,,,理论依赖,07CON023,07DS001
关系,,,,,,,,,,,,理论依赖,08CON012,07DS001
关系,,,,,,,,,,,,理论依赖,08CON013,07DS001
关系,,,,,,,,,,,,理论依赖,08CON014,07DS001
关系,,,,,,,,,,,,理论依赖,08CON015,07DS001
关系,,,,,,,,,,,,使用,07DS007,07DS001
关系,,,,,,,,,,,,理论依赖,08CON003,07CON019
关系,,,,,,,,,,,,理论依赖,08CON008,08CON007
关系,,,,,,,,,,,,理论依赖,08CON017,08CON013
关系,,,,,,,,,,,,理论依赖,08ALG006,08CON012
关系,,,,,,,,,,,,理论依赖,08ALG006,08CON013
关系,,,,,,,,,,,,理论依赖,08ALG006,08CON017
关系,,,,,,,,,,,,继承,02DS001,01DS003
关系,,,,,,,,,,,,使用,07ALG002,04DS002
关系,,,,,,,,,,,,使用,07ALG003,04DS003
关系,,,,,,,,,,,,使用,04DS008,06DS002
关系,,,,,,,,,,,,使用,08ALG001,04DS008
关系,,,,,,,,,,,,继承,01DS003,01DS001
关系,,,,,,,,,,,,继承,01DS004,01DS001
关系,,,,,,,,,,,,继承,01DS005,01DS001
关系,,,,,,,,,,,,继承,01DS006,01DS001
关系,,,,,,,,,,,,继承,01DS002,01DS001
关系,,,,,,,,,,,,理论依赖,03DS014,01CON013
关系,,,,,,,,,,,,使用,02DS002,03DS014
关系,,,,,,,,,,,,使用,04DS004,03DS014
关系,,,,,,,,,,,,使用,04DS006,03DS014
关系,,,,,,,,,,,,使用,04DS005,02DS004
关系,,,,,,,,,,,,使用,04DS007,02DS004
关系,,,,,,,,,,,,使用,03DS006,02DS002
关系,,,,,,,,,,,,使用,03DS008,02DS004
关系,,,,,,,,,,,,使用,07DS005,03DS014
关系,,,,,,,,,,,,使用,07DS006,02DS004
关系,,,,,,,,,,,,使用,07DS007,03DS014
关系,,,,,,,,,,,,理论依赖,01CON017,01CON007
关系,,,,,,,,,,,,继承,05DS001,01DS004
关系,,,,,,,,,,,,继承,07DS001,01DS005
关系,,,,,,,,,,,,理论依赖,01ALG001,01CON005
