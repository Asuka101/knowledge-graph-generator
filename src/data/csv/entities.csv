实体类型,ID,名称,难度,内容,存储开销,核心特性,时间复杂度,空间复杂度,设计思想,适用场景
概念,01CON001,数据,入门,对现实世界事物及其活动的符号记录，需要编码为二进制形式以便计算机处理。,,,,,,
概念,01CON002,数据元素,入门,数据的基本单位，一个数据整体中相对独立的单位。,,,,,,
概念,01CON007,数据处理,入门,利用计算机对数据进行存储、检索、插入、删除、合并、拆分、排序、统计、计算、转换、输入、输出等的过程。,,,,,,
概念,01CON008,数据结构,入门,指数据以及数据元素之间的相互联系（关系），通常指逻辑结构。由数据元素的集合K和K上关系的集合R组成。,,,,,,
概念,01CON009,逻辑结构,入门,数据元素之间的内在联系，与计算机存储和处理无关。基本结构包括集合、线、树、图等。,,,,,,
概念,01CON010,存储结构,入门,数据的逻辑结构在计算机存储器中的表现形式，也称物理结构。基本方法有顺序、链接、索引、散列等。,,,,,,
概念,01CON011,关系,入门,数据元素之间的二元联系，通常表示为序偶的集合。,,,,,,
概念,01CON012,直接前驱,入门,"在关系序偶<x,y>中，x是y的直接前驱。",,,,,,
概念,01CON013,直接后继,入门,"在关系序偶<x,y>中，y是x的直接后继。",,,,,,
概念,01CON014,结点,入门,数据结构图形表示中对应数据元素的单元，也叫顶点。,,,,,,
概念,01CON015,有向边,入门,数据结构图形表示中带箭头的连线，对应关系中的序偶，也称弧。,,,,,,
数据结构,01DS001,集合结构,入门,数据元素之间除了“同属一个集合”外，没有其他关系的数据结构。,取决于存储方式,无序性（逻辑上）,,,,
数据结构,01DS002,线性结构,入门,数据元素之间存在一对一的线性关系的数据结构。除首尾元素外，每个元素有且仅有一个直接前驱和一个直接后继。,取决于存储方式（顺序或链式）,有序性（逻辑上），1:1关系,,,,
数据结构,01DS003,树形结构,入门,数据元素之间存在一对多的层次关系的数据结构。除根结点外，每个结点有且仅有一个直接前驱，可以有任意多个直接后继。,取决于存储方式,层次性，1:N关系,,,,
概念,01CON016,树根结点,入门,树形结构中没有前驱只有后继的结点。,,,,,,
概念,01CON017,树叶结点,入门,树形结构中只有前驱没有后继的结点。,,,,,,
概念,01CON018,树枝结点,入门,树形结构中除树根和树叶之外的结点。,,,,,,
数据结构,01DS004,图形结构,入门,数据元素之间存在多对多的关系的数据结构。每个结点可以有任意多个前驱和后继。,取决于存储方式（邻接矩阵或邻接表）,网状性，M:N关系,,,,
概念,01CON019,非线性结构,入门,数据元素之间存在非一对一关系的结构统称，主要包括树形结构和图形结构。,,,,,,
概念,01CON020,数据类型,入门,对数据的取值范围、数据元素之间的结构以及允许施加操作的一种总体描述。,,,,,,
概念,01CON021,简单类型,入门,数据无法再分割的整体的数据类型，如整数、字符等。,,,,,,
概念,01CON022,结构类型,入门,由简单类型或其他结构类型数据按一定规则构造而成的数据类型，如数组、记录等。,,,,,,
数据结构,01DS005,数组,入门,数目固定的具有同一类型的数据元素的顺序组合，具有线性结构特点，可通过下标访问。,连续存储空间，大小固定,可索引性，定长,,,,
数据结构,01DS006,记录,入门,多个不同（或相同）类型的数组据线性结构排列而成，可通过成员运算符访问域。,连续存储空间，大小固定，等于各域之和,组合性，异构性,,,,
概念,01CON023,抽象数据类型,入门,由一种数据结构和在其上的所有操作所组成，强调逻辑结构和操作说明，隐藏实现细节。,,,,,,
概念,01CON024,数据对象,入门,属于一种数据类型中的特定实例或值。,,,,,,
概念,01CON025,算法,入门,解决特定问题或执行特定计算而设计的一系列明确、有限的步骤。具有有穷性、确定性、可行性、输入、输出五个特性。,,,,,,
算法,01ALG001,累加求和,入门,计算一组数（如数组元素）的总和。,,,O(n),O(1),迭代,求和计算
算法,01ALG002,矩阵相加,入门,将两个相同维度的矩阵对应位置的元素相加。,,,O(n^2),O(1),迭代,矩阵运算
算法,01ALG003,简单选择排序,入门,每次从未排序部分选取最小（或最大）元素放到已排序部分的末尾。,,,O(n^2),O(1),选择,小规模数据排序
算法,01ALG004,顺序查找,入门,按顺序逐个比较元素，直到找到目标元素或遍历完所有元素。,,,"O(n) (平均/最差), O(1) (最好)",O(1),线性扫描,无序或小规模数据查找
概念,01CON026,时间复杂度,入门,算法运行时间的相对度量，通常表示为问题规模n的函数，常用大O表示法（数量级）。,,,,,,
概念,01CON027,空间复杂度,入门,算法在运行过程中临时占用存储空间大小的量度，衡量算法对内存资源的需求。,,,,,,
概念,01CON028,正确性,入门,算法在合理输入下能在有限时间内得出正确结果的特性。,,,,,,
概念,01CON029,稳健性,入门,算法对不合理数据输入的反应和处理能力。,,,,,,
概念,01CON030,可读性,入门,算法供人阅读和理解的容易程度。,,,,,,
概念,01CON031,数量级,入门,"时间复杂度或空间复杂度的一种简化表示，关注函数随规模增长的主要趋势，如O(n), O(n^2)。",,,,,,
概念,01CON032,递归,中等,一个函数直接或间接调用自身的过程或结构。,,,,,,
概念,01CON033,非递归,入门,不使用递归调用实现的算法，通常使用循环等结构。,,,,,,
概念,01CON034,顺序存储,入门,把逻辑上相邻的数据元素存储在物理位置也相邻的存储单元中的方法。,,,,,,
概念,01CON035,链式存储,入门,数据元素的存储单元不一定连续，通过指针域将元素链接起来的存储方法。,,,,,,
概念,01CON036,索引存储,中等,在存储数据信息的同时，还建立附加的索引表来标识结点的地址的存储方法。,,,,,,
概念,01CON037,散列存储,中等,根据结点的关键字直接计算出该结点的存储地址的存储方法，也称哈希存储。,,,,,,
概念,01CON038,有穷性,入门,算法必须在执行有穷步之后结束。,,,,,,
概念,01CON039,确定性,入门,算法中的每一步都必须具有确切的含义，无二义性。,,,,,,
概念,01CON040,可行性,入门,算法中的每一步都必须是可行的，能够通过有限次操作在有限时间内实现。,,,,,,
概念,01CON041,输入,入门,算法可以有零个或多个输入量。,,,,,,
概念,01CON042,输出,入门,算法执行结束后至少要有一个输出量。,,,,,,
数据结构,02DS001,线性表,入门,具有相同属性的数据元素的一个有限序列。元素之间存在一对一的线性关系，有表头元素和表尾元素，除表头外每个元素有唯一前驱，除表尾外每个元素有唯一后继。是包括顺序表、链表等具体数据结构的一种抽象数据类型（ADT）。,取决于具体实现（顺序或链式）,序列性、有限性、元素类型相同,,,,
数据结构,02DS002,顺序表,入门,线性表的一种实现方式，指用一组地址连续的存储单元依次存储线性表的数据元素。通常使用数组实现。,存储密度高，需要预先分配连续空间，可能存在空间浪费或不足。,支持随机访问（O(1)时间复杂度访问元素），插入和删除操作平均需要移动大量元素（O(n)时间复杂度）。,,,,
算法,02ALG001,初始化列表,入门,创建一个空的线性表。对于顺序表，通常是分配存储空间并将长度设为0；对于链表，通常是将头指针设为空或指向头结点。,,,O(1)（链表）或 O(1)/O(MaxSize)（顺序表，取决于是否需要初始化空间）,O(1) 或 O(MaxSize)（取决于实现）,初始化,使用线性表前
算法,02ALG002,清除列表,入门,删除线性表中的所有元素，使其成为空表。对于顺序表，通常是将长度设为0；对于链表，需要遍历并释放所有结点。,,,O(1)（顺序表）或 O(n)（链表）,O(1),资源释放/重置,重用列表结构或释放内存
算法,02ALG003,获取列表长度,入门,返回线性表中元素的个数。,,,O(1)（顺序表，若长度字段已维护）或 O(n)（链表，若无长度字段）,O(1),计数/查询,获取列表大小信息
算法,02ALG004,判空列表,入门,判断线性表是否包含元素。,,,O(1),O(1),状态检查,在操作前检查列表状态
算法,02ALG005,获取元素,入门,返回线性表中指定位置（序号）的元素值。,,,O(1)（顺序表）或 O(n)（链表）,O(1),按位置访问,读取特定位置的数据
算法,02ALG006,遍历列表,入门,按逻辑顺序访问线性表中的每一个元素。,,,O(n),O(1),顺序访问,处理或显示所有元素
算法,02ALG007,查找元素,入门,在线性表中查找第一个值等于给定值的元素。,,,O(n)（顺序查找）,O(1),搜索,定位特定元素
算法,02ALG008,更新元素,入门,修改线性表中第一个值等于给定值的元素。,,,O(n)（顺序查找定位）,O(1),搜索与修改,修改特定元素的值
算法,02ALG009,插入元素,入门,在线性表的指定位置插入一个新的元素。顺序表需要移动后续元素，链表需要修改指针。,,,O(n)（顺序表平均情况，链表查找位置）,O(1)（通常）或 O(n)（顺序表扩容时）,修改结构,向列表中添加数据
算法,02ALG010,删除元素,入门,从线性表中删除指定位置或指定值的元素。顺序表需要移动后续元素，链表需要修改指针。,,,O(n)（顺序表平均情况，链表查找位置）,O(1),修改结构,从列表中移除数据
算法,02ALG011,排序列表,中等,将线性表中的元素按照某种规则（如升序或降序）重新排列。,,,取决于具体排序算法，如插入排序为 O(n^2),取决于具体排序算法，如插入排序为 O(1),排序,需要有序数据时
算法,02ALG012,插入排序,入门,一种简单的排序算法，通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。分为直接插入排序、折半插入排序、希尔排序等。,,,O(n^2)（平均和最坏），O(n)（最好）,O(1),增量构建,基本有序或小规模数据
数据结构,02DS004,链表,入门,线性表的一种实现方式，通过一组任意的存储单元（可以不连续）来存储线性表的数据元素。每个存储单元称为结点，除了存储数据外，还存储指向下一个（或上一个）结点的指针。,每个元素需要额外的指针空间。,插入和删除操作通常只需修改指针（O(1)时间复杂度，若位置已知），访问元素需要顺序遍历（O(n)时间复杂度）。,,,,
概念,02CON005,指针,入门,一个变量，其值为另一个变量的地址，即内存位置的直接地址。在链表中用于链接结点。,,,,,,
数据结构,02DS005,单链表,入门,链表的一种，每个结点只包含一个指向其直接后继结点的指针域。,每个结点一个指针域。,只能单向遍历。,,,,
数据结构,02DS006,双向链表,中等,链表的一种，每个结点包含两个指针域，一个指向直接前驱结点，一个指向直接后继结点。,每个结点两个指针域。,可以双向遍历，方便查找前驱结点。,,,,
数据结构,02DS007,循环链表,中等,链表的一种变体，表中最后一个结点的指针域指向头结点（或第一个元素结点），形成一个环。可以是循环单链表或循环双向链表。,与单链表或双向链表相同。,从任一结点出发可遍历整个链表。,,,,
算法,02ALG013,多项式求值,入门,计算给定x值时一个多项式P(x)的值。可以使用线性表（顺序表或链表）表示多项式系数或非零项（系数+指数）来进行计算。,,,O(n)（若使用秦九韶算法）或更高（取决于幂运算实现和多项式表示）,O(1)（若不考虑存储多项式的空间）,数值计算、累加,数学计算
算法,02ALG014,多项式加法,中等,计算两个多项式 P1(x) 和 P2(x) 的和 P3(x)。通常使用链表表示非零项，通过合并两个有序链表（按指数排序）来实现。,,,O(m+n)，其中m和n分别为两个多项式的项数。,O(m+n)（用于存储结果多项式）,合并、归并,符号计算、代数运算
数据结构,03DS002,稀疏矩阵,中等,非零元素的个数远远小于零元素的个数的矩阵。通常使用三元组线性表来存储非零元素以节省空间。,主要取决于非零元素的个数，远小于使用二维数组存储整个矩阵的开销。,稀疏性,,,,
数据结构,03DS003,广义表,中等,线性表的推广，是n(n≥0)个元素的一个有限序列，其元素可以是单元素或子表。是一种递归的数据结构。,通常采用动态链接结构，开销取决于元素和子表的总数及嵌套深度。,递归结构、元素可以是原子或子表,,,,
概念,03CON001,空集,入门,不包含任何元素的集合，其长度为0。,,,,,,
概念,03CON002,集合的抽象数据类型,入门,定义了集合的数据（一个集合S）和操作（如初始化、清空、求长度、判空、判断元素归属、插入、删除、并、交、差等）。,,,,,,
算法,03ALG001,初始化集合,入门,将集合设置为空集。对于动态顺序存储，分配初始空间并将长度置0；对于链式存储，将头指针置NULL。,,,O(1),O(1)（不计结构本身空间）,初始化,创建新的集合对象时。
算法,03ALG002,清除集合,入门,移除集合中的所有元素。对于动态存储，需要释放分配的空间。,,,O(1)（顺序动态数组释放）或 O(n)（链表逐个释放）,O(1),资源释放,销毁集合对象或重用前清空。
算法,03ALG003,求集合长度,入门,返回集合中元素的个数。,,,O(1)（顺序存储）或 O(n)（链式存储）,O(1),计数,获取集合大小。
算法,03ALG004,判断集合是否为空,入门,检查集合长度是否为0。,,,O(1),O(1),状态检查,在进行某些操作（如删除）前检查集合状态。
算法,03ALG005,判断元素是否属于集合,入门,在集合中查找是否存在指定元素。,,,O(n),O(1),顺序查找,检查元素成员资格。
算法,03ALG006,输出集合元素,入门,遍历并打印集合中的所有元素。可以实现无序输出或有序输出（需额外排序）。,,,O(n)（无序）或 O(n^2)（若使用简单选择排序等进行有序输出）,O(1)（无序）或 O(n)（有序输出临时数组）,遍历,展示集合内容。
算法,03ALG007,查找集合元素,入门,在集合中查找指定元素，若找到则返回该元素的完整信息。,,,O(n),O(1),顺序查找,获取集合中特定元素的数据。
算法,03ALG008,修改集合元素,入门,在集合中查找指定元素（通常通过关键字），若找到则用新值更新该元素。,,,O(n),O(1),查找与更新,更新集合中已存在的元素信息。
算法,03ALG009,向集合插入元素,入门,首先检查元素是否已存在，若不存在则添加到集合中。对于顺序存储，可能需要检查空间并进行扩容。,,,平均O(n)（查找）+ 可能的O(n)（扩容）或 O(1)（链表头插）,O(1)（均摊）,查找与添加,向集合中增加新元素。
算法,03ALG010,从集合删除元素,入门,在集合中查找指定元素，若找到则移除。对于顺序存储，通常用末尾元素填补空位；对于链式存储，修改指针。,,,O(n),O(1),查找与移除,从集合中移除元素。
算法,03ALG011,求集合并集,入门,计算两个集合S1和S2的并集，结果存入新集合S。将S1复制到S，然后将S2中不在S中的元素插入S。,,,O(n*m)（基本实现）,O(n+m)（结果集）,合并与去重,计算两个集合的所有元素的组合。
算法,03ALG012,求集合交集,入门,计算两个集合S1和S2的交集，结果存入新集合S。遍历S2，检查每个元素是否在S1中，若在则插入S。,,,O(n*m),"O(min(n, m))（结果集）",查找共同元素,找出两个集合共有的元素。
算法,03ALG013,求集合差集,入门,计算两个集合S1和S2的差集 (S1-S2)，结果存入新集合S。遍历S1，检查每个元素是否在S2中，若不在则插入S。,,,O(n*m),O(n)（结果集）,排除共同元素,找出只存在于第一个集合而不存在于第二个集合的元素。
概念,03CON005,三元组,入门,"由三个数据项组成的有序对，在稀疏矩阵中通常指 (行号, 列号, 元素值)。",,,,,,
数据结构,03DS005,三元组线性表,入门,"用一个线性表（顺序或链式）存储稀疏矩阵的非零元素的三元组 (行号, 列号, 值)，通常按行号主序、列号辅序排列。",存储非零元素的个数 * 3 + 存储矩阵维度信息。,紧凑存储稀疏矩阵非零元,,,,
算法,03ALG014,稀疏矩阵转置,中等,"计算稀疏矩阵的转置矩阵，即将原矩阵的(i, j)处的元素放到新矩阵的(j, i)处。有普通转置和快速转置等方法。",,,依赖具体实现（如O(n*t)或O(n+t)),O(t)（存储转置结果）,行列互换,需要对稀疏矩阵进行转置操作时。
算法,03ALG015,普通转置,中等,一种稀疏矩阵转置算法，按列扫描原三元组表，将对应列的元素转换后写入新的三元组表。,,,O(列数 * 非零元素数),O(非零元素数),按列扫描转换,实现稀疏矩阵转置的基础方法。
算法,03ALG016,快速转置,中等,一种优化的稀疏矩阵转置算法，通过两次扫描三元组表完成。第一次统计每列非零元个数确定在新表中的起始位置，第二次直接放置元素。,,,O(列数 + 非零元素数),O(列数 + 非零元素数),空间换时间、预计算位置,高效进行稀疏矩阵转置。
算法,03ALG017,稀疏矩阵加法,中等,计算两个相同维度的稀疏矩阵的和。通常需要遍历两个矩阵的三元组表（或链表），合并对应位置的元素。,,,O(M1.t + M2.t)（对于链接存储）,O(M1.t + M2.t)（最坏情况）,按行（或整体）合并,计算两个稀疏矩阵的和。
概念,03CON006,行指针向量,中等,在稀疏矩阵的带行指针向量的链接存储中，用于存储每一行对应单链表的头指针的一维数组。,,,,,,
概念,03CON007,十字链接存储,中等,稀疏矩阵的一种链式存储结构，每个非零元素结点同时属于所在行的链表和所在列的链表，需要行、列两个指针向量。,,,,,,
概念,03CON008,单元素,入门,在广义表中，指非列表类型的基本数据元素，也称原子。,,,,,,
概念,03CON009,子表,入门,在广义表中，指作为另一个广义表元素的表。,,,,,,
概念,03CON010,深度,入门,广义表中括号嵌套的最大层数。空表或仅含单元素的表深度为1。,,,,,,
算法,03ALG018,求广义表长度,入门,计算广义表顶层元素的个数。可通过遍历顶层链表实现，递归或非递归均可。,,,O(n)（n为顶层元素个数）,O(1)（非递归）或 O(n)（递归）,遍历计数,获取广义表顶层的元素数量。
算法,03ALG019,求广义表深度,中等,计算广义表中括号嵌套的最大层数。通常使用递归实现，深度等于所有子表深度的最大值加1。,,,O(N)（N为表中结点总数）,O(m)（m为广义表深度，递归栈开销）,递归遍历,分析广义表的嵌套层级。
算法,03ALG020,建立广义表,中等,"根据给定的字符串表示（如'(a,(b,c))'）构建广义表的链接存储结构。通常使用递归实现。",,,O(N)（N为输入字符串长度或结点数）,O(N)（递归栈开销）,递归构建,从外部表示创建广义表内存结构。
算法,03ALG021,打印广义表,中等,将广义表的链接存储结构转换回其字符串表示形式并输出。通常使用递归实现。,,,O(N)（N为表中结点总数）,O(m)（m为广义表深度，递归栈开销）,递归遍历与格式化输出,展示广义表内容。
数据结构,04DS001,栈,入门,一种运算受限的线性表，仅允许在表的一端（栈顶）进行插入（入栈）和删除（出栈）运算。具有后进先出（LIFO）的特性。也称堆栈。,顺序存储需要预分配空间或动态扩展，链式存储需要额外指针开销。,后进先出 (LIFO),,,,
数据结构,04DS002,队列,入门,一种运算受限的线性表，允许在表的一端（队尾）进行插入（入队），在另一端（队首）进行删除（出队）。具有先进先出（FIFO）的特性。,顺序存储（循环队列）需要预分配空间或动态扩展，链式存储需要额外指针开销。,先进先出 (FIFO),,,,
数据结构,04DS004,循环队列,入门,利用取模运算将顺序存储的队列空间视为一个环状空间，以解决顺序队列的“假溢出”问题。,固定大小数组，可能牺牲一个存储单元以区分队空和队满，或使用计数器。,先进先出 (FIFO)、空间循环利用,,,,
数据结构,04DS005,优先级队列,中等,一种特殊的队列，其中的元素带有优先级。出队时，优先级最高的元素最先出队。通常使用堆实现。,通常基于堆实现，存储开销类似堆。,按优先级出队,,,,
概念,04CON001,栈顶,入门,栈允许进行插入和删除操作的一端。栈顶元素是最后插入且最先被删除的元素。,,,,,,
概念,04CON002,栈底,入门,栈不允许进行插入和删除操作的一端，与栈顶相对。,,,,,,
概念,04CON003,队首,入门,队列允许进行删除操作的一端。队首元素是最先进入队列且最先被删除的元素。,,,,,,
概念,04CON004,队尾,入门,队列允许进行插入操作的一端。新元素总是插入到队尾。,,,,,,
概念,04CON005,后进先出,入门,"Last-In, First-Out (LIFO)。描述了栈的操作特性，即最后进入栈的元素最先离开栈。",,,,,,
概念,04CON006,先进先出,入门,"First-In, First-Out (FIFO)。描述了队列的操作特性，即最先进入队列的元素最先离开队列。",,,,,,
概念,04CON008,中缀表示,入门,一种常见的算术表达式表示法，其中运算符位于其操作数之间。计算时需要考虑运算符优先级和括号。,,,,,,
概念,04CON009,后缀表示,入门,"也称为逆波兰表示法（Reverse Polish Notation, RPN）。一种算术表达式表示法，其中运算符位于其操作数之后。计算时无需考虑优先级和括号，通常使用栈进行求值。",,,,,,
算法,04ALG001,入栈,入门,将元素添加到栈顶的操作。顺序栈中top指针加1并赋值，链栈中创建新节点并修改头指针。,,,O(1)（顺序栈不考虑扩容）,O(1),栈的基本操作,向栈中添加元素
算法,04ALG002,出栈,入门,删除并（可选地）返回栈顶元素的操作。顺序栈中取值并top指针减1，链栈中取值、修改头指针并释放原头结点。,,,O(1),O(1),栈的基本操作,从栈中移除并获取元素
算法,04ALG003,读取栈顶元素,入门,返回栈顶元素的值，但不删除它。,,,O(1),O(1),栈的基本操作,查看栈顶元素而不修改栈
算法,04ALG004,判断栈空,入门,检查栈中是否包含元素。,,,O(1),O(1),栈的基本操作,执行出栈或读取栈顶前的检查
算法,04ALG005,初始化栈,入门,创建一个空栈。顺序栈中设置top为-1或0（取决于实现），链栈中设置头指针为NULL。,,,O(1),O(1)（不计存储空间本身）,栈的构造,使用栈之前
算法,04ALG006,清空栈,入门,移除栈中所有元素，使其变为空栈，并可能释放相关资源。,,,O(1)（顺序栈），O(n)（链栈，需遍历释放节点）,O(1),栈的重置或销毁,重用栈或释放内存
算法,04ALG007,入队,入门,将元素添加到队尾的操作。,,,O(1)（循环队列不考虑扩容，链队需要维护尾指针）,O(1),队列的基本操作,向队列中添加元素
算法,04ALG008,出队,入门,删除并（可选地）返回队首元素的操作。,,,O(1),O(1),队列的基本操作,从队列中移除并获取元素
算法,04ALG009,读取队首元素,入门,返回队首元素的值，但不删除它。,,,O(1),O(1),队列的基本操作,查看队首元素而不修改队列
算法,04ALG010,判断队列空,入门,检查队列中是否包含元素。,,,O(1),O(1),队列的基本操作,执行出队或读取队首前的检查
算法,04ALG011,初始化队列,入门,创建一个空队列。循环队列中设置front=rear=0，链队中设置front=rear=NULL。,,,O(1),O(1)（不计存储空间本身）,队列的构造,使用队列之前
算法,04ALG012,清空队列,入门,移除队列中所有元素，使其变为空队列，并可能释放相关资源。,,,O(1)（循环队列），O(n)（链队，需遍历释放节点）,O(1),队列的重置或销毁,重用队列或释放内存
算法,04ALG013,后缀表达式求值,中等,使用栈计算后缀表示（逆波兰表示）的算术表达式的值。遇到操作数则入栈，遇到运算符则弹出所需操作数进行计算，结果再入栈。,,,O(n),O(n)（栈空间）,栈应用,计算无需括号和优先级的表达式
算法,04ALG014,中缀转后缀,中等,将中缀表示的算术表达式转换为等价的后缀表示。使用栈来暂存运算符，根据运算符优先级和括号规则进行转换。,,,O(n),O(n)（栈空间）,栈应用,表达式求值预处理
算法,04ALG015,括号配对检查,入门,"检查一个包含括号（如(), [], {}）的字符串中的括号是否正确配对。使用栈，遇到左括号入栈，遇到右括号检查栈顶是否匹配，若匹配则出栈，否则错误。",,,O(n),O(n)（栈空间）,栈应用,语法检查、代码编辑
算法,04ALG016,进制转换,入门,将一个十进制数转换为其他进制（如二进制、八进制、十六进制）的表示。通常使用除基取余法，将余数依次入栈，最后依次出栈得到结果。,,,O(log_r N)，r为目标基数，N为数值,O(log_r N)（栈空间）,栈应用,数值表示转换
算法,04ALG017,递归阶乘,入门,使用递归方法计算非负整数n的阶乘 (n!)。递归关系为 f(n) = n * f(n-1)，基本情况为 f(0) = 1。,,,O(n),O(n)（递归栈深度）,递归,教学示例、简单递归问题
算法,04ALG018,布尔量组合输出,中等,输出n个布尔变量所有可能的2^n种取值组合。通常使用递归实现，每次递归决定一位是0还是1。,,,O(n * 2^n)（包含输出时间）,O(n)（递归栈深度）,递归、回溯,组合生成、状态枚举
算法,04ALG019,全排列,中等,生成n个不同元素的所有n!种排列顺序。通常使用递归和交换策略实现。,,,O(n * n!)（包含输出时间）,O(n)（递归栈深度）,递归、回溯,排列生成、组合优化问题探索
算法,04ALG020,迷宫求解,中等,寻找从迷宫入口到出口的一条路径。可以使用递归（深度优先搜索）或队列（广度优先搜索）实现。递归方法中系统隐式使用栈，非递归DFS显式使用栈。,,,"O(m*n)（m, n为迷宫维度）",O(m*n)（递归栈深度或辅助空间）,递归、回溯、深度优先搜索、栈应用,路径查找、图搜索
算法,04ALG021,汉诺塔,中等,解决经典的汉诺塔问题，将n个盘子从源柱借助辅助柱移动到目标柱。标准的解决方案是递归的。,,,O(2^n),O(n)（递归栈深度）,递归、分治,教学示例、递归思维训练
算法,04ALG022,渡口管理模拟,中等,模拟轮船渡口的车辆管理，根据特定规则（车辆类型、到达顺序、装载限制）安排车辆上船。通常使用队列来管理等待的车辆。,,,取决于模拟的复杂度和事件数量,O(N)（N为等待车辆数，队列空间）,队列应用、模拟,事件驱动模拟、资源调度
数据结构,05DS001,树,入门,重要的非线性数据结构，由n(n>=0)个有限结点组成一个具有层次关系的集合。递归定义：空树或由一个根结点及m(m>=0)棵互不相交的子树构成。,依赖于具体存储方式（顺序、链式）,层次结构、递归定义、非线性,,,,
概念,05CON002,子树,入门,非空树中除根结点外，其余结点按关系划分成的m(m>=0)棵互不相交的树，每棵子树本身也是一棵树。,,,,,,
概念,05CON004,度,入门,结点的度指结点拥有的子树（或后继结点）的个数。树的度指树中所有结点度的最大值。,,,,,,
概念,05CON007,孩子结点,入门,一个结点的子树的根结点，也称为该结点的子女或后继。,,,,,,
概念,05CON008,双亲结点,入门,孩子结点的前驱结点，也称为父结点。,,,,,,
概念,05CON009,兄弟结点,入门,具有相同双亲结点的孩子结点。,,,,,,
概念,05CON012,有序树,入门,树中任意结点的各子树是按一定次序从左到右排列的，不能互换次序。,,,,,,
概念,05CON013,无序树,入门,树中任意结点的各子树之间没有次序关系，可以任意交换位置。,,,,,,
概念,05CON014,森林,入门,m(m>=0)棵互不相交的树的集合。,,,,,,
数据结构,05DS002,二叉树,入门,度不超过2的有序树。递归定义：空树或由一个根结点和两棵互不相交的左、右子树组成，左右子树也都是二叉树。,依赖顺序或链式存储,有序性、度最多为2、左右子树不能任意互换,,,,
概念,05CON015,k叉树,中等,树的度为k的树，即每个结点的度最多为k。,,,,,,
数据结构,05DS003,满二叉树,中等,深度为h且具有2^h-1个结点的二叉树。除叶子结点外，每个结点的度都为2。,若用顺序存储则无空间浪费,结构规整、每层结点数满,,,,
数据结构,05DS004,完全二叉树,中等,深度为h，具有n个结点的二叉树，其结点编号与深度为h的满二叉树中编号1到n的结点一一对应。特性是除最后一层外，其余各层均是满的，且最后一层的结点都连续集中在最左边。,适合顺序存储，空间利用率高,结点编号与数组下标有对应关系、堆的基础结构,,,,
数据结构,05DS005,理想平衡二叉树,中等,除最后一层外，其余各层都是满的二叉树，最后一层结点可以任意分布。包含满二叉树和完全二叉树。,依赖具体实现,层数尽可能少，深度接近log2(n),,,,
数据结构,05DS006,二叉树顺序存储,入门,使用一维数组存储二叉树结点，通常按层序遍历的顺序将结点存入数组，空结点用特定值表示。通过下标计算父子关系。,对于完全二叉树空间效率高，对于一般二叉树（尤其单支树）可能浪费大量空间。,利用数组下标隐式表示结点关系、适合完全二叉树,,,,
数据结构,05DS007,二叉链表,入门,二叉树的链式存储结构，每个结点包含数据域、指向左孩子的指针域和指向右孩子的指针域。,每个结点需要额外存储两个指针的空间,灵活表示任意形态二叉树、插入删除操作相对方便,,,,
概念,05CON016,树根指针,入门,在树的链式存储结构中，指向树的根结点的指针。,,,,,,
算法,05ALG001,二叉树遍历,入门,按照特定规则访问二叉树中的所有结点，且每个结点仅被访问一次。常见的有前序、中序、后序、层序遍历。,,,O(n),O(h) 或 O(w),递归或迭代（使用栈或队列）,访问、处理、查找、复制、销毁树中所有结点
算法,05ALG002,前序遍历,入门,二叉树遍历的一种方式：先访问根结点，然后前序遍历左子树，再前序遍历右子树 (DLR)。,,,O(n),O(h) (递归栈),递归,构建表达式树的前缀表示、树的复制
算法,05ALG003,中序遍历,入门,二叉树遍历的一种方式：先中序遍历左子树，然后访问根结点，再中序遍历右子树 (LDR)。,,,O(n),O(h) (递归栈),递归,对二叉搜索树进行排序输出
算法,05ALG004,后序遍历,入门,二叉树遍历的一种方式：先后序遍历左子树，再后序遍历右子树，最后访问根结点 (LRD)。,,,O(n),O(h) (递归栈),递归,计算表达式树的值、释放树结点空间
算法,05ALG005,层序遍历,入门,二叉树遍历的一种方式：从上到下、从左到右逐层访问结点。,,,O(n),O(w) (w为树的最大宽度，使用队列),迭代 (使用队列),求树的宽度、图的广度优先搜索
算法,05ALG006,初始化二叉树,入门,创建一个空的二叉树，通常是将根指针置为NULL。,,,O(1),O(1),赋值,开始构建新树之前
算法,05ALG007,建立二叉树,中等,根据给定的输入序列（如广义表、前序+中序序列等）构造二叉树的内存表示（通常是二叉链表）。,,,O(n),O(h) (递归或栈),递归或迭代（栈辅助）,从外部数据源恢复或构建二叉树结构
算法,05ALG008,判空二叉树,入门,检查二叉树是否为空树。,,,O(1),O(1),判断根指针是否为NULL,在对树进行操作前进行检查
算法,05ALG009,求二叉树深度,入门,计算二叉树的最大层数。,,,O(n),O(h) (递归栈),"递归（深度 = max(左子树深度, 右子树深度) + 1）",分析树的平衡性、评估算法空间复杂度
算法,05ALG010,查找二叉树结点,入门,在二叉树中搜索具有特定值的结点。,,,O(n) (最坏情况，对于非搜索树),O(h) (递归栈),递归遍历（类似前序）,定位树中特定数据
算法,05ALG011,输出二叉树,入门,将二叉树的结构以某种人类可读的格式（如广义表）打印出来。,,,O(n),O(h) (递归栈),递归遍历（类似前序）,调试、可视化树结构
算法,05ALG012,清除二叉树,入门,释放二叉树中所有结点占用的内存空间，使树变为空树。,,,O(n),O(h) (递归栈),递归（类似后序遍历）,程序结束前或不再需要树时回收资源
数据结构,05DS010,树的顺序存储,中等,使用一维数组存储k叉树结点，结点按特定规则编号，通过下标计算父子关系。适合满k叉树或完全k叉树。,对于非满/完全树空间浪费严重,通过下标计算关系，结构固定,,,,
数据结构,05DS011,树的标准链接存储,中等,树的链式存储方式，每个结点包含数据域和k个指针域，分别指向k个孩子结点（k为树的度）。,指针开销大，尤其当k大且结点度不一时存储密度低。,直接表示父子关系，结构灵活,,,,
数据结构,05DS012,树的广义标准链接存储,中等,在标准链接存储的基础上，为每个结点增加一个指向其双亲结点的指针域。,比标准方式需要更多指针空间,方便查找孩子和双亲结点,,,,
数据结构,05DS013,树的二叉树表示法,中等,也称孩子兄弟表示法。将任意树转换为二叉树进行存储。结点的左指针指向其第一个孩子，右指针指向其下一个兄弟。,与二叉链表相同,将多叉树问题转化为二叉树问题处理，存储结构统一,,,,
算法,05ALG013,树遍历,入门,按照特定规则访问树中的所有结点，且每个结点仅被访问一次。常见有先根、后根、层序遍历。,,,O(n),O(h) 或 O(w),递归或迭代,访问、处理树中所有结点
算法,05ALG014,先根遍历,入门,树遍历的一种方式：先访问根结点，然后从左到右依次先根遍历根的各棵子树。,,,O(n),O(h),递归,树的结构性操作
算法,05ALG015,后根遍历,入门,树遍历的一种方式：先从左到右依次后根遍历根的各棵子树，最后访问根结点。,,,O(n),O(h),递归,计算依赖子树结果的操作、销毁树
算法,05ALG016,树的层序遍历,入门,树遍历的一种方式：按照从上到下、同一层从左到右的次序访问结点。,,,O(n),O(w),迭代（使用队列）,广度优先搜索相关问题
算法,05ALG017,建立树,中等,根据给定的输入序列（如广义表）构造树的内存表示（如k叉链表）。,,,O(n),O(h),迭代（栈辅助）,从外部数据源构建树结构
算法,05ALG018,查找树结点,入门,在（普通）树中搜索具有特定值的结点。,,,O(n),O(h),递归（类似先根遍历）,定位树中特定数据
算法,05ALG019,输出树,入门,将（普通）树的结构以某种人类可读的格式（如广义表）打印出来。,,,O(n),O(h),递归（类似先根遍历）,调试、可视化树结构
算法,05ALG020,求树深度,入门,计算（普通）树的最大层数。,,,O(n),O(h),递归,分析树的高度相关特性
算法,05ALG021,清除树,入门,释放（普通）树中所有结点占用的内存空间，使树变为空树。,,,O(n),O(h),递归（类似后根遍历）,回收树占用的资源
数据结构,06DS001,二叉搜索树,中等,又称二叉排序树，它或是一棵空树，或者是一棵具有如下特性的非空二叉树：(1) 若它的左子树非空，则左子树上所有结点的关键字均小于根结点的关键字；(2) 若它的右子树非空，则右子树上所有结点的关键字均大于（或大于等于）根结点的关键字；(3) 左、右子树本身又各是一棵二叉搜索树。中序遍历结果为有序序列。适用于需要高效查找、插入、删除有序数据的场景。,通常采用链式存储，空间复杂度与节点数成正比 O(n)。,有序性（中序遍历）、可查找性,,,,
数据结构,06DS002,堆,中等,一种特殊的完全二叉树。分为小根堆（父节点值小于等于子节点值）和大根堆（父节点值大于等于子节点值）。堆顶元素分别是最小值或最大值。常用于实现优先队列。,通常采用顺序存储（数组），空间效率高 O(n)。,堆序性（父子节点关系）、完全二叉树结构,,,,
数据结构,06DS003,哈夫曼树,中等,又称最优二叉树，指n个带权叶子结点构成的所有二叉树中，带权路径长度（WPL）最小的二叉树。构造算法基于贪心策略，权值越大的叶子离根越近。常用于哈夫曼编码。,通常采用链式存储，空间复杂度与节点数（叶子+内部）成正比 O(n)。,最优性（WPL最小）、带权特性,,,,
数据结构,06DS004,线索二叉树,中等,利用二叉链表中的空指针域（线索）指向结点在某种遍历次序下的前驱或后继的二叉树。增加了ltag和rtag标志位。目的是为了快速查找前驱/后继，实现非递归遍历。,链式存储，每个节点增加两个标志位，空间复杂度略高于普通二叉链表 O(n)。,线索化、便于查找前驱/后继,,,,
数据结构,06DS005,平衡二叉树,高级,"又称AVL树，是一种自平衡的二叉搜索树。其任何节点的左、右子树高度差的绝对值不超过1（平衡因子为-1, 0, 1）。通过旋转操作（LL, RR, LR, RL）在插入/删除后维持平衡，保证操作的时间复杂度。",链式存储，每个节点需要额外存储平衡因子，空间复杂度 O(n)。,平衡性、自调整性,,,,
算法,06ALG001,二叉搜索树查找,中等,根据二叉搜索树的性质，比较目标值与当前节点值，决定向左子树或右子树递归查找。有递归和非递归实现。,,,平均O(log n)，最坏O(n),递归：平均O(log n)，最坏O(n)；非递归：O(1),分治,在二叉搜索树中定位特定值的节点。
算法,06ALG002,二叉搜索树更新,中等,首先执行查找操作定位到目标节点，若找到则修改节点的值。实现与查找类似。,,,平均O(log n)，最坏O(n),递归：平均O(log n)，最坏O(n)；非递归：O(1),查找与修改,修改二叉搜索树中已存在节点的值。
算法,06ALG003,二叉搜索树插入,中等,查找合适的插入位置（一个空链接），然后创建新节点并链接。保持二叉搜索树性质。有递归和非递归实现。,,,平均O(log n)，最坏O(n),递归：平均O(log n)，最坏O(n)；非递归：O(1),查找与链接,向二叉搜索树添加新节点，同时保持其有序性。
算法,06ALG004,二叉搜索树删除,中等,查找待删除节点，分情况处理：叶子节点、单分支节点、双分支节点（通常用中序前驱或后继替换）。需要维护二叉搜索树性质。,,,平均O(log n)，最坏O(n),递归：平均O(log n)，最坏O(n)；非递归：O(1),查找与替换/链接调整,从二叉搜索树移除节点，同时保持其有序性。
算法,06ALG005,堆插入,中等,将新元素添加到堆的末尾（数组末尾），然后通过比较和交换操作（上滤/sift-up），将其调整到合适位置以维持堆性质。,,,O(log n),O(1),上滤调整,向堆中添加元素并保持堆序性。
算法,06ALG006,堆删除,中等,通常指删除堆顶元素（最大或最小值）。将堆尾元素移到堆顶，然后通过比较和交换操作（下滤/sift-down），将其调整到合适位置以恢复堆性质。,,,O(log n),O(1),下滤调整,获取并移除堆中的最值元素，同时保持堆序性。
概念,06CON002,路径,入门,在一棵树中，从一个结点到另一个结点所经过的结点序列。树中任意两点间的路径是唯一的。,,,,,,
概念,06CON003,路径长度,入门,一条路径上所经过的分支（边）的数量。,,,,,,
概念,06CON004,结点的权,入门,赋予树中结点的一个具有某种意义的数值。,,,,,,
概念,06CON005,带权路径长度,入门,从树根结点到某一结点之间的路径长度与该结点上权的乘积。,,,,,,
概念,06CON006,树的带权路径长度,入门,树中所有叶子结点的带权路径长度之和，记为WPL。,,,,,,
算法,06ALG007,构造哈夫曼树,中等,基于贪心策略的算法：(1) 初始化n棵单节点树；(2) 重复n-1次：选取权值最小的两棵树合并为一棵新树，新树权值为两者之和；(3) 直到只剩一棵树。通常规定左子树权值小于等于右子树权值。,,,O(n log n)（使用优先队列优化选择最小权值）,O(n),贪心,构建最优二叉树，用于哈夫曼编码等。
算法,06ALG008,哈夫曼编码,中等,利用哈夫曼树为字符生成变长、无前缀的二进制编码。从根节点出发，向左分支记为0，向右分支记为1，到达叶子节点的路径即为该叶子对应字符的编码。出现频率高的字符编码短。,,,取决于哈夫曼树的构建和遍历,取决于存储编码和树的结构,贪心、树遍历,数据压缩，减少传输或存储的数据量。
概念,06CON007,线索,入门,在线索二叉树中，利用结点的空指针域存放的指向该结点在某种遍历次序下的前驱或后继结点的指针。分为左线索（前驱）和右线索（后继）。,,,,,,
算法,06ALG009,二叉树线索化,中等,对二叉树进行某种遍历（如中序），在遍历过程中修改结点的空指针域，使其指向前驱或后继结点，并设置线索标志位。例如中序线索化，在访问节点时处理其左线索（指向前驱）和前驱节点的右线索（指向当前节点）。,,,O(n),O(1)（若递归则为O(h)，h为树高）,树遍历、指针修改,为二叉树添加线索，以便进行非递归、快速的前驱/后继查找和遍历。
算法,06ALG010,中序线索二叉树遍历,中等,利用线索进行非递归的中序遍历。首先找到中序序列的第一个节点（最左下节点），然后反复查找当前节点的后继节点（通过右线索或右子树的最左下节点）并访问，直至遍历完成。,,,O(n),O(1),指针跟踪、利用线索,高效地、非递归地按中序访问线索二叉树的所有节点。
概念,06CON008,平衡因子,入门,二叉树中某个结点的左子树高度减去右子树高度的值。在平衡二叉树（AVL树）中，平衡因子只能是-1、0或1。,,,,,,
算法,06ALG011,LL型调整,高级,平衡二叉树的一种旋转操作。当在根结点A的左孩子B的左子树上插入导致A失衡（平衡因子变为2）时进行。将B提升为新的根，A成为B的右孩子，B原来的右子树成为A的左子树。,,,O(1),O(1),旋转操作,恢复平衡二叉树因LL型插入导致的失衡。
算法,06ALG012,RR型调整,高级,平衡二叉树的一种旋转操作。当在根结点A的右孩子B的右子树上插入导致A失衡（平衡因子变为-2）时进行。将B提升为新的根，A成为B的左孩子，B原来的左子树成为A的右子树。与LL型对称。,,,O(1),O(1),旋转操作,恢复平衡二叉树因RR型插入导致的失衡。
算法,06ALG013,LR型调整,高级,平衡二叉树的一种双旋转操作。当在根结点A的左孩子B的右子树（根为C）上插入导致A失衡（平衡因子变为2）时进行。先对B进行RR旋转，再对A进行LL旋转。最终C成为新的根。,,,O(1),O(1),双旋转操作,恢复平衡二叉树因LR型插入导致的失衡。
算法,06ALG014,RL型调整,高级,平衡二叉树的一种双旋转操作。当在根结点A的右孩子B的左子树（根为C）上插入导致A失衡（平衡因子变为-2）时进行。先对B进行LL旋转，再对A进行RR旋转。最终C成为新的根。与LR型对称。,,,O(1),O(1),双旋转操作,恢复平衡二叉树因RL型插入导致的失衡。
数据结构,07DS001,图,中等,一种复杂的非线性数据结构，由顶点集(V)和边集(E)组成。V是顶点集合，E是V上顶点对（无序或有序）的集合，表示顶点之间的关系。,依赖于存储结构，如邻接矩阵为O(n^2)，邻接表为O(n+e),非线性结构，顶点间关系复杂（多对多）,,,,
概念,07CON002,边,入门,连接图中两个顶点的线，表示顶点之间的关系。可以是无向边或有向边。用E表示边集合。,,,,,,
概念,07CON004,无向边,入门,"没有方向性的边，连接两个顶点，关系是双向的。在无向图中表示为无序对 (vi, vj)。",,,,,,
数据结构,07DS002,有向图,中等,边集E(G)中均为有向边的图。,依赖于存储结构，如邻接矩阵为O(n^2)，邻接表为O(n+e),边具有方向性,,,,
数据结构,07DS003,无向图,中等,边集E(G)中均为无向边的图。,依赖于存储结构，如邻接矩阵为O(n^2)，邻接表为O(n+2e),边没有方向性,,,,
概念,07CON005,邻接点,入门,"在无向图中，若存在边(vi, vj)，则vi和vj互为邻接点。在有向图中，若存在边<vi, vj>，则称vj是vi的出边邻接点，vi是vj的入边邻接点。",,,,,,
概念,07CON006,出边,入门,"在有向图中，从顶点vi出发的有向边<vi, vj>称为vi的一条出边。",,,,,,
概念,07CON007,入边,入门,"在有向图中，指向顶点vj的有向边<vi, vj>称为vj的一条入边。",,,,,,
概念,07CON009,入度,入门,有向图中顶点v的入度是该顶点的入边的数目，记为ID(v)。,,,,,,
概念,07CON010,出度,入门,有向图中顶点v的出度是该顶点的出边的数目，记为OD(v)。,,,,,,
概念,07CON011,完全图,入门,无向图中每对顶点之间都存在边，或有向图中每对顶点之间都存在方向相反的两条边。n个顶点的无向完全图有n(n-1)/2条边，有向完全图有n(n-1)条边。,,,,,,
概念,07CON012,稠密图,入门,边数接近完全图的图，即边数e接近n(n-1)数量级。,,,,,,
概念,07CON013,稀疏图,入门,边数远少于完全图的图，通常边数e与顶点数n同数量级（e << n(n-1)）。,,,,,,
概念,07CON014,子图,入门,"设有两个图G=(V,E)和G'=(V',E')，若V'是V的子集，E'是E的子集，并且E'中所涉及到的顶点全部包含在V'中，则称G'是G的子图。",,,,,,
概念,07CON016,回路,入门,起点和终点相同的路径，也称为环。,,,,,,
概念,07CON017,简单路径,入门,路径序列中顶点不重复出现的路径。,,,,,,
概念,07CON018,简单回路,入门,除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，也称为简单环。,,,,,,
概念,07CON019,连通,入门,在无向图中，若从顶点vi到顶点vj有路径存在，则称vi和vj是连通的。,,,,,,
概念,07CON020,连通图,入门,在无向图中，如果任意两个顶点之间都存在路径，则称此无向图为连通图。,,,,,,
概念,07CON021,非连通图,入门,存在顶点之间不连通的无向图。,,,,,,
概念,07CON022,连通分量,中等,无向图G的极大连通子图称为G的连通分量。连通图只有一个连通分量，非连通图有多个连通分量。,,,,,,
概念,07CON023,强连通图,中等,在有向图中，如果对于任意两个顶点vi和vj，都存在从vi到vj和从vj到vi的路径，则称此有向图为强连通图。,,,,,,
概念,07CON024,强连通分量,中等,有向图G的极大强连通子图称为G的强连通分量。,,,,,,
概念,07CON025,权,入门,图中每条边可以标上的具有某种含义的数值，通常为非负实数，称为该边的权(weight)。,,,,,,
数据结构,07DS004,带权图,中等,边上带有权的图，也常称做网(network)。,同图，但边信息需额外存储权值,边具有权重信息,,,,
算法,07ALG001,初始化图,入门,初始化图的存储空间，例如将邻接矩阵置零或无穷大，或将邻接表头指针置空。,,,O(n^2)或O(n),O(1),初始化,创建图之前准备存储结构
算法,07ALG002,创建图,入门,根据输入的顶点和边集信息，构建图的具体存储表示（如邻接矩阵、邻接表）。,,,取决于输入方式和存储结构，通常与边数e相关,O(1)（操作本身）,构建,从数据源生成图的内存表示
算法,07ALG003,遍历图,中等,按照特定规则（如深度优先或广度优先）访问图中所有可达顶点一次且仅一次。,,,O(n+e) (邻接表) / O(n^2) (邻接矩阵),O(n) (辅助空间),搜索,系统性地访问图的每个部分，是许多图算法的基础
数据结构,07DS005,邻接矩阵,入门,使用n阶方阵存储n个顶点之间的邻接关系。A[i][j]的值表示顶点vi到vj是否存在边（或边的权值）。,O(n^2),判断边存在O(1)，求顶点度/邻接点O(n)，适合稠密图,,,,
数据结构,07DS006,邻接表,入门,为图中每个顶点维护一个单链表，存储所有与该顶点邻接的边（或顶点）。使用数组存储每个链表的头指针。,O(n+e),节省空间（稀疏图），查找顶点所有邻接点高效，不方便查找入边（对有向图）,,,,
数据结构,07DS007,边集数组,入门,使用一个数组存储图中所有的边，每个数组元素包含一条边的起点、终点和权值（可选）。,O(e),直观表示边，适合需要直接操作边的算法（如Kruskal），查找特定边或顶点邻接点效率低O(e),,,,
数据结构,07DS008,逆邻接表,中等,邻接表的变体，用于有向图。每个顶点的链表存储所有指向该顶点的入边信息（即存储入边邻接点）。,O(n+e),方便查找顶点的入边和计算入度,,,,
数据结构,07DS009,十字邻接表,中等,用于有向图的存储结构。每个顶点和每条边都有结点。边结点包含起点、终点、权值以及指向同起点下一条出边和同终点下一条入边的指针。,O(n+e),同时方便查找顶点的出边和入边信息，以及计算出度和入度,,,,
算法,07ALG004,深度优先搜索,中等,图遍历算法。从起始顶点出发，沿一条路径尽可能深地访问，直到末端再回溯，访问其他分支。通常使用递归或栈实现。,,,O(n+e) (邻接表) / O(n^2) (邻接矩阵),O(n) (递归栈或辅助栈),递归/回溯/栈,查找路径、检测环、拓扑排序、连通性判断
算法,07ALG005,广度优先搜索,中等,图遍历算法。从起始顶点出发，逐层访问其邻接点。首先访问距离起点为1的所有顶点，然后是距离为2的，以此类推。通常使用队列实现。,,,O(n+e) (邻接表) / O(n^2) (邻接矩阵),O(n) (队列),队列/层次遍历,查找无权图最短路径、连通性判断
数据结构,08DS001,生成树,中等,连通图G的一个子图G'，包含G的所有顶点，且边集是G的边集的子集，使得G'是连通的且无回路。具有n个顶点的生成树恰好有n-1条边，是极小连通子图。,O(V) （边列表）,连通性、无回路、包含所有顶点,,,,
数据结构,08DS002,深度优先生成树,中等,通过深度优先搜索遍历连通图生成的生成树。,O(V),反映DFS遍历顺序,,,,
数据结构,08DS003,广度优先生成树,中等,通过广度优先搜索遍历连通图生成的生成树。,O(V),反映BFS遍历顺序，通常较矮,,,,
概念,08CON004,极小连通子图,入门,连通图的包含所有顶点的连通子图，其边数最少。生成树是极小连通子图。,,,,,,
数据结构,08DS004,连通网,入门,带权的连通图，即边上具有权值的连通图。最小生成树是针对连通网定义的。,O(V^2)（邻接矩阵）或 O(V+E)（邻接表）,连通性、带权边,,,,
数据结构,08DS005,最小生成树,中等,在连通网中，连接所有顶点且权值总和最小的生成树。用于解决网络建设成本最低等问题。,O(V) （边列表）,连通性、无回路、权值和最小,,,,
算法,08ALG003,普里姆算法,中等,求解最小生成树的贪心算法。从一个顶点开始，逐步扩展生成树，每次选择连接已选顶点集和未选顶点集之间权值最小的边。,,,O(n^2)（邻接矩阵实现）,O(n)（辅助数组）,贪心算法,求解稠密图的最小生成树
算法,08ALG004,克鲁斯卡尔算法,中等,求解最小生成树的贪心算法。将所有边按权值排序，依次选择权值最小的边，若该边连接的两个顶点不在同一连通分量（即不形成回路），则加入生成树。,,,O(E log E) 或 O(E log V)（主要取决于排序和并查集操作），文中提及 O(n^2),O(E) 或 O(V)（取决于边存储和并查集实现），文中提及 O(n^2),贪心算法、并查集,求解稀疏图的最小生成树
概念,08CON009,最短路径,入门,图中两个顶点之间路径长度最短的路径。对于带权图，指带权路径长度最小的路径。,,,,,,
概念,08CON010,最短距离,入门,图中两个顶点之间最短路径的路径长度（或带权路径长度）。,,,,,,
概念,08CON012,源点,入门,在路径问题或网络流问题中定义的起始顶点。如单源最短路径的起点，AOE网的工程起点。,,,,,,
算法,08ALG005,狄克斯特拉算法,中等,求解带权图中单源最短路径的贪心算法。按路径长度递增的顺序，依次确定源点到各顶点的最短路径。不能处理负权边。,,,O(n^2)（邻接矩阵实现）,O(n)（辅助数组）,贪心算法、广度优先思想的扩展,求解无负权边的单源最短路径问题
算法,08ALG006,弗洛伊德算法,中等,求解图中每对顶点之间最短路径的动态规划算法。通过考虑中间顶点，逐步更新任意两点间的最短距离。可以处理负权边（但不能处理负权回路）。,,,O(n^3),O(n^2)（距离矩阵）,动态规划,求解所有顶点对之间的最短路径，允许负权边（无负权回路）
概念,08CON014,活动,入门,表示工程中的一个子工程或任务。在AOV网中用顶点表示，在AOE网中用边表示。,,,,,,
概念,08CON015,前驱活动,入门,在工程计划中，必须在某个活动开始之前完成的活动。,,,,,,
数据结构,08DS010,顶点活动网,中等,用顶点表示活动，用有向边表示活动之间的先后（前驱）关系的图。用于表示工程活动依赖关系，必须是无环图。,O(V+E)（邻接表）,顶点表示活动、边表示优先关系、有向无环,,,,
概念,08CON016,后续活动,入门,在工程计划中，必须在某个活动完成之后才能开始的活动。,,,,,,
数据结构,08DS011,有向无环图,入门,不包含有向回路的有向图。AOV网和AOE网通常是DAG。,O(V^2)（邻接矩阵）或 O(V+E)（邻接表）,有向性、无回路,,,,
概念,08CON017,死锁,入门,在AOV网中，由于存在回路（循环依赖）导致所有相关活动都无法开始的状态。,,,,,,
概念,08CON018,拓扑序列,入门,"有向无环图（AOV网）中所有顶点的一个线性排序，使得对于图中任意一条有向边(u, v)，u在该序列中都出现在v之前。拓扑序列可能不唯一。",,,,,,
算法,08ALG007,拓扑排序,中等,生成有向无环图（AOV网）的拓扑序列的过程。常用方法是重复选择并输出入度为0的顶点，然后删除该顶点及其出边。,,,O(n+e)（邻接表实现）,O(n)（入度数组和栈/队列）,基于入度的迭代移除、基于DFS,任务调度、依赖解析、判断图是否有环
数据结构,08DS014,边活动网,中等,用带权有向边表示活动及其持续时间，用顶点表示事件（活动的开始或结束）的网络图。用于工程计划和关键路径分析。,O(V+E)（邻接表）,边表示活动、顶点表示事件、带权、有向无环,,,,
概念,08CON021,事件,入门,在AOE网中，表示某些活动完成和另一些活动开始的转接点，通常用顶点表示。,,,,,,
概念,08CON022,持续时间,入门,在AOE网中，表示完成一个活动所需的时间，通常作为边的权值。,,,,,,
概念,08CON025,最早发生时间,中等,在AOE网中，一个事件（顶点）可能发生的最早时间点。等于从源点到该事件顶点的最长路径长度。用ve表示。,,,,,,
概念,08CON027,最长路径,中等,在带权图中，两个顶点之间带权路径长度最大的路径。在AOE网中用于计算事件最早发生时间。,,,,,,
概念,08CON028,拓扑有序,入门,按照拓扑序列的顺序。计算AOE网事件最早发生时间需要按拓扑有序进行。,,,,,,
概念,08CON029,最迟发生时间,中等,在AOE网中，一个事件（顶点）在不延误整个工程完成的前提下，必须发生的最晚时间点。用vl表示。,,,,,,
概念,08CON031,逆拓扑有序,入门,按照拓扑序列的逆序。计算AOE网事件最迟发生时间需要按逆拓扑有序进行。,,,,,,
概念,08CON032,开始时间余量,中等,在AOE网中，活动的最迟开始时间与最早开始时间之差（l[i] - e[i]）。表示该活动可以推迟开始而不影响总工期的时间。,,,,,,
概念,08CON033,关键活动,中等,在AOE网中，开始时间余量为0的活动。这些活动是影响工程总工期的关键环节。,,,,,,
概念,08CON034,关键路径,中等,在AOE网中，从源点到汇点的、完全由关键活动组成的路径。关键路径的长度等于整个工程的最短完成时间。,,,,,,
算法,08ALG008,关键路径算法,中等,计算AOE网中关键路径的过程。包括计算所有事件的最早和最迟发生时间，进而计算活动的开始时间余量，找出关键活动和关键路径。,,,O(n+e),O(n) 或 O(n+e),拓扑排序、动态规划思想,工程项目管理、进度优化
