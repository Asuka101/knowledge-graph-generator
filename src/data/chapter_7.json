{
  "entities": [
    {
      "type": "数据结构",
      "ID": "07DS001",
      "name": "图",
      "attributes": {
        "难度": "中等",
        "内容": "图(graph)是图型结构的简称，是一种复杂的非线性数据结构，由顶点集V和边集E组成，表示为G=(V,E)。顶点之间可以有任意多个前驱和后继。包含线性表和树。",
        "存储开销": "取决于存储方式，邻接矩阵O(n^2)，邻接表O(n+e)",
        "核心特性": "多对多关系",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "图结构体现了现实世界中广泛存在的网络关系和系统互联，启发学生理解事物普遍联系的观点。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS002",
      "name": "有向图",
      "attributes": {
        "难度": "中等",
        "内容": "边集E(G)中为有向边（序偶）的图。边表示从一个顶点指向另一个顶点的关系。",
        "存储开销": "邻接矩阵O(n^2)，邻接表O(n+e)",
        "核心特性": "边具有方向性",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "有向图模拟了具有方向性的流程或依赖关系，如任务流程、因果关系，有助于培养逻辑思维和系统规划能力。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS003",
      "name": "无向图",
      "attributes": {
        "难度": "中等",
        "内容": "边集E(G)中为无向边（无序对）的图。边表示顶点之间的对称关系。",
        "存储开销": "邻接矩阵O(n^2)，邻接表O(n+2e)",
        "核心特性": "边无方向性，关系对称",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "无向图代表了平等协作或相互连接的关系，如社交网络、交通网络，体现了合作与共享的重要性。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON001",
      "name": "顶点",
      "attributes": {
        "难度": "入门",
        "内容": "图中的基本元素，代表实体或对象。通常用V表示顶点集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "图中的顶点如同社会中的个体或系统中的节点，理解其作用有助于认识个体在整体中的地位和价值。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON002",
      "name": "边",
      "attributes": {
        "难度": "入门",
        "内容": "连接图中两个顶点的线段（无向边）或箭头（有向边），代表顶点之间的关系。通常用E表示边集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "边代表了事物间的联系和相互作用，理解边的概念有助于分析系统结构和关系网络。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON003",
      "name": "邻接点",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，若存在边(vi, vj)，则vi和vj互为邻接点。在有向图中，若存在边<vi, vj>，则vj是vi的出边邻接点，vi是vj的入边邻接点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "邻接关系揭示了节点间的直接联系，是理解网络局部结构和信息传递的基础。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON004",
      "name": "度",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中顶点v的度是以该顶点为一个端点的边的数目。有向图中顶点的度等于其入度和出度之和。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "顶点的度反映了其在网络中的连接程度和影响力，启发学生思考个体在集体中的作用和责任。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON005",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中顶点v的入边数目，记为ID(v)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "入度可以衡量一个节点受其他节点影响或指向的程度，例如在依赖关系中表示被依赖的次数。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON006",
      "name": "出度",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中顶点v的出边数目，记为OD(v)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "出度可以衡量一个节点影响其他节点或指向其他节点的程度，例如在流程图中表示后续步骤的数量。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS004",
      "name": "完全图",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中每两个顶点之间都存在边；有向图中每两个顶点之间都存在方向相反的两条边。n个顶点的无向完全图有n(n-1)/2条边，有向完全图有n(n-1)条边。",
        "存储开销": "邻接矩阵O(n^2)，邻接表O(n+n^2)",
        "核心特性": "顶点间连接最密集",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "完全图代表了理想化的全连接状态，虽然现实中少见，但其概念有助于理解网络连接的上限和极端情况。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON007",
      "name": "稠密图",
      "attributes": {
        "难度": "入门",
        "内容": "边数接近完全图的图，即边数e接近n(n-1)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "稠密图的概念帮助区分不同连接密度的网络，适用于分析高度互联的系统。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON008",
      "name": "稀疏图",
      "attributes": {
        "难度": "入门",
        "内容": "含有较少边数的图，通常边数e与顶点数n同数量级，即e << n(n-1)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "稀疏图是现实世界中更常见的网络形态，如社交网络、交通网，其分析和存储优化具有重要实践意义。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON009",
      "name": "子图",
      "attributes": {
        "难度": "入门",
        "内容": "设有两个图G=(V,E)和G'=(V',E')，若V'是V的子集，E'是E的子集，且E'中涉及的顶点均在V'中，则称G'是G的子图。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "子图的概念体现了整体与部分的关系，有助于从局部结构分析复杂系统。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON010",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "从顶点v到顶点v'的一个顶点序列v_i1, v_i2, ..., v_im，其中v=v_i1，v'=v_im，且相邻顶点间存在边。路径长度是路径上边的数目。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "路径是探索图中顶点间可达性的基础，模拟了现实世界中的路线、流程或信息传递过程。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON011",
      "name": "回路",
      "attributes": {
        "难度": "入门",
        "内容": "起点和终点相同的路径，也称为环。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "回路代表了系统中的循环或反馈机制，是分析网络稳定性和周期性行为的关键。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON012",
      "name": "简单路径",
      "attributes": {
        "难度": "入门",
        "内容": "路径上所有顶点均不相同的路径。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "简单路径排除了重复访问，常用于最短路径等优化问题，体现了效率和简洁性原则。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON013",
      "name": "简单回路",
      "attributes": {
        "难度": "入门",
        "内容": "除起点和终点相同外，其余顶点均不相同的回路。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "简单回路是构成复杂网络结构的基本单元，在网络分析和环路检测中有重要应用。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON014",
      "name": "连通",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，若从顶点vi到顶点vj有路径，则称vi和vj是连通的。在有向图中，若从vi到vj有路径，则称从vi到vj是连通的。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "连通性是衡量网络整体性的重要指标，关系到信息或资源能否在网络中有效流通。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS005",
      "name": "连通图",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中任意两个顶点都连通的图。",
        "存储开销": "取决于存储方式",
        "核心特性": "任意两点可达",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "连通图模型体现了系统的整体性和鲁棒性，即使部分连接中断，仍能保持整体功能。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON015",
      "name": "连通分量",
      "attributes": {
        "难度": "中等",
        "内容": "无向图G的极大连通子图。非连通图有多个连通分量。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "连通分量揭示了非连通网络的内部结构，有助于将复杂问题分解为若干独立子问题处理。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS006",
      "name": "强连通图",
      "attributes": {
        "难度": "中等",
        "内容": "有向图中任意两个顶点vi和vj，从vi到vj和从vj到vi都存在路径。",
        "存储开销": "取决于存储方式",
        "核心特性": "任意两点相互可达",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "强连通图模型强调了网络中任意节点间的双向可达性，常用于分析具有强依赖或循环反馈的系统。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON016",
      "name": "强连通分量",
      "attributes": {
        "难度": "中等",
        "内容": "有向图G的极大强连通子图。非强连通图有多个强连通分量。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "强连通分量是分析有向图结构的关键，有助于识别图中具有紧密双向联系的节点群组。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON017",
      "name": "权",
      "attributes": {
        "难度": "入门",
        "内容": "图中每条边可以标上具有某种含义的数值（通常为非负实数），称为该边的权(weight)。例如表示距离、成本、时间等。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "权的概念为图模型增加了量化维度，使得能够模拟和优化现实世界中带有成本或度量的问题。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS007",
      "name": "带权图",
      "attributes": {
        "难度": "入门",
        "内容": "边上带有权的图，也常称为网(network)。",
        "存储开销": "取决于存储方式，需要在边信息中额外存储权值",
        "核心特性": "边具有量化属性",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "带权图广泛应用于路径优化、资源分配等问题，体现了在约束条件下寻求最优解的工程思想。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS008",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "表示图形中顶点之间相邻关系的n阶方阵A。A[i,j]=1（或权值）表示顶点i到j有边，否则为0（或无穷大）。无向图的邻接矩阵对称。",
        "存储开销": "O(n^2)",
        "核心特性": "快速判断边是否存在(O(1))，空间占用固定",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "邻接矩阵用规整的二维结构表示复杂的图关系，体现了数学工具在抽象和解决问题中的力量，但需注意空间效率问题。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS009",
      "name": "邻接表",
      "attributes": {
        "难度": "中等",
        "内容": "对图中每个顶点vi建立一个单链表，存储所有以vi为起点的边的信息（邻接点序号、权值等）。用一个数组存储各链表的头指针。",
        "存储开销": "O(n+e)（有向图）或O(n+2e)（无向图）",
        "核心特性": "节省稀疏图空间，方便查找顶点的邻接点",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "邻接表针对稀疏图优化了存储，体现了根据问题特性选择合适数据结构的重要性，培养了具体问题具体分析的思维。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS010",
      "name": "逆邻接表",
      "attributes": {
        "难度": "中等",
        "内容": "对有向图中每个顶点vi建立一个单链表，存储所有以vi为终点的边的信息（入边邻接点序号、权值等）。",
        "存储开销": "O(n+e)",
        "核心特性": "方便查找顶点的入边和入度",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "逆邻接表是对邻接表的补充，解决了特定查询（入边）的效率问题，体现了为满足特定需求而改进数据结构的创新思维。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS011",
      "name": "十字邻接表",
      "attributes": {
        "难度": "高级",
        "内容": "结合邻接表和逆邻接表思想的有向图存储结构。每个边结点包含起点、终点、权值、指向同起点的下一条出边和指向同终点的下一条入边的指针。顶点结点包含第一条入边和第一条出边的指针。",
        "存储开销": "O(n+e)",
        "核心特性": "方便查找顶点的出边、入边、出度和入度",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "十字邻接表通过更复杂的结构整合了多种查询功能，体现了在数据结构设计中权衡复杂性与功能性的思想。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS012",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "使用一维数组存储图中所有边的信息（起点、终点、权值）。",
        "存储开销": "O(e)",
        "核心特性": "结构简单，适合对边进行遍历处理",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "边集数组以最直接的方式存储边的集合，适用于某些特定算法（如Kruskal），体现了简洁性原则。"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG001",
      "name": "图的遍历",
      "attributes": {
        "难度": "中等",
        "内容": "从图中指定初始点出发，按照一定搜索方法对图中所有可达顶点访问一次且仅访问一次的过程。需要辅助标记数组避免重复访问。",
        "时间复杂度": "取决于具体算法和图的存储结构",
        "空间复杂度": "取决于具体算法和图的存储结构",
        "设计思想": "系统性访问",
        "适用场景": "图的基础操作，许多图算法的基础",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "图的遍历是系统性探索未知网络结构的方法，如同科学研究中的系统调查，强调了全面性和不重复不遗漏的严谨性。"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG002",
      "name": "深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "图遍历算法。从初始点出发，访问该顶点，然后递归地访问其一个未被访问的邻接点，直到该路径走到尽头，再回溯到上一个顶点，访问其其他未被访问的邻接点。",
        "时间复杂度": "邻接矩阵O(n^2)，邻接表O(n+e)",
        "空间复杂度": "O(n)（递归栈或显式栈）",
        "设计思想": "递归、回溯、栈",
        "适用场景": "查找路径、连通性判断、拓扑排序、查找关节点/桥",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "深度优先搜索体现了“一探到底”的探索策略和回溯思想，如同解决问题时深入钻研一个方向，遇到障碍再尝试其他路径，培养了探索精神和解决复杂问题的能力。"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG003",
      "name": "广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "图遍历算法。从初始点出发，访问该顶点，然后访问其所有未被访问的邻接点，再按访问顺序依次访问这些邻接点的未被访问的邻接点，逐层向外扩展。",
        "时间复杂度": "邻接矩阵O(n^2)，邻接表O(n+e)",
        "空间复杂度": "O(n)（队列）",
        "设计思想": "队列、层次扩展",
        "适用场景": "查找最短路径（无权图）、连通性判断、层序遍历",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "广度优先搜索体现了“稳步推进、层层扩展”的策略，如同涟漪扩散，常用于寻找最短路径，培养了系统规划和优化思维。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS013",
      "name": "队列",
      "attributes": {
        "难度": "入门",
        "内容": "一种先进先出（FIFO）的线性数据结构。允许在表的一端进行插入（入队），在另一端进行删除（出队）。",
        "存储开销": "顺序队列O(N)，链式队列O(n)",
        "核心特性": "先进先出",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "队列模拟了排队现象，体现了公平性和有序性原则，在资源调度和任务处理中有广泛应用。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS014",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "一种后进先出（LIFO）的线性数据结构。只允许在表的一端进行插入（入栈）和删除（出栈）。",
        "存储开销": "顺序栈O(N)，链式栈O(n)",
        "核心特性": "后进先出",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "栈的后进先出特性常用于处理具有嵌套或回溯性质的问题，如函数调用、表达式求值，体现了处理递归和层次结构的有效方法。"
      }
    }
  ],
  "relations": [
    {
      "type": "继承",
      "ID": "07REL001",
      "source": "07DS002",
      "target": "07DS001"
    },
    {
      "type": "继承",
      "ID": "07REL002",
      "source": "07DS003",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL003",
      "source": "07CON002",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL004",
      "source": "07CON003",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL005",
      "source": "07CON003",
      "target": "07CON002"
    },
    {
      "type": "理论依赖",
      "ID": "07REL006",
      "source": "07CON004",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL007",
      "source": "07CON004",
      "target": "07CON002"
    },
    {
      "type": "理论依赖",
      "ID": "07REL008",
      "source": "07CON005",
      "target": "07CON004"
    },
    {
      "type": "理论依赖",
      "ID": "07REL009",
      "source": "07CON006",
      "target": "07CON004"
    },
    {
      "type": "继承",
      "ID": "07REL010",
      "source": "07DS004",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL011",
      "source": "07CON007",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL012",
      "source": "07CON008",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL013",
      "source": "07CON009",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL014",
      "source": "07CON010",
      "target": "07CON001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL015",
      "source": "07CON010",
      "target": "07CON002"
    },
    {
      "type": "理论依赖",
      "ID": "07REL016",
      "source": "07CON011",
      "target": "07CON010"
    },
    {
      "type": "理论依赖",
      "ID": "07REL017",
      "source": "07CON012",
      "target": "07CON010"
    },
    {
      "type": "理论依赖",
      "ID": "07REL018",
      "source": "07CON013",
      "target": "07CON011"
    },
    {
      "type": "理论依赖",
      "ID": "07REL019",
      "source": "07CON014",
      "target": "07CON010"
    },
    {
      "type": "继承",
      "ID": "07REL020",
      "source": "07DS005",
      "target": "07DS003"
    },
    {
      "type": "理论依赖",
      "ID": "07REL021",
      "source": "07DS005",
      "target": "07CON014"
    },
    {
      "type": "理论依赖",
      "ID": "07REL022",
      "source": "07CON015",
      "target": "07DS005"
    },
    {
      "type": "理论依赖",
      "ID": "07REL023",
      "source": "07CON015",
      "target": "07CON009"
    },
    {
      "type": "继承",
      "ID": "07REL024",
      "source": "07DS006",
      "target": "07DS002"
    },
    {
      "type": "理论依赖",
      "ID": "07REL025",
      "source": "07DS006",
      "target": "07CON014"
    },
    {
      "type": "理论依赖",
      "ID": "07REL026",
      "source": "07CON016",
      "target": "07DS006"
    },
    {
      "type": "理论依赖",
      "ID": "07REL027",
      "source": "07CON016",
      "target": "07CON009"
    },
    {
      "type": "理论依赖",
      "ID": "07REL028",
      "source": "07CON017",
      "target": "07CON002"
    },
    {
      "type": "继承",
      "ID": "07REL029",
      "source": "07DS007",
      "target": "07DS001"
    },
    {
      "type": "理论依赖",
      "ID": "07REL030",
      "source": "07DS007",
      "target": "07CON017"
    },
    {
      "type": "使用",
      "ID": "07REL031",
      "source": "07DS008",
      "target": "07DS001"
    },
    {
      "type": "使用",
      "ID": "07REL032",
      "source": "07DS009",
      "target": "07DS001"
    },
    {
      "type": "使用",
      "ID": "07REL033",
      "source": "07DS010",
      "target": "07DS002"
    },
    {
      "type": "变体",
      "ID": "07REL034",
      "source": "07DS010",
      "target": "07DS009"
    },
    {
      "type": "使用",
      "ID": "07REL035",
      "source": "07DS011",
      "target": "07DS002"
    },
    {
      "type": "变体",
      "ID": "07REL036",
      "source": "07DS011",
      "target": "07DS009"
    },
    {
      "type": "变体",
      "ID": "07REL037",
      "source": "07DS011",
      "target": "07DS010"
    },
    {
      "type": "使用",
      "ID": "07REL038",
      "source": "07DS012",
      "target": "07DS001"
    },
    {
      "type": "操作绑定",
      "ID": "07REL039",
      "source": "07ALG001",
      "target": "07DS001"
    },
    {
      "type": "继承",
      "ID": "07REL040",
      "source": "07ALG002",
      "target": "07ALG001"
    },
    {
      "type": "继承",
      "ID": "07REL041",
      "source": "07ALG003",
      "target": "07ALG001"
    },
    {
      "type": "使用",
      "ID": "07REL042",
      "source": "07ALG003",
      "target": "07DS013"
    },
    {
      "type": "使用",
      "ID": "07REL043",
      "source": "07ALG002",
      "target": "07DS014"
    }
  ]
}