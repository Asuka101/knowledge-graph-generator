2. 根据一个图的边集生成图的邻接矩阵的算法

void CreateMatrix(adjmatrix GA, int n, char*s, int k1, int k2)
//k1为0则为无向图否则为有向图，k2为0则为无权图否则为有权图
//s字符串用来保存一个图的边集，n为图的顶点数

{
    istringstream sin(s); //定义sin为字符串输入流，与s边集对应
    char c1,c2,c3; //用来保存从输入流中读入的字符
    int i,j; //用i,j保存一条边的起点和终点序号
    WeightType w; //用w保存一条边的权值
    sin>>c1; //从sin输入流中读入第1个字符'('
    if(k1==0 && k2==0) //建立无向无权图
        do {
            sin>>c1>>i>>c2>>j>>c3; //依次读入一条边的5个数据
            GA[i][j]=GA[j][i]=1; //置相应的对称元素为1
            sin>>c1; //读入逗号或右花括号
            if(c1==')') break; //边集处理完毕，退出循环
        } while(1);
    else if(k1==0 && k2!=0) //建立无向有权图
        do {
            sin>>c1>>i>>c2>>j>>c3>>w;
            GA[i][j]=GA[j][i]=w; //置相应的对称元素为w
            sin>>c1;
            if(c1==')') break;
        } while(1);
    else if(k1!=0 && k2==0) //建立有向无权图
        do {
            sin>>c1>>i>>c2>>j>>c3;
            GA[i][j]=1; //置相应的元素为1
            sin>>c1;
            if(c1==')') break;
        } while(1);
    else if(k1!=0 && k2!=0) //建立有向有权图
        do {
            sin>>c1>>i>>c2>>j>>c3>>w;
            GA[i][j]=w; //置相应的元素为w
            sin>>c1;
            if(c1==')') break;
        } while(1);
}

在算法中的每条sin语句之后可增加一条语句或函数调用检查$i$和$j$是否在$0\sim n-1$范围内，若不在则退出运行。

3. 根据图的邻接矩阵输出图的二元组表示（顶点集和边集）的算法

void PrintMatrix(adjmatrix GA, int n, int k1, int k2)
