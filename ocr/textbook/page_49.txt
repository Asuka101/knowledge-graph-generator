选择符左面的操作数应为一个记录类型的对象（记录变量），而间接成员选择符左面的操作数应为一个指向记录类型对象的指针，它们右面的操作数均应为记录中的一个要访问的域名。通过“.”或“->”操作符能够读取记录中的任一个域的值，或者向记录中的任一个域写入数据。

在定义一个记录类型的对象时，可以同时对它进行初始化，用于初始化的记录值要用大括号括起来，各个域值按记录中对应类型定义的顺序给出，其前后域值之间要用逗号分开，若域值是一个字符串，则必须用双引号括起来，若是一个字符则必须用单引号括起来，若是一个数组或另一个记录则必须用大括号括起来。记录类型的对象还可以同简单类型的对象那样，允许使用赋值号把一个对象赋给另一个同一类型的对象。

下面定义了一个学生记录类型（student），它包含有4个域，分别为学号（num）、姓名（name）、性别（sex）和用于保存学生5门课程成绩及平均成绩的数组（result）。

```
struct student {
    char num[8];                   //每个学号不能超过7个字符
    char name[10];                 //姓名不能超过9个字符
    char sex;                      //假定用字符m和f分别表示男性和女性
    double result[6];              //前5个元素保存5门课成绩,最后一个保存平均成绩
};
```

为了使用上述类型，下面给出了3条语句：第1条语句定义了一个student对象s1并赋予初值，第2条语句计算出s1记录中5门课程的平均成绩，第3条语句显示出s1的学号、姓名、性别和平均成绩。其显示结果为：980413 左明华 m 77.6。

```
student s1={"980413","左明华",'m',{76,83,64,90,75,0}};
for(int i=0;i<5;i++)
    s1.result[5]+=s1.result[i]/5;
cout<<s1.num<<" "<<s1.name<<" "<<s1.sex<<" "<<s1.result[5]<<endl;
```

下面的程序定义了一个记录类型person，其大小为24个字节，它带有指向自身类型的指针next；另外两个域为字符串域name和整数域age。通过next域可以把该类型的结点（对象）链接起来，形成一个单链表。该程序把r1、r2和r3这3个结点依次链接起来，并使p指向这个单链表的头结点r1。程序最后通过while循环依次按左对齐显示出每个结点的name域和age域的值，其显示宽度分别为15和5。

```
//程序1-11.cpp
#include<iostream.h>
#include<iomanip.h>        //该头文件包含iostream.h的全部内容,并包含
                            //更多的输入/输出格式控制功能,使用此条命令时可省略其上一条命令
struct person{
    char name[15];
    int age;
    person* next;
};
void main()
{
```
