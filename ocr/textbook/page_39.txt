cout<<endl;
}

该程序运行后的显示结果如下。

41 67 34 0 69 24 78 58 62 64
45 16 98 95 84 50 90 31 5 16
41 67 34 0 69 24 78 58 62 64

下面程序在每次运行时, 将会得到完全不同的运行结果。因为在 srand 函数的参数中使用了 time(0)函数, 此函数原型定义在 time.h 头文件中, 它返回从 1970 年 1 月 1 日零时算起至当前时间为止的秒数。由于当前时间是时刻变化的, 所以可以使每次运行程序时调用 srand 函数的实参值均不同, 从而使系统生成每次均不同的随机数序列。

//程序 1-4.cpp
#include<iostream.h> //支持输入/输出函数
#include<stdlib.h> //支持随机数函数
#include<time.h> //支持时间函数
void main()
{
    int i,x;
    srand(time(0));
    for(i=0; i<10; i++) {
        x=rand()%100;
        cout<<x<<" ";
    }
    cout<<endl;
}

在 stdlib.h 头文件中还包含有 void* calloc(unsigned int n, unsigned int size)、void* malloc(unsigned int size)、void* realloc(void* p, unsigned int size)、void free(void* p)等函数的原型。calloc 函数用来动态分配$n$个连续存储位置, 每个位置含有存储一个数据元素的 size 个字节, 整个动态存储空间的大小为$n \times \text{size}$个字节, 用来最多存储$n$个数据元素。malloc 函数用来动态分配大小为 size 个字节的新存储空间。realloc 函数用来动态分配大小为 size 个字节的新存储空间, 并把 p 所指向的原动态存储空间的内容复制到新分配得到的动态存储空间中, 同时自动释放掉 p 所指向的原动态存储空间。上述 3 个函数都返回新分配的动态存储空间的首地址, 通常需要将它转换为每个存储位置所存数据的指针类型, 若动态存储分配失败, 则都将返回 NULL 表示失败。free 函数释放由参数 p 所指向的动态存储空间。以上 4 个函数在 C 语言或 C++语言环境中都可以使用。另外, 在 C++语言中还能够使用 new 和 delete 运算符来非常方便地进行动态存储空间的分配和释放。

下面程序给出了上述函数应用的例子, 其中定义指针 p 下的 3 行语句具有相同功能。

//程序 1-5.cpp
#include<iostream.h>
#include<stdlib.h>
