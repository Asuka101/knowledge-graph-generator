该元素存储到这个单元中。散列存储中使用的函数$h(K)$，称为散列函数或哈希函数，它实现关键字到存储地址的映射(或称转换)，$h(K)$的值称为为散列地址或哈希地址；使用的数组空间是线性表来进行散列存储的地址空间，所以被称之为散列表 (Hash list 或 Hash table) 或哈希表。

在散列表上进行查找时，首先根据给定的关键字$K$，用与散列存储时使用的同一散列函数$h(K)$计算出散列地址，然后按此地址从散列表中取出对应的元素。

【例 9-1】一个集合为：$S=\{18,75,60,43,54,90,46\}$其中，每个整数可以是元素本身，也可以仅是元素的关键字，使之代表整个元素。为了散列存储该集合，假定选取的散列函数为：$h(K)=K \% m$即用元素的关键字$K$整除以散列表的长度$m$，取余数（即为$0 \sim m-1$范围内的一个数）作为存储该元素的散列地址，其中，$K$和$m$均为正整数，并且$m$要大于等于待散列的集合的长度$n$。在此例中，$n=7$，取$m=13$，则得到的每个元素的散列地址为：
\begin{align*}
h(18)&=18 \% 13=5 & h(75)&=75 \% 13=10 \\
h(60)&=60 \% 13=8 & h(43)&=43 \% 13=4 \\
h(54)&=54 \% 13=2 & h(90)&=90 \% 13=12 \\
h(46)&=46 \% 13=7 &
\end{align*}
若根据散列地址把元素存储到散列表 H [m] 中，则存储映像如下：

H | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
|---|---|---|---|---|---|---|---|---|---|----|----|----|
|   |   |   | 54 |   | 43 | 18 |   | 46 | 60 |    | 75 | 90 |

从散列表中查找元素同插入元素一样简单，如从 H 中查找关键字为 60 的元素时，只要利用上面的函数$h(K)$计算出$K=60$时的散列地址 8，则从下标为 8 的单元中取出该元素即可。

上例中讨论的散列表是一种理想的情况，即插入时根据元素的关键字求出的散列地址，其对应的存储单元都是空闲的，也就是说，每个元素都能够直接存储到它的散列地址所对应的单元中，不会出现该单元已被其他元素占用的情况。在实际应用中，这种理想情况是很少见的，通常可能出现一个待插入元素的散列地址单元已被占用，使得该元素无法直接存入到此单元中，把这种现象叫做冲突 (collision)。

在散列存储中，冲突是很难避免的，除非关键字的变化区间小于等于散列地址的变化区间，而这种情况当关键字取值不连续时又是非常浪费存储空间的，一般情况是关键字的取值区间大大大于散列地址的变化区间。如在上例中，关键字为两位正整数，其取值区间为$0 \sim 99$，而散列地址的取值区间为$0 \sim 12$，远比关键字的取值区间小。这样，当不同的关键字通过同一散列函数计算散列地址时，就可能出现具有相同散列地址的情况，若该地址中已经存入了一个元素，则具有相同散列地址的其他元素就无法直接存入进去，从而引起冲突，通常把这种具有不同关键字而具有相同散列地址的元素称做同义词，由同义词引起
