```cpp
LNode* a;
InitList(a);
ElemType r[6]={5,0,3,-6,0,2};
int i;
for(i=5; i>=0; i--) InsertList(a,r[i],1);
cout<<"线性表a:";
TraverseList(a);
cout<<"线性表长度:"<<LengthList(a)<<endl;
double y=PolySum1(a,2);
cout<<"x值为2时的多项式值:"<<y<<endl;
ClearList(a);
}
```

在主函数的 for 语句中，按$r$数组元素排列的逆序依次在单链表的表头插入，正好能够得到按指数升序链接的单链表。这样建立的单链表，其时间复杂度为$O(n)$。若把数组$r$中的元素依次插入到单链表的表尾，其建立成的单链表的时间复杂度为$O(n^2)$。此程序的运行结果为：

线性表 a:5 0 3 -6 0 2
线性表长度:6
x 值为 2 时的多项式值:33

\section*{2. 多项式的第 2 种线性表表示与运算}

在一个多项式中，往往会出现许多缺项。如$P(x)=1+6x^5-3x^{12}+7x^{60}$，其中只有 4 项，缺少 57 项，或者说 57 项的系数均为 0。若仍采用上述定义形式的线性表，将浪费存储空间和运算时间，是不可取的。为此，通常采用另一种形式的线性表来表示，该线性表中的每个元素对应多项式中的一个非零项，每个元素包含两个域：系数域（coef）和指数域（exp），用来分别表示对应项的系数和$x$的指数，并且线性表中的元素应按照指数的升序排列，它是按指数有序的一个有序表。$P(x)$多项式的这种线性表表示为：$(\{1,0\},\{6,5\},\{-3,12\},\{7,60\})$将线性表中的元素类型定义为 Term 结构类型，则描述为：

```cpp
struct Term {
    double coef;        //系数
    int exp;            //指数
};
```
通过使用如下的定义语句将 Term 类型与通用的线性表元素类型 ElemType 对应起来。

```cpp
typedef Term ElemType;
```

利用顺序存储结构存储这种线性表的多项式求值的算法如下。

```cpp
double PolySum2(List& P, double x)
{
```
