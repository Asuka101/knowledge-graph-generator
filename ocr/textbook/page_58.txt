p(x,y);
temp=x; x=y; y=temp;
p(x,y);
}
void print(int a, int b)
{
cout<<a<<" "<b<<endl;
}

该程序的运行结果如下。

5 10
10 5
10 5

\section*{1.4 .4 运算符重载}

在 C++语言中, 为满足应用的需要, 允许对大多数运算符进行重载。经常需要使用的是在自定义的记录类型上对关系运算符进行重载, 使得记录同记录之间、记录同其中一个域类型的数据之间也能够进行比较。假定一种记录类型为:

struct pupil{ char pnum[8]; int grade;};

下面是对具有 pupil 类型的两个记录进行相等运算符$(==)$重载的函数, 通过比较两个记录中的 pnum 域的值是否相等来判断这两个记录是否相等, 若相等则返回 true, 否则返回 false。

bool operator==(pupil r1, pupil r2){
if (strcmp(r1.pnum, r2.pnum)==0) return true;
else return false;
}

下面是对具有 pupil 类型的一个记录和一个字符串进行相等运算符$(==)$重载的函数,若记录中的 pnum 域的值等于一个给定的字符串, 则认为它们相等, 应返回 true, 否则认为它们不等, 应返回 false。

bool operator==(pupil r, char * key){
if (strcmp(r.pnum, key)==0) return true;
else return false;
}

对于 pupil 类型的两个记录, 若要由 grade 域的大小来决定这两个记录的大小, 则进行大于运算符$(>)$重载的函数如下。

int operator>(pupil r1, pupil r2){
return r1.grade>r2.grade;
}
