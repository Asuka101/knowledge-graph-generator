(或某个域的值)。

(3) 以左、右孩子为根的子树又各是一个堆。

大根堆的定义与上述类似, 只要把小于等于改为大于等于就得到了。

由堆的定义可知, 若一棵完全二叉树是堆, 则该树中以每个结点为根的子树也都是一

个堆。

如图 6-4 所示分别为一个小根堆和一个大根堆。根据堆的定义可知, 堆顶结点, 即整个完全二叉树的根结点, 对于小根堆来说具有最小值, 对于大根堆来说具有最大值。图 6-4 (a) 是一个小根堆, 堆中的最小值为堆顶结点的值 18, 图 6-4 (b) 是一个大根堆,堆中的最大值为堆顶结点的值 74。若用堆来表示优先级队列, 则堆顶结点具有最高的优先级, 每次做删除操作要删除堆顶结点。$\begin{aligned} & \text { (a) 小根堆 } \\ & \text { (b) 大根堆 } \end{aligned}$图 6-4 小根堆和大根堆

\section*{6.2 .2 堆的抽象数据类型}

堆的抽象数据类型中的数据部分是按任一种存储结构表示的堆, 用标识符 HBT 表示,其存储类型用标识符 HeapType 表示。堆的抽象数据类型中的操作部分通常为: 向堆中插入一个元素、从堆中删除堆顶元素、初始化一个堆、清除一个堆和判断一个堆是否为空等。堆的抽象数据类型的具体定义如下。

ADT HEAP is
Data:
具有 HeapType 类型的一个堆 HBT
Operations:
void InitHeap(HeapType& HBT); // 初始化一个堆为空
void ClearHeap(HeapType& HBT); // 清除一个堆, 使之变为空
bool EmptyHeap(HeapType& HBT); // 判断一个堆是否为空
void InsertHeap(HeapType& HBT, ElemType item); // 向堆中插入元素
ElemType DeleteHeap(HeapType& HBT); // 从堆中删除堆顶元素并返回
end HEAP

\section*{6.2 .3 堆的存储结构}

堆同一般二叉树一样既可采用顺序存储, 也可采用链接存储。但由于堆是一棵完全二
