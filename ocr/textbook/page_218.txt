将树转换为二叉树的规则是：将树中每个结点的第1个孩子结点转换为二叉树中对应结点的左孩子，将第2个孩子结点转换为左孩子的右孩子，将第3个孩子结点转换为这个右孩子的右孩子。也就是说，转换后得到的二叉树中的每个结点及右孩子，在转换前的树中互为兄弟。对于图 5-15(a)所示的树，对应的二叉树形式，如图 5-16(a)所示；它的二叉链表，如图 5-16(b)所示。

![image](attachment://tree_conversion.png)

(a) 二叉树形式

(b) 二叉链表

图 5-16 树的二叉树形式的存储结构

在树的以上3种链接存储表示方式中，标准方式和广义表示方式能够表示任何树，但二叉树方式一般只适合表示无序树，不能表示任一结点中缺少前面孩子，又存在后面孩子的那样有序树。

当然，树还有其他一些表示方法，但都较少使用，故不作介绍。

\subsection*{5.5.3 树的运算}

树的运算包括建立树的存储结构、进行树的遍历、从树中查找结点值、求树的深度和输出树等。假定要讨论的树是$k$叉树，$k$被事先定义为整型符号常量，树的存储结构采用标准链接方式。

\section*{1. 建立树的存储结构}

建立树的存储结构就是在内存中生成一棵树的标准方式的存储映象，即$k$叉链表。同二叉链表的生成过程一样，首先要确定输入树的方法，然后再写出相应的算法。仍采用广义表的形式输入，对于图 5-15所示的三叉树，得到的广义表表示为：$\text { A(B(D,E(H,J),F),C(G)) }$其中，假定每个结点的非空子树都是靠前面、按序排列的子树，把所有空子树都留在后面。在实际情况中可能会出现缺少前面子树而存在后面子树的情况，此时用广义表示时空子树后面的逗号不能省略。
