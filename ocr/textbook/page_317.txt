项活动的开始时间余量为 0, 故它们都是关键活动。

求一个 AOE 网的关键路径后, 可通过加快关键活动 (即缩短它的持续时间) 来实现缩短整个工程的工期。但并不是加快任何一个关键活动都可以缩短其整个工程的工期，只有加快那些包括在所有关键路径上的关键活动才能达到这个目的。例如，加快图 8-17 中关键活动$a_{11}$的速度，使之由 4 天完成变为 3 天完成，则不能使整个工程的工期由 18 天变为 17，因为另一条关键路径$\{0,1,4,6,8\}$中不包括活动$a_{11}$，这只能使它所在的关键路径$\{0,1,4,7,8\}$变为非关键路径。而活动$a_1$和$a_4$是包括在所有的关键路径中的，若活动$a_1$由 6 天变为 4 天完成，则整个工程的工期可由 18 天缩短为 16 天。另一方面，关键路径是可以变化的，提高某些关键活动的速度可能使原来的非关键路径变为新的关键路径，因而关键活动的速度提高是有限度的。例如，图 8-15 中关键活动$a_1$由 6 改为 4 后，路径$\{0,2,4,6,8\}$和$\{0,2,4,7,8\}$都变成了关键路径，此时，再提高$a_1$的速度也不能使整个工程的工期提前。

下面给出用邻接表 GL 表示一个 AOE 网的求关键路径的算法。

void Cripath(adjlist GL, int n) //求邻接表 GL 表示的AOE网的关键路径
{
    int i,j,k;
    edgenode*p;
    //动态定义具有n个元素的三个一维整型数组v,ve和vl
    int*v=new int[n];          //保存拓扑排序的顶点序列
    int*ve=new int[n];         //保存每个事件的最早发生时间
    int*vl=new int[n];         //保存每个事件的最迟发生时间
    //调用拓扑排序算法,使排序结果存于数组 v 中
    Toposort(GL,v,n);          //需对上一节介绍的此算法做必要的修改, 即在
                                //参数表中增加int v[]一项,把输出语句更换为v[m]=j即可
                                //给每个事件的最早发生时间置初值 0
    for(i=0; i<n; i++) ve[i]=0;
                                //求出每个事件的最早发生时间
    for(i=0; i<n; i++) {
        j=v[i];
        p=GL[j];
        while(p!=NULL) {
            k=p->adjvex;
            if(ve[k]<ve[j]+p->weight) ve[k]=ve[j]+p->weight;
            p=p->next;
        }
    }
                            //把每个事件的最迟发生时间都置为ve[n-1],以作为它们的初值
    for(i=0; i<n; i++) vl[i]=ve[n-1];
                            //求出每个事件的最迟发生时间
    for(i=n-1; i>=0; i--) {
        j=v[i];
        p=GL[j];
        while(p!=NULL) {
