从图 1-5 可以看出：数据结构$B$是一种非线性的图形结构。但是，若只考虑关系$r_1$则为树形结构，若只考虑关系$r_2$则为线性结构。

数据类型 (data type) 是对数据的取值范围、数据元素之间的结构以及允许施加操作的一种总体描述。每一种计算机设计语言都定义有自己的数据类型，一般有整数、实数（浮点数）、枚举、字符、字符串、指针、数组、记录、类、文件等数据类型。如整数类型在计算机系统中通常用两个字节或 4 个字节表示，若采用两个字节，则整数表示范围在$-2^{15} \sim 2^{15}-1$，即 -32768 ~ 32767 之间；若采用 4 个字节，则整数表示范围在$-2^{31} \sim 2^{31}-1$，即 -2147483648 ~ 2147483647 之间。对整数类型的数据允许施加的操作（运算）通常有：单目取正或取负运算，双目加、减、乘、除、取模等运算双目等于、不等于、大于、大于等于、小于、小于等于等关系（比较）运算以及赋值运算等。字符类型在计算机中通常用一个字节或两个字节表示，无符号表示范围分别在 0 ~ 255 或 0 ~ 32767 之间，能够分别至多对 256 或 32768 种字符进行编码。对字符类型的数据允许进行的操作主要为赋值和各种关系运算。字符串类型是字符顺序排列的线性结构，每一个具体的字符串（其最大长度由具体语言规定）都是字符串类型中的一个值，对字符串的操作主要有求串长度、串复制、两串连接和两串比较等。

数据类型可分为简单类型和结构类型两大类。任一种简单类型中的每个数据都是无法再分割的整体，如一个整数、实数、字符、指针、枚举值、逻辑值等都是无法再分割的整体。任一种结构类型都是由简单类型数据按照一定的规则构造而成的，并且结构类型仍可以包含结构类型，所以一种结构类型中的数据（即结构数据）可以分解为若干个简单数据或结构数据，每个结构数据仍可再分。如数组就是一种结构类型，它由固定个数的同一元素类型的数据按线性结构排列而成，数组类型中的每一个数组值包含有固定个数的同一类型数据，每个数据（元素）都可以通过下标运算符直接访问。记录也是一种结构类型，它由固定个数的不同（也可以相同）类型的数组据线性结构排列而成，记录型中的每一个记录值包含有固定个数的不同类型数据，每个数据（域）都可以通过成员运算符直接访问。

无论是简单类型还是结构类型都有“型”和“值”的概念，一种数据类型中的任一数据称为该类型中的一个值（又称为实例），该值（实例）与所属数据类型具有完全相同的结构，数据类型所规定的操作就是在值上进行的。所以在一般的叙述中，并不明确指出是“型”还是“值”，应根据实际情况加以理解，如提到记录时，当讨论的是记录结构则认为是记录型，当讨论的是具体一条记录则认为是记录值。

抽象数据类型（Abstract Data Type, ADT）由一种数据结构和在其上的所有操作（运算）所组成。抽象数据类型包含有一般数据类型的含义，但含义比一般数据类型更广、更抽象。一般数据类型通常由具体语言系统内部定义，直接提供给编程者定义数据并进行相应的运算，因此称它们为系统预定义数据类型。抽象数据类型通常由编程者根据已有数据类型定义，包括定义其所含数据（数据结构）和在这些数据上所进行的操作。在定义抽象数据类型时，就是定义其数据的逻辑结构和操作说明，不考虑数据的存储结构和操作的具体实现（即具体操作代码），使得抽象数据类型具有很好的通用性和可移植性，便于用任何一种语言，特别是面向对象的语言实现。

抽象数据类型在 C++语言中是通过“类”类型来实现的，其数据部分通常定义为类的私有（private）或保护（protected）的数据成员，它只允许给该类或派生类直接使用，操作
