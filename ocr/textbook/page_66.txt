这只要按照元素之间的逻辑关系把它们顺序排列即可。如对于第 1 章中列举的线性数据结构 linearity 可用线性表表示为:$(05,01,03,08,02,07,04,06,09,10)$因此，以后对线性表的讨论就代表了对任何线性数据结构的讨论。

在日常生活中所见到的各种各样的表都是线性表，如人事档案表、职工工资表、学生成绩表、图书目录表和列车时刻表等。这些表通常都是以关键字段（又称域或属性）的值的升序排列，如职工工资表按职工号字段的升序排列，学生成绩表按学生号字段的升序排列，列车时刻表按开出时间字段的升序排列。在一个线性表中若存在着按值的升序或降序排列的字段，则称该字段为有序字段，该线性表为有序表，否则若不存在任何有序字段，则为无序表。如对于一个字符串或由一篇文章所建立的文本文件，它也是一个线性表，其元素类型为字符，它们只是按照前后位置有序，而不是按照每个字符的 ASCII 码有序，所以为无序表。

下面给出几个线性表的具体例子：

B=('a','b','c','4','7','+','-','*','/')

C=(25,38,12,49,63,54,20,18,34,47)

D=("BASIC","PASCAL","FORTRAN","COBOL","VC++","JAVA")

E=("序号","姓名","性别","年龄","单位","职称","联系电话","E-mail")

F=(a,b,c,d,e,f,g,h,i,j,k,x,y,z)

其中 B 中的元素为字符型；C 中的元素为整型；D 中的元素为字符串型；E 中的元素也为字符串型；F 中的元素可为任何类型，它同上面线性表 A 中的元素一样，每个元素都是用标识符抽象表示的，其目的是便于做一般性的考虑。

再如，对于第 1 章表 1-1 和表 1-2，若只考虑各记录之间位置上的前后关系，即按职工号的升序排列次序，则均为一个线性表，每个线性表中的元素均为相应的记录类型。

\subsection{2.1.2 线性表的抽象数据类型}

线性表的抽象数据类型包括数据和操作两个部分。数据部分为一个线性表，假定用标识符 L 表示，它可以采用顺序、链接、散列、索引等任一种方法存储到计算机中，其存储类型用标识符 ListType 表示。操作部分为对线性表所做的各种操作（运算），包括：向线性表插入一个元素、从线性表中删除一个元素、求线性表长度、判断线性表是否为空等。在下面定义的线性表抽象数据类型中，只给出了对线性表的一些基本的和典型的操作，因为线性表的实际应用是丰富和广泛的，所以不可能也没有必要给出其所有操作。

ADT LinearList is

Data:

一个具有 ListType 类型的线性表 L

Operation:

void InitList(ListType &L); //初始化 L 为空

void ClearList(ListType &L); //清除 L 中的所有元素

int LengthList (ListType &L); //返回 L 的长度
