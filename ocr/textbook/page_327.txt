元素时，对应着判定树中从树根结点到待查结点的一条路径，同关键字进行比较的次数就等于该路径上的结点数，或者说等于待查结点的层数。

![图9-2 二分查找的判定树及查找路径](attachment://image.png)

图9-2 二分查找的判定树及查找路径

进行二分查找的判定树不仅是一棵二叉排序树，而且是一棵理想平衡树，因为它除最后一层外，其余所有层的结点数都是满的，所以判定树的高度$h$和结点数$n$之间的关系为:$h=\lceil\lg n\rceil+1 \text{ 或 } h=\lceil\lg(n+1)\rceil$这就表明，二分查找成功时，同元素关键字进行比较的次数最多为$h$，在等概率的情况下平均比较次数略低于$h$，约为$h-1$（证明从略），所以二分查找算法的时间复杂度为$O(\lg n)$。显然它比顺序查找的速度要快得多。例如，假定一个有序表含有1000个元素，若采用二分查找则至多比较10次，若采用顺序查找，则最多需要比较1000次，平均也得比较约500次。

二分查找的平均查找长度为$\frac{1}{n}\sum_{i=1}^{n}c_i$，其中，$\sum_{i=1}^{n}c_i$为查找所有元素所需的比较次数之和。因为在一棵具有$n$个结点的二分查找判定树中，高度为$h=\lceil\lg(n+1)\rceil$，前$h-1$层都是满的，所以在前$h-1$层中查找所有元素的比较次数之和为$\sum_{i=1}^{h-1}c_i(2^{i-1}\times i)$，在第$h$层（即最后一层）中查找所有元素的比较次数之和为$\left(n-\sum_{i=1}^{h-1}2^{i-1}\right)\times h=(n+1-2^{h-1})\times h$，因此，可得进行二分查找的平均查找长度为:$\text{ASL}=\frac{1}{n}\left[\sum_{i=1}^{h-1}(2^{i-1}\times i)+h(n+1-2^{h-1})\right]$若一个有序表的长度$n=20$，则可计算出判定树的高度$h=5$，由此可得平均查找长度为:$\begin{aligned}&\frac{1}{20}\left[\sum_{i=1}^{4}(2^{i-1}\times i)+5(20+1-2^4)\right]\\&=\frac{1}{20}[1+2\times2+4\times3+8\times4+5\times5]\\&=3.7\end{aligned}$（注：约等于$h-1=5-1=4$）
