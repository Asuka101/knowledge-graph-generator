表 9-3 索引表 b2

| index | start | length |
|-------|-------|--------|
| 0     | 教授  | 0      | 2      |
| 1     | 副教授 | 3      | 3      |
| 2     | 讲师  | 1      | 5      |
| 3     | 助教  | 4      | 2      |

表 9-4 索引表 b3

| JS001 | 0     | DZ003 | 6      |
|-------|-------|-------|--------|
| JS002 | 1     | JJ001 | 7      |
| JS003 | 2     | JJ002 | 8      |
| JS004 | 3     | HG001 | 9      |
| DZ001 | 4     | HG002 | 10     |
| DZ002 | 5     | HG003 | 11     |

在索引存储中，若索引表中的每个索引项对应多条记录，则称为稀疏索引；若每个索引项唯一对应一条记录，则称为稠密索引。

在一个文件索引系统中，若存储原始数据记录的主文件是无序的，即记录不是按照关键字有序排列的，则一级索引（即对主文件的索引）必须使用稠密索引，并且通常使索引表按关键字有序；若主文件是有序的，则一级索引应采用稀疏索引，每个索引项对应连续若干条记录，每个索引项中的索引值要大于等于所对应一组记录的最大关键字，同时要小于下一个索引项所对应一组记录的最小关键字，显然这种稀疏索引也是按索引值有序的。若在文件索引系统中使用二级或二级以上索引，则相应的索引表均应采用稀疏索引。

在访问一个文件索引系统时，首先是把整个索引表文件读入到内存中，以便能够利用顺序或二分查找方法快速地查找出给定关键字对应记录的存储位置，然后再从主文件中取出整个记录。

\subsection*{9.3.2 索引查找算法}

索引查找是在索引表和主表上进行的查找。索引查找的过程是：首先根据给定的索引值$K_1$，在索引表上查找出索引值等于$K_1$的索引项，以确定对应子表在主表中的开始位置和长度，然后再根据给定的关键字$K_2$，在对应的子表中查找出关键字等于$K_2$的元素（结点）。对索引表或子表进行查找时，若表是顺序存储的有序表，则既可进行顺序查找，也可进行二分查找，否则只能进行顺序查找。

设数组 A 是具有 mainlist 类型的一个主表，数组 B 是具有 indexlist 类型的在主表 A 上建立的一个索引表，m 为索引表 B 的实际长度，即所含的索引项的个数，$K_1$和$K_2$分别为给定待查找的索引值和关键字，既然它们的类型应分别为索引表中索引值域的类型和主表中关键字域的类型，并假定每个子表采用顺序存储，则索引查找算法的描述如下。

int Indsch(mainlist A, indexlist B, int m, IndexKeyType K1, KeyType K2)
//利用主表 A 和大小为 m 的索引表 B 索引查找索引值为 K1, 关键字为 K2
//的记录, 返回该记录在主表中的下标位置, 若查找失败则返回 -1

{
    int i, j;
    //在索引表中顺序查找索引值为 K1 的索引项
    for(i=0; i<m; i++)
        if(K1==B[i].index) break; //若 IndexKeyType 被定义为字符串类型
                                  //则条件应改为 strcmp(K1,B[i].index)==0
}
