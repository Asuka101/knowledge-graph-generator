```cpp
if(p==NULL) {
    tp->next=HT; HT=tp; return true;
}
else return false;
}

10. 从集合删除一个元素

bool DeleteSet(SNode*& HT, ElemType& item)
{
    //从单链表中顺序查找是否存在值为 item 的结点
    SNode *cp=HT, *ap=NULL;
    while(cp!=NULL) {
        if(cp->data==item) break;
        else {ap=cp; cp=cp->next;}
    }
    //若不存在则返回假，表明删除成功
    if(cp==NULL) return false;
    //由 item 带回待删除结点 cp 的完整值，若不需要带回可设 item 为值参
    item=cp->data;
    //从单链表中删除已找到的 cp 结点，对是否为表头应做不同处理
    if(ap==NULL) HT=cp->next;
    else ap->next=cp->next;
    //删除 cp 结点后返回真
    delete cp;
    return true;
}

11. 求两个集合的并集

void UnionSet(SNode* HT1, SNode* HT2, SNode*& HT)
{
    //置并集的表头指针 HT 为空
    HT=NULL;
    //把 HT1 集合单链表复制到 HT 集合单链表中
    SNode* p=HT1;
    while(p!=NULL) {
        //建立新结点并赋值为 p->data
        SNode* newp=new SNode;
        newp->data=p->data;
        //把新结点插入到 HT 集合单链表的表头
        newp->next=HT; HT=newp;
        //使 p 指向下一个结点
        p=p->next;
    }
    //把 HT2 集合单链表中的每个元素插入到 HT 集合单链表中
}
```
