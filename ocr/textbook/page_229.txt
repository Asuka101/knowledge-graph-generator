第6章 特殊二叉树

特殊二叉树包括二叉搜索树、堆、哈夫曼树、线索二叉树和平衡二叉树等，它们都有着不同的应用。本章将讨论特殊二叉树的定义、结构和运算特点。

\section*{6.1 二叉搜索树}

\subsection*{6.1.1 二叉搜索树的定义}

二叉搜索树（binary searching tree）又称二叉排序树（binary sorting tree），它或是一棵空树，或者是一棵具有如下特性的非空二叉树。

（1）若它的左子树非空，则左子树上所有结点的关键字均小于根结点的关键字。

（2）若它的右子树非空，则右子树上所有结点的关键字均大于（若允许具有相同的关键字的结点存在，则大于等于）根结点的关键字。

（3）左、右子树本身又各是一棵二叉搜索树。

在二叉搜索树中，当每个结点的元素类型为简单类型时，则结点的关键字就是该结点的值；当每个结点的元素类型为记录类型时，则结点的关键字为该结点的某一个域的值。如当元素的类型为整型时，则结点的关键字就是该结点的值即整数；当元素的类型为学生记录类型时，则每个学生的学号（即记录中的一个域）就是相应结点的关键字。在算法描述中，以结点的值的比较作为其关键字的比较，实际情况可能进行的是关键字域的比较，若在C++语言环境下运行，可通过关系操作符的重载，使其真正比较的是记录的关键字。

由二叉搜索树的定义可知，在一棵非空的二叉搜索树中，其结点的关键字是按照左子树、根和右子树有序的，所以对它进行中序遍历得到的结点序列必然是一个有序序列。

如图 6-1 所示是一棵二叉搜索树，树中每个结点的关键字都大于它的左子树中所有结点的关键字，而小于它的右子树中所有结点的关键字。对此树进行中序遍历得到的结点序列为：$12, 15, 18, 23, 26, 30, 52, 63, 74$可见此序列是一个有序序列。

\begin{center}
\includegraphics[width=0.5\textwidth]{image.png}
\end{center}

图 6-1 二叉搜索树

\subsection*{6.1.2 二叉搜索树的抽象数据类型}

二叉搜索树的抽象数据类型中的数据部分是一棵二叉搜索树，它可以具有同一般二叉树一样的任何存储结构，操作部分除了已经讨论过的对一般二叉树的操作外，还具有对二叉搜索树的一
