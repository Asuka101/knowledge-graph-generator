ElemType x;
for(i=1; i<L.size; i++) //共循环 n-1 次
{
    x=L.list[i]; //把无序表中的第 1 个元素暂存 x
    for(j=i-1; j>=0; j--) //向前顺序进行比较和移动
        if(x<L.list[j]) L.list[j+1]=L.list[j];
        else break;
    L.list[j+1]=x; //把 x 写入到已经空出的 j+1 位置
}

在插入排序中，共需要进行$n-1$次元素的插入，每次插入最少需比较一次和移动两次元素，最多需比较$i$次和移动$i+2$次元素，平均需比较$\frac{i+1}{2}$次和移动$\frac{i}{2}+2$次元素。若分别用$C_{\min}$、$C_{\max}$和$C_{\text{ave}}$表示元素的总比较次数的最小值、最大值和平均值，用$M_{\min}$、$M_{\max}$和$M_{\text{ave}}$表示元素的总移动次数的最小值、最大值和平均值，则它们的值分别为:$\begin{aligned}
& C_{\min}=\sum_{i=1}^{n-1} 1=n-1 \\
& C_{\max}=\sum_{i=1}^{n-1} i=\frac{1}{2} n(n-1) \\
& C_{\text{ave}}=\sum_{i=1}^{n-1} \frac{i+1}{2}=\frac{1}{4}\left(n^{2}+n-2\right)
\end{aligned}$$\begin{aligned}
& M_{\min}=\sum_{i=1}^{n-1} 2=2(n-1) \\
& M_{\max}=\sum_{i=1}^{n-1}(i+2)=\frac{1}{2}\left(n^{2}+3 n-4\right) \\
& M_{\text{ave}}=\sum_{i=1}^{n-1}\left(\frac{i}{2}+2\right)=\frac{1}{4}\left(n^{2}+7 n-8\right)
\end{aligned}$所以插入排序算法在最好情况下的时间复杂度为$O(n)$，在平均和最差情况下的时间均为$O(n^2)$。

利用现成的向线性表插入元素的 InsertList 算法，也可以很方便地编写出 SortList 排序算法。该算法需要首先定义一个临时线性表并进行初始化，接着将形参线性表 L 中的每一个元素通过 InsertList 算法依次插入到临时线性表中，最后把临时线性表赋给 L。用 C++语言描述如下。

void SortList (List & L)
{
    List a;
    InitList(a);
    for(int i=0; i<L.size; i++)
        InsertList(a, L.list[i],0);
    ClearList(L);
    L=a;
}

该算法的时间复杂度同上面插入排序算法相同，均为$O(n^2)$。
调试上述算法的程序如下。

#include<iostream.h>
#include<stdlib.h>
typedef int ElemType;
