环体的执行次数为$\sum_{i=0}^{n-2}(n-i-1)=\frac{1}{2}n(n-1)=\frac{1}{2}n^2-\frac{1}{2}n$，就可得到其时间复杂度为$O(n^2)$。

算法的时间复杂度通常具有$O(1)$、$O(\sqrt{n})$、$O(n)$、$O(\lg n)$、$O(n\times\lg n)$、$O(n^2)$、$O(n^3)$、$O(2^n)$和$O(n!)$等形式。$O(1)$表示算法的时间复杂度为常量，它不随数据量$n$的改变而改变，如访问一个数据表中第 1 个元素时，无论该表的大小如何，其时间复杂度均为$O(1)$。$O(\sqrt{n})$表示算法的时间复杂度与数据量大小$n$的平方根成正比，如计算满足不等式$\sum_{k=1}^{i} k \leq n$中的最大$i$值时，其算法的时间复杂度就是$O(\sqrt{n})$。这是因为计算$i$的时间复杂度的$f(n)$为$\left[\sqrt{2n+\frac{1}{4}}-\frac{1}{2}\right]$，对应的$g(n)$为$\sqrt{n}$。具有$O(n)$数量级的算法被称为线性算法，其运行时间与$n$成正比，如对一个表进行顺序查找时，其时间复杂度就是$O(n)$。有一些算法的时间复杂度为$O(\lg n)$，即与$n$的对数成正比，如在有序表上进行二分查找的算法就是如此。对数组进行排序的各种简单算法为$O(n^2)$数量级的，当$n$加倍时，其运行时间将增长 4 倍；对数组进行排序的各种改进算法为$O(n\times\lg n)$数量级的，当$n$加倍时，其运行时间只是原来的$2\left(1+\frac{1}{\lg n}\right)$倍。做两个$n$阶矩阵的乘法运算时，其时间复杂度为$O(n^3)$。求具有$n$个元素集合的所有子集的算法，其时间复杂度应为$O(2^n)$，因为对于含有$n$个元素的集合来说，共有$2^n$个不同的子集。求具有$n$个元素的全排列的算法的时间复杂度为$O(n!)$，因为它共含有$n!$种不同的排列。

对于不同的$n$值，各种典型的数量级所对应的值如表 1-3 所示。可以看出，当$n$较大时，若时间复杂度为指数或阶乘数量级，则相应的算法是无效的，即不能实际运行的。如假定一台计算机每秒能做 1 亿次简单操作，则对于一个$n$值为 32 的具有阶乘数量级的算法，则至少要运行$8.34\times10^{17}$个世纪才能完成，这显然是不可能实现的，是一个无效的算法。从表中还可以看出，当$n$大于一定的值后，随着$n$值的增大，各种数量级对应值的增长速度是大不相同的，对数的值的增长速度最慢，平方根稍快，线性值较快，其余依次为线性与对数的乘积、平方、立方、指数和阶乘，即阶乘的增长速度最快。例如，当$n$增长到两倍时，$\lg n$增长到 1.25 倍，$\sqrt{n}$增长到约 1.4 倍，$n\times\lg n$增长到 2.5 倍，$n^2$增长到 4 倍，$n^3$增长到 8 倍，$2^n$增长到$2^{2n}$倍，$n!$增长到$(2n)!$倍。因此，当$n$大于一定的值后，各种不同数量级对应的值存在着如下关系：$O(\lg n) < O(\sqrt{n}) < O(n) < O(n\times\lg n) < O(n^2) < O(n^3) < O(2^n) < O(n!)$表 1-3 算法复杂度的不同数量级变化对照表

|$n$|$\lg n$|$\sqrt{n}$|$n\times\lg n$|$n^2$|$n^3$|$2^n$|$n!$|
|-----|---------|-----------|---------------|-------|-------|-------|------|
| 4   | 2       | 2         | 8             | 16    | 64    | 16    | 24   |
| 8   | 3       | 2.83      | 24            | 64    | 512   | 256   | 80320|
| 10  | 3.32    | 3.16      | 33.2          | 100   | 1000  | 1024  | 3628800|
| 16  | 4       | 4         | 64            | 256   | 4096  | 65536 | 2.1×$10^{13}$|
| 32  | 5       | 5.66      | 160           | 1024  | 32768 | 4.3×$10^{9}$| 2.6×$10^{35}$|
| 128 | 7       | 11.31     | 896           | 16384 | 2097152 | 3.4×$10^{38}$| ∞ |
| 1024| 10      | 32        | 10240         | 1048576 | 1.07×$10^{9}$| ∞ | ∞ |
| 10000| 13.29   | 100       | 132877        |$10^8$|$10^{12}$| ∞ | ∞ |
