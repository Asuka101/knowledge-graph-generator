索引值，它相当于记录的关键字，在索引表中由此索引值来唯一标识一个索引项，亦即唯一标识一个子表；二是子表的开始位置域（start），用来存储对应子表的第一个元素的存储位置，从此位置出发可以依次访问到子表中的所有元素；三是子表长度域（length），用来存储对应子表的元素个数。索引项的类型和顺序存储的索引表的类型可分别定义如下。

struct IndexItem {
    IndexKeyType index; //IndexKeyType 为事先定义的索引值类型
    int start;          //子表中第一个元素所在的下标位置
    int length;         //子表的长度域,有时可省略
};

typedef IndexItem indexlist[ILMaxSize]; //定义 indexlist 为索引表类型
//其中 ILMaxSize 为事先定义的整型常量,它要大于等于实际索引表的长度

若所有子表（合称为主表）被顺序存储或静态链接存储在同一个数组中，则该数组的类型可定义为:

typedef ElemType mainlist[MaxSize]; //MaxSize 为事先定义的整型常量,
//它要大于等于主表中元素的个数 n

一个学校的教师登记简表，如图 9-1 所示，此表可看做按记录前后位置顺序排列的线性表，若以每个记录的职工号作为关键字，则此线性表（用 LA 表示）可简记为:
LA=(JS001,JS002,JS003,JS004,DZ001,DZ002,DZ003,JJ001,JJ002,HG001,HG002,HG003)

表 9-1 教师登记简表

| 职工号 | 姓名 | 部门 | 职称   | 工资   | 出生日期 |
|--------|------|------|--------|--------|----------|
| JS001  | 王大明 | 计算机 | 教授   | 2680.00 | 48/05/13 |
| JS002  | 吴进  | 计算机 | 讲师   | 1940.00 | 69/07/25 |
| JS003  | 邢怀学 | 计算机 | 讲师   | 2060.00 | 66/12/08 |
| JS004  | 朱小五 | 计算机 | 副教授 | 2250.00 | 54/06/09 |
| DZ001  | 赵利  | 电子   | 助教   | 1780.00 | 74/05/24 |
| DZ002  | 刘平  | 电子   | 讲师   | 1980.00 | 65/05/30 |
| DZ003  | 张卫  | 电子   | 副教授 | 2500.00 | 52/02/24 |
| JJ001  | 安晓军 | 机械   | 讲师   | 1950.00 | 68/11/17 |
| JJ002  | 赵京华 | 机械   | 讲师   | 1840.00 | 70/04/28 |
| HG001  | 孙亮  | 化工   | 教授   | 2820.00 | 49/06/03 |
| HG002  | 陆新  | 化工   | 副教授 | 2280.00 | 62/02/19 |
| HG003  | 王方  | 化工   | 助教   | 1840.00 | 68/06/20 |

若按照部门数据项的值(或关键字中的前两位字符)对线性表 LA 进行划分，使得具有相同值的元素在同一个子表中，则得到的 4 个子表分别为:
JS=(JS001,JS002,JS003,JS004)
DZ=(DZ001,DZ002,DZ003)
JJ=(JJ001,JJ002)
