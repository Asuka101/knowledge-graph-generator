第 3 条语句定义了输出文件流对象为 output2, 要打开的文件为当前目录下的 xxk22.dat, \n并由 ios::app 参数规定按追加输出方式打开，同样若文件不存在则自动建立它。打开一个用于追加输出的文件后，文件中的原有内容保持不变，文件指针被自动移到文件的末尾。\n第 4 条语句定义了输入/输出文件流对象为 inout, 对应的文件为 A 盘根目录下的 xxk3.dat, 并规定既可对该文件进行输入操作，也可对该文件进行输出操作。打开一个同时用于输入和输出的文件后，文件中的原有内容不变，文件指针被自动移到文件内容的开始位置。\n\n当一个文件被打开后，可以按字符方式（又称 ASCII 码方式）或字节方式（又称二进制方式）进行访问。若向文件写入数据时采用的是字符方式，则从该文件中读出数据时也应该采用字符方式；同样，若写入数据是按字节方式进行的，则读出数据时也应按字节方式进行。数据按字符方式读出或写入，是通过使用文件流对象和提取操作符 “$>>$” 或插入操作符 “$<<$” 来实现的，就如同对标准输入/输出设备进行读写操作一样。值得注意的是：当以字符方式向文件写入数据时，数据之间必须以空格或回车换行符隔开，因为读取每一个数据时都是以这些符号作为结束标志的。\n\n数据按字节方式写入文件时，是把内存中由指定字符指针所指向的若干个字节的内容直接写入到文件中；数据按字节方式从文件读出时，是把从文件中读出的若干个字节的内容，直接存入到内存中由指定字符指针所指开始位置的存储区里。按字节方式读写文件比按字符方式读写文件要快，因为它不需要在读写过程中进行数据格式的转换。按字节方式读写文件若通过事先移动文件指针，还能够随机读写文件中从任何位置开始的内容，而对于按字符方式读写的文件，则一般只能进行顺序访问。利用文件流对象调用文件流类中的成员函数 read(char *, int)或 write(char *, int)，能够对文件按字节方式进行读出或写入操作，当不能够从文件中读出所规定的字节数时，read 函数返回 0 值，否则返回非 0 值，若返回 0 值，则利用文件流对象调用文件流类中的成员函数 gcount() 可得到实际读取的字节数。\n\n下面列举一些简单的文件操作的例子。\n\n//程序 1-6.cpp\n#include<iostream.h>\n#include<stdlib.h>\n#include<fstream.h>\nvoid main(void)\n{\n    ofstream f1("wr1.dat");\n    if (!f1) {\n        cerr<<"wr1.dat not open!";\n        exit(1);\n    }\n    for(int i=0;i<20;i++)\n        f1<<i<<" ";\n    f1.close();\n}
