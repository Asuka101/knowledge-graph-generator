在二分查找中，查找失败也对应着判定树中的一条路径，它是从树根结点到相应结点的空子树。当待查区间为空，即区间上界小于区间下界时，比较过程就达到了这个空子树。例如，对于图 9-1 (c) 的查找过程，其查找路径是从判定树的根结点到关键字为 60 的结点的左空子树，因为待查的关键字为 58 的结点若存在，则只可能落在关键字为 60 的结点的左子树上，此时左子树为空（对应待查区间为空），所以查找失败。由此可知，二分查找失败时，同关键字进行比较的次数也不会超过树的高度，所以不管二分查找成功与失败，其时间复杂度均为$O(\lg n)$。

二分查找的优点是比较次数少，查找速度快，但在查找之前要为建立有序表付出代价，同时对有序表的插入和删除都需要平均比较和移动表中的一半元素，是很浪费时间的操作。所以，二分查找适用于数据被存储和排序后相对稳定，很少进行插入和删除的情况。另外，二分查找只适用于顺序存储的有序表，不适用于链接存储的有序表。

\section*{9.3 索引查找}

\subsection*{9.3.1 索引的概念}

索引查找 (index search) 又称分级查找。它在日常生活中有着广泛地应用。例如，在汉语字典中查找汉字时，若知道读音，则先在音节表中查找到对应正文中的页码，然后再在正文同音字中查找出待查的汉字；若知道字形，则先在部首表中根据字的部首查找到对应检字表中的页码，再在检字表中根据字的笔画数查找到对应正文中的页码，最后在此页码中查找出待查的汉字。其中，整个字典就是索引查找的对象，字典的正文是字典的主要部分，被称为主表，检字表、部首表和音节表都是为方便查找主表而建立的索引，所以被称为索引表。检字表是以主表作为查找对象，即通过检字表查找主表，而部首表又是以检字表作为查找对象，即通过部首表查找检字表，所以称检字表为一级索引，即对主表的索引，称部首表为二级索引，即对一级索引的索引。若用计算机进行索引查找，则同上面人工查找过程相同，只不过对应的表（包括主表和各级索引表）被存放在计算机的存储器中罢了。

在计算机中为索引查找而建立的主表和各级索引表，其主表只有一个，索引表的级数和数量不受限制，可根据具体需要确定。但在下面的讨论中，为了使读者便于理解，只考虑包含一级索引的情况。当然，对于包含多级索引的情况，也可进行类似地分析。需要特别指出：索引存储结构是数据组织的一项很重要的存储技术，在数据库等领域有着广泛地应用。

在计算机中，索引查找是在集合或线性表的索引存储结构的基础上进行的。索引存储的基本思想是：首先把一个集合或线性表（即主表）按照一定的函数关系或条件划分成若干个逻辑上的子表，为每个子表分别建立一个索引项，由所有这些索引项构成主表的一个索引表，然后，可采用顺序或链接的方式来存储索引表和每个子表。索引表中的每个索引项通常包含 3 个域（至少包含前两个域）：一是索引值域 (index)，用来存储标识对应子表的
