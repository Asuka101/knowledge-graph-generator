以课程记录为元素类型的一个线性表 L2, 如表 2-1 所示。

表 2-1 课程计划安排表

| 课程名称 | 开课学时 | 开课学期 | 课程名称 | 开课学时 | 开课学期 |
| --- | --- | --- | --- | --- | --- |
| 高等数学 | 90 | 1 | 计算机组成原理 | 90 | 2 |
| 离散数学 | 72 | 2 | 程序设计基础 | 63 | 3 |
| 英语 | 72 | 1 |  |  |  |

对 L2 进行的一组操作如下，首先定义具有 course 记录结构的 x、y、z 和 w 对象并对其赋初值。

course$x=\left(" ", 72\right)$; //给$x$的 Chour 域赋初值 72
course$y=$("程序设计基础"); //给 y 的 Cname 域赋初值"程序设计基础"
course$z=\left(" \text { 英语", } 80,1\right)$; //给 z 赋初值$\left(" \text { 英语", } 80,1\right)$course$w=\left(" \text { 数据结构", } 72,4\right)$; //给 w 赋初值$\left(" \text { 数据结构", } 72,4\right)$GetList(L2,3); //返回值为 ("英语",72,1)
FindList (L2,x); //查找与$x$中开课学时相等的第一个元素并由$x$返回
//为了实现课程记录之间的直接比较, 需要事先重载等于
//号运算符, 使其实际上是在 Chour 域上进行比较
FindList (L2,y); //查找与$y$值中课程名称相等的第一个元素并由$y$返回
//为了实现课程记录之间的直接比较, 也需要重载等于
//号运算符, 使其实际上是在 Cname 域上进行比较
UpdateList (L2,z); //用$z$更新 L2 中课程名称为"英语"的第一个元素, 使
//得该元素被修改为 ("英语",80,1)。在此函数体中若进行
//记录之间的直接比较, 则也需要事先重载等于号运算符,
//使其实际上是进行课程名称之间的比较
InsertList (L2,w,6); //在 L2 末尾添加了一条 w 记录
DeleteList (L2,y,0); //从 L2 中删除与$y$的 Cname 域值相等的第一条记录,
//即删除 L2 中的第 5 条记录 ("程序设计基础",63,3)
SortList (L2); //假定按开课学时的升序排列, 则排序后的结果如表 2-2 所示

表 2-2 对 L2 操作后的结果

| 课程名称 | 开课学时 | 开课学期 | 课程名称 | 开课学时 | 开课学期 |
| --- | --- | --- | --- | --- | --- |
| 离散数学 | 72 | 2 | 高等数学 | 90 | 1 |
| 数据结构 | 72 | 4 | 计算机组成原理 | 90 | 2 |
| 英语 | 80 | 1 |  |  |  |

\section*{2.2 线性表的顺序存储和操作实现}

\subsection*{2.2.1 线性表的顺序存储结构}

线性表的存储结构有顺序、链接、索引、散列等多种方式, 顺序存储结构是其中最简单、最常见的一种。线性表的顺序存储结构可叙述为: 将线性表中的所有元素按照其逻辑
