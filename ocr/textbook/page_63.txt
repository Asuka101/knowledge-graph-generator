7. void cmatrix(int a[M][N], int d)  //M和N为全局整型常量
{
    for(int i=0; i<M; i++)
        for(int j=0; j<N; j++)
            a[i][j]=d;
}

8. void matmul(int a[M][N], int b[N][L], int c[M][L])
//M、N和L均为全局整型常量
{
    int i,j,k;
    for(i=0;i<M;i++)
        for(j=0;j<L;j++)
            c[i][j]=0;
    for(i=0;i<M;i++)
        for(j=0;j<L;j++)
            for(k=0;k<N;k++)
                c[i][j]+=a[i][k]*b[k][j];
}

*【习题1-5】设计集合的一种抽象数据类型。

集合是由若干个同一类型的元素构成的、元素之间不存在任何关系的一种数据结构。通常，一个集合用一对大括号括起来，元素之间用逗号分隔。一个集合中的元素来自于一个数据集，并且不允许出现重复的元素。如对于$1\sim n$之间的整数集，它共包含有$2^n$个不同的集合，其中$\{\}$表示空集，$\{1,2,\cdots,n\}$表示全集。假定一个整数集为$1\sim3$，则在它之上可以构成的$8\left(2^3\right)$个集合为：$\{\},\{1\},\{2\},\{3\},\{1,2\},\{1,3\},\{2,3\},\{1,2,3\}$在C++语言中，可用一个整型数组来表示一个集合，若一个数组元素的值为0，则表示相应元素不在集合中，若为1则表示相应元素存在于集合中。如对于整数集$1\sim6$之上的一个集合$\{1,4,5\}$，则用整型数组$a[7]$表示（$a[0]$元素未用）为：

\begin{tabular}{|c|c|c|c|c|c|c|}
\hline 0 & 1 & 2 & 3 & 4 & 5 & 6 \\
\hline \hline 0 & 1 & 0 & 0 & 1 & 1 & 0 \\
\hline
\end{tabular}

对于集合运算通常有并（∪）、交（∩）和属于（∈）等。两个集合并的结果仍为一个集合，它包含有两个集合中的所有元素，当然不允许出现重复。两个集合交的结果也仍为一个集合，其中的每一个元素同时属于两个集合。属于运算是判断一个元素是否存在于一个集合之中，若存在则返回真（true），否则返回假（false）。若$x=\{1,4,5\}$，$y=\{2,4\}$，则$x\cup y=\{1,2,4,5\}$，$x\cap y=\{4\}$，$1\in x$为真，$2\in x$为假。

假定在$1\sim SETSIZE$整数集（SETSIZE为一个整型全局常量）上建立集合，抽象数据类型名用SET表示，该类型的数据部分为一个整型数组$m[SETSIZE+1]$，用于保存一个集合，操作部分如下。
1. 对一个集合中的所有元素清0，假定用记录类型Set定义数据成员，即Set类型的定义为：struct Set{int m[SETSIZE+1];}。该操作就是对Set类型的一个对象初始化，使其数组m域中的每个元素被置为0。

void InitSet(Set& s);

2. 利用整型数组$a[n]$初始化数据成员，即置一个集合中的$m[a[i]]$为$1\left(0\leq i\leq n-1\right)$，如$a[3]=\{1,3,6\}$，则相应集合中的$m[1]$、$m[3]$和$m[6]$元素应被置为1。
