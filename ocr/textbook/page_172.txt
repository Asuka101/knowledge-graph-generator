for(int i=0; i<n; i++) a[i]=i+1; //给数组a赋初值
Permute(a, 0, n); 
//对数组a中的n个元素（即$1\sim n$）进行全排列
cout<<endl;

程序运行时，假定从键盘上输入的$n$值为3，则运行结果如下。

输入$n$的值,它应在1和6之间:3
1 2 3
1 3 2
2 1 3
2 3 1
3 2 1
3 1 2

【例4-7】求解迷宫问题。
分析：一个迷宫包含有$m$行$\times n$列个小方格，每个方格用0表示可通行，用1表示墙壁，即不可通行。迷宫中通常有一个入口和一个出口，设入口点的坐标为$(1,1)$，出口点的坐标为$(m,n)$，当然入口点和出口点的值应均为0，即可通行。从迷宫中的某一个坐标位置向东、南、西、北任一方向移动一步（即一个方格）时，若前面的小方格为0，则可前进一步，否则通行受阻，不能前进，应按顺时针改变为下一个方向移动。求解迷宫问题是从入口点出发寻找一条通向出口点的路径，并打印出这条路径，即经过的每个小方格的坐标。如图4-7（a）所示为一个$6\times8$的迷宫，入口点坐标为$(1,1)$，出口点坐标为$(6,8)$，其中的一条路径为：$(1,1),(1,2),(2,2),(2,3),(3,3),(3,4),(3,5),(3,6),(4,6),(4,7),(5,7),(6,7),(6,8)$。$\begin{array}{|c|c|c|c|c|c|c|c|}
\hline
0 & 0 & 0 & 1 & 1 & 0 & 1 & 0 \\
\hline
1 & 0 & 0 & 1 & 1 & 0 & 0 & 0 \\
\hline
0 & 0 & 0 & 0 & 0 & 0 & 1 & 1 \\
\hline
1 & 1 & 0 & 1 & 1 & 0 & 0 & 0 \\
\hline
0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\
\hline
1 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\
\hline
\end{array}$(a) 一个$6\times8$的迷宫$\begin{array}{|c|c|c|c|c|c|c|c|c|}
\hline
0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 \\
\hline
1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\
\hline
1 & 0 & 0 & 1 & 1 & 0 & 1 & 0 & 1 \\
\hline
1 & 1 & 0 & 0 & 1 & 1 & 0 & 0 & 0 \\
\hline
1 & 0 & 0 & 0 & 0 & 0 & 1 & 1 & 1 \\
\hline
1 & 1 & 1 & 0 & 1 & 1 & 0 & 0 & 0 \\
\hline
1 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\
\hline
1 & 1 & 0 & 1 & 0 & 0 & 0 & 0 & 1 \\
\hline
1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 & 1 \\
\hline
\end{array}$(b) 带四周墙壁的迷宫

图4-7 迷宫阵列图
