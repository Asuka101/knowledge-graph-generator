应的完全二叉树中编号最大的分支结点（即编号为$\lfloor n/2\rfloor-1$的结点）起，至整个树根结点（即编号为0的结点）止，依次对每个分支结点进行“筛”运算，以便形成以每个分支结点为根的堆，当最后对树根结点进行筛选运算后，整个树就构成了一个初始堆。

下面讨论如何对每个分支结点$R_i(0\leq i\leq\lfloor n/2\rfloor-1)$进行筛选运算，以便构成以$R_i$为根的堆。因为，当对$R_i$进行筛选运算时，比它编号大的分支结点都已进行过筛选运算，即已形成了以各个分支结点为根的堆，其中包括以$R_i$的左、右孩子结点$R_{2i+1}$和$R_{2i+2}$为根的堆，当然若孩子结点为叶子结点，则认为叶子结点自然成为一个堆。所以，对$R_i$进行筛选运算是在其左、右子树均为堆的基础上实现的。

对$R_i$进行筛选运算的过程可叙述为：首先把$R_i$的排序码$S_i$与两个孩子中排序码较大者$S_j(j=2i+1$或$2i+2)$进行比较，若$S_i\geq S_j$，则以$S_i$为根的子树成为堆，筛选运算完毕，否则$R_i$与$R_j$互换位置，互换后可能破坏以$R_j$（此时的$R_j$的值为原来的$R_i$的值）为根的堆，接着再把$R_j$与它的两个孩子中排序码较大者进行比较，以此类推，直到父结点的排序码大于等于孩子结点中较大的排序码或者孩子结点为空时止。这样，以$R_i$为根的子树就被调整为一个堆。在对$R_i$进行的筛选运算中，若它的排序码较小，则会被逐层下移，就像过筛子一样，小的被漏下去，大的被留下，所以把构成堆的过程形象地称为筛选运算。

如图10-2所示为对待排序元素的排序码序列（45, 36, 18, 53, 72, 30, 48, 93, 15, 36）构成初始堆的全过程。因结点数$n=10$，所以从编号为4的结点起至树根结点止，依次对每个结点进行筛选运算。图10-2（a）所示为按照原始排序码序列所构成的完全二叉树，图10-2（b）～图10-2（f）为依次对每个分支结点进行筛选运算后所得到的结果，其中图10-2（f）所示为最后构成的初始堆。

若待排序的$n$个元素存放于一维数组A中，以A[i+1]~A[n-1]的每一个元素为根的子树均已成为堆，则对A[i]进行筛选运算使以A[i]为根的子树成为堆的算法描述如下。

void Shift(ElemType A[], int n, int i)
{
    //对A[n]数组中的A[i]元素进行筛选运算，形成以A[i]为根的堆
    ElemType x=A[i];          //把待筛结点的值暂存于x中
    int j;
    j=2*i+1;                  //A[j]是A[i]的左孩子
    while(j<=n-1) {           //当A[i]的左孩子不为空时执行循环
        //若右孩子的排序码较大，则把j修改为右孩子的下标
        if(j<n-1 && A[j].stn<A[j+1].stn) j++;
        //将A[j]调到双亲位置上，修改i和j的值，以便继续向下筛选
        if(x.stn<A[j].stn) {
            A[i]=A[j]; i=j; j=2*i+1;
        }
        else break;           //查找到x的最终位置，终止循环
    }
    A[i]=x;                   //被筛结点的值放入最终位置
}

根据堆的定义和上面建堆的过程可以知道，编号为0的结点A[0]（即堆顶）是堆中$n$
