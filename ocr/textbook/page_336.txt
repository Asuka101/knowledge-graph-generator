的冲突称做同义词冲突。

如再向上例的散列表$H$中插入一个关键字为 70 的新元素时，该元素的散列地址为 5 ，就同已存入的关键字为 18 的元素发生冲突，致使关键字为 70 的新元素无法存入到下标为 5 的单元中。因此，如何尽量避免冲突和冲突发生后如何解决冲突（即为发生冲突的待插入元素找到一个空闲单元、使之存储起来）就成了散列存储的两个关键问题。

在散列存储中，虽然冲突很难避免，但发生冲突的可能性却有大有小，这主要与 3 个因素有关。首先是与装填因子$\alpha$有关，所谓装填因子是指散列表中已存入的元素数$n$与散列表空间大小$m$的比值，即$\alpha=n/m$，当$\alpha$越小时，冲突的可能性就越小，$\alpha$越大（最大取 1）时，冲突的可能性就越大；这很容易理解，因为$\alpha$越小，散列表中空闲单元的比例就越大，所以待插入元素同已存元素发生冲突的可能性就越小，反之，$\alpha$越大，散列表中空闲单元的比例就越小，所以待插入元素同已存元素冲突的可能性就越大；另一方面，$\alpha$越小，存储空间的利用率也就越低，反之，存储空间的利用率也就越高。为了既兼顾减少冲突的发生，又兼顾提高存储空间的利用率这两个方面，通常使最终的$\alpha$（即待散列存储的元素总个数$n$同散列表的长度$m$之比）控制在 0.6～0.9 范围内为宜。其次与所采用的散列函数有关，若散列函数选择得当，就能够使散列地址尽可能均匀地分布在散列空间上，从而减少冲突的发生，否则，若散列函数选择不当，就可能使散列地址集中于某些区域，从而加大冲突的发生。最后是与解决冲突的方法有关，方法选择的好坏也将减少或增加发生冲突的可能性。后面将陆续讨论影响冲突发生的这 3 个因素。

在散列存储中，每个散列地址对应的存储空间称为一个桶，一个桶可以为一个单元，对应存储一个元素，也可以为若干个单元，对应存储若干个元素。当一个桶为多个单元时，只有都被占满后才发生冲突。本书讨论的是每个桶只有一个单元的情况，它是散列存储中的最简单情况。当散列存储方法用于文件组织时，通常把外存中的一个页面（大致为 1k～4k 字节大小）作为一个存储桶使用。

\section*{9.4.2 散列函数}

构造散列函数的目标是使散列地址尽可能均匀地分布在散列空间上，同时使计算尽可能简单，以节省计算时间。根据关键字的结构和分布不同，可构造出与之适应的各不相同的散列函数，这里只介绍较常用的几种，其中又以介绍除余数法为主。在下面的讨论中，关键字均为整型数，若不是则要设法把它转换为整型数后再进行运算。

\section*{1. 直接定址法}

直接定址法是以关键字$K$本身或关键字加上某个数值常量$C$作为散列地址的方法。对应的散列函数$h(K)$为：$h(K)=K+C$若$C$为 0，则散列地址就是关键字本身。

这种方法计算最简单，并且没有冲突发生，若有冲突发生，则表明是关键字错误。它适用于关键字的分布基本连续的情况，若关键字分布不连续，空号较多，将造成存储空间
