}
//向非空的B_树中插入索引项(K,num,ap)
MBNode*ap=NULL; //ap 的初值为空
while(1) {
    int j,c;
    //从最后到插入位置的所有索引项均后移一个位置
    for(j=p->keynum; j>=i; j--) {
        p->key[j+1]=p->key[j];
        p->recptr[j+1]=p->recptr[j];
        p->ptr[j+1]=p->ptr[j];
    }
    //把一个插入索引项(K,num,ap)放入p 结点的i下标位置
    p->key[i]=K; p->recptr[i]=num; p->ptr[i]=ap;
    //使p 结点的关键字个数增1
    p->keynum++;
    //若插入后结点中关键字个数不超过所允许的最大值，则完成插入
    if(p->keynum<=m-1) {
        p->key[p->keynum+1]=MaxKey; return true;
    }
    //计算出m/2的向上取整值
    c=(m%2?(m+1)/2:m/2);
    //建立新分裂的结点，该结点含有m-c个索引项
    ap=new MBNode;
    ap->keynum=m-c; ap->parent=p->parent;
    for(j=1; j<=ap->keynum; j++) {
        ap->key[j]=p->key[j+c];
        ap->recptr[j]=p->recptr[j+c];
    }
    for(j=0; j<=ap->keynum; j++) {
        ap->ptr[j]=p->ptr[j+c];
        if(ap->ptr[j]!=NULL) ap->ptr[j]->parent=ap;
    }
    ap->key[m-c+1]=MaxKey;
    //修改p 结点中的关键字个数
    p->keynum=c-1;
    //建立新的待向双亲结点插入的索引项(K,num,ap)
    K=p->key[c]; num=p->recptr[c];
    //在p 结点的所有关键字最后放入最大关键字
    p->key[c]=MaxKey;
    //建立新的树根结点
    if(p->parent==NULL) {
        MT=new MBNode;
        MT->keynum=1; MT->parent=NULL;
        MT->key[1]=K; MT->key[2]=MaxKey;
        MT->recptr[1]=num;
