(1) 普通转置方法。

普通转置方法要对 M 中的 sm 数组进行$n$次扫描 ($n$为 A 的列数, 即 B 的行数) 才能完成。具体地说, 第 1 次扫描 col 域的值等于 1 (即列为 1) 所在的三元组 (即对应 B 中第 1 行非零元素) 按照从上到下 (因行号为从小到大, 所以对应 B 中是列号从小到大的) 的顺序, 行列值互换写入到对象 S 的 sm 数组中, 第 2 次扫描把 col 域的值等于 2 (即列为 2) 所在的三元组 (即对应 B 中第 2 行非零元素) 按照从上到下的顺序接着写入到对象 S 的 sm 数组中, 以此类推。具体算法描述如下。

SMatrix Transpose(SMatrix& M)
{
    SMatrix S; //用 S 暂存转置结果
    InitMatrix(S);
    int m, n, t;
    //用 m, n, t 分别暂存 M 的行数、列数和非零元素的个数
    m=M.m; n=M.n; t=M.t;
    //分别置 s 的行数域、列数域和非零元素的个数域为 n, m 和 t
    S.m=n; S.n=m; S.t=t;
    //若是矩矩阵 (即非零元素的个数为 0 的矩阵) 则转换完毕返回
    if(t==0) return S;
    //按列进行每个元素的转换
    int k=1; //用 k 指示 S.sm 数组中待存元素的下标
    for(int col=1; col<=n; col++)
        //用 col 扫描 M.sm 数组中的 col 域
        for(int i=1; i<=t; i++)
            //用 i 指示 M.sm 数组中当前元素下标
            if(M.sm[i].col==col) {
                S.sm[k].row=col;
                S.sm[k].col=M.sm[i].row;
                S.sm[k].val=M.sm[i].val;
                k++;
            }
    return S; //返回转置矩阵 S
}

此算法的运行时间主要取决于最后的双重 for 循环, 故算法的时间复杂度为$O(n \times t)$, 即同 M 的列数与非零元素的个数的乘积成正比。当稀疏矩阵接近一般矩阵时, 非零元素的个数$t$等于矩阵中的行数$m$乘以列数$n$, 此时算法的时间复杂度为$O(m \times n^2)$, 它比采用二维数组存储时进行转置运算的时间复杂度$O(m \times n)$要坏得多。因此, 对于一般矩阵最好采用二维数组存储和运算。

(2) 快速转置方法。

用快速转置的方法进行稀疏矩阵转置要对 M 中的 sm 数组进行两次扫描, 第 1 次扫描统计出对应 A 矩阵中每一列 (即对应转置矩阵 B 中每一行) 非零元素的个数, 由此求出每一列的第 1 个非零元素 (即对应 B 中每一行的第 1 个非零元素) 在 S.sm 数组中应有的位置, 第 2 次扫描把数组 M.sm 中的每一个三元组, 行列值互换写入到数组 S.sm 中确定的位置上。
