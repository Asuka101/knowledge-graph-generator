0 的对应 dist 元素中, 查找出值最小的元素为$dist[2]$，所以求得第 3 个终点为$v_2$，最短距离为$dist[2]=15$，最短路径为$path[2]=(0,1,3,2)$，接着把$s[2]$置为 1，然后以$v_2$作为新考虑的中间点，对$s$中元素为 0 的每个顶点$j$（此时只有$v_4$一个）的$dist[j]$和$path[j]$进行必要的修改，因$dist[2]+GA[2][4]=15+10=25$，大于$dist[4]=23$，所以无需修改，原值不变。至此，第 3 次运算结束，3 个一维数组的当前状态如表 8-6 所示。

表 8-6 得到终点$v_2$\begin{tabular}{|c|c|c|c|c|c|}
\hline & 0 & 1 & 2 & 3 & 4 \\
\hline \multirow{3}{*}{ s } & \multicolumn{5}{|c|}{\begin{tabular}{l} 
0 \\
1
\end{tabular}} \\
\hline dist & 0 & 3 & 15 & 11 & 23 \\
\hline path & &$v_0,v_1$&$v_0,v_1,v_3,v_2$&$v_0,v_1,v_3$&$v_0,v_1,v_3,v_4$\\
\hline
\end{tabular}

由于图中有 5 个顶点，只需运算 3 次，即$n-2$次，虽然此时还有一个顶点未加入 S 集合中，但它的最短路径及最短距离已经最后确定，所以整个运算结束。最后在$dist$中得到从源点$v_0$到每个顶点的最短路径长度，在$path$中得到相应的最短路径。

如果用图形表示上述过程中每次运算的结果，则对应的图形分别如图 8-7(b)～图 8-7(e)所示，其中实线有向边所指向的顶点为集合 S 中的顶点，虚线有向边所指向的顶点为集合 S 外的顶点；S 集合中的顶点上所标数值为从源点$v_0$到该顶点的最短路径长度，从源点$v_0$到该顶点所经过的有向边为从$v_0$到该顶点的最短路径；S 集合外的顶点上所标数值为从源点$v_0$到该顶点的目前最短路径长度，从$v_0$到该顶点所经过的有向边为从$v_0$到该顶点的目前最短路径。为了便于对照分析，把图 8-6(a)重画于图 8-7(a)中。

(a) 带权图

(b) 初始状态

(c) 得到终点$v_1$(d) 得到终点$v_3$(e) 得到终点$v_2$图 8-7 利用狄克斯特拉算法求最短路径的图形说明

根据以上分析和举例，不难给出狄克斯特拉算法的描述如下。
