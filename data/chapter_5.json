{
  "entities": [
    {
      "type": "数据结构",
      "ID": "05DS001",
      "name": "树",
      "attributes": {
        "难度": "入门",
        "内容": "一种重要的非线性数据结构，是树形结构的简称。递归定义：或者为空树，或者由一个根结点和m(m>=0)棵互不相交的子树组成，每棵子树也是一棵树。用于表示具有层次关系的数据。",
        "存储开销": "依赖于存储方式（顺序或链接）及树的形态。",
        "核心特性": "递归定义、层次结构、结点间存在一对多关系。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON001",
      "name": "根",
      "attributes": {
        "难度": "入门",
        "内容": "树中唯一没有前驱的结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON002",
      "name": "子树",
      "attributes": {
        "难度": "入门",
        "内容": "非空树中，除根结点外，其余结点按关系划分成的互不相交的集合，每个集合本身也是一棵树，称为根的子树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON003",
      "name": "度",
      "attributes": {
        "难度": "入门",
        "内容": "结点拥有的子树数目（或后继结点数）称为该结点的度。树中所有结点度的最大值称为树的度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON004",
      "name": "叶子结点",
      "attributes": {
        "难度": "入门",
        "内容": "度为0的结点，也称终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON005",
      "name": "分支结点",
      "attributes": {
        "难度": "入门",
        "内容": "度大于0的结点，也称非终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON006",
      "name": "孩子结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的子树的根结点，称为该结点的孩子（或儿子、子女）。即结点的直接后继。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON007",
      "name": "双亲结点",
      "attributes": {
        "难度": "入门",
        "内容": "孩子结点的直接前驱结点，称为孩子结点的双亲（或父亲、父母）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON008",
      "name": "兄弟结点",
      "attributes": {
        "难度": "入门",
        "内容": "具有相同双亲结点的孩子结点互称为兄弟。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON009",
      "name": "祖先",
      "attributes": {
        "难度": "入门",
        "内容": "从根结点到某结点路径上经过的所有结点（不含该结点自身）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON010",
      "name": "子孙",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的所有子树中的所有结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON011",
      "name": "层数",
      "attributes": {
        "难度": "入门",
        "内容": "结点的层数从根开始定义，根为第1层，其孩子为第2层，以此类推。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON012",
      "name": "深度",
      "attributes": {
        "难度": "入门",
        "内容": "树中所有结点的最大层数，也称高度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS002",
      "name": "有序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中各结点的子树按一定次序从左到右排列的树，子树的次序不能互换。",
        "存储开销": "同一般树，取决于存储方式和形态。",
        "核心特性": "子树有序。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS003",
      "name": "无序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中各结点的子树没有固定次序，可以任意交换位置。",
        "存储开销": "同一般树，取决于存储方式和形态。",
        "核心特性": "子树无序。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS004",
      "name": "森林",
      "attributes": {
        "难度": "入门",
        "内容": "m(m>=0)棵互不相交的树的集合。",
        "存储开销": "等于各棵树存储开销之和。",
        "核心特性": "由多棵树组成。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS005",
      "name": "二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "度为2的有序树。递归定义：或者为空树，或者由一个根结点和两棵互不相交的、分别称为左子树和右子树的二叉树组成。应用广泛。",
        "存储开销": "顺序存储对完全二叉树效率高，链接存储（二叉链表）更通用。",
        "核心特性": "度最大为2、有序（区分左右子树）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON013",
      "name": "左子树",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树根结点的左边分支所构成的二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON014",
      "name": "右子树",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树根结点的右边分支所构成的二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON015",
      "name": "左孩子",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树中某结点的左子树的根结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON016",
      "name": "右孩子",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树中某结点的右子树的根结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS006",
      "name": "满二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "深度为h且含有2^h - 1个结点的二叉树。即每一层都达到最大结点数。",
        "存储开销": "适合顺序存储，空间利用率高。",
        "核心特性": "结构规整，除叶子结点外，每个结点的度都为2。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS007",
      "name": "完全二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "深度为h的二叉树，除第h层外，其它各层(1～h-1)的结点数都达到最大个数，第h层的所有结点都连续集中在最左边。",
        "存储开销": "适合顺序存储，空间利用率较高。",
        "核心特性": "结点编号与其在满二叉树中的位置对应，结构接近满二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS008",
      "name": "理想平衡二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "除最后一层外，其余各层结点数都是满的二叉树。最后一层结点可以任意分布。",
        "存储开销": "依赖具体形态，介于完全二叉树和一般二叉树之间。",
        "核心特性": "结构相对平衡，深度接近log2(n)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON017",
      "name": "顺序存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "用一组地址连续的存储单元依次存储数据元素的存储结构。对于树（特别是二叉树），通常按层序编号，将结点值存入数组对应下标位置。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON018",
      "name": "链接存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "用结点（包含数据域和指针域）的链接来表示数据元素逻辑关系的存储结构。对于树，结点通常包含指向孩子或兄弟的指针。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS009",
      "name": "二叉链表",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的一种链式存储结构，每个结点包含数据域、指向左孩子的指针域和指向右孩子的指针域。",
        "存储开销": "每个结点需要额外存储两个指针。",
        "核心特性": "灵活表示二叉树结构，插入删除相对方便（但需维护结构）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS010",
      "name": "带双亲指针的二叉链表",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉链表的基础上，每个结点增加一个指向其双亲结点的指针域。",
        "存储开销": "每个结点需要额外存储三个指针。",
        "核心特性": "方便查找双亲结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG001",
      "name": "初始化二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树置为空树，通常是将根指针设为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "赋值",
        "适用场景": "创建或清空二叉树前。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG002",
      "name": "创建二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的输入（如广义表字符串）建立二叉树的内存表示（如二叉链表）。",
        "时间复杂度": "O(n) (n为输入规模或结点数)",
        "空间复杂度": "O(h) (h为树高，取决于实现方式，如使用栈辅助)",
        "设计思想": "递归或迭代（栈辅助）",
        "适用场景": "从外部表示构建二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG003",
      "name": "判空二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "判断二叉树是否为空，通常检查根指针是否为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "比较",
        "适用场景": "在操作二叉树前进行检查。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG004",
      "name": "遍历二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "按照特定次序访问二叉树中的所有结点，且每个结点仅被访问一次。常见有前序、中序、后序、层序遍历。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)或O(n)（取决于遍历方式和实现）",
        "设计思想": "递归、迭代（栈或队列辅助）",
        "适用场景": "处理树中所有结点，如打印、查找、复制等。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG005",
      "name": "查找二叉树结点",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉树中查找具有特定值的结点。",
        "时间复杂度": "O(n)（最坏情况，对普通二叉树）",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（类似遍历）",
        "适用场景": "定位树中特定数据。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG006",
      "name": "求二叉树深度",
      "attributes": {
        "难度": "入门",
        "内容": "计算二叉树的最大层数。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（深度=max(左子树深度, 右子树深度) + 1）",
        "适用场景": "分析树的规模和平衡性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG007",
      "name": "输出二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树以某种形式（如广义表）打印输出。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（类似前序遍历）",
        "适用场景": "可视化或调试二叉树结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG008",
      "name": "清除二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "释放二叉树所有结点占用的内存空间，使其变为空树。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（类似后序遍历）",
        "适用场景": "回收不再使用的二叉树内存。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG009",
      "name": "前序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树遍历方式之一：先访问根结点，再前序遍历左子树，最后前序遍历右子树 (DLR)。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归栈深度)",
        "设计思想": "递归、分治",
        "适用场景": "复制树、构建表达式树的前缀表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG010",
      "name": "中序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树遍历方式之一：先中序遍历左子树，再访问根结点，最后中序遍历右子树 (LDR)。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归栈深度)",
        "设计思想": "递归、分治",
        "适用场景": "对二叉搜索树可得到有序序列。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG011",
      "name": "后序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树遍历方式之一：先后序遍历左子树，再后序遍历右子树，最后访问根结点 (LRD)。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归栈深度)",
        "设计思想": "递归、分治",
        "适用场景": "计算表达式树、释放树结点空间。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG012",
      "name": "按层遍历",
      "attributes": {
        "难度": "入门",
        "内容": "树（包括二叉树和多叉树）的遍历方式：从上到下、同一层从左到右依次访问结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(W) (W为树的最大宽度)",
        "设计思想": "迭代（使用队列）",
        "适用场景": "查找最短路径（如在图中）、广度优先搜索。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS011",
      "name": "k叉树",
      "attributes": {
        "难度": "入门",
        "内容": "度为k的树，也称多叉树或多元树。每个结点最多有k个孩子。",
        "存储开销": "顺序存储对满k叉树或完全k叉树较优，链接存储（多重链表或孩子兄弟表示法）更通用。",
        "核心特性": "度最大为k。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG013",
      "name": "初始化树",
      "attributes": {
        "难度": "入门",
        "内容": "将k叉树置为空树。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "赋值",
        "适用场景": "创建或清空树前。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG014",
      "name": "创建树",
      "attributes": {
        "难度": "中等",
        "内容": "根据给定的输入（如广义表字符串）建立k叉树的内存表示（如标准链接方式）。",
        "时间复杂度": "O(n) (n为输入规模或结点数)",
        "空间复杂度": "O(h) (h为树高，取决于实现方式，如使用栈辅助)",
        "设计思想": "递归或迭代（栈辅助）",
        "适用场景": "从外部表示构建k叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG015",
      "name": "遍历树",
      "attributes": {
        "难度": "入门",
        "内容": "按照特定次序访问k叉树中的所有结点，且每个结点仅被访问一次。常见有先根、后根、层序遍历。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)或O(n)（取决于遍历方式和实现）",
        "设计思想": "递归、迭代（栈或队列辅助）",
        "适用场景": "处理树中所有结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG016",
      "name": "查找树结点",
      "attributes": {
        "难度": "入门",
        "内容": "在k叉树中查找具有特定值的结点。",
        "时间复杂度": "O(n)（最坏情况）",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（类似遍历）",
        "适用场景": "定位树中特定数据。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG017",
      "name": "输出树",
      "attributes": {
        "难度": "入门",
        "内容": "将k叉树以某种形式（如广义表）打印输出。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（类似先根遍历）",
        "适用场景": "可视化或调试k叉树结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG018",
      "name": "判空树",
      "attributes": {
        "难度": "入门",
        "内容": "判断k叉树是否为空。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "比较",
        "适用场景": "在操作树前进行检查。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG019",
      "name": "清除树",
      "attributes": {
        "难度": "入门",
        "内容": "释放k叉树所有结点占用的内存空间，使其变为空树。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)（递归实现）",
        "设计思想": "递归（类似后根遍历）",
        "适用场景": "回收不再使用的树内存。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON019",
      "name": "标准方式",
      "attributes": {
        "难度": "入门",
        "内容": "树的一种链接存储方式，每个结点包含数据域和k个指针域，分别指向k个孩子结点（k为树的度）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON020",
      "name": "广义标准方式",
      "attributes": {
        "难度": "入门",
        "内容": "树的一种链接存储方式，在标准方式基础上，每个结点增加一个指向双亲结点的指针域。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON021",
      "name": "二叉树方式",
      "attributes": {
        "难度": "中等",
        "内容": "将普通树转换为对应的二叉树（左孩子-右兄弟表示法），然后使用二叉链表存储。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG020",
      "name": "先根遍历",
      "attributes": {
        "难度": "入门",
        "内容": "k叉树遍历方式之一：先访问根结点，然后从左到右依次先根遍历每棵子树。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归栈深度)",
        "设计思想": "递归、分治",
        "适用场景": "树的复制、深度优先搜索。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG021",
      "name": "后根遍历",
      "attributes": {
        "难度": "入门",
        "内容": "k叉树遍历方式之一：从左到右依次后根遍历根结点的每棵子树，然后再访问根结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归栈深度)",
        "设计思想": "递归、分治",
        "适用场景": "计算树的某些属性（如高度）、释放树结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG022",
      "name": "深度优先遍历",
      "attributes": {
        "难度": "入门",
        "内容": "树或图的一种遍历策略，尽可能深地搜索树的分支。先根遍历和后根遍历是其具体实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归、栈",
        "适用场景": "拓扑排序、查找路径。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG023",
      "name": "广度优先遍历",
      "attributes": {
        "难度": "入门",
        "内容": "树或图的一种遍历策略，从根（或源点）开始，探索邻近结点，然后再移动到下一层邻结点。按层遍历是其具体实现。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(W) (W为最大宽度)",
        "设计思想": "迭代、队列",
        "适用场景": "查找最短路径、按层处理。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS012",
      "name": "队列",
      "attributes": {
        "难度": "入门",
        "内容": "一种先进先出（FIFO）的线性数据结构。允许在表的一端进行插入（入队），在另一端进行删除（出队）。",
        "存储开销": "顺序存储需要预分配空间，链式存储需要指针开销。",
        "核心特性": "先进先出。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS013",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "一种后进先出（LIFO）的线性数据结构。只允许在表的一端（栈顶）进行插入（入栈）和删除（出栈）。",
        "存储开销": "顺序存储需要预分配空间，链式存储需要指针开销。",
        "核心特性": "后进先出。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    }
  ],
  "relations": [
    {
      "type": "继承",
      "ID": "05REL001",
      "source": "05DS005",
      "target": "05DS001"
    },
    {
      "type": "继承",
      "ID": "05REL002",
      "source": "05DS006",
      "target": "05DS005"
    },
    {
      "type": "继承",
      "ID": "05REL003",
      "source": "05DS007",
      "target": "05DS005"
    },
    {
      "type": "继承",
      "ID": "05REL004",
      "source": "05DS007",
      "target": "05DS008"
    },
    {
      "type": "继承",
      "ID": "05REL005",
      "source": "05DS006",
      "target": "05DS007"
    },
    {
      "type": "继承",
      "ID": "05REL006",
      "source": "05DS002",
      "target": "05DS001"
    },
    {
      "type": "继承",
      "ID": "05REL007",
      "source": "05DS003",
      "target": "05DS001"
    },
    {
      "type": "继承",
      "ID": "05REL008",
      "source": "05DS005",
      "target": "05DS002"
    },
    {
      "type": "继承",
      "ID": "05REL009",
      "source": "05DS011",
      "target": "05DS001"
    },
    {
      "type": "变体",
      "ID": "05REL010",
      "source": "05DS010",
      "target": "05DS009"
    },
    {
      "type": "操作绑定",
      "ID": "05REL011",
      "source": "05ALG009",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL012",
      "source": "05ALG010",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL013",
      "source": "05ALG011",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL014",
      "source": "05ALG012",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL015",
      "source": "05ALG004",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL016",
      "source": "05ALG001",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL017",
      "source": "05ALG002",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL018",
      "source": "05ALG003",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL019",
      "source": "05ALG005",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL020",
      "source": "05ALG006",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL021",
      "source": "05ALG007",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL022",
      "source": "05ALG008",
      "target": "05DS005"
    },
    {
      "type": "操作绑定",
      "ID": "05REL023",
      "source": "05ALG020",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL024",
      "source": "05ALG021",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL025",
      "source": "05ALG012",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL026",
      "source": "05ALG015",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL027",
      "source": "05ALG013",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL028",
      "source": "05ALG014",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL029",
      "source": "05ALG016",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL030",
      "source": "05ALG017",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL031",
      "source": "05ALG018",
      "target": "05DS011"
    },
    {
      "type": "操作绑定",
      "ID": "05REL032",
      "source": "05ALG019",
      "target": "05DS011"
    },
    {
      "type": "使用",
      "ID": "05REL033",
      "source": "05ALG012",
      "target": "05DS012"
    },
    {
      "type": "使用",
      "ID": "05REL034",
      "source": "05ALG002",
      "target": "05DS013"
    },
    {
      "type": "使用",
      "ID": "05REL035",
      "source": "05ALG014",
      "target": "05DS013"
    },
    {
      "type": "理论依赖",
      "ID": "05REL036",
      "source": "05DS005",
      "target": "05CON001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL037",
      "source": "05DS005",
      "target": "05CON013"
    },
    {
      "type": "理论依赖",
      "ID": "05REL038",
      "source": "05DS005",
      "target": "05CON014"
    },
    {
      "type": "理论依赖",
      "ID": "05REL039",
      "source": "05DS001",
      "target": "05CON001"
    },
    {
      "type": "理论依赖",
      "ID": "05REL040",
      "source": "05DS001",
      "target": "05CON002"
    },
    {
      "type": "理论依赖",
      "ID": "05REL041",
      "source": "05DS001",
      "target": "05CON003"
    },
    {
      "type": "理论依赖",
      "ID": "05REL042",
      "source": "05DS001",
      "target": "05CON004"
    },
    {
      "type": "理论依赖",
      "ID": "05REL043",
      "source": "05DS001",
      "target": "05CON005"
    },
    {
      "type": "理论依赖",
      "ID": "05REL044",
      "source": "05DS001",
      "target": "05CON006"
    },
    {
      "type": "理论依赖",
      "ID": "05REL045",
      "source": "05DS001",
      "target": "05CON007"
    },
    {
      "type": "理论依赖",
      "ID": "05REL046",
      "source": "05DS001",
      "target": "05CON008"
    },
    {
      "type": "理论依赖",
      "ID": "05REL047",
      "source": "05DS001",
      "target": "05CON009"
    },
    {
      "type": "理论依赖",
      "ID": "05REL048",
      "source": "05DS001",
      "target": "05CON010"
    },
    {
      "type": "理论依赖",
      "ID": "05REL049",
      "source": "05DS001",
      "target": "05CON011"
    },
    {
      "type": "理论依赖",
      "ID": "05REL050",
      "source": "05DS001",
      "target": "05CON012"
    },
    {
      "type": "理论依赖",
      "ID": "05REL051",
      "source": "05DS005",
      "target": "05CON015"
    },
    {
      "type": "理论依赖",
      "ID": "05REL052",
      "source": "05DS005",
      "target": "05CON016"
    },
    {
      "type": "使用",
      "ID": "05REL053",
      "source": "05DS005",
      "target": "05CON017"
    },
    {
      "type": "使用",
      "ID": "05REL054",
      "source": "05DS005",
      "target": "05CON018"
    },
    {
      "type": "使用",
      "ID": "05REL055",
      "source": "05CON018",
      "target": "05DS009"
    },
    {
      "type": "使用",
      "ID": "05REL056",
      "source": "05DS001",
      "target": "05CON017"
    },
    {
      "type": "使用",
      "ID": "05REL057",
      "source": "05DS001",
      "target": "05CON018"
    },
    {
      "type": "使用",
      "ID": "05REL058",
      "source": "05CON018",
      "target": "05CON019"
    },
    {
      "type": "使用",
      "ID": "05REL059",
      "source": "05CON018",
      "target": "05CON020"
    },
    {
      "type": "使用",
      "ID": "05REL060",
      "source": "05CON018",
      "target": "05CON021"
    },
    {
      "type": "继承",
      "ID": "05REL061",
      "source": "05ALG020",
      "target": "05ALG022"
    },
    {
      "type": "继承",
      "ID": "05REL062",
      "source": "05ALG021",
      "target": "05ALG022"
    },
    {
      "type": "继承",
      "ID": "05REL063",
      "source": "05ALG012",
      "target": "05ALG023"
    },
    {
      "type": "理论依赖",
      "ID": "05REL064",
      "source": "05DS004",
      "target": "05DS001"
    },
    {
      "type": "使用",
      "ID": "05REL065",
      "source": "05CON021",
      "target": "05DS005"
    },
    {
      "type": "继承",
      "ID": "05REL066",
      "source": "05ALG009",
      "target": "05ALG022"
    },
    {
      "type": "继承",
      "ID": "05REL067",
      "source": "05ALG010",
      "target": "05ALG022"
    },
    {
      "type": "继承",
      "ID": "05REL068",
      "source": "05ALG011",
      "target": "05ALG022"
    }
  ]
}