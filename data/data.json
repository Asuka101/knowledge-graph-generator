{
    "entities": [
        {
            "type": "概念",
            "ID": "01CON001",
            "name": "数据结构",
            "attributes": {
                "难度": "入门",
                "内容": "研究从解决现实问题中抽象出来的数据如何在计算机系统中很好地表示、存取和处理的方法；指数据以及相互之间的联系"
            }
        },
        {
            "type": "概念",
            "ID": "01CON002",
            "name": "算法",
            "attributes": {
                "难度": "入门",
                "内容": "解决特定问题或执行特定计算而设计的一系列明确、有限的步骤，包含数据结构的基本操作、逻辑设计与应用；解决特定问题的方法"
            }
        },
        {
            "type": "概念",
            "ID": "01CON003",
            "name": "数据",
            "attributes": {
                "难度": "入门",
                "内容": "人们利用便于书写、记忆和交流的符号对现实世界的事物及其活动所做的记录"
            }
        },
        {
            "type": "概念",
            "ID": "01CON004",
            "name": "数据元素",
            "attributes": {
                "难度": "入门",
                "内容": "一个数据整体中相对独立的单位"
            }
        },
        {
            "type": "概念",
            "ID": "01CON005",
            "name": "数据记录",
            "attributes": {
                "难度": "入门",
                "内容": "数据处理领域组织数据的基本单位，由一个或多个数据项组成"
            }
        },
        {
            "type": "概念",
            "ID": "01CON006",
            "name": "数据项",
            "attributes": {
                "难度": "入门",
                "内容": "数据记录的组成部分，可以是简单数据项或组合数据项"
            }
        },
        {
            "type": "概念",
            "ID": "01CON007",
            "name": "关键项",
            "attributes": {
                "难度": "入门",
                "内容": "在一个表或文件中，其值能唯一标识一个记录的数据项"
            }
        },
        {
            "type": "概念",
            "ID": "01CON008",
            "name": "关键字",
            "attributes": {
                "难度": "入门",
                "内容": "关键项中的每个值称为所在记录的关键字"
            }
        },
        {
            "type": "概念",
            "ID": "01CON009",
            "name": "数据处理",
            "attributes": {
                "难度": "入门",
                "内容": "利用计算机对数据进行存储、检索、插入、删除、合并、拆分、排序、统计、计算、转换、输入、输出等的处理过程"
            }
        },
        {
            "type": "概念",
            "ID": "01CON010",
            "name": "逻辑结构",
            "attributes": {
                "难度": "入门",
                "内容": "根据数据之间的内在联系而抽象出来的结构，与计算机存储和处理无关，包括集合、线、树、图等基本结构"
            }
        },
        {
            "type": "概念",
            "ID": "01CON011",
            "name": "存储结构",
            "attributes": {
                "难度": "入门",
                "content": "数据在存储器中表现出的结构，与存储方法相对应，包括顺序、链接、索引、散列等基本形式"
            }
        },
        {
            "type": "概念",
            "ID": "01CON012",
            "name": "顺序存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种存储方法，数据元素存储在连续的存储位置"
            }
        },
        {
            "type": "概念",
            "ID": "01CON013",
            "name": "链接存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种存储方法，通过指针将数据元素链接起来"
            }
        },
        {
            "type": "概念",
            "ID": "01CON014",
            "name": "索引存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种存储方法，通过索引表来确定数据元素位置"
            }
        },
        {
            "type": "概念",
            "ID": "01CON015",
            "name": "散列存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种存储方法，通过散列函数确定数据元素位置"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS001",
            "name": "集合结构",
            "attributes": {
                "难度": "入门",
                "内容": "一种逻辑结构，只存在元素的集合，不考虑它们之间的任何联系",
                "核心特性": "元素之间无确定关系"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS002",
            "name": "线性结构",
            "attributes": {
                "难度": "入门",
                "内容": "一种逻辑结构，数据元素之间的1对1联系",
                "核心特性": "1:1关系, 有序序列"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS003",
            "name": "树形结构",
            "attributes": {
                "难度": "入门",
                "内容": "一种逻辑结构，数据元素之间的1对N（N>=0）联系，即层次关系",
                "核心特性": "1:N关系, 层次结构, 单一前驱"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS004",
            "name": "图形结构",
            "attributes": {
                "难度": "入门",
                "内容": "一种逻辑结构，数据元素之间的M对N（M>=0,N>=0）联系，即网状关系",
                "核心特性": "M:N关系, 网状结构"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS005",
            "name": "数组",
            "attributes": {
                "难度": "入门",
                "内容": "数目固定的具有同一类型的数据元素的顺序组合，具有线性结构",
                "存储开销": "固定大小，取决于元素个数和类型",
                "核心特性": "固定大小, 同一类型元素, 顺序存储, 下标访问 (随机访问)"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS006",
            "name": "字符串",
            "attributes": {
                "难度": "入门",
                "内容": "一种特殊的一维字符数组类型，由连续字符组成，以空字符'0'结束",
                "存储开销": "长度+1字节",
                "核心特性": "字符序列, 空结束符, 顺序访问"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS007",
            "name": "记录",
            "attributes": {
                "难度": "入门",
                "内容": "多个不同数据类型（也可相同）的组合体，物理存储按定义顺序顺序存储",
                "存储开销": "各成员大小之和",
                "核心特性": "异构元素, 成员访问"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS008",
            "name": "文件",
            "attributes": {
                "难度": "入门",
                "内容": "按位置有序的数据集合，存储在外存上，具有线性结构",
                "存储开销": "取决于内容大小",
                "核心特性": "有序, 外部存储"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS009",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "通过next域把同类型的结点（对象）链接起来形成的结构",
                "存储开销": "结点数 * (数据大小 + 指针大小)",
                "核心特性": "动态大小, 链接存储, 顺序访问"
            }
        },
        {
            "type": "概念",
            "ID": "01CON016",
            "name": "数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "对数据的取值范围、数据元素之间的结构以及允许施加操作的一种总体描述"
            }
        },
        {
            "type": "概念",
            "ID": "01CON017",
            "name": "简单类型",
            "attributes": {
                "难度": "入门",
                "内容": "数据类型的一种，每个数据是无法再分割的整体，如整数、实数、字符、指针等"
            }
        },
        {
            "type": "概念",
            "ID": "01CON018",
            "name": "结构类型",
            "attributes": {
                "难度": "入门",
                "内容": "数据类型的一种，由简单类型数据按照一定的规则构造而成，数据可以分解，如数组、记录、文件等"
            }
        },
        {
            "type": "概念",
            "ID": "01CON019",
            "name": "记录结构类型",
            "attributes": {
                "难度": "入门",
                "内容": "在C/C++语言中通过struct关键字定义的、包含多个不同数据类型（也可相同）的组合体"
            }
        },
        {
            "type": "概念",
            "ID": "01CON020",
            "name": "抽象数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "由一种数据结构和在其上的所有操作（运算）所组成，定义数据的逻辑结构和操作说明，不考虑存储结构和具体实现"
            }
        },
        {
            "type": "概念",
            "ID": "01CON021",
            "name": "数据对象",
            "attributes": {
                "难度": "入门",
                "内容": "属于一种数据类型中的特定实例"
            }
        },
        {
            "type": "概念",
            "ID": "01CON022",
            "name": "算法描述",
            "attributes": {
                "难度": "入门",
                "内容": "借助各种工具（文字、流程图、程序设计语言等）描述算法的方法"
            }
        },
        {
            "type": "概念",
            "ID": "01CON023",
            "name": "算法评价",
            "attributes": {
                "难度": "入门",
                "内容": "从多个算法中选择较合适的一种，或改进现有算法的方法，评价方面包括正确性、稳健性、可读性、时间复杂度、空间复杂度"
            }
        },
        {
            "type": "概念",
            "ID": "01CON024",
            "name": "正确性",
            "attributes": {
                "难度": "入门",
                "内容": "算法的评价标准之一，指在合理输入下能够在有限时间内得出正确结果"
            }
        },
        {
            "type": "概念",
            "ID": "01CON025",
            "name": "稳健性",
            "attributes": {
                "难度": "入门",
                "内容": "算法的评价标准之一，指对不合理数据输入的反应和处理能力"
            }
        },
        {
            "type": "概念",
            "ID": "01CON026",
            "name": "可读性",
            "attributes": {
                "难度": "入门",
                "内容": "算法的评价标准之一，指算法供人们阅读的容易程度"
            }
        },
        {
            "type": "概念",
            "ID": "01CON027",
            "name": "时间复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "算法有效性的量度之一，算法运行时间的相对度量，算法中包含简单操作次数的多少"
            }
        },
        {
            "type": "概念",
            "ID": "01CON028",
            "name": "空间复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "算法有效性的量度之一，算法在运行过程中临时占用存储空间大小的量度"
            }
        },
        {
            "type": "概念",
            "ID": "01CON029",
            "name": "数量级",
            "attributes": {
                "难度": "入门",
                "内容": "表示算法时间复杂度或空间复杂度的形式，通常用大O表示法，反映算法性能随问题规模增长的速度"
            }
        },
        {
            "type": "概念",
            "ID": "01CON030",
            "name": "数值算法",
            "attributes": {
                "难度": "入门",
                "内容": "解决数值问题的算法，主要进行算术运算"
            }
        },
        {
            "type": "概念",
            "ID": "01CON031",
            "name": "非数值算法",
            "attributes": {
                "难度": "入门",
                "内容": "解决非数值问题的算法，主要进行比较和逻辑运算"
            }
        },
        {
            "type": "概念",
            "ID": "01CON032",
            "name": "递归算法",
            "attributes": {
                "难度": "入门",
                "内容": "直接或间接调用自身的算法"
            }
        },
        {
            "type": "概念",
            "ID": "01CON033",
            "name": "非递归算法",
            "attributes": {
                "难度": "入门",
                "内容": "不调用自身的算法"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG001",
            "name": "顺序查找算法",
            "attributes": {
                "难度": "入门",
                "内容": "从线性数据结构（如数组）的开头依次遍历元素，直到找到目标或遍历结束",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)",
                "设计思想": "线性扫描",
                "适用场景": "数据未排序或频繁插入/删除"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG002",
            "name": "简单选择排序算法",
            "attributes": {
                "难度": "入门",
                "内容": "重复地从待排序的数据中找到最小（或最大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（或最大）元素，然后放到已排序序列的末尾",
                "时间复杂度": "O(n^2)",
                "空间复杂度": "O(1)",
                "设计思想": "选择",
                "适用场景": "数据量较小，对交换次数有限制"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG003",
            "name": "二分查找算法",
            "attributes": {
                "难度": "入门",
                "内容": "在有序表中，通过比较中间元素，每次将查找范围缩小一半",
                "时间复杂度": "O(lgn)",
                "空间复杂度": "O(1)",
                "设计思想": "分治",
                "适用场景": "数据已排序"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG004",
            "name": "快速排序算法",
            "attributes": {
                "难度": "中等",
                "内容": "通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序",
                "时间复杂度": "O(n*lgn) (平均), O(n^2) (最坏)",
                "空间复杂度": "O(lgn) (平均)",
                "设计思想": "分治, 枢轴划分",
                "适用场景": "大多数情况下的通用排序"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG005",
            "name": "归并排序算法",
            "attributes": {
                "难度": "中等",
                "内容": "将两个或两个以上的有序表合并成一个新的有序表",
                "时间复杂度": "O(n*lgn)",
                "空间复杂度": "O(n)",
                "设计思想": "分治, 合并",
                "适用场景": "外部排序, 稳定性要求高的排序"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG006",
            "name": "矩阵乘法算法",
            "attributes": {
                "难度": "入门",
                "内容": "计算两个矩阵的乘积，通常指标准的三重循环算法",
                "时间复杂度": "O(n^3) (对于n阶矩阵)",
                "空间复杂度": "O(n^2)",
                "设计思想": "直接计算",
                "适用场景": "矩阵运算"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG007",
            "name": "集合所有子集算法",
            "attributes": {
                "难度": "中等",
                "内容": "求具有n个元素集合的所有子集的算法",
                "时间复杂度": "O(2^n * n)",
                "空间复杂度": "O(n)",
                "设计思想": "回溯或位运算",
                "适用场景": "需要生成所有子集的场景"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG008",
            "name": "全排列算法",
            "attributes": {
                "难度": "中等",
                "内容": "求具有n个元素的全排列的算法",
                "时间复杂度": "O(n! * n)",
                "空间复杂度": "O(n)",
                "设计思想": "回溯",
                "适用场景": "需要生成所有排列的场景"
            }
        },
        {
            "type": "概念",
            "ID": "01CON034",
            "name": "有序表",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素按特定顺序排列的数据集合"
            }
        },
        {
            "type": "概念",
            "ID": "01CON035",
            "name": "C++语言",
            "attributes": {
                "难度": "入门",
                "内容": "一种计算机语言，用于描述数据处理方法和过程，可用于编写程序，能够兼容C语言，增加了类、引用参数、函数重载、运算符重载等特性"
            }
        },
        {
            "type": "概念",
            "ID": "01CON036",
            "name": "函数",
            "attributes": {
                "难度": "入门",
                "内容": "C/C++语言中程序的基本组成模块，实现特定功能，可带参数和返回值"
            }
        },
        {
            "type": "概念",
            "ID": "01CON037",
            "name": "函数重载",
            "attributes": {
                "难度": "入门",
                "内容": "在C++语言中，允许有多个同名函数，但参数个数或类型不同"
            }
        },
        {
            "type": "概念",
            "ID": "01CON038",
            "name": "运算符重载",
            "attributes": {
                "难度": "入门",
                "内容": "在C++语言中，允许对大多数运算符进行重载，使其应用于自定义类型"
            }
        },
        {
            "type": "概念",
            "ID": "01CON039",
            "name": "引用参数",
            "attributes": {
                "难度": "入门",
                "内容": "函数参数传递方式，形参是实参的别名，改变形参会影响实参，在C++中引入"
            }
        },
        {
            "type": "概念",
            "ID": "01CON040",
            "name": "值参数",
            "attributes": {
                "难度": "入门",
                "内容": "函数参数传递方式，传递实参的值，形参有独立存储空间，改变形参不影响实参"
            }
        },
        {
            "type": "概念",
            "ID": "01CON041",
            "name": "指针参数",
            "attributes": {
                "难度": "入门",
                "内容": "函数参数传递方式，传递实参的地址，通过指针可以访问和修改实参所指向的内容，在C语言中常用于实现引用功能"
            }
        },
        {
            "type": "概念",
            "ID": "01CON042",
            "name": "iostream.h",
            "attributes": {
                "难度": "入门",
                "content": "C++头文件，用于标准输入/输出流（cin, cout, cerr）"
            }
        },
        {
            "type": "概念",
            "ID": "01CON043",
            "name": "stdlib.h",
            "attributes": {
                "难度": "入门",
                "content": "C++头文件，包含标准库函数（内存分配、随机数、程序退出等）"
            }
        },
        {
            "type": "概念",
            "ID": "01CON044",
            "name": "fstream.h",
            "attributes": {
                "难度": "入门",
                "content": "C++头文件，用于文件流操作（ifstream, ofstream, fstream）"
            }
        },
        {
            "type": "概念",
            "ID": "01CON045",
            "name": "string.h",
            "attributes": {
                "难度": "入门",
                "content": "C++头文件，用于C风格字符串处理函数"
            }
        },
        {
            "type": "概念",
            "ID": "01CON046",
            "name": "iomanip.h",
            "attributes": {
                "难度": "入门",
                "content": "C++头文件，用于输入/输出格式控制"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS001",
            "name": "线性表",
            "attributes": {
                "难度": "入门",
                "内容": "具有相同属性的数据元素的一个有限序列。元素按前后位置线性有序，除首尾元素外，每个元素有且仅有一个直接前驱和一个直接后继。",
                "存储开销": "依赖于具体实现，顺序存储为O(N)，链式存储为O(N)",
                "核心特性": "线性有序, 元素间一对一关系",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON001",
            "name": "抽象数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "一个数学模型以及定义在该模型上的一组操作的集合。它定义了数据的逻辑结构和操作，隐藏了其物理存储和实现细节。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS002",
            "name": "顺序存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "将逻辑上相邻的数据元素存储在物理位置也相邻的存储单元中的存储方式。通常借助数组实现。",
                "存储开销": "O(N)，需要连续存储空间",
                "核心特性": "支持随机存取，插入删除操作平均时间复杂度O(N)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS003",
            "name": "数组",
            "attributes": {
                "难度": "入门",
                "内容": "一种存储相同类型元素的固定大小的连续内存区域的数据结构，可通过索引直接访问元素。",
                "存储开销": "固定大小 N * sizeof(ElementType)",
                "核心特性": "随机访问 O(1)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS004",
            "name": "链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种线性数据结构，由一系列结点组成，结点在物理上不必连续存储，通过指针域将逻辑上相邻的元素链接起来。",
                "存储开销": "O(N)，每个结点需要额外存储指针",
                "核心特性": "插入删除操作高效O(1)（若已知位置），访问元素需顺序查找O(N)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS005",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "链表的一种形式，每个结点只包含一个指向其直接后继结点的指针域。",
                "存储开销": "N * (sizeof(ElementType) + sizeof(pointer))",
                "核心特性": "只能单向遍历",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS006",
            "name": "双向链表",
            "attributes": {
                "难度": "入门",
                "内容": "链表的一种形式，每个结点包含两个指针域，一个指向直接前驱结点，一个指向直接后继结点。",
                "存储开销": "N * (sizeof(ElementType) + 2 * sizeof(pointer))",
                "核心特性": "支持双向遍历，插入删除操作更方便",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON002",
            "name": "结点",
            "attributes": {
                "难度": "入门",
                "内容": "链式存储结构中的基本组成单位，通常包含数据域和指针域。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON003",
            "name": "指针域",
            "attributes": {
                "难度": "入门",
                "内容": "链表结点中用于存储下一个或上一个结点地址的部分，用于建立结点间的链接关系。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON004",
            "name": "数值域",
            "attributes": {
                "难度": "入门",
                "内容": "链表结点中用于存储实际数据元素的部分。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON005",
            "name": "表头指针",
            "attributes": {
                "难度": "入门",
                "内容": "指向链表中第一个有效数据结点（或表头附加结点）的指针。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON006",
            "name": "表头结点",
            "attributes": {
                "难度": "入门",
                "内容": "链表中存储第一个数据元素的结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON007",
            "name": "表尾结点",
            "attributes": {
                "难度": "入门",
                "内容": "链表中存储最后一个数据元素的结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS007",
            "name": "循环链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种链表变体，其中最后一个结点的指针域指向第一个结点（或表头附加结点），形成环状结构。",
                "存储开销": "与单链表或双向链表相同",
                "核心特性": "可从任一结点出发遍历整个链表",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON008",
            "name": "表头附加结点",
            "attributes": {
                "难度": "入门",
                "内容": "在链表的第一个有效数据结点之前添加的一个额外结点，通常不存储实际数据，用于统一和简化链表（尤其是空链表和第一个结点）的操作。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS008",
            "name": "空闲链表",
            "attributes": {
                "难度": "中等",
                "内容": "在静态链表（数组模拟链表）中，将所有未被使用的数组单元链接起来形成的一个链表，用于管理可分配的结点空间。",
                "存储开销": "利用现有数组空间，无额外开销",
                "核心特性": "管理静态分配的结点，实现结点的动态分配和回收",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON009",
            "name": "随机存取",
            "attributes": {
                "难度": "入门",
                "内容": "指访问存储器中任何位置的数据所需时间都是相同或几乎相同的，与数据所在的物理位置无关。数组支持随机存取。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON010",
            "name": "顺序存取",
            "attributes": {
                "难度": "入门",
                "内容": "指访问数据必须按照特定的线性顺序进行，访问一个数据项需要先访问它前面的所有数据项。链表是典型的顺序存取结构。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG001",
            "name": "初始化线性表",
            "attributes": {
                "难度": "入门",
                "内容": "创建一个空的线性表。对于顺序表，分配存储空间并将长度设为0；对于链表，将头指针设为NULL。",
                "时间复杂度": "O(1)或O(MaxSize)",
                "空间复杂度": "O(1)或O(MaxSize)",
                "设计思想": "构造",
                "适用场景": "使用线性表之前",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG002",
            "name": "清除线性表",
            "attributes": {
                "难度": "入门",
                "内容": "删除线性表中的所有元素，使其成为空表。顺序表重置长度，链表需逐个释放结点。",
                "时间复杂度": "顺序表O(1), 链表O(N)",
                "空间复杂度": "O(1)",
                "设计思想": "销毁/重置",
                "适用场景": "不再使用或需要重置线性表时",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG003",
            "name": "求线性表长度",
            "attributes": {
                "难度": "入门",
                "内容": "返回线性表中数据元素的个数。顺序表直接读取长度属性，链表需要遍历计数。",
                "时间复杂度": "顺序表O(1), 链表O(N)",
                "空间复杂度": "O(1)",
                "设计思想": "查询",
                "适用场景": "获取线性表大小",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG004",
            "name": "判断线性表是否为空",
            "attributes": {
                "难度": "入门",
                "内容": "检查线性表中是否包含元素。顺序表检查长度是否为0，链表检查头指针是否为NULL。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "查询",
                "适用场景": "进行插入、删除等操作前的检查",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG005",
            "name": "获取线性表元素",
            "attributes": {
                "难度": "入门",
                "内容": "根据指定的位置序号（如第i个）返回线性表中对应元素的值。",
                "时间复杂度": "顺序表O(1), 链表O(N)",
                "空间复杂度": "O(1)",
                "设计思想": "访问",
                "适用场景": "需要访问特定位置的元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG006",
            "name": "遍历线性表",
            "attributes": {
                "难度": "入门",
                "内容": "按照元素的逻辑顺序依次访问线性表中的每个元素一次。",
                "时间复杂度": "O(N)",
                "空间复杂度": "O(1)",
                "设计思想": "迭代/递归",
                "适用场景": "需要处理表中所有元素，如打印、计算总和等",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG007",
            "name": "查找线性表元素",
            "attributes": {
                "难度": "入门",
                "内容": "在线性表中查找第一个满足给定条件的元素（通常是值相等）。",
                "时间复杂度": "O(N)",
                "空间复杂度": "O(1)",
                "设计思想": "顺序查找",
                "适用场景": "定位表中特定元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG008",
            "name": "更新线性表元素",
            "attributes": {
                "难度": "入门",
                "内容": "修改线性表中指定位置或满足特定条件的元素的值。",
                "时间复杂度": "O(N) (包含查找时间)",
                "空间复杂度": "O(1)",
                "设计思想": "查找+修改",
                "适用场景": "修改现有元素信息",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG009",
            "name": "插入线性表元素",
            "attributes": {
                "难度": "入门",
                "内容": "在线性表的指定位置插入一个新的数据元素。顺序表需要移动后续元素，链表需要修改指针链接。",
                "时间复杂度": "顺序表O(N), 链表O(N)（查找位置）或O(1)（已知插入点）",
                "空间复杂度": "O(1)（不考虑扩容）",
                "设计思想": "修改结构",
                "适用场景": "向线性表中添加新数据",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG010",
            "name": "删除线性表元素",
            "attributes": {
                "难度": "入门",
                "内容": "从线性表中移除指定位置或满足特定条件的元素。顺序表需要移动后续元素，链表需要修改指针链接。",
                "时间复杂度": "顺序表O(N), 链表O(N)（查找位置）或O(1)（已知删除点）",
                "空间复杂度": "O(1)",
                "设计思想": "修改结构",
                "适用场景": "从线性表中移除数据",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG011",
            "name": "排序线性表",
            "attributes": {
                "难度": "入门",
                "内容": "将线性表中的元素按照某种规则（如值的升序或降序）重新排列。",
                "时间复杂度": "依赖具体排序算法",
                "空间复杂度": "依赖具体排序算法",
                "设计思想": "比较、交换、插入等",
                "适用场景": "需要有序数据序列的场景",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG012",
            "name": "插入排序",
            "attributes": {
                "难度": "入门",
                "内容": "一种简单的排序算法，通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。",
                "时间复杂度": "O(N^2)",
                "空间复杂度": "O(1)",
                "设计思想": "逐个插入有序子序列",
                "适用场景": "数据量小或基本有序的序列",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON011",
            "name": "多项式",
            "attributes": {
                "难度": "入门",
                "内容": "由常数、变量及它们的和、差、积、非负整数次幂运算组成的代数表达式。在线性表章节中常作为应用实例，可以用线性表（顺序或链式）来表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON012",
            "name": "系数",
            "attributes": {
                "难度": "入门",
                "内容": "在多项式中，每一项变量前的常数因子。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "02CON013",
            "name": "指数",
            "attributes": {
                "难度": "入门",
                "内容": "在多项式中，每一项变量的幂次。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG013",
            "name": "多项式求值",
            "attributes": {
                "难度": "入门",
                "内容": "计算一个多项式在给定变量值时的数值结果。可以使用朴素方法或秦九韶算法。",
                "时间复杂度": "O(N) (N为项数)",
                "空间复杂度": "O(1)",
                "设计思想": "累加/迭代计算",
                "适用场景": "需要计算特定点多项式值的场合",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG014",
            "name": "多项式相加",
            "attributes": {
                "难度": "入门",
                "内容": "将两个多项式合并成一个新的多项式，对应指数项的系数相加。",
                "时间复杂度": "O(M+N) (M, N分别为两多项式项数)",
                "空间复杂度": "O(M+N) (存储结果多项式)",
                "设计思想": "合并有序线性表",
                "适用场景": "多项式代数运算",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS001",
            "name": "集合",
            "attributes": {
                "难度": "入门",
                "内容": "由具有相同属性的数据元素组合而成的数据结构，数据元素之间没有任何前驱和后继关系（无序性），且元素唯一。支持初始化、清除、求长度、判空、判断归属、查找、插入、删除、并集、交集、差集等操作。",
                "存储开销": "顺序存储为O(MaxSize)，链接存储为O(n)，其中n为元素个数。",
                "核心特性": "无序性、唯一性",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS002",
            "name": "集合的顺序存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "使用数组存储集合元素，并用一个变量记录当前集合长度。插入和删除元素时，为保持无序性，通常将被删元素位置用最后一个元素填充，或将新元素添加到末尾，无需移动大量元素。",
                "存储开销": "O(MaxSize)，其中MaxSize为数组预分配大小。",
                "核心特性": "基于数组、随机访问（非集合特性）、动态调整大小（可选）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS003",
            "name": "集合的链接存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "使用单链表存储集合元素，每个结点存储一个元素值。插入通常在表头进行，删除需要查找结点并修改指针。",
                "存储开销": "O(n)，其中n为元素个数。",
                "核心特性": "基于链表、动态大小",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS004",
            "name": "稀疏矩阵",
            "attributes": {
                "难度": "中等",
                "内容": "非零元素个数远少于零元素个数的矩阵。为了节省存储空间和计算时间，通常只存储非零元素。",
                "存储开销": "依赖具体存储方式，如三元组顺序表O(t)，链接存储O(t + m + n)，t为非零元个数，m行n列。",
                "核心特性": "稀疏性",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS005",
            "name": "三元组线性表",
            "attributes": {
                "难度": "入门",
                "内容": "用于表示稀疏矩阵的一种线性结构，表中每个元素是一个三元组(行号, 列号, 非零元素值)。通常按行号主序、列号辅序排列。",
                "存储开销": "O(t)，t为非零元个数。",
                "核心特性": "有序性（按行列）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS006",
            "name": "稀疏矩阵的顺序存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "将稀疏矩阵对应的三元组线性表存储在数组中。结构通常包含矩阵的行数、列数、非零元个数以及存储三元组的数组。",
                "存储开销": "O(t)，t为非零元个数。",
                "核心特性": "基于数组、存储三元组",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS007",
            "name": "带行指针向量的链接存储",
            "attributes": {
                "难度": "中等",
                "内容": "稀疏矩阵的一种链接存储方式。使用一个指针向量（数组）存放每行非零元链表的头指针，同一行的非零元（三元组结点）按列号链接成单链表。",
                "存储开销": "O(t + m)，t为非零元个数，m为行数。",
                "核心特性": "行链接、便于按行处理",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS008",
            "name": "十字链接存储",
            "attributes": {
                "难度": "高级",
                "内容": "稀疏矩阵的一种链接存储方式。每个非零元结点包含行号、列号、值以及指向同行下一个结点和同列下一个结点的指针。同时使用行指针向量和列指针向量。",
                "存储开销": "O(t + m + n)，t为非零元个数，m为行数，n为列数。",
                "核心特性": "行列双向链接、便于按行按列处理",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS009",
            "name": "广义表",
            "attributes": {
                "难度": "中等",
                "内容": "线性表的推广，是n(n>=0)个元素的一个有限序列，元素可以是单元素或子表（本身也是广义表）。一种递归定义的数据结构。",
                "存储开销": "通常采用链接存储，O(N)，N为结点总数。",
                "核心特性": "递归结构、异质元素（单元素/子表）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS010",
            "name": "广义表的链接存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "采用动态链接结构存储广义表。结点分为单元素结点（存值和后继指针）和子表结点（存标志、子表头指针和后继指针）。",
                "存储开销": "O(N)，N为结点总数。",
                "核心特性": "递归链接、区分原子与子表",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS011",
            "name": "数组",
            "attributes": {
                "难度": "入门",
                "内容": "一种线性数据结构，用连续的内存空间存储相同类型的数据元素，可通过下标随机访问。",
                "存储开销": "O(N)，N为数组大小。",
                "核心特性": "连续存储、随机访问",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS012",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种链式数据结构，每个结点包含数据域和指向下一个结点的指针域。",
                "存储开销": "O(n)，n为结点数。",
                "核心特性": "链式存储、顺序访问",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG001",
            "name": "初始化集合",
            "attributes": {
                "难度": "入门",
                "内容": "将集合设置为空状态。对于顺序存储，通常置长度为0；对于动态顺序存储，还需分配初始空间；对于链接存储，置头指针为NULL。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1) 或 O(initial_size)（动态数组）",
                "设计思想": "初始化",
                "适用场景": "创建新集合时",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG002",
            "name": "清除集合",
            "attributes": {
                "难度": "入门",
                "内容": "移除集合中所有元素。对于动态存储（数组或链表），需要释放所占用的内存空间。",
                "时间复杂度": "O(1)（静态数组置长度）或 O(n)（释放链表结点）",
                "空间复杂度": "O(1)",
                "设计思想": "资源释放",
                "适用场景": "销毁集合或重用前",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG003",
            "name": "求集合长度",
            "attributes": {
                "难度": "入门",
                "内容": "返回集合中元素的个数。",
                "时间复杂度": "O(1)（顺序存储带长度变量）或 O(n)（遍历链表）",
                "空间复杂度": "O(1)",
                "设计思想": "计数",
                "适用场景": "获取集合大小",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG004",
            "name": "判断集合为空",
            "attributes": {
                "难度": "入门",
                "内容": "检查集合是否不包含任何元素。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "状态检查",
                "适用场景": "进行集合操作前的判断",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG005",
            "name": "判断元素是否属于集合",
            "attributes": {
                "难度": "入门",
                "内容": "检查给定元素是否存在于集合中。",
                "时间复杂度": "O(n)（顺序查找）",
                "空间复杂度": "O(1)",
                "设计思想": "顺序查找",
                "适用场景": "成员资格检查",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG006",
            "name": "输出集合",
            "attributes": {
                "难度": "入门",
                "内容": "遍历并显示集合中的所有元素。可选择按特定顺序（如排序后）输出。",
                "时间复杂度": "O(n)（直接输出）或 O(n^2)（排序后输出，如用简单选择排序）",
                "空间复杂度": "O(1) 或 O(n)（若需临时数组排序）",
                "设计思想": "遍历",
                "适用场景": "展示集合内容",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG007",
            "name": "查找集合元素",
            "attributes": {
                "难度": "入门",
                "内容": "在集合中查找与给定关键字匹配的元素，并返回其完整信息。",
                "时间复杂度": "O(n)（顺序查找）",
                "空间复杂度": "O(1)",
                "设计思想": "顺序查找",
                "适用场景": "检索集合中的特定数据",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG008",
            "name": "修改集合元素",
            "attributes": {
                "难度": "入门",
                "内容": "查找集合中与给定关键字匹配的元素，并用新值更新该元素。",
                "时间复杂度": "O(n)（顺序查找）",
                "空间复杂度": "O(1)",
                "设计思想": "查找与更新",
                "适用场景": "更新集合中的数据",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG009",
            "name": "插入集合元素",
            "attributes": {
                "难度": "入门",
                "内容": "向集合中添加一个新元素。需要先检查元素是否已存在（保证唯一性），若不存在则添加。对于顺序存储，可能涉及空间扩展。",
                "时间复杂度": "O(n)（检查存在性）+ O(1)（插入）或 O(n)（空间扩展）",
                "空间复杂度": "O(1)（平均）或 O(n)（触发空间扩展）",
                "设计思想": "查找与添加",
                "适用场景": "向集合增加数据",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG010",
            "name": "删除集合元素",
            "attributes": {
                "难度": "入门",
                "内容": "从集合中移除一个指定元素。需要先查找元素，找到后移除。对于顺序存储，通常用末尾元素填补空位。可能涉及空间收缩。",
                "时间复杂度": "O(n)（查找）+ O(1)（删除）",
                "空间复杂度": "O(1)（平均）或 O(n)（触发空间收缩）",
                "设计思想": "查找与移除",
                "适用场景": "从集合移除数据",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG011",
            "name": "求集合并集",
            "attributes": {
                "难度": "入门",
                "内容": "计算两个集合S1和S2的并集，结果存入新集合S。包含S1和S2中所有不重复的元素。",
                "时间复杂度": "O(n*m)（基于顺序查找插入）或 O(n+m)（若使用哈希等优化）",
                "空间复杂度": "O(n+m)（结果集）",
                "设计思想": "合并与去重",
                "适用场景": "合并两个集合",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG012",
            "name": "求集合交集",
            "attributes": {
                "难度": "入门",
                "内容": "计算两个集合S1和S2的交集，结果存入新集合S。包含同时存在于S1和S2中的元素。",
                "时间复杂度": "O(n*m)（基于顺序查找）",
                "空间复杂度": "O(min(n,m))（结果集）",
                "设计思想": "查找共同元素",
                "适用场景": "找出两个集合的共同部分",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG013",
            "name": "求集合差集",
            "attributes": {
                "难度": "入门",
                "内容": "计算两个集合S1和S2的差集 (S1 - S2)，结果存入新集合S。包含存在于S1但不存在于S2中的元素。",
                "时间复杂度": "O(n*m)（基于顺序查找）",
                "空间复杂度": "O(n)（结果集）",
                "设计思想": "查找并排除元素",
                "适用场景": "找出第一个集合独有的元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG014",
            "name": "初始化稀疏矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "将稀疏矩阵设置为空状态，通常将行数、列数、非零元个数置为0。对于链接存储，还需初始化指针向量。",
                "时间复杂度": "O(1) 或 O(m+n)（初始化指针向量）",
                "空间复杂度": "O(1)",
                "设计思想": "初始化",
                "适用场景": "创建新稀疏矩阵时",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG015",
            "name": "输入稀疏矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "根据用户输入（通常是三元组序列）构建稀疏矩阵的存储结构。",
                "时间复杂度": "O(t)（顺序存储）或 O(t*max(m,n))（十字链表末尾插入）",
                "空间复杂度": "O(t)（存储结构）",
                "设计思想": "数据构建",
                "适用场景": "从外部源创建稀疏矩阵",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG016",
            "name": "输出稀疏矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "按照特定格式（如三元组线性表格式）显示稀疏矩阵的内容。",
                "时间复杂度": "O(t)",
                "空间复杂度": "O(1)",
                "设计思想": "遍历与格式化输出",
                "适用场景": "展示稀疏矩阵内容",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG017",
            "name": "普通转置方法",
            "attributes": {
                "难度": "中等",
                "内容": "对稀疏矩阵（顺序存储）进行转置。通过n次扫描原三元组列表（n为列数），每次找出对应列的元素，交换行列号后存入新列表。",
                "时间复杂度": "O(n*t)",
                "空间复杂度": "O(t)（存储转置结果）",
                "设计思想": "按列扫描收集",
                "适用场景": "稀疏矩阵转置（效率较低）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG018",
            "name": "快速转置方法",
            "attributes": {
                "难度": "中等",
                "内容": "对稀疏矩阵（顺序存储）进行转置的优化算法。通过两次扫描：第一次统计原矩阵每列非零元个数，计算转置后每行第一个元素的位置；第二次扫描将元素直接放到转置矩阵的正确位置。",
                "时间复杂度": "O(n+t)",
                "空间复杂度": "O(t+n)（存储转置结果和辅助数组）",
                "设计思想": "计数定位、空间换时间",
                "适用场景": "高效稀疏矩阵转置",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG019",
            "name": "稀疏矩阵加法",
            "attributes": {
                "难度": "中等",
                "内容": "计算两个相同维度的稀疏矩阵之和。对于带行指针向量的链接存储，按行合并两个矩阵的非零元链表，对应位置元素相加，和为零则不存。",
                "时间复杂度": "O(t1+t2)",
                "空间复杂度": "O(t1+t2)（结果矩阵）",
                "设计思想": "按行归并合并",
                "适用场景": "计算稀疏矩阵的和",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG020",
            "name": "求广义表长度",
            "attributes": {
                "难度": "入门",
                "内容": "计算广义表顶层元素的个数。通常使用递归或迭代遍历顶层链表。",
                "时间复杂度": "O(L)，L为广义表顶层长度。",
                "空间复杂度": "O(1)（迭代）或 O(L)（递归）",
                "设计思想": "遍历顶层链表",
                "适用场景": "获取广义表顶层元素数量",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG021",
            "name": "求广义表深度",
            "attributes": {
                "难度": "中等",
                "内容": "计算广义表中括号嵌套的最大层数。通常使用递归实现，深度等于所有子表深度的最大值加1，空表或原子表深度为1。",
                "时间复杂度": "O(N)，N为广义表中结点总数。",
                "空间复杂度": "O(m)，m为广义表深度（递归栈深度）。",
                "设计思想": "递归遍历",
                "适用场景": "分析广义表的嵌套层级",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG022",
            "name": "创建广义表",
            "attributes": {
                "难度": "中等",
                "内容": "根据特定输入格式（如带括号和逗号的字符串）构建广义表的链接存储结构。通常使用递归实现。",
                "时间复杂度": "O(N)，N为输入字符串长度或结点数。",
                "空间复杂度": "O(N)，N为结点数（递归栈深度和存储结构）。",
                "设计思想": "递归解析与构建",
                "适用场景": "从外部表示生成广义表",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG023",
            "name": "打印广义表",
            "attributes": {
                "难度": "中等",
                "内容": "将广义表的链接存储结构转换回其字符串表示形式（带括号和逗号）。通常使用递归实现。",
                "时间复杂度": "O(N)，N为广义表中结点总数。",
                "空间复杂度": "O(m)，m为广义表深度（递归栈深度）。",
                "设计思想": "递归遍历与格式化输出",
                "适用场景": "显示广义表内容",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "03CON001",
            "name": "矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "一个m行n列的数表，包含m*n个元素，每个元素由其行号和列号唯一确定。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "03CON002",
            "name": "方阵",
            "attributes": {
                "难度": "入门",
                "内容": "行数和列数相等的矩阵（m=n），也称为n阶矩阵。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "03CON003",
            "name": "三元组",
            "attributes": {
                "难度": "入门",
                "内容": "由三个相关元素组成的有序序列，在稀疏矩阵中通常指(行号, 列号, 非零元素值)。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "03CON004",
            "name": "抽象数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "定义了数据的逻辑结构和在该结构上的一组操作，与具体实现分离。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "03CON005",
            "name": "线性表",
            "attributes": {
                "难度": "入门",
                "内容": "n(n>=0)个数据元素的有限序列，元素之间存在一对一的线性关系。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS001",
            "name": "栈",
            "attributes": {
                "难度": "入门",
                "内容": "栈（stack）又称堆栈，它是一种运算受限的线性表，其限制是仅允许在表的一端进行插入和删除运算。对栈进行运算的一端称为栈顶，另一端称为栈底。",
                "存储开销": "O(n)",
                "核心特性": "后进先出（LIFO）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS002",
            "name": "队列",
            "attributes": {
                "难度": "入门",
                "内容": "队列（queue）简称队，它也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。进行插入的一端称作队尾（rear），进行删除的一端称作队首（front）。",
                "存储开销": "O(n)",
                "核心特性": "先进先出（FIFO）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS003",
            "name": "线性表",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素之间存在一对一逻辑关系的数据结构。栈和队列都属于线性表。",
                "存储开销": "O(n)",
                "核心特性": "线性结构",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS004",
            "name": "顺序栈",
            "attributes": {
                "难度": "入门",
                "内容": "栈的一种实现方式，采用顺序存储结构（数组）实现。利用数组存储栈中所有元素，利用整型变量存储栈顶元素的下标位置。",
                "存储开销": "O(n)",
                "核心特性": "基于数组，栈顶操作O(1)，可能需要动态扩容",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS005",
            "name": "链栈",
            "attributes": {
                "难度": "入门",
                "内容": "栈的一种实现方式，采用链接存储结构（单链表）实现。表头指针被称为栈顶指针，指向栈顶结点。",
                "存储开销": "O(n)",
                "核心特性": "基于单链表，栈顶操作O(1)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS006",
            "name": "顺序队列",
            "attributes": {
                "难度": "入门",
                "内容": "队列的一种实现方式，采用顺序存储结构（数组）实现。利用数组存储队列元素，利用整型变量存储队首和队尾位置。通常实现为循环队列。",
                "存储开销": "O(n)",
                "核心特性": "基于数组，队首队尾操作O(1)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS007",
            "name": "循环队列",
            "attributes": {
                "难度": "中等",
                "内容": "顺序存储的队列的一种变体，利用取模运算使存储空间首尾相接，循环利用。需要队首指针和队尾指针。",
                "存储开销": "O(n)",
                "核心特性": "基于数组，循环利用空间，队首队尾操作O(1)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS008",
            "name": "链队",
            "attributes": {
                "难度": "入门",
                "内容": "队列的一种实现方式，采用链接存储结构（单链表）实现。需要队首指针和队尾指针，分别指向链表的表头和表尾。",
                "存储开销": "O(n)",
                "核心特性": "基于单链表，队首队尾操作O(1)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS009",
            "name": "优先级队列",
            "attributes": {
                "难度": "中等",
                "内容": "一种特殊的队列，每个元素带优先级号。优先级最高的元素必须处在队首位置。插入和删除需调整元素位置。",
                "存储开销": "O(n)",
                "核心特性": "按优先级出队",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS010",
            "name": "堆",
            "attributes": {
                "难度": "中等",
                "内容": "一种数据结构，常用于实现优先级队列。将在第6章介绍。",
                "存储开销": "O(n)",
                "核心特性": "堆属性（父节点与子节点的大小关系）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS011",
            "name": "数组",
            "attributes": {
                "难度": "入门",
                "内容": "一种顺序存储结构，用于存储一组相同类型的元素。",
                "存储开销": "O(n)",
                "核心特性": "连续存储，通过索引随机访问O(1)",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS012",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种链接存储结构，由一系列结点组成，每个结点包含数据和指向下一个结点的指针。",
                "存储开销": "O(n)",
                "核心特性": "动态大小，插入删除O(1)（已知位置）",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG001",
            "name": "进栈",
            "attributes": {
                "难度": "入门",
                "内容": "向栈顶插入新元素的操作。",
                "时间复杂度": "O(1)（顺序栈动态扩容时为O(n)）",
                "空间复杂度": "O(1)",
                "设计思想": "尾部/头部插入",
                "适用场景": "向栈中添加元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG002",
            "name": "出栈",
            "attributes": {
                "难度": "入门",
                "内容": "从栈顶删除元素并返回的操作。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "尾部/头部删除",
                "适用场景": "从栈中移除元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG003",
            "name": "读取栈顶",
            "attributes": {
                "难度": "入门",
                "内容": "返回栈顶元素的值，但不改变栈的状态的操作。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "只读访问",
                "适用场景": "查看栈顶元素而不删除",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG004",
            "name": "检查栈空",
            "attributes": {
                "难度": "入门",
                "内容": "判断栈是否为空的操作。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "检查特定状态",
                "适用场景": "避免对空栈进行操作",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG005",
            "name": "清除栈",
            "attributes": {
                "难度": "入门",
                "内容": "清除栈中所有元素，使之成为空栈的操作。",
                "时间复杂度": "O(n)（释放动态空间）",
                "空间复杂度": "O(1)",
                "设计思想": "释放所有元素",
                "适用场景": "重置栈",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG006",
            "name": "进队",
            "attributes": {
                "难度": "入门",
                "内容": "将新元素插入队尾的操作。",
                "时间复杂度": "O(1)（顺序队列动态扩容时为O(n)）",
                "空间复杂度": "O(1)",
                "设计思想": "尾部插入",
                "适用场景": "向队列中添加元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG007",
            "name": "出队",
            "attributes": {
                "难度": "入门",
                "内容": "从队首删除元素并返回的操作。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "头部删除",
                "适用场景": "从队列中移除元素",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG008",
            "name": "读取队首",
            "attributes": {
                "难度": "入门",
                "内容": "返回队首元素的值，但不改变队列状态的操作。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "只读访问",
                "适用场景": "查看队首元素而不删除",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG009",
            "name": "检查队空",
            "attributes": {
                "难度": "入门",
                "内容": "判断队列是否为空的操作。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "检查特定状态",
                "适用场景": "避免对空队列进行操作",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG010",
            "name": "清除队列",
            "attributes": {
                "难度": "入门",
                "内容": "清除队列中所有元素，使之变为空队的操作。",
                "时间复杂度": "O(n)（释放动态空间）",
                "空间复杂度": "O(1)",
                "设计思想": "释放所有元素",
                "适用场景": "重置队列",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG011",
            "name": "后缀表达式求值算法",
            "attributes": {
                "难度": "中等",
                "内容": "计算后缀表达式的值。扫描表达式，遇操作数入栈，遇运算符弹出栈顶两个操作数计算，结果入栈。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)",
                "设计思想": "基于栈，一次扫描",
                "适用场景": "计算机内部计算表达式",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG012",
            "name": "中缀转后缀算法",
            "attributes": {
                "难度": "中等",
                "内容": "将中缀表达式转换为后缀表达式。使用运算符栈，根据运算符优先级处理。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)",
                "设计思想": "基于栈，处理优先级和括号",
                "适用场景": "计算机处理表达式前转换",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG013",
            "name": "递归算法",
            "attributes": {
                "难度": "中等",
                "内容": "通过求解与原问题具有同样解法的子问题而得到的算法。包含递归调用和终止条件。",
                "时间复杂度": "O(根据问题而定)",
                "空间复杂度": "O(递归深度)（由系统栈决定）",
                "设计思想": "分解为相似子问题，依赖系统栈",
                "适用场景": "问题结构天然递归，简化代码",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG014",
            "name": "阶乘算法（递归）",
            "attributes": {
                "难度": "入门",
                "内容": "采用递归算法求解正整数n的阶乘(n!)。n! = n * (n-1)!, 0! = 1。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)",
                "设计思想": "递归",
                "适用场景": "演示递归基本概念",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG015",
            "name": "布尔组合算法（递归）",
            "attributes": {
                "难度": "中等",
                "内容": "输出n个布尔量的所有可能的组合（2^n种）。通过递归填充每个位置0或1来实现。",
                "时间复杂度": "O(n * 2^n)",
                "空间复杂度": "O(n)",
                "设计思想": "递归，枚举",
                "适用场景": "枚举所有可能的布尔值组合",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG016",
            "name": "全排列算法（递归）",
            "attributes": {
                "难度": "中等",
                "内容": "输出自然数1~n这n个元素的全排列（n!种）。通过递归和交换元素实现。",
                "时间复杂度": "O(n!)",
                "空间复杂度": "O(n)",
                "设计思想": "递归，回溯，交换",
                "适用场景": "生成序列所有排列",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG017",
            "name": "迷宫求解算法（递归）",
            "attributes": {
                "难度": "中等",
                "内容": "从迷宫入口寻找一条通向出口的路径。递归尝试不同方向，标记访问过的位置，遇死路回溯。",
                "时间复杂度": "O(m*n)（最差），O(m+n)（最好）",
                "空间复杂度": "O(m*n)（最差），O(m+n)（最好）",
                "设计思想": "递归，回溯，深度优先搜索",
                "适用场景": "路径寻找问题",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG018",
            "name": "汉诺塔求解算法（递归）",
            "attributes": {
                "难度": "中等",
                "内容": "求解汉诺塔问题，将n个圆盘从一个柱子移动到另一个，遵循规则。递归将问题分解为移动n-1个盘子。",
                "时间复杂度": "O(2^n)",
                "空间复杂度": "O(n)",
                "设计思想": "递归，分治",
                "适用场景": "演示递归和指数级增长",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON001",
            "name": "栈顶",
            "attributes": {
                "难度": "入门",
                "内容": "栈中允许进行插入和删除运算的一端。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON002",
            "name": "栈底",
            "attributes": {
                "难度": "入门",
                "内容": "栈中不允许进行插入和删除运算的另一端。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON003",
            "name": "后进先出表（LIFO）",
            "attributes": {
                "难度": "入门",
                "内容": "描述栈行为的原则，即最后插入的元素最先被删除。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON004",
            "name": "队尾",
            "attributes": {
                "难度": "入门",
                "内容": "队列中允许进行插入运算的一端。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON005",
            "name": "队首",
            "attributes": {
                "难度": "入门",
                "内容": "队列中允许进行删除运算的一端。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON006",
            "name": "先进先出表（FIFO）",
            "attributes": {
                "难度": "入门",
                "内容": "描述队列行为的原则，即最先插入的元素最先被删除。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON007",
            "name": "抽象数据类型（ADT）",
            "attributes": {
                "难度": "入门",
                "内容": "数据结构的定义，包括数据元素的逻辑关系和对数据的操作集合，不考虑存储方式。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON008",
            "name": "顺序存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "将数据元素存储在地址连续的存储单元中，如数组。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON009",
            "name": "链接存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素存储在任意的存储单元中，通过指针域表示元素间的逻辑关系，如链表。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON010",
            "name": "栈顶指针",
            "attributes": {
                "难度": "入门",
                "内容": "在顺序栈中，指示栈顶元素位置的变量；在链栈中，指向栈顶结点的指针。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON011",
            "name": "队首指针",
            "attributes": {
                "难度": "入门",
                "内容": "在顺序队列/循环队列中，指示队首位置的变量；在链队中，指向队首结点的指针。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON012",
            "name": "队尾指针",
            "attributes": {
                "难度": "入门",
                "内容": "在顺序队列/循环队列中，指示队尾位置的变量；在链队中，指向队尾结点的指针。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON013",
            "name": "算术表达式",
            "attributes": {
                "难度": "入门",
                "内容": "由操作数、运算符和圆括号连接而成的式子。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON014",
            "name": "中缀表示法",
            "attributes": {
                "难度": "入门",
                "内容": "算术表达式的一种书写习惯表示，双目运算符出现在两个操作数中间。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON015",
            "name": "后缀表示法",
            "attributes": {
                "难度": "入门",
                "内容": "算术表达式的一种表示，又称逆波兰式，把运算符放在两个运算对象的后面。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON016",
            "name": "逆波兰式（RPN）",
            "attributes": {
                "难度": "入门",
                "内容": "算术表达式的后缀表示法。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON017",
            "name": "操作数",
            "attributes": {
                "难度": "入门",
                "内容": "算术表达式中参与运算的数据，可以是常量、变量或函数。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON018",
            "name": "运算符",
            "attributes": {
                "难度": "入门",
                "内容": "算术表达式中表示运算方式的符号，包括单目运算符和双目运算符。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON019",
            "name": "优先级",
            "attributes": {
                "难度": "入门",
                "内容": "算术表达式中不同运算符的运算先后次序规则。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON020",
            "name": "递归",
            "attributes": {
                "难度": "中等",
                "内容": "一种非常重要的数学概念和解决问题的方法，当求解一个问题时，是通过求解与它具有同样解法的子问题而得到的。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON021",
            "name": "递归终止条件",
            "attributes": {
                "难度": "入门",
                "内容": "一个递归的求解问题必然包含有终止递归的条件，当满足一定条件时就终止向下递归。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON022",
            "name": "系统栈",
            "attributes": {
                "难度": "中等",
                "content": "计算机系统在执行函数调用（包括递归调用）时自动使用的工作栈，用于保存参数、局部变量和返回地址。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS001",
            "name": "树",
            "attributes": {
                "难度": "入门",
                "内容": "一种重要的非线性数据结构，是树形结构的简称。递归定义：或者为空树，或者由一个根结点和m(m>=0)棵互不相交的子树组成，每棵子树也是一棵树。用于表示具有层次关系的数据。",
                "存储开销": "依赖于存储方式（顺序或链接）及树的形态。",
                "核心特性": "递归定义、层次结构、结点间存在一对多关系。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON001",
            "name": "根",
            "attributes": {
                "难度": "入门",
                "内容": "树中唯一没有前驱的结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON002",
            "name": "子树",
            "attributes": {
                "难度": "入门",
                "内容": "非空树中，除根结点外，其余结点按关系划分成的互不相交的集合，每个集合本身也是一棵树，称为根的子树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON003",
            "name": "度",
            "attributes": {
                "难度": "入门",
                "内容": "结点拥有的子树数目（或后继结点数）称为该结点的度。树中所有结点度的最大值称为树的度。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON004",
            "name": "叶子结点",
            "attributes": {
                "难度": "入门",
                "内容": "度为0的结点，也称终端结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON005",
            "name": "分支结点",
            "attributes": {
                "难度": "入门",
                "内容": "度大于0的结点，也称非终端结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON006",
            "name": "孩子结点",
            "attributes": {
                "难度": "入门",
                "内容": "一个结点的子树的根结点，称为该结点的孩子（或儿子、子女）。即结点的直接后继。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON007",
            "name": "双亲结点",
            "attributes": {
                "难度": "入门",
                "内容": "孩子结点的直接前驱结点，称为孩子结点的双亲（或父亲、父母）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON008",
            "name": "兄弟结点",
            "attributes": {
                "难度": "入门",
                "内容": "具有相同双亲结点的孩子结点互称为兄弟。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON009",
            "name": "祖先",
            "attributes": {
                "难度": "入门",
                "内容": "从根结点到某结点路径上经过的所有结点（不含该结点自身）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON010",
            "name": "子孙",
            "attributes": {
                "难度": "入门",
                "内容": "一个结点的所有子树中的所有结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON011",
            "name": "层数",
            "attributes": {
                "难度": "入门",
                "内容": "结点的层数从根开始定义，根为第1层，其孩子为第2层，以此类推。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON012",
            "name": "深度",
            "attributes": {
                "难度": "入门",
                "内容": "树中所有结点的最大层数，也称高度。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS002",
            "name": "有序树",
            "attributes": {
                "难度": "入门",
                "内容": "树中各结点的子树按一定次序从左到右排列的树，子树的次序不能互换。",
                "存储开销": "同一般树，取决于存储方式和形态。",
                "核心特性": "子树有序。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS003",
            "name": "无序树",
            "attributes": {
                "难度": "入门",
                "内容": "树中各结点的子树没有固定次序，可以任意交换位置。",
                "存储开销": "同一般树，取决于存储方式和形态。",
                "核心特性": "子树无序。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS004",
            "name": "森林",
            "attributes": {
                "难度": "入门",
                "内容": "m(m>=0)棵互不相交的树的集合。",
                "存储开销": "等于各棵树存储开销之和。",
                "核心特性": "由多棵树组成。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS005",
            "name": "二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "度为2的有序树。递归定义：或者为空树，或者由一个根结点和两棵互不相交的、分别称为左子树和右子树的二叉树组成。应用广泛。",
                "存储开销": "顺序存储对完全二叉树效率高，链接存储（二叉链表）更通用。",
                "核心特性": "度最大为2、有序（区分左右子树）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON013",
            "name": "左子树",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树根结点的左边分支所构成的二叉树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON014",
            "name": "右子树",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树根结点的右边分支所构成的二叉树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON015",
            "name": "左孩子",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树中某结点的左子树的根结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON016",
            "name": "右孩子",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树中某结点的右子树的根结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS006",
            "name": "满二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "深度为h且含有2^h - 1个结点的二叉树。即每一层都达到最大结点数。",
                "存储开销": "适合顺序存储，空间利用率高。",
                "核心特性": "结构规整，除叶子结点外，每个结点的度都为2。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS007",
            "name": "完全二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "深度为h的二叉树，除第h层外，其它各层(1～h-1)的结点数都达到最大个数，第h层的所有结点都连续集中在最左边。",
                "存储开销": "适合顺序存储，空间利用率较高。",
                "核心特性": "结点编号与其在满二叉树中的位置对应，结构接近满二叉树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS008",
            "name": "理想平衡二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "除最后一层外，其余各层结点数都是满的二叉树。最后一层结点可以任意分布。",
                "存储开销": "依赖具体形态，介于完全二叉树和一般二叉树之间。",
                "核心特性": "结构相对平衡，深度接近log2(n)。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON017",
            "name": "顺序存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "用一组地址连续的存储单元依次存储数据元素的存储结构。对于树（特别是二叉树），通常按层序编号，将结点值存入数组对应下标位置。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON018",
            "name": "链接存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "用结点（包含数据域和指针域）的链接来表示数据元素逻辑关系的存储结构。对于树，结点通常包含指向孩子或兄弟的指针。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS009",
            "name": "二叉链表",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树的一种链式存储结构，每个结点包含数据域、指向左孩子的指针域和指向右孩子的指针域。",
                "存储开销": "每个结点需要额外存储两个指针。",
                "核心特性": "灵活表示二叉树结构，插入删除相对方便（但需维护结构）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS010",
            "name": "带双亲指针的二叉链表",
            "attributes": {
                "难度": "入门",
                "内容": "在二叉链表的基础上，每个结点增加一个指向其双亲结点的指针域。",
                "存储开销": "每个结点需要额外存储三个指针。",
                "核心特性": "方便查找双亲结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG001",
            "name": "初始化二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "将二叉树置为空树，通常是将根指针设为NULL。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "赋值",
                "适用场景": "创建或清空二叉树前。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG002",
            "name": "创建二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "根据给定的输入（如广义表字符串）建立二叉树的内存表示（如二叉链表）。",
                "时间复杂度": "O(n) (n为输入规模或结点数)",
                "空间复杂度": "O(h) (h为树高，取决于实现方式，如使用栈辅助)",
                "设计思想": "递归或迭代（栈辅助）",
                "适用场景": "从外部表示构建二叉树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG003",
            "name": "判空二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "判断二叉树是否为空，通常检查根指针是否为NULL。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "比较",
                "适用场景": "在操作二叉树前进行检查。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG004",
            "name": "遍历二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "按照特定次序访问二叉树中的所有结点，且每个结点仅被访问一次。常见有前序、中序、后序、层序遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)或O(n)（取决于遍历方式和实现）",
                "设计思想": "递归、迭代（栈或队列辅助）",
                "适用场景": "处理树中所有结点，如打印、查找、复制等。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG005",
            "name": "查找二叉树结点",
            "attributes": {
                "难度": "入门",
                "内容": "在二叉树中查找具有特定值的结点。",
                "时间复杂度": "O(n)（最坏情况，对普通二叉树）",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（类似遍历）",
                "适用场景": "定位树中特定数据。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG006",
            "name": "求二叉树深度",
            "attributes": {
                "难度": "入门",
                "内容": "计算二叉树的最大层数。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（深度=max(左子树深度, 右子树深度) + 1）",
                "适用场景": "分析树的规模和平衡性。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG007",
            "name": "输出二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "将二叉树以某种形式（如广义表）打印输出。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（类似前序遍历）",
                "适用场景": "可视化或调试二叉树结构。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG008",
            "name": "清除二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "释放二叉树所有结点占用的内存空间，使其变为空树。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（类似后序遍历）",
                "适用场景": "回收不再使用的二叉树内存。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG009",
            "name": "前序遍历",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树遍历方式之一：先访问根结点，再前序遍历左子树，最后前序遍历右子树 (DLR)。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归栈深度)",
                "设计思想": "递归、分治",
                "适用场景": "复制树、构建表达式树的前缀表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG010",
            "name": "中序遍历",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树遍历方式之一：先中序遍历左子树，再访问根结点，最后中序遍历右子树 (LDR)。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归栈深度)",
                "设计思想": "递归、分治",
                "适用场景": "对二叉搜索树可得到有序序列。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG011",
            "name": "后序遍历",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树遍历方式之一：先后序遍历左子树，再后序遍历右子树，最后访问根结点 (LRD)。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归栈深度)",
                "设计思想": "递归、分治",
                "适用场景": "计算表达式树、释放树结点空间。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG012",
            "name": "按层遍历",
            "attributes": {
                "难度": "入门",
                "内容": "树（包括二叉树和多叉树）的遍历方式：从上到下、同一层从左到右依次访问结点。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(W) (W为树的最大宽度)",
                "设计思想": "迭代（使用队列）",
                "适用场景": "查找最短路径（如在图中）、广度优先搜索。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS011",
            "name": "k叉树",
            "attributes": {
                "难度": "入门",
                "内容": "度为k的树，也称多叉树或多元树。每个结点最多有k个孩子。",
                "存储开销": "顺序存储对满k叉树或完全k叉树较优，链接存储（多重链表或孩子兄弟表示法）更通用。",
                "核心特性": "度最大为k。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG013",
            "name": "初始化树",
            "attributes": {
                "难度": "入门",
                "内容": "将k叉树置为空树。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "赋值",
                "适用场景": "创建或清空树前。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG014",
            "name": "创建树",
            "attributes": {
                "难度": "中等",
                "内容": "根据给定的输入（如广义表字符串）建立k叉树的内存表示（如标准链接方式）。",
                "时间复杂度": "O(n) (n为输入规模或结点数)",
                "空间复杂度": "O(h) (h为树高，取决于实现方式，如使用栈辅助)",
                "设计思想": "递归或迭代（栈辅助）",
                "适用场景": "从外部表示构建k叉树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG015",
            "name": "遍历树",
            "attributes": {
                "难度": "入门",
                "内容": "按照特定次序访问k叉树中的所有结点，且每个结点仅被访问一次。常见有先根、后根、层序遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)或O(n)（取决于遍历方式和实现）",
                "设计思想": "递归、迭代（栈或队列辅助）",
                "适用场景": "处理树中所有结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG016",
            "name": "查找树结点",
            "attributes": {
                "难度": "入门",
                "内容": "在k叉树中查找具有特定值的结点。",
                "时间复杂度": "O(n)（最坏情况）",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（类似遍历）",
                "适用场景": "定位树中特定数据。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG017",
            "name": "输出树",
            "attributes": {
                "难度": "入门",
                "内容": "将k叉树以某种形式（如广义表）打印输出。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（类似先根遍历）",
                "适用场景": "可视化或调试k叉树结构。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG018",
            "name": "判空树",
            "attributes": {
                "难度": "入门",
                "内容": "判断k叉树是否为空。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)",
                "设计思想": "比较",
                "适用场景": "在操作树前进行检查。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG019",
            "name": "清除树",
            "attributes": {
                "难度": "入门",
                "内容": "释放k叉树所有结点占用的内存空间，使其变为空树。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)（递归实现）",
                "设计思想": "递归（类似后根遍历）",
                "适用场景": "回收不再使用的树内存。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON019",
            "name": "标准方式",
            "attributes": {
                "难度": "入门",
                "内容": "树的一种链接存储方式，每个结点包含数据域和k个指针域，分别指向k个孩子结点（k为树的度）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON020",
            "name": "广义标准方式",
            "attributes": {
                "难度": "入门",
                "内容": "树的一种链接存储方式，在标准方式基础上，每个结点增加一个指向双亲结点的指针域。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON021",
            "name": "二叉树方式",
            "attributes": {
                "难度": "中等",
                "内容": "将普通树转换为对应的二叉树（左孩子-右兄弟表示法），然后使用二叉链表存储。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG020",
            "name": "先根遍历",
            "attributes": {
                "难度": "入门",
                "内容": "k叉树遍历方式之一：先访问根结点，然后从左到右依次先根遍历每棵子树。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归栈深度)",
                "设计思想": "递归、分治",
                "适用场景": "树的复制、深度优先搜索。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG021",
            "name": "后根遍历",
            "attributes": {
                "难度": "入门",
                "内容": "k叉树遍历方式之一：从左到右依次后根遍历根结点的每棵子树，然后再访问根结点。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归栈深度)",
                "设计思想": "递归、分治",
                "适用场景": "计算树的某些属性（如高度）、释放树结点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG022",
            "name": "深度优先遍历",
            "attributes": {
                "难度": "入门",
                "内容": "树或图的一种遍历策略，尽可能深地搜索树的分支。先根遍历和后根遍历是其具体实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)",
                "设计思想": "递归、栈",
                "适用场景": "拓扑排序、查找路径。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG023",
            "name": "广度优先遍历",
            "attributes": {
                "难度": "入门",
                "内容": "树或图的一种遍历策略，从根（或源点）开始，探索邻近结点，然后再移动到下一层邻结点。按层遍历是其具体实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(W) (W为最大宽度)",
                "设计思想": "迭代、队列",
                "适用场景": "查找最短路径、按层处理。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS012",
            "name": "队列",
            "attributes": {
                "难度": "入门",
                "内容": "一种先进先出（FIFO）的线性数据结构。允许在表的一端进行插入（入队），在另一端进行删除（出队）。",
                "存储开销": "顺序存储需要预分配空间，链式存储需要指针开销。",
                "核心特性": "先进先出。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS013",
            "name": "栈",
            "attributes": {
                "难度": "入门",
                "内容": "一种后进先出（LIFO）的线性数据结构。只允许在表的一端（栈顶）进行插入（入栈）和删除（出栈）。",
                "存储开销": "顺序存储需要预分配空间，链式存储需要指针开销。",
                "核心特性": "后进先出。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS001",
            "name": "特殊二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "包括二叉搜索树、堆、哈夫曼树、线索二叉树和平衡二叉树等特定类型的二叉树，它们具有特殊的结构或性质以适应不同的应用场景。本章讨论其定义、结构和运算特点。",
                "存储开销": "依赖具体类型及实现，通常为O(n)",
                "核心特性": "基于二叉树结构，带有额外约束或优化，如有序性、堆序性、最优路径长度、线索化、平衡性等。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS002",
            "name": "二叉搜索树",
            "attributes": {
                "难度": "中等",
                "内容": "又称二叉排序树。空树或非空二叉树，特性：若左子树非空，则左子树所有结点关键字小于根；若右子树非空，则右子树所有结点关键字大于(或等于)根；左右子树本身也是二叉搜索树。中序遍历得到有序序列。支持查找、更新、插入、删除操作。",
                "存储开销": "O(n) - 链式存储",
                "核心特性": "有序性（中序遍历），支持高效查找、插入、删除（平均 O(log n)，最坏 O(n)）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS003",
            "name": "堆",
            "attributes": {
                "难度": "中等",
                "内容": "分为小根堆和大根堆。一种完全二叉树。小根堆：根结点值小于等于左右孩子结点值，左右子树也是堆。大根堆：根结点值大于等于左右孩子结点值。堆顶元素是最小（小根堆）或最大（大根堆）值。常用于实现优先级队列。",
                "存储开销": "O(n) - 通常顺序存储",
                "核心特性": "堆序性（父节点与子节点关系），完全二叉树结构，高效插入/删除极值（O(log n)）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS004",
            "name": "哈夫曼树",
            "attributes": {
                "难度": "中等",
                "内容": "又称最优二叉树。n个带权叶子结点构成的所有二叉树中带权路径长度(WPL)最小的二叉树。用于哈夫曼编码。构造过程涉及合并权值最小的树。",
                "存储开销": "O(n) - 链式存储",
                "核心特性": "最优性（WPL最小），无前缀编码特性，用于数据压缩。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS005",
            "name": "线索二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "对二叉树进行线索化，利用结点的空指针域存放该结点在某种遍历次序下的前驱或后继结点的指针（线索）。需要增加标志域区分指针和线索。便于非递归遍历。",
                "存储开销": "O(n) - 链式存储，增加标志域开销",
                "核心特性": "利用空闲指针，支持快速查找前驱/后继，便于非递归遍历。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS006",
            "name": "平衡二叉树",
            "attributes": {
                "难度": "高级",
                "内容": "又称AVL树。一种自平衡的二叉搜索树，通过旋转操作（LL, RR, LR, RL）保持任何结点的左右子树高度差不超过1（平衡因子为-1, 0, 1）。保证了查找、插入、删除操作的 O(log n) 最坏时间复杂度。",
                "存储开销": "O(n) - 链式存储，需额外存储平衡因子",
                "核心特性": "自平衡，保持有序性，保证对数时间复杂度。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS007",
            "name": "二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "每个结点最多有两个子树（左子树和右子树）的树结构。是各种特殊二叉树的基础。",
                "存储开销": "O(n) - 链式或顺序存储",
                "核心特性": "递归定义，层次结构，每个结点最多两个子节点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS008",
            "name": "完全二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "一种二叉树，除最后一层外，其余层都是满的，且最后一层的结点都连续集中在最左边。适合用顺序存储结构表示。堆是基于完全二叉树定义的。",
                "存储开销": "O(n) - 尤其适合顺序存储",
                "核心特性": "结构规整，结点编号与数组下标有固定关系。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG001",
            "name": "中序遍历",
            "attributes": {
                "难度": "入门",
                "内容": "遍历二叉树的一种方式，顺序为：遍历左子树 -> 访问根结点 -> 遍历右子树。对二叉搜索树进行中序遍历可得到有序序列。线索二叉树利用线索优化中序遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归) 或 O(1) (线索化/迭代)",
                "设计思想": "递归，栈",
                "适用场景": "获取有序序列（BST），树的基础操作。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG002",
            "name": "二叉搜索树查找",
            "attributes": {
                "难度": "入门",
                "内容": "在二叉搜索树中查找特定值的元素。利用BST特性：若目标值小于根，则在左子树查找；若大于根，则在右子树查找。有递归和非递归实现。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "递归 O(log n) / O(n), 非递归 O(1)",
                "设计思想": "比较，分治，递归/迭代",
                "适用场景": "在BST中定位元素。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG003",
            "name": "二叉搜索树更新",
            "attributes": {
                "难度": "入门",
                "内容": "在二叉搜索树中查找特定值的元素，并用新值更新该元素（通常指非关键字的数据域）。算法与查找类似，找到后执行更新操作。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "递归 O(log n) / O(n), 非递归 O(1)",
                "设计思想": "查找定位，修改",
                "适用场景": "修改BST中结点的数据。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG004",
            "name": "二叉搜索树插入",
            "attributes": {
                "难度": "入门",
                "内容": "向二叉搜索树中插入一个新元素，同时保持BST的性质。查找合适的插入位置（必然是叶子结点位置），然后插入新结点。有递归和非递归实现。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "递归 O(log n) / O(n), 非递归 O(1)",
                "设计思想": "查找定位，链接新结点",
                "适用场景": "向BST添加新元素。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG005",
            "name": "二叉搜索树删除",
            "attributes": {
                "难度": "中等",
                "内容": "从二叉搜索树中删除指定值的结点，并保持BST性质。分情况处理：删除叶子结点、删除单分支结点、删除双分支结点（通常用中序前驱或后继替换，然后递归删除替换结点）。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "递归 O(log n) / O(n), 非递归 O(1)",
                "设计思想": "查找定位，分类讨论，结点替换/链接调整",
                "适用场景": "从BST移除元素。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG006",
            "name": "堆插入",
            "attributes": {
                "难度": "入门",
                "内容": "向堆中插入一个新元素，保持堆的性质（小根堆或大根堆）。将新元素添加到堆尾（数组末尾），然后向上调整（Sift-up），与父结点比较交换，直到满足堆性质或到达堆顶。",
                "时间复杂度": "O(log n)",
                "空间复杂度": "O(1)",
                "设计思想": "末尾添加，向上调整（Sift-up）",
                "适用场景": "向堆添加元素，优先级队列入队。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG007",
            "name": "堆删除",
            "attributes": {
                "难度": "入门",
                "内容": "从堆中删除堆顶元素（最小值或最大值），保持堆的性质。用堆尾元素替换堆顶，然后向下调整（Sift-down），与较小/较大的子结点比较交换，直到满足堆性质或到达叶子结点。",
                "时间复杂度": "O(log n)",
                "空间复杂度": "O(1)",
                "设计思想": "替换堆顶，向下调整（Sift-down）",
                "适用场景": "获取并移除堆中极值元素，优先级队列出队。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG008",
            "name": "哈夫曼树构造",
            "attributes": {
                "难度": "中等",
                "内容": "根据n个带权叶子结点构造哈夫曼树的算法。重复选择权值最小的两棵树合并为一棵新树，新树权值为两者之和，直到只剩一棵树。通常使用优先队列（基于堆）实现选择最小权值。",
                "时间复杂度": "O(n log n) (使用堆)",
                "空间复杂度": "O(n)",
                "设计思想": "贪心算法",
                "适用场景": "构建最优二叉树以用于哈夫曼编码等。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG009",
            "name": "哈夫曼编码",
            "attributes": {
                "难度": "中等",
                "内容": "一种利用哈夫曼树进行的可变长、无前缀编码方法。用于数据压缩，频率高的字符编码短，频率低的字符编码长。通过遍历哈夫曼树生成，左分支约定为0，右分支约定为1（反之亦可）。",
                "时间复杂度": "O(n) (遍历树生成编码)",
                "空间复杂度": "O(n) (存储编码)",
                "设计思想": "贪心（基于哈夫曼树构造），树遍历",
                "适用场景": "无损数据压缩。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG010",
            "name": "二叉树线索化",
            "attributes": {
                "难度": "中等",
                "内容": "对二叉树进行某种遍历（如中序），在遍历过程中修改结点的空指针域，使其指向该遍历序列中的前驱或后继结点。需要辅助标志位区分指针域是指向孩子还是线索。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h) (递归) 或 O(1) (迭代)",
                "设计思想": "树遍历，指针修改",
                "适用场景": "创建线索二叉树以优化后续的遍历操作。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG011",
            "name": "线索二叉树中序遍历",
            "attributes": {
                "难度": "中等",
                "内容": "利用线索二叉树中的线索（前驱和后继指针）进行非递归的中序遍历。首先找到最左结点，然后通过后继线索或右子树的最左结点依次访问所有结点。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)",
                "设计思想": "利用线索指针迭代",
                "适用场景": "高效非递归中序遍历线索二叉树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG012",
            "name": "平衡二叉树调整",
            "attributes": {
                "难度": "高级",
                "内容": "在平衡二叉树（AVL树）插入或删除结点导致失衡后，通过旋转操作（LL、RR、LR、RL型调整）恢复平衡。调整目标是使最小不平衡子树恢复平衡，进而使整棵树平衡。",
                "时间复杂度": "O(1) (单次旋转) 或 O(log n) (查找失衡点+旋转)",
                "空间复杂度": "O(1)",
                "设计思想": "旋转操作，维持平衡因子约束",
                "适用场景": "维护AVL树的平衡性质，保证操作效率。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON001",
            "name": "路径",
            "attributes": {
                "难度": "入门",
                "内容": "树中一个结点到另一个结点的结点序列 k_1, k_2, ..., k_j，使得 k_i 是 k_{i+1} 的双亲 (1 <= i < j)。树中任意两点之间的路径是唯一的。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON002",
            "name": "路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "路径上所经过的分支（边）数，等于路径上的结点数减1。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON003",
            "name": "结点的权",
            "attributes": {
                "难度": "入门",
                "内容": "赋给树中结点的具有某种特定意义的数值（通常为实数）。例如在哈夫曼树中代表字符出现的频率。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON004",
            "name": "结点的带权路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "从树根结点到该结点之间的路径长度与该结点上权的乘积。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON005",
            "name": "树的带权路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "树中所有叶子结点的带权路径长度之和，通常记为 WPL (Weighted Path Length)。WPL = Σ(w_i * l_i)，其中 w_i 是叶子结点的权，l_i 是根到该叶子的路径长度。哈夫曼树旨在最小化WPL。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON006",
            "name": "前驱线索",
            "attributes": {
                "难度": "中等",
                "内容": "在线索二叉树中，存放在结点空左指针域中，指向该结点在特定遍历次序（如中序）下的前驱结点的指针。也称左线索。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON007",
            "name": "后继线索",
            "attributes": {
                "难度": "中等",
                "内容": "在线索二叉树中，存放在结点空右指针域中，指向该结点在特定遍历次序（如中序）下的后继结点的指针。也称右线索。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON008",
            "name": "平衡因子",
            "attributes": {
                "难度": "中等",
                "内容": "定义为二叉树中结点的左子树高度减去右子树高度。在平衡二叉树（AVL树）中，平衡因子只能是 -1, 0, 或 1。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "06CON009",
            "name": "最小不平衡子树",
            "attributes": {
                "难度": "中等",
                "内容": "在因插入或删除导致失衡的AVL树中，以离插入/删除结点最近、且平衡因子绝对值大于1的结点为根的子树。是进行平衡调整的目标子树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS001",
            "name": "图",
            "attributes": {
                "难度": "中等",
                "内容": "定义：图由顶点集（V）和边集（E）组成，表示顶点之间的关系。特性：非线性数据结构，顶点可以有任意多个前驱和后继，比线性表和树更具广泛性。适用场景：社交网络分析、地图导航、网络路由、流程图等。",
                "存储开销": "取决于存储方式，如邻接矩阵O(n^2)，邻接表O(n+e)",
                "核心特性": "表示多对多的关系",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "图论在解决实际问题中的广泛应用体现了理论与实践的结合，如网络规划、物流优化等，服务社会发展需要。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON001",
            "name": "顶点",
            "attributes": {
                "难度": "入门",
                "内容": "图的基本组成部分，代表研究的对象或实体。在图的二元组定义G=(V,E)中，V是顶点集合。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "图中的顶点可以代表现实世界中的个体或节点，体现了抽象思维在建立模型以解决复杂问题中的重要作用。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON002",
            "name": "边",
            "attributes": {
                "难度": "入门",
                "内容": "连接图中两个顶点的线，代表顶点之间的关系。在图的二元组定义G=(V,E)中，E是边的集合，可以是序偶（有向边）或无序对（无向边）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "边代表事物或概念之间的联系，启发学生思考现实世界中普遍存在的相互关联性，培养系统思维。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS002",
            "name": "有向图",
            "attributes": {
                "难度": "中等",
                "内容": "边集E(G)中均为有向边（序偶）的图。边表示的关系具有方向性。",
                "存储开销": "邻接矩阵O(n^2)，邻接表O(n+e)",
                "核心特性": "边具有方向性",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "有向图能有效表示非对称关系，如流程、依赖关系、信息流向等，体现了事物发展或相互作用的方向性和顺序性。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS003",
            "name": "无向图",
            "attributes": {
                "难度": "中等",
                "内容": "边集E(G)中均为无向边（无序对）的图。边表示的关系是对称的。",
                "存储开销": "邻接矩阵O(n^2)，邻接表O(n+e)",
                "核心特性": "边无方向性",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "无向图能有效表示对称关系，如社交网络中的朋友关系、地理位置的连接关系，体现了平等互联的思想。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON003",
            "name": "端点",
            "attributes": {
                "难度": "入门",
                "内容": "一条边所连接的两个顶点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "理解基本术语是掌握复杂知识的基础，强调概念精确性的重要。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON004",
            "name": "邻接点",
            "attributes": {
                "难度": "入门",
                "内容": "若两个顶点之间存在一条边，则称它们互为邻接点。在有向图中区分出边邻接点和入边邻接点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "邻接关系是图结构的核心，理解邻接点有助于分析节点间的直接联系，是图遍历等算法的基础。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON005",
            "name": "出边",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，从顶点v_i出发指向顶点v_j的边<v_i, v_j>称为v_i的一条出边。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "区分出入关系有助于理解有向图中的流向和依赖，培养辨证看待事物联系的能力。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON006",
            "name": "入边",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，从顶点v_i指向顶点v_j的边<v_i, v_j>称为v_j的一条入边。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "区分出入关系有助于理解有向图中的流向和依赖，培养辨证看待事物联系的能力。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON007",
            "name": "起点",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，边<v_i, v_j>的起始顶点v_i。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "明确起点和终点是理解有向关系的基础，有助于分析因果或流程。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON008",
            "name": "终点",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，边<v_i, v_j>的终止顶点v_j。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "明确起点和终点是理解有向关系的基础，有助于分析因果或流程。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON009",
            "name": "度",
            "attributes": {
                "难度": "入门",
                "内容": "无向图中与顶点v相关联的边的数目，记为D(v)。有向图中顶点的度等于其入度与出度之和。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "顶点的度反映了节点在网络中的连接程度或活跃度，是网络分析中的重要指标。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON010",
            "name": "入度",
            "attributes": {
                "难度": "入门",
                "内容": "有向图中以顶点v为终点的边的数目（入边的数目），记为ID(v)。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "入度反映了节点受其他节点影响或指向该节点的程度，在分析依赖关系、受欢迎度等方面有应用。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON011",
            "name": "出度",
            "attributes": {
                "难度": "入门",
                "内容": "有向图中以顶点v为起点的边的数目（出边的数目），记为OD(v)。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "出度反映了节点影响其他节点或从该节点出发的程度，在分析影响力、资源分配等方面有应用。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS004",
            "name": "完全图",
            "attributes": {
                "难度": "入门",
                "内容": "无向图中任意两个顶点间都存在边；有向图中任意两个顶点间都存在方向相反的两条边。n个顶点的无向完全图有n(n-1)/2条边，有向完全图有n(n-1)条边。",
                "存储开销": "O(n^2)",
                "核心特性": "顶点间全连接",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "完全图代表了最紧密的连接状态，是一种理想化的模型，有助于理解网络连接的上限和密度概念。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON012",
            "name": "稠密图",
            "attributes": {
                "难度": "入门",
                "内容": "边数接近完全图边数的图，通常指边数e与n(n-1)接近（或e的数量级为O(n^2)）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "稠密与稀疏是相对概念，启发学生理解不同问题背景下数据关联度的差异，并选择合适的处理方法。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON013",
            "name": "稀疏图",
            "attributes": {
                "难度": "入门",
                "内容": "边数远少于完全图边数的图，通常指边数e远小于n(n-1)（或e的数量级为O(n)）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "稠密与稀疏是相对概念，启发学生理解不同问题背景下数据关联度的差异，并选择合适的处理方法，体现具体问题具体分析的思想。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON014",
            "name": "子图",
            "attributes": {
                "难度": "入门",
                "内容": "设有两个图G=(V,E)和G'=(V',E')，若V'⊆V且E'⊆E，并且E'中的边所关联的顶点均在V'中，则称G'是G的子图。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "子图概念体现了整体与部分的关系，是分析复杂系统结构、进行问题分解的基础。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON015",
            "name": "路径",
            "attributes": {
                "难度": "入门",
                "内容": "图中从一个顶点到另一个顶点经过的顶点序列。路径长度是路径上边的数目。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "路径是探索图结构、解决寻路问题的核心概念，体现了事物发展或联系的过程性。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON016",
            "name": "回路",
            "attributes": {
                "难度": "入门",
                "内容": "起点和终点相同的路径。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "回路代表了图中的闭合结构或循环现象，在检测依赖循环、分析周期性问题中有重要意义。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON017",
            "name": "简单路径",
            "attributes": {
                "难度": "入门",
                "内容": "路径序列中顶点不重复出现的路径。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "简单路径排除了重复访问，是许多图算法（如最短路径）研究的基础路径形式。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON018",
            "name": "简单回路",
            "attributes": {
                "难度": "入门",
                "内容": "除了起点和终点相同外，其余顶点不重复出现的回路。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "简单回路是图中基本的环结构，对于理解图的结构特性、检测循环依赖等非常重要。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON019",
            "name": "连通",
            "attributes": {
                "难度": "入门",
                "内容": "在无向图中，若从顶点v_i到顶点v_j有路径，则称v_i和v_j是连通的。在有向图中，若从v_i到v_j有路径，称v_i到v_j是连通的。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "连通性是衡量图整体性的重要指标，关系到信息能否在网络中传播、节点间是否可达等问题。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS005",
            "name": "连通图",
            "attributes": {
                "难度": "入门",
                "内容": "在无向图中，任意两个顶点之间都是连通的图。",
                "存储开销": "O(n^2)或O(n+e)",
                "核心特性": "任意顶点间存在路径",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "连通图保证了网络中任意两点间的可达性，是许多网络应用的基础要求，体现了系统的整体性。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON020",
            "name": "连通分量",
            "attributes": {
                "难度": "中等",
                "内容": "无向图的极大连通子图。非连通图有多个连通分量。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "连通分量揭示了非连通图中相互独立的区域，有助于对大型网络进行分解和局部研究。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS006",
            "name": "强连通图",
            "attributes": {
                "难度": "中等",
                "内容": "在有向图中，任意两个顶点v_i和v_j之间都存在从v_i到v_j和从v_j到v_i的路径。",
                "存储开销": "O(n^2)或O(n+e)",
                "核心特性": "任意顶点间相互可达",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "强连通性描述了有向图中更强的连接关系，即任意两点间可以相互到达，体现了网络的高度耦合和信息流通的无障碍性。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON021",
            "name": "强连通分量",
            "attributes": {
                "难度": "中等",
                "内容": "有向图的极大强连通子图。非强连通图有多个强连通分量。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "强连通分量识别出有向图中高度耦合的部分，是网络分析、编译器优化（如检测循环依赖）等领域的重要概念。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON022",
            "name": "权",
            "attributes": {
                "难度": "入门",
                "内容": "图中每条边可以标上具有某种含义的数值，称为该边的权（通常为非负实数），如距离、成本、时间等。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "权值赋予了边实际意义，使图模型能更好地反映现实世界的复杂性（如成本、距离），强调了量化分析在解决问题中的作用。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS007",
            "name": "网",
            "attributes": {
                "难度": "入门",
                "内容": "边上带有权的图，也称带权图。",
                "存储开销": "取决于存储方式和权值类型",
                "核心特性": "边带权值",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "网结构是解决最优化问题（如最短路径、最小生成树）的基础，广泛应用于交通、物流、通信等领域，服务经济社会发展。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS008",
            "name": "邻接矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "用一个n阶方阵A表示具有n个顶点的图，A[i][j]的值表示顶点v_i到v_j之间是否存在边（或边的权值）。",
                "存储开销": "O(n^2)",
                "核心特性": "判断边存在/获取权值时间O(1)，空间固定，适合稠密图",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "邻接矩阵体现了用数学工具（矩阵）解决计算机问题的思想，结构直观，但需关注空间效率问题，启发学生思考不同场景下的适用性。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS009",
            "name": "邻接表",
            "attributes": {
                "难度": "入门",
                "内容": "为图中每个顶点建立一个单链表，存储所有邻接于该顶点的边（或顶点）信息。用一个数组存储各链表的头指针。",
                "存储开销": "O(n+e)",
                "核心特性": "节省空间（尤其稀疏图），方便查找顶点的邻接点，适合稀疏图",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "邻接表体现了链式存储在处理稀疏数据时的空间效率优势，是计算机科学中空间与时间权衡思想的典型范例。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS010",
            "name": "边集数组",
            "attributes": {
                "难度": "入门",
                "内容": "用一个数组存储图中所有边的信息，每个数组元素包含一条边的起点、终点和权值（若有）。",
                "存储开销": "O(e)",
                "核心特性": "直接存储和访问所有边，不便于顶点相关操作",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "边集数组结构简单，直观反映边的集合，适用于侧重于对边进行整体处理的算法（如Kruskal），体现了针对特定问题设计合适数据结构的思想。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS011",
            "name": "逆邻接表",
            "attributes": {
                "难度": "中等",
                "内容": "邻接表的变体，每个顶点的链表存储的是所有指向该顶点的入边信息（或入边邻接点序号）。",
                "存储开销": "O(n+e)",
                "核心特性": "方便查找顶点的入度、入边及入边邻接点",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "逆邻接表是针对特定需求（快速查找入边信息）对基础数据结构进行优化的实例，体现了问题导向的设计思路。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS012",
            "name": "十字邻接表",
            "attributes": {
                "难度": "中等",
                "内容": "主要用于有向图，结合了邻接表和逆邻接表的思想。每个边结点包含起点、终点、权、指向同起点的下一条出边指针、指向同终点的下一条入边指针。顶点结点包含第一个入边和第一个出边指针。",
                "存储开销": "O(n+e)",
                "核心特性": "方便查找顶点的出度和入度及其相关边信息",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "十字邻接表通过集成不同结构的优点来满足更复杂的操作需求（同时高效访问出入边），体现了结构设计的组合与优化思想。"
            }
        },
        {
            "type": "算法",
            "ID": "07ALG001",
            "name": "深度优先搜索",
            "attributes": {
                "难度": "中等",
                "内容": "图遍历算法。从初始点出发，尽可能深地访问图的分支，访问一个顶点后，递归访问其未被访问的邻接点，直到所有邻接点被访问完再回溯。",
                "时间复杂度": "O(n+e) (邻接表), O(n^2) (邻接矩阵)",
                "空间复杂度": "O(n) (递归栈深度或标记数组)",
                "设计思想": "递归、栈、回溯",
                "适用场景": "查找路径、检测环、拓扑排序、查找连通分量/强连通分量",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "深度优先搜索体现了“不撞南墙不回头”的探索策略，在解决迷宫、路径查找等问题中有直观应用，启发学生面对复杂问题时勇于探索的精神。"
            }
        },
        {
            "type": "算法",
            "ID": "07ALG002",
            "name": "广度优先搜索",
            "attributes": {
                "难度": "中等",
                "内容": "图遍历算法。从初始点出发，首先访问其所有邻接点，然后按访问顺序依次访问这些邻接点的未被访问过的邻接点，逐层向外扩展。",
                "时间复杂度": "O(n+e) (邻接表), O(n^2) (邻接矩阵)",
                "空间复杂度": "O(n) (队列或标记数组)",
                "设计思想": "队列、层次遍历",
                "适用场景": "查找无权图最短路径、查找连通分量、网络广播",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "广度优先搜索体现了“稳扎稳打、层层推进”的策略，在解决最短距离、网络扩散等问题中有应用，启发学生系统性、全面性地分析和解决问题。"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS001",
            "name": "图",
            "attributes": {
                "难度": "中等",
                "内容": "由顶点集合和边集合组成的数据结构，用于表示对象之间的连接关系。根据边有无方向可分为有向图和无向图，根据边有无权重可分为带权图和无权图。",
                "存储开销": "邻接矩阵O(V^2)，邻接表O(V+E)，其中V是顶点数，E是边数。",
                "核心特性": "表示顶点间的连接性、路径、环路等关系。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON001",
            "name": "最小生成树",
            "attributes": {
                "难度": "中等",
                "内容": "在一个连通网（带权无向图）中，连接所有顶点且边的权值总和最小的生成树。用于解决网络建设中成本最低的问题。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "体现了在满足基本连通需求的前提下，追求资源最优化的思想。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON002",
            "name": "生成树",
            "attributes": {
                "难度": "入门",
                "内容": "连通图的一个子图，包含原图的所有顶点，并且是树（即无回路且连通）。对于有n个顶点的连通图，其生成树恰好有n-1条边，是用最少的边连通所有顶点的极小连通子图。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON003",
            "name": "连通图",
            "attributes": {
                "难度": "入门",
                "内容": "在无向图中，如果任意两个顶点之间都至少存在一条路径，则称该图为连通图。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON004",
            "name": "子图",
            "attributes": {
                "难度": "入门",
                "内容": "一个图G'=(V', E')是图G=(V, E)的子图，如果V'是V的子集，E'是E的子集，并且E'中的边的端点都在V'中。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON005",
            "name": "回路",
            "attributes": {
                "难度": "入门",
                "内容": "在图中，起点和终点相同的非空路径。在简单图中，通常指除了起点和终点相同外，其他顶点不重复的路径。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON006",
            "name": "顶点",
            "attributes": {
                "难度": "入门",
                "内容": "图的基本组成部分，代表实体或对象。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON007",
            "name": "边",
            "attributes": {
                "难度": "入门",
                "内容": "图的基本组成部分，代表顶点之间的关系或连接。可以有方向（有向边）或无方向（无向边），可以有权重。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG001",
            "name": "深度优先搜索",
            "attributes": {
                "难度": "中等",
                "内容": "图遍历算法。从起点出发，尽可能深地搜索图的分支，直到顶点v的所有边都被探寻过，然后回溯到前一个节点继续探索。",
                "时间复杂度": "O(V+E)（邻接表），O(V^2)（邻接矩阵）",
                "空间复杂度": "O(V)（递归栈或显式栈）",
                "设计思想": "递归、栈",
                "适用场景": "查找路径、检测环、生成深度优先生成树等。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG002",
            "name": "广度优先搜索",
            "attributes": {
                "难度": "中等",
                "内容": "图遍历算法。从起点出发，首先访问其所有邻接点，然后按距离逐层访问更远的节点。",
                "时间复杂度": "O(V+E)（邻接表），O(V^2)（邻接矩阵）",
                "空间复杂度": "O(V)（队列）",
                "设计思想": "队列、层次遍历",
                "适用场景": "查找最短路径（无权图）、生成广度优先生成树等。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON008",
            "name": "深度优先生成树",
            "attributes": {
                "难度": "中等",
                "内容": "通过深度优先搜索遍历连通图生成的生成树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON009",
            "name": "广度优先生成树",
            "attributes": {
                "难度": "中等",
                "内容": "通过广度优先搜索遍历连通图生成的生成树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS002",
            "name": "连通网",
            "attributes": {
                "难度": "入门",
                "内容": "带权的连通无向图。常用于表示网络、交通系统等，其中边的权值代表成本、距离或时间。",
                "存储开销": "同带权图，取决于表示法。",
                "核心特性": "连通性、带权边。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON010",
            "name": "权",
            "attributes": {
                "难度": "入门",
                "内容": "赋给图的边或顶点的数值，表示成本、距离、容量、时间等度量。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG003",
            "name": "普里姆算法",
            "attributes": {
                "难度": "中等",
                "内容": "求解连通网最小生成树的贪心算法。从一个顶点开始，逐步扩展生成树，每次选择连接已选顶点集和未选顶点集的最短边加入树中，直到包含所有顶点。",
                "时间复杂度": "O(V^2)（使用邻接矩阵），O(E log V)（使用优先队列优化）",
                "空间复杂度": "O(V)（存储辅助信息如到集合外顶点的最短边）",
                "设计思想": "贪心算法",
                "适用场景": "求解稠密图的最小生成树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "逐步最优选择构建全局最优解的策略。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG004",
            "name": "克鲁斯卡尔算法",
            "attributes": {
                "难度": "中等",
                "内容": "求解连通网最小生成树的贪心算法。将所有边按权值从小到大排序，依次选择权值最小的边，若该边连接的两个顶点不属于同一个连通分量（即加入该边不形成回路），则将其加入生成树中，直到包含n-1条边。",
                "时间复杂度": "O(E log E) 或 O(E log V)（主要取决于排序和并查集操作）",
                "空间复杂度": "O(E + V)（存储边和并查集）",
                "设计思想": "贪心算法、并查集",
                "适用场景": "求解稀疏图的最小生成树。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "按优先级处理，避免冲突（回路）的策略。"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS003",
            "name": "邻接矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "表示图的一种存储方式。使用二维数组存储顶点间的邻接关系，A[i][j]=1（或权值）表示顶点i到顶点j有边，否则为0（或无穷大）。",
                "存储开销": "O(V^2)",
                "核心特性": "判断两顶点间是否有边快速（O(1)），适合稠密图。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS004",
            "name": "边集数组",
            "attributes": {
                "难度": "入门",
                "内容": "存储图中所有边信息的一种方式。通常用一个结构数组表示，每个结构包含边的两个端点和权值。",
                "存储开销": "O(E)",
                "核心特性": "方便对边进行排序等操作，适合处理与边相关的算法（如Kruskal）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON011",
            "name": "连通分量",
            "attributes": {
                "难度": "入门",
                "内容": "无向图中的极大连通子图。极大意味着不能再添加原图中的任何顶点或边来扩展该子图，同时保持连通性。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON012",
            "name": "最短路径",
            "attributes": {
                "难度": "中等",
                "内容": "在图中，连接两个顶点之间长度（或权值总和）最小的路径。长度可以是边的数量（无权图）或边的权值之和（带权图）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "优化路径选择，实现效率或成本最优。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON013",
            "name": "路径",
            "attributes": {
                "难度": "入门",
                "内容": "图中从一个顶点到另一个顶点所经过的顶点序列（或边序列）。简单路径是指路径中顶点（除起点终点可能相同外）不重复。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON014",
            "name": "路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "路径上所包含的边的数量（对于无权图）或边的权值之和（对于带权图）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS005",
            "name": "带权图",
            "attributes": {
                "难度": "入门",
                "内容": "图中的边被赋予了数值（权值）的图。权值可以代表距离、成本、时间等。",
                "存储开销": "邻接矩阵O(V^2)，邻接表O(V+E)。",
                "核心特性": "边具有量化的属性。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS006",
            "name": "有向图",
            "attributes": {
                "难度": "入门",
                "内容": "图中的边具有方向性，即从一个顶点指向另一个顶点。",
                "存储开销": "邻接矩阵O(V^2)，邻接表O(V+E)。",
                "核心特性": "边表示非对称关系。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON015",
            "name": "源点",
            "attributes": {
                "难度": "入门",
                "内容": "在路径问题或网络流问题中，指定的起始顶点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON016",
            "name": "终点",
            "attributes": {
                "难度": "入门",
                "内容": "在路径问题或网络流问题中，指定的目标顶点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG005",
            "name": "狄克斯特拉算法",
            "attributes": {
                "难度": "中等",
                "内容": "求解带权图中单源最短路径的贪心算法。适用于边权非负的图。维护一个已找到最短路径的顶点集合S，逐步将距离源点最近的顶点加入S，并更新其他顶点的最短距离估计。",
                "时间复杂度": "O(V^2)（简单实现），O(E + V log V)（使用优先队列优化）",
                "空间复杂度": "O(V)（存储距离和路径信息）",
                "设计思想": "贪心算法",
                "适用场景": "计算单个起点到所有其他点的最短路径（边权非负）。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "逐步扩展已知最优解的范围来解决全局问题。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG006",
            "name": "弗洛伊德算法",
            "attributes": {
                "难度": "中等",
                "内容": "求解带权图中所有顶点对之间最短路径的动态规划算法。允许图中存在负权边（但不能有负权回路）。通过考虑允许经过的中间顶点逐步放松路径长度。",
                "时间复杂度": "O(V^3)",
                "空间复杂度": "O(V^2)（存储距离矩阵）",
                "设计思想": "动态规划",
                "适用场景": "计算所有顶点对之间的最短路径，尤其适用于稠密图。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "通过迭代优化，逐步逼近全局最优解。"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS007",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种线性数据结构，每个节点包含数据和指向下一个节点的指针。",
                "存储开销": "O(N)，N为节点数。",
                "核心特性": "动态大小，插入删除（若有前驱指针）高效，随机访问慢。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON017",
            "name": "活动",
            "attributes": {
                "难度": "入门",
                "内容": "在项目管理或工程规划中，代表需要消耗时间或资源的具体任务或子工程。在AOV网中通常由顶点表示，在AOE网中通常由边表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS008",
            "name": "顶点活动网",
            "attributes": {
                "难度": "中等",
                "内容": "一种有向无环图（DAG），用于表示工程或项目中的活动及其依赖关系。图中顶点代表活动，有向边<i, j>代表活动i必须在活动j之前完成。",
                "存储开销": "同有向图。",
                "核心特性": "表示活动间的先后顺序约束，用于拓扑排序。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON018",
            "name": "前驱活动",
            "attributes": {
                "难度": "入门",
                "内容": "在活动网络中，必须在某个活动开始之前完成的活动。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON019",
            "name": "后续活动",
            "attributes": {
                "难度": "入门",
                "内容": "在活动网络中，必须在某个活动完成之后才能开始的活动。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS009",
            "name": "有向无环图",
            "attributes": {
                "难度": "中等",
                "内容": "图中不存在任何有向回路的有向图。常用于表示具有依赖关系或先后顺序的任务、事件等。",
                "存储开销": "同有向图。",
                "核心特性": "无环性，允许进行拓扑排序。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON020",
            "name": "拓扑序列",
            "attributes": {
                "难度": "中等",
                "内容": "有向无环图（DAG）的所有顶点的一种线性排序，使得对于图中任意一条有向边<u, v>，顶点u在该序列中都出现在顶点v之前。一个DAG的拓扑序列可能不唯一。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "规划和安排具有依赖关系任务的合理顺序。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG007",
            "name": "拓扑排序",
            "attributes": {
                "难度": "中等",
                "内容": "生成有向无环图（DAG）拓扑序列的算法。常用的方法是：重复选择一个入度为0的顶点，输出该顶点，并从图中移除该顶点及其所有出边，直到所有顶点都被输出。如果过程中找不到入度为0的顶点，则说明图中存在回路。",
                "时间复杂度": "O(V+E)（使用邻接表）",
                "空间复杂度": "O(V)（存储入度或队列/栈）",
                "设计思想": "基于入度的迭代删除、队列/栈",
                "适用场景": "任务调度、依赖解析、检测有向图中的环。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "解决依赖约束下的有序执行问题。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON021",
            "name": "入度",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，指向某个顶点的边的数量。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON022",
            "name": "出边",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，从某个顶点出发指向其他顶点的边。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS010",
            "name": "邻接表",
            "attributes": {
                "难度": "入门",
                "内容": "表示图的一种存储方式。对图中每个顶点，使用一个链表（或其他动态集合）存储所有与该顶点相邻接的顶点。",
                "存储开销": "O(V+E)",
                "核心特性": "节省空间（尤其对于稀疏图），方便查找顶点的所有邻接点。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS011",
            "name": "栈",
            "attributes": {
                "难度": "入门",
                "内容": "一种后进先出（LIFO）的线性数据结构。只允许在表的一端（栈顶）进行插入（压栈）和删除（弹栈）操作。",
                "存储开销": "O(N)，N为元素数量。",
                "核心特性": "后进先出。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS012",
            "name": "边活动网",
            "attributes": {
                "难度": "中等",
                "内容": "一种带权的、有向无环图（DAG），用于表示工程或项目计划。图中边代表活动，边权代表活动持续时间；顶点代表事件，表示活动的开始或结束。",
                "存储开销": "同带权有向图。",
                "核心特性": "表示活动及其持续时间、事件间的依赖关系，用于关键路径分析。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON023",
            "name": "事件",
            "attributes": {
                "难度": "入门",
                "内容": "在AOE网中，代表项目中某个时间点或里程碑，通常是某些活动的完成和另一些活动的开始。由图中的顶点表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON024",
            "name": "活动持续时间",
            "attributes": {
                "难度": "入门",
                "内容": "在AOE网中，完成某个活动所需的时间。通常作为对应边的权值。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON025",
            "name": "汇点",
            "attributes": {
                "难度": "入门",
                "内容": "在AOE网或网络流图中，代表整个工程或流程结束的顶点。通常只有入边，没有出边。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON026",
            "name": "事件最早发生时间",
            "attributes": {
                "难度": "中等",
                "内容": "在AOE网中，事件（顶点）能够发生的最早时刻。等于从源点到该事件顶点的所有路径中最长路径的长度。通常用ve表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON027",
            "name": "活动最早开始时间",
            "attributes": {
                "难度": "中等",
                "内容": "在AOE网中，活动（边）能够开始的最早时刻。等于该活动起点事件的最早发生时间。通常用e表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON028",
            "name": "事件最迟发生时间",
            "attributes": {
                "难度": "中等",
                "内容": "在AOE网中，为了不延误整个工程的完成，事件（顶点）必须发生的最晚时刻。通常用vl表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON029",
            "name": "活动最迟开始时间",
            "attributes": {
                "难度": "中等",
                "内容": "在AOE网中，为了不延误整个工程的完成，活动（边）必须开始的最晚时刻。等于该活动终点事件的最迟发生时间减去该活动的持续时间。通常用l表示。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "08CON030",
            "name": "关键活动",
            "attributes": {
                "难度": "中等",
                "内容": "在AOE网中，最早开始时间和最迟开始时间相等的活动。这些活动没有任何时间余量（浮动时间），它们的延迟会直接导致整个工程的延期。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "识别项目瓶颈，重点管理对象。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON031",
            "name": "关键路径",
            "attributes": {
                "难度": "中等",
                "内容": "在AOE网中，从源点到汇点的路径，该路径上所有活动都是关键活动。关键路径的长度决定了整个工程的最短完成时间。可能存在多条关键路径。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "项目管理的核心，决定项目总工期。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG008",
            "name": "关键路径算法",
            "attributes": {
                "难度": "高级",
                "内容": "用于确定AOE网中关键路径和关键活动的算法。通常包括：计算所有事件的最早发生时间（正向拓扑排序），计算所有事件的最迟发生时间（逆向拓扑排序），计算所有活动的最早和最迟开始时间，找出关键活动和关键路径。",
                "时间复杂度": "O(V+E)",
                "空间复杂度": "O(V+E)",
                "设计思想": "拓扑排序、动态规划思想",
                "适用场景": "项目管理、工程调度、工期估算。",
                "教学视频": "未知",
                "教学材料": "未知",
                "思政点": "系统化分析和优化复杂流程的方法。"
            }
        }
    ],
    "relations": [
        {
            "type": "理论依赖",
            "ID": "01REL001",
            "source": "01DS001",
            "target": "01CON010"
        },
        {
            "type": "理论依赖",
            "ID": "01REL002",
            "source": "01DS002",
            "target": "01CON010"
        },
        {
            "type": "理论依赖",
            "ID": "01REL003",
            "source": "01DS003",
            "target": "01CON010"
        },
        {
            "type": "理论依赖",
            "ID": "01REL004",
            "source": "01DS004",
            "target": "01CON010"
        },
        {
            "type": "继承",
            "ID": "01REL005",
            "source": "01DS003",
            "target": "01DS004"
        },
        {
            "type": "继承",
            "ID": "01REL006",
            "source": "01DS002",
            "target": "01DS003"
        },
        {
            "type": "理论依赖",
            "ID": "01REL007",
            "source": "01CON012",
            "target": "01CON011"
        },
        {
            "type": "理论依赖",
            "ID": "01REL008",
            "source": "01CON013",
            "target": "01CON011"
        },
        {
            "type": "理论依赖",
            "ID": "01REL009",
            "source": "01CON014",
            "target": "01CON011"
        },
        {
            "type": "理论依赖",
            "ID": "01REL010",
            "source": "01CON015",
            "target": "01CON011"
        },
        {
            "type": "理论依赖",
            "ID": "01REL011",
            "source": "01DS005",
            "target": "01CON018"
        },
        {
            "type": "理论依赖",
            "ID": "01REL012",
            "source": "01DS006",
            "target": "01CON018"
        },
        {
            "type": "理论依赖",
            "ID": "01REL013",
            "source": "01DS007",
            "target": "01CON018"
        },
        {
            "type": "理论依赖",
            "ID": "01REL014",
            "source": "01DS008",
            "target": "01CON018"
        },
        {
            "type": "使用",
            "ID": "01REL015",
            "source": "01DS009",
            "target": "01DS007"
        },
        {
            "type": "理论依赖",
            "ID": "01REL016",
            "source": "01CON017",
            "target": "01CON016"
        },
        {
            "type": "理论依赖",
            "ID": "01REL017",
            "source": "01CON018",
            "target": "01CON016"
        },
        {
            "type": "理论依赖",
            "ID": "01REL018",
            "source": "01CON019",
            "target": "01CON018"
        },
        {
            "type": "理论依赖",
            "ID": "01REL019",
            "source": "01CON020",
            "target": "01CON001"
        },
        {
            "type": "理论依赖",
            "ID": "01REL020",
            "source": "01CON020",
            "target": "01CON002"
        },
        {
            "type": "理论依赖",
            "ID": "01REL021",
            "source": "01CON021",
            "target": "01CON016"
        },
        {
            "type": "理论依赖",
            "ID": "01REL022",
            "source": "01CON004",
            "target": "01CON003"
        },
        {
            "type": "理论依赖",
            "ID": "01REL023",
            "source": "01CON005",
            "target": "01CON004"
        },
        {
            "type": "理论依赖",
            "ID": "01REL024",
            "source": "01CON006",
            "target": "01CON005"
        },
        {
            "type": "理论依赖",
            "ID": "01REL025",
            "source": "01CON007",
            "target": "01CON006"
        },
        {
            "type": "理论依赖",
            "ID": "01REL026",
            "source": "01CON008",
            "target": "01CON007"
        },
        {
            "type": "理论依赖",
            "ID": "01REL027",
            "source": "01CON009",
            "target": "01CON003"
        },
        {
            "type": "理论依赖",
            "ID": "01REL028",
            "source": "01CON027",
            "target": "01CON002"
        },
        {
            "type": "理论依赖",
            "ID": "01REL029",
            "source": "01CON028",
            "target": "01CON002"
        },
        {
            "type": "理论依赖",
            "ID": "01REL030",
            "source": "01CON029",
            "target": "01CON027"
        },
        {
            "type": "理论依赖",
            "ID": "01REL031",
            "source": "01CON029",
            "target": "01CON028"
        },
        {
            "type": "理论依赖",
            "ID": "01REL032",
            "source": "01CON030",
            "target": "01CON002"
        },
        {
            "type": "理论依赖",
            "ID": "01REL033",
            "source": "01CON031",
            "target": "01CON002"
        },
        {
            "type": "理论依赖",
            "ID": "01REL034",
            "source": "01CON032",
            "target": "01CON002"
        },
        {
            "type": "理论依赖",
            "ID": "01REL035",
            "source": "01CON033",
            "target": "01CON002"
        },
        {
            "type": "操作绑定",
            "ID": "01REL036",
            "source": "01ALG001",
            "target": "01DS005"
        },
        {
            "type": "操作绑定",
            "ID": "01REL037",
            "source": "01ALG002",
            "target": "01DS005"
        },
        {
            "type": "操作绑定",
            "ID": "01REL038",
            "source": "01ALG003",
            "target": "01CON034"
        },
        {
            "type": "操作绑定",
            "ID": "01REL039",
            "source": "01ALG004",
            "target": "01DS005"
        },
        {
            "type": "操作绑定",
            "ID": "01REL040",
            "source": "01ALG005",
            "target": "01DS005"
        },
        {
            "type": "操作绑定",
            "ID": "01REL041",
            "source": "01ALG006",
            "target": "01DS005"
        },
        {
            "type": "操作绑定",
            "ID": "01REL042",
            "source": "01ALG007",
            "target": "01DS001"
        },
        {
            "type": "操作绑定",
            "ID": "01REL043",
            "source": "01ALG008",
            "target": "01DS001"
        },
        {
            "type": "理论依赖",
            "ID": "01REL044",
            "source": "01CON036",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL045",
            "source": "01CON037",
            "target": "01CON036"
        },
        {
            "type": "理论依赖",
            "ID": "01REL046",
            "source": "01CON038",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL047",
            "source": "01CON039",
            "target": "01CON036"
        },
        {
            "type": "理论依赖",
            "ID": "01REL048",
            "source": "01CON040",
            "target": "01CON036"
        },
        {
            "type": "理论依赖",
            "ID": "01REL049",
            "source": "01CON041",
            "target": "01CON036"
        },
        {
            "type": "理论依赖",
            "ID": "01REL050",
            "source": "01CON042",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL051",
            "source": "01CON043",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL052",
            "source": "01CON044",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL053",
            "source": "01CON045",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL054",
            "source": "01CON046",
            "target": "01CON035"
        },
        {
            "type": "理论依赖",
            "ID": "01REL055",
            "source": "01CON034",
            "target": "01CON001"
        },
        {
            "type": "理论依赖",
            "ID": "01REL056",
            "source": "01ALG001",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "01REL057",
            "source": "01ALG002",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "01REL058",
            "source": "01ALG003",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "01REL059",
            "source": "01ALG004",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "01REL060",
            "source": "01ALG005",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "01REL061",
            "source": "01ALG006",
            "target": "01CON030"
        },
        {
            "type": "理论依赖",
            "ID": "01REL062",
            "source": "01ALG007",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "01REL063",
            "source": "01ALG008",
            "target": "01CON031"
        },
        {
            "type": "理论依赖",
            "ID": "02REL001",
            "source": "02DS001",
            "target": "02CON001"
        },
        {
            "type": "继承",
            "ID": "02REL002",
            "source": "02DS002",
            "target": "02DS001"
        },
        {
            "type": "使用",
            "ID": "02REL003",
            "source": "02DS002",
            "target": "02DS003"
        },
        {
            "type": "理论依赖",
            "ID": "02REL004",
            "source": "02DS002",
            "target": "02CON009"
        },
        {
            "type": "继承",
            "ID": "02REL005",
            "source": "02DS004",
            "target": "02DS001"
        },
        {
            "type": "理论依赖",
            "ID": "02REL006",
            "source": "02DS004",
            "target": "02CON010"
        },
        {
            "type": "理论依赖",
            "ID": "02REL007",
            "source": "02DS004",
            "target": "02CON002"
        },
        {
            "type": "理论依赖",
            "ID": "02REL008",
            "source": "02CON002",
            "target": "02CON003"
        },
        {
            "type": "理论依赖",
            "ID": "02REL009",
            "source": "02CON002",
            "target": "02CON004"
        },
        {
            "type": "继承",
            "ID": "02REL010",
            "source": "02DS005",
            "target": "02DS004"
        },
        {
            "type": "继承",
            "ID": "02REL011",
            "source": "02DS006",
            "target": "02DS004"
        },
        {
            "type": "继承",
            "ID": "02REL012",
            "source": "02DS007",
            "target": "02DS004"
        },
        {
            "type": "理论依赖",
            "ID": "02REL013",
            "source": "02DS004",
            "target": "02CON005"
        },
        {
            "type": "理论依赖",
            "ID": "02REL014",
            "source": "02DS004",
            "target": "02CON006"
        },
        {
            "type": "理论依赖",
            "ID": "02REL015",
            "source": "02DS004",
            "target": "02CON007"
        },
        {
            "type": "使用",
            "ID": "02REL016",
            "source": "02DS004",
            "target": "02CON008"
        },
        {
            "type": "继承",
            "ID": "02REL017",
            "source": "02DS008",
            "target": "02DS005"
        },
        {
            "type": "操作绑定",
            "ID": "02REL018",
            "source": "02ALG001",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL019",
            "source": "02ALG002",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL020",
            "source": "02ALG003",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL021",
            "source": "02ALG004",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL022",
            "source": "02ALG005",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL023",
            "source": "02ALG006",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL024",
            "source": "02ALG007",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL025",
            "source": "02ALG008",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL026",
            "source": "02ALG009",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL027",
            "source": "02ALG010",
            "target": "02DS001"
        },
        {
            "type": "操作绑定",
            "ID": "02REL028",
            "source": "02ALG011",
            "target": "02DS001"
        },
        {
            "type": "继承",
            "ID": "02REL029",
            "source": "02ALG012",
            "target": "02ALG011"
        },
        {
            "type": "使用",
            "ID": "02REL030",
            "source": "02ALG012",
            "target": "02DS001"
        },
        {
            "type": "使用",
            "ID": "02REL031",
            "source": "02ALG013",
            "target": "02CON011"
        },
        {
            "type": "使用",
            "ID": "02REL032",
            "source": "02ALG013",
            "target": "02DS001"
        },
        {
            "type": "使用",
            "ID": "02REL033",
            "source": "02ALG014",
            "target": "02CON011"
        },
        {
            "type": "使用",
            "ID": "02REL034",
            "source": "02ALG014",
            "target": "02DS001"
        },
        {
            "type": "理论依赖",
            "ID": "02REL035",
            "source": "02CON011",
            "target": "02CON012"
        },
        {
            "type": "理论依赖",
            "ID": "02REL036",
            "source": "02CON011",
            "target": "02CON013"
        },
        {
            "type": "使用",
            "ID": "03REL001",
            "source": "03DS002",
            "target": "03DS011"
        },
        {
            "type": "使用",
            "ID": "03REL002",
            "source": "03DS003",
            "target": "03DS012"
        },
        {
            "type": "继承",
            "ID": "03REL003",
            "source": "03DS004",
            "target": "03CON001"
        },
        {
            "type": "继承",
            "ID": "03REL004",
            "source": "03CON002",
            "target": "03CON001"
        },
        {
            "type": "使用",
            "ID": "03REL005",
            "source": "03DS004",
            "target": "03DS005"
        },
        {
            "type": "理论依赖",
            "ID": "03REL006",
            "source": "03DS005",
            "target": "03CON003"
        },
        {
            "type": "使用",
            "ID": "03REL007",
            "source": "03DS006",
            "target": "03DS005"
        },
        {
            "type": "使用",
            "ID": "03REL008",
            "source": "03DS006",
            "target": "03DS011"
        },
        {
            "type": "使用",
            "ID": "03REL009",
            "source": "03DS007",
            "target": "03DS005"
        },
        {
            "type": "使用",
            "ID": "03REL010",
            "source": "03DS007",
            "target": "03DS012"
        },
        {
            "type": "使用",
            "ID": "03REL011",
            "source": "03DS007",
            "target": "03DS011"
        },
        {
            "type": "使用",
            "ID": "03REL012",
            "source": "03DS008",
            "target": "03DS005"
        },
        {
            "type": "使用",
            "ID": "03REL013",
            "source": "03DS008",
            "target": "03DS012"
        },
        {
            "type": "使用",
            "ID": "03REL014",
            "source": "03DS008",
            "target": "03DS011"
        },
        {
            "type": "继承",
            "ID": "03REL015",
            "source": "03DS009",
            "target": "03CON005"
        },
        {
            "type": "使用",
            "ID": "03REL016",
            "source": "03DS010",
            "target": "03DS012"
        },
        {
            "type": "操作绑定",
            "ID": "03REL017",
            "source": "03ALG001",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL018",
            "source": "03ALG002",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL019",
            "source": "03ALG003",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL020",
            "source": "03ALG004",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL021",
            "source": "03ALG005",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL022",
            "source": "03ALG006",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL023",
            "source": "03ALG007",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL024",
            "source": "03ALG008",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL025",
            "source": "03ALG009",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL026",
            "source": "03ALG010",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL027",
            "source": "03ALG011",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL028",
            "source": "03ALG012",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL029",
            "source": "03ALG013",
            "target": "03DS001"
        },
        {
            "type": "操作绑定",
            "ID": "03REL030",
            "source": "03ALG014",
            "target": "03DS004"
        },
        {
            "type": "操作绑定",
            "ID": "03REL031",
            "source": "03ALG015",
            "target": "03DS004"
        },
        {
            "type": "操作绑定",
            "ID": "03REL032",
            "source": "03ALG016",
            "target": "03DS004"
        },
        {
            "type": "操作绑定",
            "ID": "03REL033",
            "source": "03ALG017",
            "target": "03DS004"
        },
        {
            "type": "操作绑定",
            "ID": "03REL034",
            "source": "03ALG018",
            "target": "03DS004"
        },
        {
            "type": "优化",
            "ID": "03REL035",
            "source": "03ALG018",
            "target": "03ALG017"
        },
        {
            "type": "操作绑定",
            "ID": "03REL036",
            "source": "03ALG019",
            "target": "03DS004"
        },
        {
            "type": "操作绑定",
            "ID": "03REL037",
            "source": "03ALG020",
            "target": "03DS009"
        },
        {
            "type": "操作绑定",
            "ID": "03REL038",
            "source": "03ALG021",
            "target": "03DS009"
        },
        {
            "type": "操作绑定",
            "ID": "03REL039",
            "source": "03ALG022",
            "target": "03DS009"
        },
        {
            "type": "操作绑定",
            "ID": "03REL040",
            "source": "03ALG023",
            "target": "03DS009"
        },
        {
            "type": "理论依赖",
            "ID": "03REL041",
            "source": "03DS001",
            "target": "03CON004"
        },
        {
            "type": "理论依赖",
            "ID": "03REL042",
            "source": "03DS004",
            "target": "03CON004"
        },
        {
            "type": "使用",
            "ID": "03REL043",
            "source": "03DS002",
            "target": "03DS001"
        },
        {
            "type": "使用",
            "ID": "03REL044",
            "source": "03DS003",
            "target": "03DS001"
        },
        {
            "type": "使用",
            "ID": "03REL045",
            "source": "03DS006",
            "target": "03DS004"
        },
        {
            "type": "使用",
            "ID": "03REL046",
            "source": "03DS007",
            "target": "03DS004"
        },
        {
            "type": "使用",
            "ID": "03REL047",
            "source": "03DS008",
            "target": "03DS004"
        },
        {
            "type": "使用",
            "ID": "03REL048",
            "source": "03DS010",
            "target": "03DS009"
        },
        {
            "type": "继承",
            "ID": "04REL001",
            "source": "04DS001",
            "target": "04DS003"
        },
        {
            "type": "继承",
            "ID": "04REL002",
            "source": "04DS002",
            "target": "04DS003"
        },
        {
            "type": "变体",
            "ID": "04REL003",
            "source": "04DS004",
            "target": "04DS001"
        },
        {
            "type": "变体",
            "ID": "04REL004",
            "source": "04DS005",
            "target": "04DS001"
        },
        {
            "type": "变体",
            "ID": "04REL005",
            "source": "04DS007",
            "target": "04DS006"
        },
        {
            "type": "变体",
            "ID": "04REL006",
            "source": "04DS009",
            "target": "04DS002"
        },
        {
            "type": "使用",
            "ID": "04REL007",
            "source": "04DS004",
            "target": "04DS011"
        },
        {
            "type": "使用",
            "ID": "04REL008",
            "source": "04DS005",
            "target": "04DS012"
        },
        {
            "type": "使用",
            "ID": "04REL009",
            "source": "04DS006",
            "target": "04DS011"
        },
        {
            "type": "使用",
            "ID": "04REL010",
            "source": "04DS008",
            "target": "04DS012"
        },
        {
            "type": "使用",
            "ID": "04REL011",
            "source": "04DS009",
            "target": "04DS010"
        },
        {
            "type": "操作绑定",
            "ID": "04REL012",
            "source": "04ALG001",
            "target": "04DS001"
        },
        {
            "type": "操作绑定",
            "ID": "04REL013",
            "source": "04ALG002",
            "target": "04DS001"
        },
        {
            "type": "操作绑定",
            "ID": "04REL014",
            "source": "04ALG003",
            "target": "04DS001"
        },
        {
            "type": "操作绑定",
            "ID": "04REL015",
            "source": "04ALG004",
            "target": "04DS001"
        },
        {
            "type": "操作绑定",
            "ID": "04REL016",
            "source": "04ALG005",
            "target": "04DS001"
        },
        {
            "type": "操作绑定",
            "ID": "04REL017",
            "source": "04ALG006",
            "target": "04DS002"
        },
        {
            "type": "操作绑定",
            "ID": "04REL018",
            "source": "04ALG007",
            "target": "04DS002"
        },
        {
            "type": "操作绑定",
            "ID": "04REL019",
            "source": "04ALG008",
            "target": "04DS002"
        },
        {
            "type": "操作绑定",
            "ID": "04REL020",
            "source": "04ALG009",
            "target": "04DS002"
        },
        {
            "type": "操作绑定",
            "ID": "04REL021",
            "source": "04ALG010",
            "target": "04DS002"
        },
        {
            "type": "使用",
            "ID": "04REL022",
            "source": "04ALG011",
            "target": "04DS001"
        },
        {
            "type": "使用",
            "ID": "04REL023",
            "source": "04ALG012",
            "target": "04DS001"
        },
        {
            "type": "使用",
            "ID": "04REL024",
            "source": "04ALG013",
            "target": "04CON022"
        },
        {
            "type": "使用",
            "ID": "04REL025",
            "source": "04ALG014",
            "target": "04ALG013"
        },
        {
            "type": "使用",
            "ID": "04REL026",
            "source": "04ALG015",
            "target": "04ALG013"
        },
        {
            "type": "使用",
            "ID": "04REL027",
            "source": "04ALG016",
            "target": "04ALG013"
        },
        {
            "type": "使用",
            "ID": "04REL028",
            "source": "04ALG017",
            "target": "04ALG013"
        },
        {
            "type": "使用",
            "ID": "04REL029",
            "source": "04ALG018",
            "target": "04ALG013"
        },
        {
            "type": "使用",
            "ID": "04REL030",
            "source": "04ALG017",
            "target": "04DS011"
        },
        {
            "type": "理论依赖",
            "ID": "04REL031",
            "source": "04ALG011",
            "target": "04CON015"
        },
        {
            "type": "理论依赖",
            "ID": "04REL032",
            "source": "04ALG012",
            "target": "04CON014"
        },
        {
            "type": "理论依赖",
            "ID": "04REL033",
            "source": "04ALG012",
            "target": "04CON015"
        },
        {
            "type": "理论依赖",
            "ID": "04REL034",
            "source": "04ALG013",
            "target": "04CON020"
        },
        {
            "type": "理论依赖",
            "ID": "04REL035",
            "source": "04CON022",
            "target": "04CON020"
        },
        {
            "type": "理论依赖",
            "ID": "04REL036",
            "source": "04DS001",
            "target": "04CON003"
        },
        {
            "type": "理论依赖",
            "ID": "04REL037",
            "source": "04DS002",
            "target": "04CON006"
        },
        {
            "type": "理论依赖",
            "ID": "04REL038",
            "source": "04DS001",
            "target": "04CON007"
        },
        {
            "type": "理论依赖",
            "ID": "04REL039",
            "source": "04DS002",
            "target": "04CON007"
        },
        {
            "type": "理论依赖",
            "ID": "04REL040",
            "source": "04ALG012",
            "target": "04CON019"
        },
        {
            "type": "继承",
            "ID": "05REL001",
            "source": "05DS005",
            "target": "05DS001"
        },
        {
            "type": "继承",
            "ID": "05REL002",
            "source": "05DS006",
            "target": "05DS005"
        },
        {
            "type": "继承",
            "ID": "05REL003",
            "source": "05DS007",
            "target": "05DS005"
        },
        {
            "type": "继承",
            "ID": "05REL004",
            "source": "05DS007",
            "target": "05DS008"
        },
        {
            "type": "继承",
            "ID": "05REL005",
            "source": "05DS006",
            "target": "05DS007"
        },
        {
            "type": "继承",
            "ID": "05REL006",
            "source": "05DS002",
            "target": "05DS001"
        },
        {
            "type": "继承",
            "ID": "05REL007",
            "source": "05DS003",
            "target": "05DS001"
        },
        {
            "type": "继承",
            "ID": "05REL008",
            "source": "05DS005",
            "target": "05DS002"
        },
        {
            "type": "继承",
            "ID": "05REL009",
            "source": "05DS011",
            "target": "05DS001"
        },
        {
            "type": "变体",
            "ID": "05REL010",
            "source": "05DS010",
            "target": "05DS009"
        },
        {
            "type": "操作绑定",
            "ID": "05REL011",
            "source": "05ALG009",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL012",
            "source": "05ALG010",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL013",
            "source": "05ALG011",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL014",
            "source": "05ALG012",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL015",
            "source": "05ALG004",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL016",
            "source": "05ALG001",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL017",
            "source": "05ALG002",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL018",
            "source": "05ALG003",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL019",
            "source": "05ALG005",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL020",
            "source": "05ALG006",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL021",
            "source": "05ALG007",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL022",
            "source": "05ALG008",
            "target": "05DS005"
        },
        {
            "type": "操作绑定",
            "ID": "05REL023",
            "source": "05ALG020",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL024",
            "source": "05ALG021",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL025",
            "source": "05ALG012",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL026",
            "source": "05ALG015",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL027",
            "source": "05ALG013",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL028",
            "source": "05ALG014",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL029",
            "source": "05ALG016",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL030",
            "source": "05ALG017",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL031",
            "source": "05ALG018",
            "target": "05DS011"
        },
        {
            "type": "操作绑定",
            "ID": "05REL032",
            "source": "05ALG019",
            "target": "05DS011"
        },
        {
            "type": "使用",
            "ID": "05REL033",
            "source": "05ALG012",
            "target": "05DS012"
        },
        {
            "type": "使用",
            "ID": "05REL034",
            "source": "05ALG002",
            "target": "05DS013"
        },
        {
            "type": "使用",
            "ID": "05REL035",
            "source": "05ALG014",
            "target": "05DS013"
        },
        {
            "type": "理论依赖",
            "ID": "05REL036",
            "source": "05DS005",
            "target": "05CON001"
        },
        {
            "type": "理论依赖",
            "ID": "05REL037",
            "source": "05DS005",
            "target": "05CON013"
        },
        {
            "type": "理论依赖",
            "ID": "05REL038",
            "source": "05DS005",
            "target": "05CON014"
        },
        {
            "type": "理论依赖",
            "ID": "05REL039",
            "source": "05DS001",
            "target": "05CON001"
        },
        {
            "type": "理论依赖",
            "ID": "05REL040",
            "source": "05DS001",
            "target": "05CON002"
        },
        {
            "type": "理论依赖",
            "ID": "05REL041",
            "source": "05DS001",
            "target": "05CON003"
        },
        {
            "type": "理论依赖",
            "ID": "05REL042",
            "source": "05DS001",
            "target": "05CON004"
        },
        {
            "type": "理论依赖",
            "ID": "05REL043",
            "source": "05DS001",
            "target": "05CON005"
        },
        {
            "type": "理论依赖",
            "ID": "05REL044",
            "source": "05DS001",
            "target": "05CON006"
        },
        {
            "type": "理论依赖",
            "ID": "05REL045",
            "source": "05DS001",
            "target": "05CON007"
        },
        {
            "type": "理论依赖",
            "ID": "05REL046",
            "source": "05DS001",
            "target": "05CON008"
        },
        {
            "type": "理论依赖",
            "ID": "05REL047",
            "source": "05DS001",
            "target": "05CON009"
        },
        {
            "type": "理论依赖",
            "ID": "05REL048",
            "source": "05DS001",
            "target": "05CON010"
        },
        {
            "type": "理论依赖",
            "ID": "05REL049",
            "source": "05DS001",
            "target": "05CON011"
        },
        {
            "type": "理论依赖",
            "ID": "05REL050",
            "source": "05DS001",
            "target": "05CON012"
        },
        {
            "type": "理论依赖",
            "ID": "05REL051",
            "source": "05DS005",
            "target": "05CON015"
        },
        {
            "type": "理论依赖",
            "ID": "05REL052",
            "source": "05DS005",
            "target": "05CON016"
        },
        {
            "type": "使用",
            "ID": "05REL053",
            "source": "05DS005",
            "target": "05CON017"
        },
        {
            "type": "使用",
            "ID": "05REL054",
            "source": "05DS005",
            "target": "05CON018"
        },
        {
            "type": "使用",
            "ID": "05REL055",
            "source": "05CON018",
            "target": "05DS009"
        },
        {
            "type": "使用",
            "ID": "05REL056",
            "source": "05DS001",
            "target": "05CON017"
        },
        {
            "type": "使用",
            "ID": "05REL057",
            "source": "05DS001",
            "target": "05CON018"
        },
        {
            "type": "使用",
            "ID": "05REL058",
            "source": "05CON018",
            "target": "05CON019"
        },
        {
            "type": "使用",
            "ID": "05REL059",
            "source": "05CON018",
            "target": "05CON020"
        },
        {
            "type": "使用",
            "ID": "05REL060",
            "source": "05CON018",
            "target": "05CON021"
        },
        {
            "type": "继承",
            "ID": "05REL061",
            "source": "05ALG020",
            "target": "05ALG022"
        },
        {
            "type": "继承",
            "ID": "05REL062",
            "source": "05ALG021",
            "target": "05ALG022"
        },
        {
            "type": "继承",
            "ID": "05REL063",
            "source": "05ALG012",
            "target": "05ALG023"
        },
        {
            "type": "理论依赖",
            "ID": "05REL064",
            "source": "05DS004",
            "target": "05DS001"
        },
        {
            "type": "使用",
            "ID": "05REL065",
            "source": "05CON021",
            "target": "05DS005"
        },
        {
            "type": "继承",
            "ID": "05REL066",
            "source": "05ALG009",
            "target": "05ALG022"
        },
        {
            "type": "继承",
            "ID": "05REL067",
            "source": "05ALG010",
            "target": "05ALG022"
        },
        {
            "type": "继承",
            "ID": "05REL068",
            "source": "05ALG011",
            "target": "05ALG022"
        },
        {
            "type": "继承",
            "ID": "06REL001",
            "source": "06DS002",
            "target": "06DS001"
        },
        {
            "type": "继承",
            "ID": "06REL002",
            "source": "06DS003",
            "target": "06DS001"
        },
        {
            "type": "继承",
            "ID": "06REL003",
            "source": "06DS004",
            "target": "06DS001"
        },
        {
            "type": "继承",
            "ID": "06REL004",
            "source": "06DS005",
            "target": "06DS001"
        },
        {
            "type": "继承",
            "ID": "06REL005",
            "source": "06DS006",
            "target": "06DS001"
        },
        {
            "type": "继承",
            "ID": "06REL006",
            "source": "06DS001",
            "target": "06DS007"
        },
        {
            "type": "继承",
            "ID": "06REL007",
            "source": "06DS002",
            "target": "06DS007"
        },
        {
            "type": "继承",
            "ID": "06REL008",
            "source": "06DS003",
            "target": "06DS008"
        },
        {
            "type": "继承",
            "ID": "06REL009",
            "source": "06DS008",
            "target": "06DS007"
        },
        {
            "type": "继承",
            "ID": "06REL010",
            "source": "06DS004",
            "target": "06DS007"
        },
        {
            "type": "变体",
            "ID": "06REL011",
            "source": "06DS005",
            "target": "06DS007"
        },
        {
            "type": "继承",
            "ID": "06REL012",
            "source": "06DS006",
            "target": "06DS002"
        },
        {
            "type": "操作绑定",
            "ID": "06REL013",
            "source": "06ALG002",
            "target": "06DS002"
        },
        {
            "type": "操作绑定",
            "ID": "06REL014",
            "source": "06ALG003",
            "target": "06DS002"
        },
        {
            "type": "操作绑定",
            "ID": "06REL015",
            "source": "06ALG004",
            "target": "06DS002"
        },
        {
            "type": "操作绑定",
            "ID": "06REL016",
            "source": "06ALG005",
            "target": "06DS002"
        },
        {
            "type": "操作绑定",
            "ID": "06REL017",
            "source": "06ALG001",
            "target": "06DS002"
        },
        {
            "type": "操作绑定",
            "ID": "06REL018",
            "source": "06ALG001",
            "target": "06DS007"
        },
        {
            "type": "操作绑定",
            "ID": "06REL019",
            "source": "06ALG006",
            "target": "06DS003"
        },
        {
            "type": "操作绑定",
            "ID": "06REL020",
            "source": "06ALG007",
            "target": "06DS003"
        },
        {
            "type": "操作绑定",
            "ID": "06REL021",
            "source": "06ALG008",
            "target": "06DS004"
        },
        {
            "type": "使用",
            "ID": "06REL022",
            "source": "06ALG009",
            "target": "06DS004"
        },
        {
            "type": "操作绑定",
            "ID": "06REL023",
            "source": "06ALG010",
            "target": "06DS005"
        },
        {
            "type": "操作绑定",
            "ID": "06REL024",
            "source": "06ALG011",
            "target": "06DS005"
        },
        {
            "type": "操作绑定",
            "ID": "06REL025",
            "source": "06ALG012",
            "target": "06DS006"
        },
        {
            "type": "理论依赖",
            "ID": "06REL026",
            "source": "06DS004",
            "target": "06CON005"
        },
        {
            "type": "理论依赖",
            "ID": "06REL027",
            "source": "06CON005",
            "target": "06CON004"
        },
        {
            "type": "理论依赖",
            "ID": "06REL028",
            "source": "06CON004",
            "target": "06CON002"
        },
        {
            "type": "理论依赖",
            "ID": "06REL029",
            "source": "06CON004",
            "target": "06CON003"
        },
        {
            "type": "理论依赖",
            "ID": "06REL030",
            "source": "06CON002",
            "target": "06CON001"
        },
        {
            "type": "理论依赖",
            "ID": "06REL031",
            "source": "06DS005",
            "target": "06CON006"
        },
        {
            "type": "理论依赖",
            "ID": "06REL032",
            "source": "06DS005",
            "target": "06CON007"
        },
        {
            "type": "理论依赖",
            "ID": "06REL033",
            "source": "06DS006",
            "target": "06CON008"
        },
        {
            "type": "理论依赖",
            "ID": "06REL034",
            "source": "06ALG012",
            "target": "06CON009"
        },
        {
            "type": "理论依赖",
            "ID": "06REL035",
            "source": "06CON008",
            "target": "06DS007"
        },
        {
            "type": "理论依赖",
            "ID": "07REL001",
            "source": "07DS001",
            "target": "07CON001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL002",
            "source": "07DS001",
            "target": "07CON002"
        },
        {
            "type": "继承",
            "ID": "07REL003",
            "source": "07DS002",
            "target": "07DS001"
        },
        {
            "type": "继承",
            "ID": "07REL004",
            "source": "07DS003",
            "target": "07DS001"
        },
        {
            "type": "继承",
            "ID": "07REL005",
            "source": "07DS004",
            "target": "07DS001"
        },
        {
            "type": "继承",
            "ID": "07REL006",
            "source": "07CON017",
            "target": "07CON015"
        },
        {
            "type": "继承",
            "ID": "07REL007",
            "source": "07CON018",
            "target": "07CON016"
        },
        {
            "type": "继承",
            "ID": "07REL008",
            "source": "07DS005",
            "target": "07DS003"
        },
        {
            "type": "理论依赖",
            "ID": "07REL009",
            "source": "07CON020",
            "target": "07CON019"
        },
        {
            "type": "理论依赖",
            "ID": "07REL010",
            "source": "07CON020",
            "target": "07CON014"
        },
        {
            "type": "继承",
            "ID": "07REL011",
            "source": "07DS006",
            "target": "07DS002"
        },
        {
            "type": "理论依赖",
            "ID": "07REL012",
            "source": "07CON021",
            "target": "07DS006"
        },
        {
            "type": "理论依赖",
            "ID": "07REL013",
            "source": "07CON021",
            "target": "07CON014"
        },
        {
            "type": "继承",
            "ID": "07REL014",
            "source": "07DS007",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL015",
            "source": "07DS007",
            "target": "07CON022"
        },
        {
            "type": "变体",
            "ID": "07REL016",
            "source": "07DS011",
            "target": "07DS009"
        },
        {
            "type": "变体",
            "ID": "07REL017",
            "source": "07DS012",
            "target": "07DS009"
        },
        {
            "type": "使用",
            "ID": "07REL018",
            "source": "07ALG001",
            "target": "07DS001"
        },
        {
            "type": "使用",
            "ID": "07REL019",
            "source": "07ALG002",
            "target": "07DS001"
        },
        {
            "type": "使用",
            "ID": "07REL022",
            "source": "07ALG001",
            "target": "07DS008"
        },
        {
            "type": "使用",
            "ID": "07REL023",
            "source": "07ALG001",
            "target": "07DS009"
        },
        {
            "type": "使用",
            "ID": "07REL024",
            "source": "07ALG002",
            "target": "07DS008"
        },
        {
            "type": "使用",
            "ID": "07REL025",
            "source": "07ALG002",
            "target": "07DS009"
        },
        {
            "type": "理论依赖",
            "ID": "07REL026",
            "source": "07CON004",
            "target": "07CON001"
        },
        {
            "type": "继承",
            "ID": "07REL027",
            "source": "07CON005",
            "target": "07CON002"
        },
        {
            "type": "继承",
            "ID": "07REL028",
            "source": "07CON006",
            "target": "07CON002"
        },
        {
            "type": "继承",
            "ID": "07REL029",
            "source": "07CON007",
            "target": "07CON001"
        },
        {
            "type": "继承",
            "ID": "07REL030",
            "source": "07CON008",
            "target": "07CON001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL031",
            "source": "07CON009",
            "target": "07CON001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL032",
            "source": "07CON009",
            "target": "07CON002"
        },
        {
            "type": "理论依赖",
            "ID": "07REL033",
            "source": "07CON010",
            "target": "07CON001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL034",
            "source": "07CON010",
            "target": "07CON006"
        },
        {
            "type": "理论依赖",
            "ID": "07REL035",
            "source": "07CON011",
            "target": "07CON001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL036",
            "source": "07CON011",
            "target": "07CON005"
        },
        {
            "type": "理论依赖",
            "ID": "07REL037",
            "source": "07CON012",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL038",
            "source": "07CON013",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL039",
            "source": "07CON014",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL040",
            "source": "07CON015",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL041",
            "source": "07CON016",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL042",
            "source": "07CON019",
            "target": "07DS003"
        },
        {
            "type": "理论依赖",
            "ID": "07REL043",
            "source": "07CON019",
            "target": "07CON015"
        },
        {
            "type": "理论依赖",
            "ID": "07REL044",
            "source": "07CON022",
            "target": "07CON002"
        },
        {
            "type": "理论依赖",
            "ID": "07REL047",
            "source": "07DS008",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL048",
            "source": "07DS009",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL049",
            "source": "07DS010",
            "target": "07DS001"
        },
        {
            "type": "理论依赖",
            "ID": "07REL050",
            "source": "07CON003",
            "target": "07CON002"
        },
        {
            "type": "理论依赖",
            "ID": "07REL051",
            "source": "07CON003",
            "target": "07CON001"
        },
        {
            "type": "操作绑定",
            "ID": "08REL001",
            "source": "08ALG003",
            "target": "08DS002"
        },
        {
            "type": "操作绑定",
            "ID": "08REL002",
            "source": "08ALG004",
            "target": "08DS002"
        },
        {
            "type": "使用",
            "ID": "08REL003",
            "source": "08ALG003",
            "target": "08DS003"
        },
        {
            "type": "使用",
            "ID": "08REL004",
            "source": "08ALG004",
            "target": "08DS004"
        },
        {
            "type": "理论依赖",
            "ID": "08REL005",
            "source": "08ALG004",
            "target": "08CON011"
        },
        {
            "type": "理论依赖",
            "ID": "08REL006",
            "source": "08CON002",
            "target": "08CON003"
        },
        {
            "type": "继承",
            "ID": "08REL007",
            "source": "08CON001",
            "target": "08CON002"
        },
        {
            "type": "理论依赖",
            "ID": "08REL008",
            "source": "08CON001",
            "target": "08DS002"
        },
        {
            "type": "继承",
            "ID": "08REL009",
            "source": "08CON008",
            "target": "08CON002"
        },
        {
            "type": "继承",
            "ID": "08REL010",
            "source": "08CON009",
            "target": "08CON002"
        },
        {
            "type": "理论依赖",
            "ID": "08REL011",
            "source": "08CON008",
            "target": "08ALG001"
        },
        {
            "type": "理论依赖",
            "ID": "08REL012",
            "source": "08CON009",
            "target": "08ALG002"
        },
        {
            "type": "操作绑定",
            "ID": "08REL013",
            "source": "08ALG005",
            "target": "08DS005"
        },
        {
            "type": "使用",
            "ID": "08REL014",
            "source": "08ALG005",
            "target": "08DS003"
        },
        {
            "type": "使用",
            "ID": "08REL015",
            "source": "08ALG005",
            "target": "08DS007"
        },
        {
            "type": "操作绑定",
            "ID": "08REL016",
            "source": "08ALG006",
            "target": "08DS005"
        },
        {
            "type": "使用",
            "ID": "08REL017",
            "source": "08ALG006",
            "target": "08DS003"
        },
        {
            "type": "操作绑定",
            "ID": "08REL018",
            "source": "08ALG007",
            "target": "08DS008"
        },
        {
            "type": "理论依赖",
            "ID": "08REL019",
            "source": "08ALG007",
            "target": "08DS009"
        },
        {
            "type": "使用",
            "ID": "08REL020",
            "source": "08ALG007",
            "target": "08DS010"
        },
        {
            "type": "理论依赖",
            "ID": "08REL021",
            "source": "08ALG007",
            "target": "08CON021"
        },
        {
            "type": "使用",
            "ID": "08REL022",
            "source": "08ALG007",
            "target": "08DS011"
        },
        {
            "type": "理论依赖",
            "ID": "08REL023",
            "source": "08CON020",
            "target": "08ALG007"
        },
        {
            "type": "操作绑定",
            "ID": "08REL024",
            "source": "08ALG008",
            "target": "08DS012"
        },
        {
            "type": "使用",
            "ID": "08REL025",
            "source": "08ALG008",
            "target": "08ALG007"
        },
        {
            "type": "理论依赖",
            "ID": "08REL026",
            "source": "08ALG008",
            "target": "08CON026"
        },
        {
            "type": "理论依赖",
            "ID": "08REL027",
            "source": "08ALG008",
            "target": "08CON028"
        },
        {
            "type": "理论依赖",
            "ID": "08REL028",
            "source": "08ALG008",
            "target": "08CON030"
        },
        {
            "type": "理论依赖",
            "ID": "08REL029",
            "source": "08ALG008",
            "target": "08CON031"
        },
        {
            "type": "理论依赖",
            "ID": "08REL030",
            "source": "08CON031",
            "target": "08CON030"
        },
        {
            "type": "理论依赖",
            "ID": "08REL031",
            "source": "08CON030",
            "target": "08CON027"
        },
        {
            "type": "理论依赖",
            "ID": "08REL032",
            "source": "08CON030",
            "target": "08CON029"
        },
        {
            "type": "理论依赖",
            "ID": "08REL033",
            "source": "08CON027",
            "target": "08CON026"
        },
        {
            "type": "理论依赖",
            "ID": "08REL034",
            "source": "08CON029",
            "target": "08CON028"
        },
        {
            "type": "理论依赖",
            "ID": "08REL035",
            "source": "08CON029",
            "target": "08CON024"
        },
        {
            "type": "理论依赖",
            "ID": "08REL036",
            "source": "08CON026",
            "target": "08CON024"
        },
        {
            "type": "理论依赖",
            "ID": "08REL037",
            "source": "08CON028",
            "target": "08CON024"
        },
        {
            "type": "继承",
            "ID": "08REL038",
            "source": "08DS012",
            "target": "08DS009"
        },
        {
            "type": "继承",
            "ID": "08REL039",
            "source": "08DS008",
            "target": "08DS009"
        },
        {
            "type": "继承",
            "ID": "08REL040",
            "source": "08DS002",
            "target": "08DS005"
        },
        {
            "type": "理论依赖",
            "ID": "08REL041",
            "source": "08DS002",
            "target": "08CON003"
        },
        {
            "type": "继承",
            "ID": "08REL042",
            "source": "08DS005",
            "target": "08DS001"
        },
        {
            "type": "继承",
            "ID": "08REL043",
            "source": "08DS006",
            "target": "08DS001"
        },
        {
            "type": "继承",
            "ID": "08REL044",
            "source": "08DS009",
            "target": "08DS006"
        },
        {
            "type": "使用",
            "ID": "08REL045",
            "source": "08DS003",
            "target": "08DS001"
        },
        {
            "type": "使用",
            "ID": "08REL046",
            "source": "08DS010",
            "target": "08DS001"
        },
        {
            "type": "使用",
            "ID": "08REL047",
            "source": "08DS004",
            "target": "08DS001"
        },
        {
            "type": "理论依赖",
            "ID": "08REL048",
            "source": "08DS001",
            "target": "08CON006"
        },
        {
            "type": "理论依赖",
            "ID": "08REL049",
            "source": "08DS001",
            "target": "08CON007"
        },
        {
            "type": "继承",
            "ID": "08REL050",
            "source": "08CON012",
            "target": "08CON013"
        },
        {
            "type": "理论依赖",
            "ID": "08REL051",
            "source": "08CON012",
            "target": "08CON014"
        },
        {
            "type": "理论依赖",
            "ID": "08REL052",
            "source": "08CON013",
            "target": "08CON006"
        },
        {
            "type": "理论依赖",
            "ID": "08REL053",
            "source": "08CON013",
            "target": "08CON007"
        },
        {
            "type": "理论依赖",
            "ID": "08REL054",
            "source": "08CON014",
            "target": "08CON010"
        },
        {
            "type": "理论依赖",
            "ID": "08REL055",
            "source": "08DS012",
            "target": "08CON017"
        },
        {
            "type": "理论依赖",
            "ID": "08REL056",
            "source": "08DS012",
            "target": "08CON023"
        },
        {
            "type": "理论依赖",
            "ID": "08REL057",
            "source": "08DS008",
            "target": "08CON017"
        }
    ]
}