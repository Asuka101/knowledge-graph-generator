{
  "entities": [
    {
      "type": "数据结构",
      "ID": "08DS001",
      "name": "图",
      "attributes": {
        "难度": "中等",
        "内容": "由顶点集合和边集合组成的数据结构，用于表示对象之间的连接关系。根据边有无方向可分为有向图和无向图，根据边有无权重可分为带权图和无权图。",
        "存储开销": "邻接矩阵O(V^2)，邻接表O(V+E)，其中V是顶点数，E是边数。",
        "核心特性": "表示顶点间的连接性、路径、环路等关系。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON001",
      "name": "最小生成树",
      "attributes": {
        "难度": "中等",
        "内容": "在一个连通网（带权无向图）中，连接所有顶点且边的权值总和最小的生成树。用于解决网络建设中成本最低的问题。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "体现了在满足基本连通需求的前提下，追求资源最优化的思想。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON002",
      "name": "生成树",
      "attributes": {
        "难度": "入门",
        "内容": "连通图的一个子图，包含原图的所有顶点，并且是树（即无回路且连通）。对于有n个顶点的连通图，其生成树恰好有n-1条边，是用最少的边连通所有顶点的极小连通子图。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON003",
      "name": "连通图",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，如果任意两个顶点之间都至少存在一条路径，则称该图为连通图。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON004",
      "name": "子图",
      "attributes": {
        "难度": "入门",
        "内容": "一个图G'=(V', E')是图G=(V, E)的子图，如果V'是V的子集，E'是E的子集，并且E'中的边的端点都在V'中。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON005",
      "name": "回路",
      "attributes": {
        "难度": "入门",
        "内容": "在图中，起点和终点相同的非空路径。在简单图中，通常指除了起点和终点相同外，其他顶点不重复的路径。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON006",
      "name": "顶点",
      "attributes": {
        "难度": "入门",
        "内容": "图的基本组成部分，代表实体或对象。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON007",
      "name": "边",
      "attributes": {
        "难度": "入门",
        "内容": "图的基本组成部分，代表顶点之间的关系或连接。可以有方向（有向边）或无方向（无向边），可以有权重。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG001",
      "name": "深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "图遍历算法。从起点出发，尽可能深地搜索图的分支，直到顶点v的所有边都被探寻过，然后回溯到前一个节点继续探索。",
        "时间复杂度": "O(V+E)（邻接表），O(V^2)（邻接矩阵）",
        "空间复杂度": "O(V)（递归栈或显式栈）",
        "设计思想": "递归、栈",
        "适用场景": "查找路径、检测环、生成深度优先生成树等。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG002",
      "name": "广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "图遍历算法。从起点出发，首先访问其所有邻接点，然后按距离逐层访问更远的节点。",
        "时间复杂度": "O(V+E)（邻接表），O(V^2)（邻接矩阵）",
        "空间复杂度": "O(V)（队列）",
        "设计思想": "队列、层次遍历",
        "适用场景": "查找最短路径（无权图）、生成广度优先生成树等。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON008",
      "name": "深度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过深度优先搜索遍历连通图生成的生成树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON009",
      "name": "广度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过广度优先搜索遍历连通图生成的生成树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS002",
      "name": "连通网",
      "attributes": {
        "难度": "入门",
        "内容": "带权的连通无向图。常用于表示网络、交通系统等，其中边的权值代表成本、距离或时间。",
        "存储开销": "同带权图，取决于表示法。",
        "核心特性": "连通性、带权边。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON010",
      "name": "权",
      "attributes": {
        "难度": "入门",
        "内容": "赋给图的边或顶点的数值，表示成本、距离、容量、时间等度量。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG003",
      "name": "普里姆算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解连通网最小生成树的贪心算法。从一个顶点开始，逐步扩展生成树，每次选择连接已选顶点集和未选顶点集的最短边加入树中，直到包含所有顶点。",
        "时间复杂度": "O(V^2)（使用邻接矩阵），O(E log V)（使用优先队列优化）",
        "空间复杂度": "O(V)（存储辅助信息如到集合外顶点的最短边）",
        "设计思想": "贪心算法",
        "适用场景": "求解稠密图的最小生成树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "逐步最优选择构建全局最优解的策略。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG004",
      "name": "克鲁斯卡尔算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解连通网最小生成树的贪心算法。将所有边按权值从小到大排序，依次选择权值最小的边，若该边连接的两个顶点不属于同一个连通分量（即加入该边不形成回路），则将其加入生成树中，直到包含n-1条边。",
        "时间复杂度": "O(E log E) 或 O(E log V)（主要取决于排序和并查集操作）",
        "空间复杂度": "O(E + V)（存储边和并查集）",
        "设计思想": "贪心算法、并查集",
        "适用场景": "求解稀疏图的最小生成树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "按优先级处理，避免冲突（回路）的策略。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS003",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "表示图的一种存储方式。使用二维数组存储顶点间的邻接关系，A[i][j]=1（或权值）表示顶点i到顶点j有边，否则为0（或无穷大）。",
        "存储开销": "O(V^2)",
        "核心特性": "判断两顶点间是否有边快速（O(1)），适合稠密图。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS004",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "存储图中所有边信息的一种方式。通常用一个结构数组表示，每个结构包含边的两个端点和权值。",
        "存储开销": "O(E)",
        "核心特性": "方便对边进行排序等操作，适合处理与边相关的算法（如Kruskal）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON011",
      "name": "连通分量",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中的极大连通子图。极大意味着不能再添加原图中的任何顶点或边来扩展该子图，同时保持连通性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON012",
      "name": "最短路径",
      "attributes": {
        "难度": "中等",
        "内容": "在图中，连接两个顶点之间长度（或权值总和）最小的路径。长度可以是边的数量（无权图）或边的权值之和（带权图）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "优化路径选择，实现效率或成本最优。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON013",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "图中从一个顶点到另一个顶点所经过的顶点序列（或边序列）。简单路径是指路径中顶点（除起点终点可能相同外）不重复。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON014",
      "name": "路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "路径上所包含的边的数量（对于无权图）或边的权值之和（对于带权图）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS005",
      "name": "带权图",
      "attributes": {
        "难度": "入门",
        "内容": "图中的边被赋予了数值（权值）的图。权值可以代表距离、成本、时间等。",
        "存储开销": "邻接矩阵O(V^2)，邻接表O(V+E)。",
        "核心特性": "边具有量化的属性。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS006",
      "name": "有向图",
      "attributes": {
        "难度": "入门",
        "内容": "图中的边具有方向性，即从一个顶点指向另一个顶点。",
        "存储开销": "邻接矩阵O(V^2)，邻接表O(V+E)。",
        "核心特性": "边表示非对称关系。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON015",
      "name": "源点",
      "attributes": {
        "难度": "入门",
        "内容": "在路径问题或网络流问题中，指定的起始顶点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON016",
      "name": "终点",
      "attributes": {
        "难度": "入门",
        "内容": "在路径问题或网络流问题中，指定的目标顶点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG005",
      "name": "狄克斯特拉算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解带权图中单源最短路径的贪心算法。适用于边权非负的图。维护一个已找到最短路径的顶点集合S，逐步将距离源点最近的顶点加入S，并更新其他顶点的最短距离估计。",
        "时间复杂度": "O(V^2)（简单实现），O(E + V log V)（使用优先队列优化）",
        "空间复杂度": "O(V)（存储距离和路径信息）",
        "设计思想": "贪心算法",
        "适用场景": "计算单个起点到所有其他点的最短路径（边权非负）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "逐步扩展已知最优解的范围来解决全局问题。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG006",
      "name": "弗洛伊德算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解带权图中所有顶点对之间最短路径的动态规划算法。允许图中存在负权边（但不能有负权回路）。通过考虑允许经过的中间顶点逐步放松路径长度。",
        "时间复杂度": "O(V^3)",
        "空间复杂度": "O(V^2)（存储距离矩阵）",
        "设计思想": "动态规划",
        "适用场景": "计算所有顶点对之间的最短路径，尤其适用于稠密图。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "通过迭代优化，逐步逼近全局最优解。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS007",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "一种线性数据结构，每个节点包含数据和指向下一个节点的指针。",
        "存储开销": "O(N)，N为节点数。",
        "核心特性": "动态大小，插入删除（若有前驱指针）高效，随机访问慢。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON017",
      "name": "活动",
      "attributes": {
        "难度": "入门",
        "内容": "在项目管理或工程规划中，代表需要消耗时间或资源的具体任务或子工程。在AOV网中通常由顶点表示，在AOE网中通常由边表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS008",
      "name": "顶点活动网",
      "attributes": {
        "难度": "中等",
        "内容": "一种有向无环图（DAG），用于表示工程或项目中的活动及其依赖关系。图中顶点代表活动，有向边<i, j>代表活动i必须在活动j之前完成。",
        "存储开销": "同有向图。",
        "核心特性": "表示活动间的先后顺序约束，用于拓扑排序。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON018",
      "name": "前驱活动",
      "attributes": {
        "难度": "入门",
        "内容": "在活动网络中，必须在某个活动开始之前完成的活动。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON019",
      "name": "后续活动",
      "attributes": {
        "难度": "入门",
        "内容": "在活动网络中，必须在某个活动完成之后才能开始的活动。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS009",
      "name": "有向无环图",
      "attributes": {
        "难度": "中等",
        "内容": "图中不存在任何有向回路的有向图。常用于表示具有依赖关系或先后顺序的任务、事件等。",
        "存储开销": "同有向图。",
        "核心特性": "无环性，允许进行拓扑排序。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON020",
      "name": "拓扑序列",
      "attributes": {
        "难度": "中等",
        "内容": "有向无环图（DAG）的所有顶点的一种线性排序，使得对于图中任意一条有向边<u, v>，顶点u在该序列中都出现在顶点v之前。一个DAG的拓扑序列可能不唯一。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "规划和安排具有依赖关系任务的合理顺序。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG007",
      "name": "拓扑排序",
      "attributes": {
        "难度": "中等",
        "内容": "生成有向无环图（DAG）拓扑序列的算法。常用的方法是：重复选择一个入度为0的顶点，输出该顶点，并从图中移除该顶点及其所有出边，直到所有顶点都被输出。如果过程中找不到入度为0的顶点，则说明图中存在回路。",
        "时间复杂度": "O(V+E)（使用邻接表）",
        "空间复杂度": "O(V)（存储入度或队列/栈）",
        "设计思想": "基于入度的迭代删除、队列/栈",
        "适用场景": "任务调度、依赖解析、检测有向图中的环。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "解决依赖约束下的有序执行问题。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON021",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，指向某个顶点的边的数量。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON022",
      "name": "出边",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，从某个顶点出发指向其他顶点的边。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS010",
      "name": "邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "表示图的一种存储方式。对图中每个顶点，使用一个链表（或其他动态集合）存储所有与该顶点相邻接的顶点。",
        "存储开销": "O(V+E)",
        "核心特性": "节省空间（尤其对于稀疏图），方便查找顶点的所有邻接点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS011",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "一种后进先出（LIFO）的线性数据结构。只允许在表的一端（栈顶）进行插入（压栈）和删除（弹栈）操作。",
        "存储开销": "O(N)，N为元素数量。",
        "核心特性": "后进先出。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS012",
      "name": "边活动网",
      "attributes": {
        "难度": "中等",
        "内容": "一种带权的、有向无环图（DAG），用于表示工程或项目计划。图中边代表活动，边权代表活动持续时间；顶点代表事件，表示活动的开始或结束。",
        "存储开销": "同带权有向图。",
        "核心特性": "表示活动及其持续时间、事件间的依赖关系，用于关键路径分析。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON023",
      "name": "事件",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，代表项目中某个时间点或里程碑，通常是某些活动的完成和另一些活动的开始。由图中的顶点表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON024",
      "name": "活动持续时间",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，完成某个活动所需的时间。通常作为对应边的权值。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON025",
      "name": "汇点",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网或网络流图中，代表整个工程或流程结束的顶点。通常只有入边，没有出边。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON026",
      "name": "事件最早发生时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，事件（顶点）能够发生的最早时刻。等于从源点到该事件顶点的所有路径中最长路径的长度。通常用ve表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON027",
      "name": "活动最早开始时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，活动（边）能够开始的最早时刻。等于该活动起点事件的最早发生时间。通常用e表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON028",
      "name": "事件最迟发生时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，为了不延误整个工程的完成，事件（顶点）必须发生的最晚时刻。通常用vl表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON029",
      "name": "活动最迟开始时间",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，为了不延误整个工程的完成，活动（边）必须开始的最晚时刻。等于该活动终点事件的最迟发生时间减去该活动的持续时间。通常用l表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "08CON030",
      "name": "关键活动",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，最早开始时间和最迟开始时间相等的活动。这些活动没有任何时间余量（浮动时间），它们的延迟会直接导致整个工程的延期。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "识别项目瓶颈，重点管理对象。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON031",
      "name": "关键路径",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，从源点到汇点的路径，该路径上所有活动都是关键活动。关键路径的长度决定了整个工程的最短完成时间。可能存在多条关键路径。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "项目管理的核心，决定项目总工期。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG008",
      "name": "关键路径算法",
      "attributes": {
        "难度": "高级",
        "内容": "用于确定AOE网中关键路径和关键活动的算法。通常包括：计算所有事件的最早发生时间（正向拓扑排序），计算所有事件的最迟发生时间（逆向拓扑排序），计算所有活动的最早和最迟开始时间，找出关键活动和关键路径。",
        "时间复杂度": "O(V+E)",
        "空间复杂度": "O(V+E)",
        "设计思想": "拓扑排序、动态规划思想",
        "适用场景": "项目管理、工程调度、工期估算。",
        "教学视频": "未知",
        "教学材料": "未知",
        "思政点": "系统化分析和优化复杂流程的方法。"
      }
    }
  ],
  "relations": [
    {
      "type": "操作绑定",
      "ID": "08REL001",
      "source": "08ALG003",
      "target": "08DS002"
    },
    {
      "type": "操作绑定",
      "ID": "08REL002",
      "source": "08ALG004",
      "target": "08DS002"
    },
    {
      "type": "使用",
      "ID": "08REL003",
      "source": "08ALG003",
      "target": "08DS003"
    },
    {
      "type": "使用",
      "ID": "08REL004",
      "source": "08ALG004",
      "target": "08DS004"
    },
    {
      "type": "理论依赖",
      "ID": "08REL005",
      "source": "08ALG004",
      "target": "08CON011"
    },
    {
      "type": "理论依赖",
      "ID": "08REL006",
      "source": "08CON002",
      "target": "08CON003"
    },
    {
      "type": "继承",
      "ID": "08REL007",
      "source": "08CON001",
      "target": "08CON002"
    },
    {
      "type": "理论依赖",
      "ID": "08REL008",
      "source": "08CON001",
      "target": "08DS002"
    },
    {
      "type": "继承",
      "ID": "08REL009",
      "source": "08CON008",
      "target": "08CON002"
    },
    {
      "type": "继承",
      "ID": "08REL010",
      "source": "08CON009",
      "target": "08CON002"
    },
    {
      "type": "理论依赖",
      "ID": "08REL011",
      "source": "08CON008",
      "target": "08ALG001"
    },
    {
      "type": "理论依赖",
      "ID": "08REL012",
      "source": "08CON009",
      "target": "08ALG002"
    },
    {
      "type": "操作绑定",
      "ID": "08REL013",
      "source": "08ALG005",
      "target": "08DS005"
    },
    {
      "type": "使用",
      "ID": "08REL014",
      "source": "08ALG005",
      "target": "08DS003"
    },
    {
      "type": "使用",
      "ID": "08REL015",
      "source": "08ALG005",
      "target": "08DS007"
    },
    {
      "type": "操作绑定",
      "ID": "08REL016",
      "source": "08ALG006",
      "target": "08DS005"
    },
    {
      "type": "使用",
      "ID": "08REL017",
      "source": "08ALG006",
      "target": "08DS003"
    },
    {
      "type": "操作绑定",
      "ID": "08REL018",
      "source": "08ALG007",
      "target": "08DS008"
    },
    {
      "type": "理论依赖",
      "ID": "08REL019",
      "source": "08ALG007",
      "target": "08DS009"
    },
    {
      "type": "使用",
      "ID": "08REL020",
      "source": "08ALG007",
      "target": "08DS010"
    },
    {
      "type": "理论依赖",
      "ID": "08REL021",
      "source": "08ALG007",
      "target": "08CON021"
    },
    {
      "type": "使用",
      "ID": "08REL022",
      "source": "08ALG007",
      "target": "08DS011"
    },
    {
      "type": "理论依赖",
      "ID": "08REL023",
      "source": "08CON020",
      "target": "08ALG007"
    },
    {
      "type": "操作绑定",
      "ID": "08REL024",
      "source": "08ALG008",
      "target": "08DS012"
    },
    {
      "type": "使用",
      "ID": "08REL025",
      "source": "08ALG008",
      "target": "08ALG007"
    },
    {
      "type": "理论依赖",
      "ID": "08REL026",
      "source": "08ALG008",
      "target": "08CON026"
    },
    {
      "type": "理论依赖",
      "ID": "08REL027",
      "source": "08ALG008",
      "target": "08CON028"
    },
    {
      "type": "理论依赖",
      "ID": "08REL028",
      "source": "08ALG008",
      "target": "08CON030"
    },
    {
      "type": "理论依赖",
      "ID": "08REL029",
      "source": "08ALG008",
      "target": "08CON031"
    },
    {
      "type": "理论依赖",
      "ID": "08REL030",
      "source": "08CON031",
      "target": "08CON030"
    },
    {
      "type": "理论依赖",
      "ID": "08REL031",
      "source": "08CON030",
      "target": "08CON027"
    },
    {
      "type": "理论依赖",
      "ID": "08REL032",
      "source": "08CON030",
      "target": "08CON029"
    },
    {
      "type": "理论依赖",
      "ID": "08REL033",
      "source": "08CON027",
      "target": "08CON026"
    },
    {
      "type": "理论依赖",
      "ID": "08REL034",
      "source": "08CON029",
      "target": "08CON028"
    },
    {
      "type": "理论依赖",
      "ID": "08REL035",
      "source": "08CON029",
      "target": "08CON024"
    },
    {
      "type": "理论依赖",
      "ID": "08REL036",
      "source": "08CON026",
      "target": "08CON024"
    },
    {
      "type": "理论依赖",
      "ID": "08REL037",
      "source": "08CON028",
      "target": "08CON024"
    },
    {
      "type": "继承",
      "ID": "08REL038",
      "source": "08DS012",
      "target": "08DS009"
    },
    {
      "type": "继承",
      "ID": "08REL039",
      "source": "08DS008",
      "target": "08DS009"
    },
    {
      "type": "继承",
      "ID": "08REL040",
      "source": "08DS002",
      "target": "08DS005"
    },
    {
      "type": "理论依赖",
      "ID": "08REL041",
      "source": "08DS002",
      "target": "08CON003"
    },
    {
      "type": "继承",
      "ID": "08REL042",
      "source": "08DS005",
      "target": "08DS001"
    },
    {
      "type": "继承",
      "ID": "08REL043",
      "source": "08DS006",
      "target": "08DS001"
    },
    {
      "type": "继承",
      "ID": "08REL044",
      "source": "08DS009",
      "target": "08DS006"
    },
    {
      "type": "使用",
      "ID": "08REL045",
      "source": "08DS003",
      "target": "08DS001"
    },
    {
      "type": "使用",
      "ID": "08REL046",
      "source": "08DS010",
      "target": "08DS001"
    },
    {
      "type": "使用",
      "ID": "08REL047",
      "source": "08DS004",
      "target": "08DS001"
    },
    {
      "type": "理论依赖",
      "ID": "08REL048",
      "source": "08DS001",
      "target": "08CON006"
    },
    {
      "type": "理论依赖",
      "ID": "08REL049",
      "source": "08DS001",
      "target": "08CON007"
    },
    {
      "type": "继承",
      "ID": "08REL050",
      "source": "08CON012",
      "target": "08CON013"
    },
    {
      "type": "理论依赖",
      "ID": "08REL051",
      "source": "08CON012",
      "target": "08CON014"
    },
    {
      "type": "理论依赖",
      "ID": "08REL052",
      "source": "08CON013",
      "target": "08CON006"
    },
    {
      "type": "理论依赖",
      "ID": "08REL053",
      "source": "08CON013",
      "target": "08CON007"
    },
    {
      "type": "理论依赖",
      "ID": "08REL054",
      "source": "08CON014",
      "target": "08CON010"
    },
    {
      "type": "理论依赖",
      "ID": "08REL055",
      "source": "08DS012",
      "target": "08CON017"
    },
    {
      "type": "理论依赖",
      "ID": "08REL056",
      "source": "08DS012",
      "target": "08CON023"
    },
    {
      "type": "理论依赖",
      "ID": "08REL057",
      "source": "08DS008",
      "target": "08CON017"
    }
  ]
}