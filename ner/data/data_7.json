{
  "entities": [
    {
      "type": "数据结构",
      "ID": "07DS001",
      "name": "图",
      "attributes": {
        "难度": "入门",
        "内容": "图型结构的简称，一种复杂的非线性数据结构。由顶点集合V和边集合E组成，V是顶点集，E是顶点间关系的集合（序偶或无序对）。允许顶点有任意多个前驱和后继。包含线性表和树作为特例。",
        "存储开销": "依赖于具体存储结构（邻接矩阵、邻接表、边集数组）",
        "核心特性": "非线性结构，顶点关系复杂"
      }
    },
    {
      "type": "概念",
      "ID": "07CON001",
      "name": "顶点",
      "attributes": {
        "难度": "入门",
        "内容": "图的基本组成元素，代表实体。在图中通常用序号或值表示。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON002",
      "name": "边",
      "attributes": {
        "难度": "入门",
        "内容": "连接图中两个顶点的关系，可以是有向的（序偶）或无向的（无序对）。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS002",
      "name": "有向图",
      "attributes": {
        "难度": "入门",
        "内容": "边集E中所有边都是有向边（序偶）的图。",
        "存储开销": "依赖具体存储结构",
        "核心特性": "边具有方向性"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS003",
      "name": "无向图",
      "attributes": {
        "难度": "入门",
        "内容": "边集E中所有边都是无向边（无序对）的图。",
        "存储开销": "依赖具体存储结构",
        "核心特性": "边无方向性"
      }
    },
    {
      "type": "概念",
      "ID": "07CON003",
      "name": "端点",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中一条边的两个顶点。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON004",
      "name": "邻接点",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，若存在边(u,v)，则u和v互为邻接点。在有向图中，若存在边<u,v>，则称v是u的出边邻接点，u是v的入边邻接点。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON005",
      "name": "出边",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中从顶点v出发的边。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON006",
      "name": "入边",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中指向顶点v的边。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON007",
      "name": "起点",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中一条边的起始顶点（Tail）。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON008",
      "name": "终点",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中一条边的终止顶点（Head）。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON009",
      "name": "度",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中与顶点v相关联的边的数目。有向图中顶点的度等于其入度和出度之和。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON010",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中指向顶点v的边的数目。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON011",
      "name": "出度",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中从顶点v出发的边的数目。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON012",
      "name": "完全图",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中任意两顶点间都存在边，或有向图中任意两顶点间都存在方向相反的两条边的图。n个顶点的无向完全图有n(n-1)/2条边，有向完全图有n(n-1)条边。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON013",
      "name": "稠密图",
      "attributes": {
        "难度": "入门",
        "内容": "边数接近完全图边数的图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON014",
      "name": "稀疏图",
      "attributes": {
        "难度": "入门",
        "内容": "边数远少于完全图边数，通常与顶点数同数量级的图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON015",
      "name": "子图",
      "attributes": {
        "难度": "入门",
        "内容": "设有两个图G=(V,E)和G'=(V',E')，若V'是V的子集且E'是E的子集（且E'中的边关联的顶点都在V'中），则称G'是G的子图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON016",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "从顶点vi到顶点vj的一个顶点序列 P = (vi=v0, v1, ..., vk=vj)，其中相邻顶点间存在边。路径长度是路径上边的数目k。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON017",
      "name": "回路",
      "attributes": {
        "难度": "入门",
        "内容": "路径的起点和终点相同的路径，也称为环。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON018",
      "name": "简单路径",
      "attributes": {
        "难度": "入门",
        "内容": "路径序列中顶点不重复出现的路径。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON019",
      "name": "简单回路",
      "attributes": {
        "难度": "入门",
        "内容": "除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON020",
      "name": "连通",
      "attributes": {
        "难度": "入门",
        "内容": "在无向图中，若从顶点u到顶点v有路径，则称u和v是连通的。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON021",
      "name": "连通图",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中任意两个顶点都是连通的图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON022",
      "name": "非连通图",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中存在不连通的顶点对的图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON023",
      "name": "连通分量",
      "attributes": {
        "难度": "入门",
        "内容": "无向图的极大连通子图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON024",
      "name": "强连通图",
      "attributes": {
        "难度": "入门",
        "内容": "有向图中任意两个顶点vi和vj，都存在从vi到vj和从vj到vi的路径。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON025",
      "name": "强连通分量",
      "attributes": {
        "难度": "入门",
        "内容": "有向图的极大强连通子图。"
      }
    },
    {
      "type": "概念",
      "ID": "07CON026",
      "name": "权",
      "attributes": {
        "难度": "入门",
        "内容": "图中每条边可以标上具有某种含义的数值（通常为非负实数），称为该边的权。"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS004",
      "name": "网",
      "attributes": {
        "难度": "入门",
        "内容": "边上带有权的图，也称作带权图。",
        "存储开销": "依赖具体存储结构",
        "核心特性": "边具有权值"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG001",
      "name": "初始化图",
      "attributes": {
        "难度": "入门",
        "内容": "初始化图的存储空间。",
        "时间复杂度": "依赖存储结构",
        "空间复杂度": "依赖存储结构",
        "设计思想": "基本操作",
        "适用场景": "创建图实例前"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG002",
      "name": "建立图",
      "attributes": {
        "难度": "入门",
        "内容": "根据图的顶点集和边集建立图的存储结构。",
        "时间复杂度": "依赖存储结构和输入",
        "空间复杂度": "依赖存储结构",
        "设计思想": "基本操作",
        "适用场景": "从数据构建图"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG003",
      "name": "遍历图",
      "attributes": {
        "难度": "中等",
        "内容": "按照一定次序从指定顶点出发访问图中所有可达顶点，且每个顶点仅访问一次。常用方法有深度优先搜索和广度优先搜索。",
        "时间复杂度": "O(n+e)或O(n^2)",
        "空间复杂度": "O(n)或O(n^2)",
        "设计思想": "搜索",
        "适用场景": "访问图的所有节点"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG004",
      "name": "查找图",
      "attributes": {
        "难度": "入门",
        "内容": "从图中查找给定值的顶点或查找边。",
        "时间复杂度": "依赖存储结构",
        "空间复杂度": "O(1)",
        "设计思想": "搜索",
        "适用场景": "定位图元素"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG005",
      "name": "输出图",
      "attributes": {
        "难度": "入门",
        "内容": "按照图的一种表示方法（如邻接矩阵、邻接表、二元组）输出一个图。",
        "时间复杂度": "依赖存储结构",
        "空间复杂度": "O(1) (不计输出)",
        "设计思想": "基本操作",
        "适用场景": "展示图结构"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG006",
      "name": "清除图",
      "attributes": {
        "难度": "入门",
        "内容": "清除图中动态分配的存储空间。",
        "时间复杂度": "依赖存储结构",
        "空间复杂度": "O(1)",
        "设计思想": "内存管理",
        "适用场景": "销毁图实例"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG007",
      "name": "求最小生成树",
      "attributes": {
        "难度": "中等",
        "内容": "在连通带权无向图中找出一个极小连通子图，包含图中全部顶点，且所有边的权值之和最小。",
        "时间复杂度": "常见有O(elogv)或O(e+vlogv)",
        "空间复杂度": "O(e+v)",
        "设计思想": "贪心",
        "适用场景": "网络建设、成本优化"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG008",
      "name": "求最短路径",
      "attributes": {
        "难度": "中等",
        "内容": "求图中两个顶点之间（或一个顶点到其他所有顶点）的路径长度最短的路径。",
        "时间复杂度": "依赖算法（如Dijkstra, Bellman-Ford, Floyd-Warshall）",
        "空间复杂度": "依赖算法",
        "设计思想": "贪心、动态规划",
        "适用场景": "路由、导航"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG009",
      "name": "求拓扑排序",
      "attributes": {
        "难度": "中等",
        "内容": "对有向无环图（DAG）的所有顶点进行线性排序，使得图中任意一条有向边<u,v>，u在线性序列中都出现在v之前。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n+e)",
        "设计思想": "DFS、Kahn算法",
        "适用场景": "任务调度、依赖分析"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG010",
      "name": "求关键路径",
      "attributes": {
        "难度": "高级",
        "内容": "在带权有向图（通常是表示工程的AOE网）中，找到从源点到汇点的最长路径，该路径决定了工程的最短完成时间。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n+e)",
        "设计思想": "拓扑排序、动态规划",
        "适用场景": "项目管理、进度优化"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS005",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "用一个n阶方阵A表示n个顶点的图，A[i][j]=1（或权值）表示存在边(i,j)或<i,j>，否则为0（或无穷大）。无向图的邻接矩阵是对称的。",
        "存储开销": "O(n^2)",
        "核心特性": "随机访问边(O(1))，空间固定"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG011",
      "name": "初始化邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "将邻接矩阵所有元素初始化为0（或无穷大）。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建邻接矩阵前"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG012",
      "name": "由边集生成邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "根据输入的边集填充邻接矩阵。",
        "时间复杂度": "O(n+e) 或 O(e) (取决于输入格式处理)",
        "空间复杂度": "O(1)",
        "设计思想": "数据转换",
        "适用场景": "从边列表构建邻接矩阵表示"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG013",
      "name": "输出邻接矩阵表示的图",
      "attributes": {
        "难度": "入门",
        "内容": "输出顶点集和基于邻接矩阵的边集信息。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1) (不计输出)",
        "设计思想": "遍历矩阵",
        "适用场景": "展示邻接矩阵内容"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS006",
      "name": "邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "为图中每个顶点建立一个单链表，存储其所有邻接点。用一个数组存储这些链表的头指针。",
        "存储开销": "O(n+e)",
        "核心特性": "空间高效（稀疏图），顶点邻接点查找高效"
      }
    },
    {
      "type": "概念",
      "ID": "07CON027",
      "name": "边结点",
      "attributes": {
        "难度": "入门",
        "内容": "邻接表中链表的结点，通常包含邻接点序号、边权（可选）和指向下一个边结点的指针。"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG014",
      "name": "初始化邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "初始化邻接表的表头指针数组，通常设为NULL。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建邻接表前"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG015",
      "name": "由边集生成邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "根据输入的边集构建每个顶点的邻接链表。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(e)",
        "设计思想": "数据转换，链表插入",
        "适用场景": "从边列表构建邻接表表示"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG016",
      "name": "输出邻接表表示的图",
      "attributes": {
        "难度": "入门",
        "内容": "遍历邻接表，输出顶点集和边集信息。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(1) (不计输出)",
        "设计思想": "遍历数组和链表",
        "适用场景": "展示邻接表内容"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS008",
      "name": "逆邻接表",
      "attributes": {
        "难度": "中等",
        "内容": "与邻接表类似，但每个顶点的链表存储的是所有指向该顶点的入边（或入边邻接点）信息。",
        "存储开销": "O(n+e)",
        "核心特性": "入度、入边邻接点查找高效"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS009",
      "name": "十字邻接表",
      "attributes": {
        "难度": "中等",
        "内容": "一种用于有向图的邻接表变体。边结点包含起点、终点、权值、指向同起点的下一条出边结点的指针、指向同终点的下一条入边结点的指针。表头数组包含每个顶点的第一条入边和第一条出边指针。",
        "存储开销": "O(n+e)",
        "核心特性": "出度和入度、出边和入边邻接点查找均方便"
      }
    },
    {
      "type": "数据结构",
      "ID": "07DS007",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "使用一个数组存储图中所有的边，每条边通常记录起点、终点和权值（可选）。",
        "存储开销": "O(e)",
        "核心特性": "结构简单，适合对边操作的算法"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG017",
      "name": "初始化边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "初始化边集数组的空间或相关计数器。",
        "时间复杂度": "O(1) 或 O(e)（如果需要清空）",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建边集数组前"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG018",
      "name": "由边集生成边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "将输入的边信息填充到边集数组中。",
        "时间复杂度": "O(e)",
        "空间复杂度": "O(1)",
        "设计思想": "数据转换",
        "适用场景": "从边列表构建边集数组表示"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG019",
      "name": "输出边集数组表示的图",
      "attributes": {
        "难度": "入门",
        "内容": "遍历边集数组，输出顶点集和边集信息。",
        "时间复杂度": "O(e)",
        "空间复杂度": "O(1) (不计输出)",
        "设计思想": "遍历数组",
        "适用场景": "展示边集数组内容"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG020",
      "name": "深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "一种图遍历算法。从初始点出发，尽可能深地访问图的分支，访问顶点并标记，然后递归访问其未访问的邻接点，直到当前路径结束再回溯。",
        "时间复杂度": "邻接矩阵O(n^2)，邻接表O(n+e)",
        "空间复杂度": "O(n) (递归栈或显式栈)",
        "设计思想": "递归、回溯、栈",
        "适用场景": "查找路径、连通性判断、拓扑排序"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG021",
      "name": "邻接矩阵深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "使用邻接矩阵实现的深度优先搜索算法。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(n)",
        "设计思想": "DFS",
        "适用场景": "稠密图的DFS遍历"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG022",
      "name": "邻接表深度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "使用邻接表实现的深度优先搜索算法。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n)",
        "设计思想": "DFS",
        "适用场景": "稀疏图的DFS遍历"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG023",
      "name": "广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "一种图遍历算法。从初始点出发，逐层访问顶点。先访问初始点，然后访问其所有未访问邻接点，再访问这些邻接点的未访问邻接点，以此类推。通常使用队列实现。",
        "时间复杂度": "邻接矩阵O(n^2)，邻接表O(n+e)",
        "空间复杂度": "O(n) (队列)",
        "设计思想": "迭代、队列",
        "适用场景": "查找最短路径（无权图）、层序遍历"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG024",
      "name": "邻接矩阵广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "使用邻接矩阵实现的广度优先搜索算法。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(n)",
        "设计思想": "BFS",
        "适用场景": "稠密图的BFS遍历"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG025",
      "name": "邻接表广度优先搜索",
      "attributes": {
        "难度": "中等",
        "内容": "使用邻接表实现的广度优先搜索算法。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n)",
        "设计思想": "BFS",
        "适用场景": "稀疏图的BFS遍历"
      }
    },
    {
      "type": "算法",
      "ID": "07ALG026",
      "name": "非连通图遍历算法",
      "attributes": {
        "难度": "中等",
        "内容": "确保访问图中所有顶点的遍历策略。对图中每个顶点检查是否已访问，若未访问，则以此顶点为起点执行一次完整的遍历（DFS或BFS）。",
        "时间复杂度": "等同于所用遍历算法（DFS/BFS）的总复杂度",
        "空间复杂度": "等同于所用遍历算法（DFS/BFS）的总复杂度",
        "设计思想": "迭代调用基础遍历",
        "适用场景": "处理可能非连通的图，查找连通分量"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "关系ID": "07REL001",
      "source": "07DS001",
      "target": "07CON001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL002",
      "source": "07DS001",
      "target": "07CON002",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL003",
      "source": "07DS001",
      "target": "07DS002",
      "attributes": {
        "父类 ID": "07DS001",
        "子类 ID": "07DS002",
        "约束条件": "边具有方向性"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL004",
      "source": "07DS001",
      "target": "07DS003",
      "attributes": {
        "父类 ID": "07DS001",
        "子类 ID": "07DS003",
        "约束条件": "边无方向性"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL005",
      "source": "07DS003",
      "target": "07CON003",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL006",
      "source": "07DS003",
      "target": "07CON004",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL007",
      "source": "07DS002",
      "target": "07CON004",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL008",
      "source": "07DS002",
      "target": "07CON005",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL009",
      "source": "07DS002",
      "target": "07CON006",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL010",
      "source": "07DS002",
      "target": "07CON007",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL011",
      "source": "07DS002",
      "target": "07CON008",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL012",
      "source": "07DS003",
      "target": "07CON009",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL013",
      "source": "07DS002",
      "target": "07CON009",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL014",
      "source": "07DS002",
      "target": "07CON010",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL015",
      "source": "07DS002",
      "target": "07CON011",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL016",
      "source": "07CON009",
      "target": "07CON010",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL017",
      "source": "07CON009",
      "target": "07CON011",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL018",
      "source": "07DS001",
      "target": "07CON012",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL019",
      "source": "07DS001",
      "target": "07CON013",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL020",
      "source": "07DS001",
      "target": "07CON014",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL021",
      "source": "07DS001",
      "target": "07CON015",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL022",
      "source": "07DS001",
      "target": "07CON016",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL023",
      "source": "07DS001",
      "target": "07CON017",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL024",
      "source": "07CON016",
      "target": "07CON018",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL025",
      "source": "07CON017",
      "target": "07CON019",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL026",
      "source": "07DS003",
      "target": "07CON020",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL027",
      "source": "07DS003",
      "target": "07CON021",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL028",
      "source": "07DS003",
      "target": "07CON022",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL029",
      "source": "07DS003",
      "target": "07CON023",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL030",
      "source": "07CON023",
      "target": "07CON015",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL031",
      "source": "07DS002",
      "target": "07CON024",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL032",
      "source": "07DS002",
      "target": "07CON025",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL033",
      "source": "07CON025",
      "target": "07CON015",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL034",
      "source": "07DS004",
      "target": "07CON026",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL035",
      "source": "07DS001",
      "target": "07DS004",
      "attributes": {
        "父类 ID": "07DS001",
        "子类 ID": "07DS004",
        "约束条件": "边具有权值"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL036",
      "source": "07ALG001",
      "target": "07DS001",
      "attributes": {
        "算法 ID": "07ALG001",
        "数据结构 ID": "07DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL037",
      "source": "07ALG002",
      "target": "07DS001",
      "attributes": {
        "算法 ID": "07ALG002",
        "数据结构 ID": "07DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL038",
      "source": "07ALG003",
      "target": "07DS001",
      "attributes": {
        "算法 ID": "07ALG003",
        "数据结构 ID": "07DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL039",
      "source": "07ALG004",
      "target": "07DS001",
      "attributes": {
        "算法 ID": "07ALG004",
        "数据结构 ID": "07DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL040",
      "source": "07ALG005",
      "target": "07DS001",
      "attributes": {
        "算法 ID": "07ALG005",
        "数据结构 ID": "07DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL041",
      "source": "07ALG006",
      "target": "07DS001",
      "attributes": {
        "算法 ID": "07ALG006",
        "数据结构 ID": "07DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL042",
      "source": "07ALG007",
      "target": "07DS004",
      "attributes": {
        "算法 ID": "07ALG007",
        "数据结构 ID": "07DS004",
        "必需性": "否"
      }
    },
        {
      "type": "操作绑定",
      "关系ID": "07REL043",
      "source": "07ALG008",
      "target": "07DS004",
      "attributes": {
        "算法 ID": "07ALG008",
        "数据结构 ID": "07DS004",
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL044",
      "source": "07ALG009",
      "target": "07DS002",
      "attributes": {
        "算法 ID": "07ALG009",
        "数据结构 ID": "07DS002",
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL045",
      "source": "07ALG010",
      "target": "07DS004",
      "attributes": {
        "算法 ID": "07ALG010",
        "数据结构 ID": "07DS004",
        "必需性": "否"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL046",
      "source": "07DS001",
      "target": "07DS005",
      "attributes": {
        "使用方ID": "07DS001",
        "被使用的数据结构 ID": "07DS005",
        "使用角色": "存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL047",
      "source": "07DS001",
      "target": "07DS006",
      "attributes": {
        "使用方ID": "07DS001",
        "被使用的数据结构 ID": "07DS006",
        "使用角色": "存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL048",
      "source": "07DS001",
      "target": "07DS007",
      "attributes": {
        "使用方ID": "07DS001",
        "被使用的数据结构 ID": "07DS007",
        "使用角色": "存储实现"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL049",
      "source": "07ALG011",
      "target": "07DS005",
      "attributes": {
        "算法 ID": "07ALG011",
        "数据结构 ID": "07DS005",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL050",
      "source": "07ALG012",
      "target": "07DS005",
      "attributes": {
        "算法 ID": "07ALG012",
        "数据结构 ID": "07DS005",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL051",
      "source": "07ALG013",
      "target": "07DS005",
      "attributes": {
        "算法 ID": "07ALG013",
        "数据结构 ID": "07DS005",
        "必需性": "是"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL052",
      "source": "07DS006",
      "target": "07CON027",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL053",
      "source": "07ALG014",
      "target": "07DS006",
      "attributes": {
        "算法 ID": "07ALG014",
        "数据结构 ID": "07DS006",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL054",
      "source": "07ALG015",
      "target": "07DS006",
      "attributes": {
        "算法 ID": "07ALG015",
        "数据结构 ID": "07DS006",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL055",
      "source": "07ALG016",
      "target": "07DS006",
      "attributes": {
        "算法 ID": "07ALG016",
        "数据结构 ID": "07DS006",
        "必需性": "是"
      }
    },
    {
      "type": "变体",
      "关系ID": "07REL056",
      "source": "07DS006",
      "target": "07DS008",
      "attributes": {
        "基础 ID": "07DS006",
        "变体 ID": "07DS008",
        "变体类型": "存储入边信息"
      }
    },
    {
      "type": "变体",
      "关系ID": "07REL057",
      "source": "07DS006",
      "target": "07DS009",
      "attributes": {
        "基础 ID": "07DS006",
        "变体 ID": "07DS009",
        "变体类型": "存储出入边信息(有向图)"
      }
    },
        {
      "type": "操作绑定",
      "关系ID": "07REL058",
      "source": "07ALG017",
      "target": "07DS007",
      "attributes": {
        "算法 ID": "07ALG017",
        "数据结构 ID": "07DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL059",
      "source": "07ALG018",
      "target": "07DS007",
      "attributes": {
        "算法 ID": "07ALG018",
        "数据结构 ID": "07DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "07REL060",
      "source": "07ALG019",
      "target": "07DS007",
      "attributes": {
        "算法 ID": "07ALG019",
        "数据结构 ID": "07DS007",
        "必需性": "是"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL061",
      "source": "07ALG003",
      "target": "07ALG020",
      "attributes": {
        "父类 ID": "07ALG003",
        "子类 ID": "07ALG020",
        "约束条件": "使用深度优先策略"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL062",
      "source": "07ALG020",
      "target": "07ALG021",
      "attributes": {
        "父类 ID": "07ALG020",
        "子类 ID": "07ALG021",
        "约束条件": "基于邻接矩阵实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL063",
      "source": "07ALG021",
      "target": "07DS005",
      "attributes": {
        "使用方ID": "07ALG021",
        "被使用的数据结构 ID": "07DS005",
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL064",
      "source": "07ALG020",
      "target": "07ALG022",
      "attributes": {
        "父类 ID": "07ALG020",
        "子类 ID": "07ALG022",
        "约束条件": "基于邻接表实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL065",
      "source": "07ALG022",
      "target": "07DS006",
      "attributes": {
        "使用方ID": "07ALG022",
        "被使用的数据结构 ID": "07DS006",
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL066",
      "source": "07ALG003",
      "target": "07ALG023",
      "attributes": {
        "父类 ID": "07ALG003",
        "子类 ID": "07ALG023",
        "约束条件": "使用广度优先策略"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL067",
      "source": "07ALG023",
      "target": "07ALG024",
      "attributes": {
        "父类 ID": "07ALG023",
        "子类 ID": "07ALG024",
        "约束条件": "基于邻接矩阵实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL068",
      "source": "07ALG024",
      "target": "07DS005",
      "attributes": {
        "使用方ID": "07ALG024",
        "被使用的数据结构 ID": "07DS005",
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "继承",
      "关系ID": "07REL069",
      "source": "07ALG023",
      "target": "07ALG025",
      "attributes": {
        "父类 ID": "07ALG023",
        "子类 ID": "07ALG025",
        "约束条件": "基于邻接表实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL070",
      "source": "07ALG025",
      "target": "07DS006",
      "attributes": {
        "使用方ID": "07ALG025",
        "被使用的数据结构 ID": "07DS006",
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL071",
      "source": "07ALG026",
      "target": "07ALG020",
      "attributes": {
        "使用方ID": "07ALG026",
        "被使用的算法 ID": "07ALG020",
        "使用角色": "组件算法"
      }
    },
    {
      "type": "使用",
      "关系ID": "07REL072",
      "source": "07ALG026",
      "target": "07ALG023",
      "attributes": {
        "使用方ID": "07ALG026",
        "被使用的算法 ID": "07ALG023",
        "使用角色": "组件算法"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL073",
      "source": "07ALG026",
      "target": "07CON022",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "07REL074",
      "source": "07ALG026",
      "target": "07CON023",
      "attributes": {
        "依赖强度": "强"
      }
    }
  ]
}