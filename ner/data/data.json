{
    "entities": [
        {
            "type": "概念",
            "ID": "01CON001",
            "name": "数据",
            "attributes": {
                "难度": "入门",
                "内容": "对现实世界事物及其活动所做的便于书写、记忆和交流的符号记录。在计算机中需编码为二进制形式。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON002",
            "name": "数据元素",
            "attributes": {
                "难度": "入门",
                "内容": "数据整体中相对独立的单位。与'数据'有时不严格区分。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON003",
            "name": "数据记录",
            "attributes": {
                "难度": "入门",
                "内容": "数据处理领域组织数据的基本单位，由一个或多个数据项组成。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON004",
            "name": "数据项",
            "attributes": {
                "难度": "入门",
                "内容": "组成数据记录的部分，可以是简单数据项（不可再分）或组合数据项。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON005",
            "name": "关键数据项",
            "attributes": {
                "难度": "入门",
                "内容": "其值能唯一标识一个记录的数据项。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON006",
            "name": "关键字",
            "attributes": {
                "难度": "入门",
                "内容": "关键数据项中的具体值，用于唯一标识记录。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON007",
            "name": "数据处理",
            "attributes": {
                "难度": "入门",
                "内容": "利用计算机对数据进行存储、检索、插入、删除、合并、拆分、排序、统计、计算、转换、输入、输出等处理过程。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON008",
            "name": "逻辑结构",
            "attributes": {
                "难度": "入门",
                "内容": "数据及其相互之间的联系，抽象自问题本身，与计算机存储无关。基本类型包括集合、线、树、图。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON009",
            "name": "存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "数据结构在计算机存储器中的表现形式或物理结构。基本方法有顺序、链接、索引、散列。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON010",
            "name": "顺序存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种基本的物理存储方法。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON011",
            "name": "链式存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种基本的物理存储方法。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON012",
            "name": "索引存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种基本的物理存储方法。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON013",
            "name": "散列存储",
            "attributes": {
                "难度": "入门",
                "内容": "一种基本的物理存储方法。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON014",
            "name": "二元组表示法",
            "attributes": {
                "难度": "中等",
                "内容": "用 B=(K, R) 的形式描述数据结构，K是数据元素集合，R是K上的关系集合。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON015",
            "name": "关系",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素之间的联系，在二元组表示法中是序偶的集合R。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON016",
            "name": "序偶",
            "attributes": {
                "难度": "入门",
                "内容": "<x, y> 形式的元素对，表示x与y之间存在特定方向的关系。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON017",
            "name": "直接前驱",
            "attributes": {
                "难度": "入门",
                "内容": "在序偶<x, y>中，x是y的直接前驱。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON018",
            "name": "直接后继",
            "attributes": {
                "难度": "入门",
                "内容": "在序偶<x, y>中，y是x的直接后继。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON019",
            "name": "结点 / 顶点",
            "attributes": {
                "难度": "入门",
                "内容": "数据结构的图形表示中，对应数据元素的点。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON020",
            "name": "有向边 / 弧",
            "attributes": {
                "难度": "入门",
                "内容": "数据结构的图形表示中，连接两个结点并带有箭头的线，对应关系中的序偶。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON021",
            "name": "树根结点",
            "attributes": {
                "难度": "入门",
                "内容": "树形结构中没有前驱结点的唯一结点。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON022",
            "name": "树叶结点",
            "attributes": {
                "难度": "入门",
                "内容": "树形结构中没有后继结点的结点。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON023",
            "name": "树枝结点",
            "attributes": {
                "难度": "入门",
                "内容": "树形结构中除树根和树叶结点之外的中间结点。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON024",
            "name": "对称关系",
            "attributes": {
                "难度": "中等",
                "内容": "如果关系R中存在<x, y>，则必存在<y, x>。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON025",
            "name": "无向边",
            "attributes": {
                "难度": "入门",
                "内容": "在图形表示中，用于替代表示对称关系的两个相反方向有向边的连线。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON026",
            "name": "非线性结构",
            "attributes": {
                "难度": "入门",
                "内容": "树形结构和图形结构的统称，区别于线性结构。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON027",
            "name": "数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "对数据的取值范围、数据元素之间的结构以及允许施加操作的一种总体描述。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON028",
            "name": "简单类型",
            "attributes": {
                "难度": "入门",
                "内容": "数据无法再分割的类型，如整数、字符、指针等。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON029",
            "name": "结构类型",
            "attributes": {
                "难度": "入门",
                "内容": "由简单类型数据按一定规则构造而成，可以分解，如数组、记录。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON030",
            "name": "抽象数据类型 (ADT)",
            "attributes": {
                "难度": "中等",
                "内容": "由一种数据结构和在其上的所有操作组成。强调逻辑结构和操作说明，不考虑具体实现。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON031",
            "name": "类",
            "attributes": {
                "难度": "中等",
                "内容": "C++中用于实现抽象数据类型的机制，通常包含私有/保护数据成员和公共成员函数。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON032",
            "name": "信息隐藏",
            "attributes": {
                "难度": "中等",
                "内容": "面向对象设计原则，隐藏数据结构和操作实现的细节，只暴露接口。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON033",
            "name": "封装",
            "attributes": {
                "难度": "中等",
                "内容": "面向对象设计原则，将数据（属性）和操作（方法）捆绑在同一个单元（如类）中。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON034",
            "name": "引用参数",
            "attributes": {
                "难度": "中等",
                "内容": "C++中的一种参数传递方式，形参成为实参的别名，修改形参会影响实参。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON035",
            "name": "值参数",
            "attributes": {
                "难度": "中等",
                "内容": "一种参数传递方式，将实参的值复制给形参，修改形参不影响实参。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON036",
            "name": "指针参数",
            "attributes": {
                "难度": "中等",
                "内容": "一种参数传递方式，将实参的地址传递给形参（指针），可通过指针修改实参指向的内容。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON037",
            "name": "数据对象",
            "attributes": {
                "难度": "入门",
                "内容": "数据类型的特定实例或值。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON038",
            "name": "算法特性-有穷性",
            "attributes": {
                "难度": "入门",
                "内容": "算法必须在执行有穷步之后结束。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON039",
            "name": "算法特性-确定性",
            "attributes": {
                "难度": "入门",
                "内容": "算法中的每一步都必须具有确切的含义，无二义性。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON040",
            "name": "算法特性-可行性",
            "attributes": {
                "难度": "入门",
                "内容": "算法中的每一步都必须是可行的，能在有限时间内通过有限次操作实现。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON041",
            "name": "算法特性-输入",
            "attributes": {
                "难度": "入门",
                "内容": "一个算法可以有0个或多个输入量。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON042",
            "name": "算法特性-输出",
            "attributes": {
                "难度": "入门",
                "内容": "一个算法执行结束后至少要有一个输出量。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON043",
            "name": "数值算法",
            "attributes": {
                "难度": "入门",
                "内容": "解决数值问题的算法，主要进行算术运算。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON044",
            "name": "非数值算法",
            "attributes": {
                "难度": "入门",
                "内容": "解决非数值问题的算法，主要进行比较和逻辑运算。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON045",
            "name": "递归算法",
            "attributes": {
                "难度": "中等",
                "内容": "一个算法直接或间接调用自身。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON046",
            "name": "非递归算法",
            "attributes": {
                "难度": "中等",
                "内容": "不使用递归调用的算法，通常使用循环等结构实现。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON047",
            "name": "流程图",
            "attributes": {
                "难度": "入门",
                "内容": "一种用于描述算法步骤和流程的图形化工具。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON048",
            "name": "算法评价-正确性",
            "attributes": {
                "难度": "入门",
                "内容": "评价算法的首要条件，指算法在合理输入下能在有限时间内得出正确结果。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON049",
            "name": "算法评价-稳健性",
            "attributes": {
                "难度": "入门",
                "内容": "算法对不合理（非法）数据输入的反应和处理能力。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON050",
            "name": "算法评价-可读性",
            "attributes": {
                "难度": "入门",
                "内容": "算法易于人们阅读和理解的程度。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON051",
            "name": "时间复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "算法运行时间的相对度量，通常表示为算法中简单操作次数关于问题规模n的函数，常用大O表示法。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON052",
            "name": "简单操作",
            "attributes": {
                "难度": "入门",
                "内容": "构成算法基本执行步骤的操作，如赋值、比较、计算等，其执行次数用于估算时间复杂度。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON053",
            "name": "问题规模",
            "attributes": {
                "难度": "入门",
                "内容": "衡量输入数据量大小的参数，通常用n表示，算法复杂度是其函数。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON054",
            "name": "大 O 表示法",
            "attributes": {
                "难度": "中等",
                "内容": "表示算法时间或空间复杂度数量级的渐进表示法，忽略常数因子和低阶项。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON055",
            "name": "O(1) 复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "常量复杂度，执行时间/空间不随问题规模n增长。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON056",
            "name": "O(log n) 复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "对数复杂度，执行时间/空间随n的对数增长。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON057",
            "name": "O(n) 复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "线性复杂度，执行时间/空间随n线性增长。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON058",
            "name": "O(n log n) 复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "线性对数复杂度，执行时间/空间随n*log n增长。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON059",
            "name": "O(n^2) 复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "平方复杂度，执行时间/空间随n的平方增长。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON060",
            "name": "O(n^3) 复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "立方复杂度，执行时间/空间随n的立方增长。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON061",
            "name": "O(2^n) 复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "指数复杂度，执行时间/空间随2的n次方增长，通常认为效率较低。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON062",
            "name": "O(n!) 复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "阶乘复杂度，执行时间/空间随n的阶乘增长，效率极低。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON063",
            "name": "最好情况复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "算法在特定输入下运行时间最短（或资源消耗最少）的情况下的复杂度。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON064",
            "name": "最差情况复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "算法在特定输入下运行时间最长（或资源消耗最多）的情况下的复杂度，提供性能下限保证。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON065",
            "name": "平均情况复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "算法在所有可能输入下期望的运行时间（或资源消耗）的复杂度，更能反映算法的普遍性能。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON066",
            "name": "空间复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "算法在运行过程中临时占用的存储空间大小的量度，包括算法本身、输入输出和临时工作单元。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON067",
            "name": "就地算法",
            "attributes": {
                "难度": "入门",
                "内容": "只需要常量额外空间（O(1)）的算法，即不随问题规模增大而占用更多临时空间。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON068",
            "name": "函数重载",
            "attributes": {
                "难度": "中等",
                "内容": "C++特性，允许在同一作用域内定义多个同名函数，但它们的参数列表（个数或类型）必须不同。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON069",
            "name": "运算符重载",
            "attributes": {
                "难度": "中等",
                "内容": "C++特性，允许为自定义类型（如类或结构体）重新定义或赋予已存在运算符新的含义。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON070",
            "name": "数据结构 [概念]",
            "attributes": {
                "难度": "入门",
                "内容": "研究数据如何在计算机中表示、存取和处理的方法的学科领域；广义上指数据及其相互之间的联系。"
            }
        },
        {
            "type": "概念",
            "ID": "01CON071",
            "name": "算法 [概念]",
            "attributes": {
                "难度": "入门",
                "内容": "解决特定问题的有限步骤或方法，具备有穷性、确定性、可行性、输入、输出五个特性。"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS001",
            "name": "集合结构",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素同属一个集合，元素之间没有其他特定关系。逻辑关系为1:0。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS002",
            "name": "线性结构",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素之间存在一对一的线性关系。除首尾元素外，每个元素有且仅有一个直接前驱和一个直接后继。",
                "存储开销": "未知 (取决于具体实现如数组或链表)"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS003",
            "name": "树形结构",
            "attributes": {
                "难度": "中等",
                "内容": "数据元素之间存在一对多的层次关系。除根结点外，每个结点有且仅有一个直接前驱；结点可以有零个或多个直接后继。",
                "存储开销": "未知 (取决于具体实现)"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS004",
            "name": "图形结构",
            "attributes": {
                "难度": "中等",
                "内容": "数据元素之间存在多对多的关系（网状关系）。结点可以有任意多个直接前驱和任意多个直接后继。",
                "存储开销": "未知 (取决于具体实现)"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS005",
            "name": "数组",
            "attributes": {
                "难度": "入门",
                "内容": "数目固定的、同一类型的数据元素按线性结构顺序组合。可通过下标直接访问元素。",
                "存储开销": "通常为连续内存空间，大小固定"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS006",
            "name": "记录",
            "attributes": {
                "难度": "入门",
                "内容": "数目固定的、可包含不同类型的数据项（域）按线性结构排列的组合体。可通过成员名访问域。",
                "存储开销": "通常为连续内存空间，大小固定"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS007",
            "name": "字符串",
            "attributes": {
                "难度": "入门",
                "内容": "零个或多个字符组成的有限序列，是字符按顺序排列的线性结构。通常作为特殊的一维字符数组实现。",
                "存储开销": "通常为连续内存空间，长度可变但需预留空间或动态管理"
            }
        },
        {
            "type": "数据结构",
            "ID": "01DS008",
            "name": "文件",
            "attributes": {
                "难度": "入门",
                "内容": "存储在外存上的、按位置有序的数据集合。逻辑上可视为线性结构。",
                "存储开销": "外部存储，大小可变"
            }
        },
        {
            "type": "操作",
            "ID": "01OP001",
            "name": "InitRectangle",
            "attributes": {
                "难度": "入门",
                "内容": "初始化矩形ADT实例的长度和宽度属性。"
            }
        },
        {
            "type": "操作",
            "ID": "01OP002",
            "name": "Circumference",
            "attributes": {
                "难度": "入门",
                "内容": "计算并返回矩形ADT实例的周长。"
            }
        },
        {
            "type": "操作",
            "ID": "01OP003",
            "name": "Area",
            "attributes": {
                "难度": "入门",
                "内容": "计算并返回矩形ADT实例的面积。"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG001",
            "name": "累加求和",
            "attributes": {
                "难度": "入门",
                "内容": "计算一个包含n个元素的数组中所有元素的总和。基本步骤：初始化和s=0，遍历数组将每个元素加到s上，返回s。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG002",
            "name": "矩阵相加",
            "attributes": {
                "难度": "入门",
                "内容": "计算两个相同维度（n x n）的矩阵对应元素之和，结果存入第三个矩阵。基本步骤：双重循环遍历行i和列j，执行c[i][j] = a[i][j] + b[i][j]。",
                "时间复杂度": "O(n^2)",
                "空间复杂度": "O(1) (不计输入输出矩阵空间)"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG003",
            "name": "简单选择排序",
            "attributes": {
                "难度": "入门",
                "内容": "一种原地排序算法。在未排序序列中找到最小（或最大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。",
                "时间复杂度": "O(n^2)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "01ALG004",
            "name": "顺序查找",
            "attributes": {
                "难度": "入门",
                "内容": "在一维数组（或线性表）中从头到尾依次比较元素，查找给定值。若找到则返回元素位置（下标），否则返回查找失败标识（如-1）。",
                "时间复杂度": "O(1) (最好), O(n) (最差), O(n) (平均)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS001",
            "name": "线性表",
            "attributes": {
                "难度": "入门",
                "内容": "具有相同属性的数据元素的一个有限序列。序列中所含元素的个数称为线性表的长度(n>=0)。元素按前后位置线性有序，除头尾元素外，每个元素有唯一前驱和唯一后继。",
                "存储开销": "未知 (取决于具体实现)"
            }
        },
        {
            "type": "概念",
            "ID": "02CON001",
            "name": "线性结构",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素之间存在一对一的线性关系的数据结构。可以用线性表表示。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON002",
            "name": "抽象数据类型 (ADT)",
            "attributes": {
                "难度": "中等",
                "内容": "定义了一个数据模型以及定义在该模型上的一组操作，不涉及具体实现细节。包括数据部分和操作部分。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP001",
            "name": "InitList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "初始化线性表L为空。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP002",
            "name": "ClearList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "清除线性表L中的所有元素。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP003",
            "name": "LengthList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "返回线性表L的长度。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP004",
            "name": "EmptyList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "判断线性表L是否为空。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP005",
            "name": "GetList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "返回线性表L中第pos个元素的值。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP006",
            "name": "TraverseList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "遍历输出线性表L中的所有元素。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP007",
            "name": "FindList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "从线性表L中查找与给定项item匹配的元素。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP008",
            "name": "UpdateList (ADT)",
            "attributes": {
                "难度": "入门",
                "内容": "修改线性表L中与给定项item匹配的元素。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP009",
            "name": "InsertList (ADT)",
            "attributes": {
                "难度": "中等",
                "内容": "向线性表L的指定位置pos插入元素item。pos=0表示有序插入，pos=-1表示表尾插入。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP010",
            "name": "DeleteList (ADT)",
            "attributes": {
                "难度": "中等",
                "内容": "从线性表L删除指定位置pos的元素或与给定项item匹配的元素。pos=0表示按值删除，pos=-1表示删除表尾。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP011",
            "name": "SortList (ADT)",
            "attributes": {
                "难度": "中等",
                "内容": "对线性表L中的所有元素按给定条件排序。"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS002",
            "name": "线性表的顺序存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "将线性表元素按逻辑顺序存入一块连续的存储空间(通常是数组)。支持随机存取。插入删除可能需要移动大量元素。",
                "存储开销": "主要为n*sizeof(ElemType)，外加存储长度(size)和容量(MaxSize)的开销。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON003",
            "name": "顺序存储",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素的逻辑顺序与其物理存储顺序一致的存储方式。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON004",
            "name": "随机存取",
            "attributes": {
                "难度": "入门",
                "内容": "访问存储结构中任何一个元素的时间都是常量，与元素位置无关。顺序存储结构支持随机存取。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON005",
            "name": "时间复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "衡量算法执行时间随输入规模增长而增长的量度，通常用大O表示法。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON006",
            "name": "空间复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "衡量算法执行过程中临时占用的存储空间随输入规模增长而增长的量度。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP012",
            "name": "InitList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "分配动态数组空间，初始化MaxSize和size=0。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP013",
            "name": "ClearList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "释放动态数组空间，重置MaxSize和size为0。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP014",
            "name": "LengthList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "返回存储的size值。",
                "时间复杂度": "O(1)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP015",
            "name": "EmptyList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "检查size是否为0。",
                "时间复杂度": "O(1)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP016",
            "name": "GetList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "检查pos有效性，返回list[pos-1]。",
                "时间复杂度": "O(1)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP017",
            "name": "TraverseList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "按数组下标顺序访问并处理list[0]到list[size-1]。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP018",
            "name": "FindList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "从头开始顺序比较，查找第一个值匹配item的元素。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP019",
            "name": "UpdateList (顺序表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "顺序查找，找到第一个匹配item的元素后用item的值更新它。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP020",
            "name": "InsertList (顺序表实现)",
            "attributes": {
                "难度": "中等",
                "内容": "处理pos=0,-1,>=1。检查空间是否足够，若不足则扩容(realloc)。将插入位置及之后的元素后移。在pos-1位置放入新元素。size增加1。",
                "时间复杂度": "O(n) (因元素移动), 表尾插入为O(1) (若不需扩容)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP021",
            "name": "DeleteList (顺序表实现)",
            "attributes": {
                "难度": "中等",
                "内容": "处理pos=0,-1,>=1。查找删除位置。将被删元素后的元素前移。size减少1。检查是否需要缩容(realloc)。",
                "时间复杂度": "O(n) (因元素移动), 表尾删除为O(1) (若不需缩容)"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG001",
            "name": "插入排序",
            "attributes": {
                "难度": "中等",
                "内容": "将线性表分为有序区和无序区。每次从无序区取第一个元素，插入到有序区的合适位置，保持有序区有序。重复n-1次。",
                "时间复杂度": "最好O(n)，平均O(n^2)，最差O(n^2)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP022",
            "name": "SortList (顺序表实现-插入排序)",
            "attributes": {
                "难度": "中等",
                "内容": "调用插入排序算法对顺序存储的线性表进行排序。",
                "时间复杂度": "O(n^2)"
            }
        },
        {
            "type": "概念",
            "ID": "02CON007",
            "name": "链接存储",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素的逻辑顺序通过结点中的指针域来体现，物理存储位置不必相邻。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON008",
            "name": "结点",
            "attributes": {
                "难度": "入门",
                "内容": "链接存储的基本单位，通常包含数据域和（一个或多个）指针域。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON009",
            "name": "指针域",
            "attributes": {
                "难度": "入门",
                "内容": "结点中存储其他结点地址（指针）的部分，用于链接结点。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON010",
            "name": "数据域",
            "attributes": {
                "难度": "入门",
                "内容": "结点中存储数据元素值的部分。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON011",
            "name": "顺序存取",
            "attributes": {
                "难度": "入门",
                "内容": "访问存储结构中某个元素需要从头或某个已知位置开始，沿着逻辑顺序查找。链接存储通常是顺序存取。"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS003",
            "name": "链表",
            "attributes": {
                "难度": "入门",
                "内容": "数据的链接存储表示，由一系列结点组成。",
                "存储开销": "结点包含数据域和指针域，比顺序存储有额外指针开销。"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS004",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "链表的一种，每个结点只包含一个指向其直接后继结点的指针域。",
                "存储开销": "N * (sizeof(ElemType) + sizeof(pointer))"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS005",
            "name": "双向链表",
            "attributes": {
                "难度": "入门",
                "内容": "链表的一种，每个结点包含两个指针域，分别指向其直接前驱和直接后继结点。",
                "存储开销": "N * (sizeof(ElemType) + 2 * sizeof(pointer))"
            }
        },
        {
            "type": "概念",
            "ID": "02CON012",
            "name": "表头指针",
            "attributes": {
                "难度": "入门",
                "内容": "指向链表中第一个结点（或头结点）的指针。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON013",
            "name": "表头结点",
            "attributes": {
                "难度": "入门",
                "内容": "链表中存储第一个数据元素的结点。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON014",
            "name": "表尾结点",
            "attributes": {
                "难度": "入门",
                "内容": "链表中存储最后一个数据元素的结点。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP023",
            "name": "单链表插入操作",
            "attributes": {
                "难度": "入门",
                "内容": "在逻辑位置a之后插入新结点b：将b的next指向a的原后继，将a的next指向b。",
                "时间复杂度": "O(1) (如果插入位置已知)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP024",
            "name": "单链表删除操作",
            "attributes": {
                "难度": "入门",
                "内容": "删除结点x之后的结点y：将x的next指向y的next，然后释放y。",
                "时间复杂度": "O(1) (如果待删结点的前驱已知)"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS006",
            "name": "带表头附加结点的链表",
            "attributes": {
                "难度": "入门",
                "内容": "在链表的第一个元素结点之前增加一个不存储数据的附加结点（头结点），表头指针指向该附加结点。优点是统一了在表头和其他位置插入/删除的操作。",
                "存储开销": "比普通链表多一个结点的开销。"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS007",
            "name": "循环链表",
            "attributes": {
                "难度": "入门",
                "内容": "链表的一种变体，最后一个结点的指针域指向头结点（或表头附加结点）。对于双向循环链表，头结点的（或附加结点的）前驱指针指向尾结点。",
                "存储开销": "与对应非循环链表相同。"
            }
        },
        {
            "type": "操作",
            "ID": "02OP025",
            "name": "InitList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "将表头指针HL置为NULL。",
                "时间复杂度": "O(1)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP026",
            "name": "ClearList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "遍历链表，逐个删除（delete）结点，最后将表头指针置为NULL。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP027",
            "name": "LengthList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "遍历链表，计数结点个数。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP028",
            "name": "EmptyList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "检查表头指针HL是否为NULL。",
                "时间复杂度": "O(1)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP029",
            "name": "GetList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "从表头指针开始，顺序遍历链表，找到第pos个结点并返回其数据域。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP030",
            "name": "TraverseList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "从表头指针开始，顺序遍历链表，访问每个结点的数据域。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP031",
            "name": "FindList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "从表头指针开始，顺序遍历链表，查找第一个数据域值等于item的结点。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP032",
            "name": "UpdateList (单链表实现)",
            "attributes": {
                "难度": "入门",
                "内容": "从表头指针开始，顺序遍历链表，查找第一个数据域值等于item的结点，并用item更新其数据域。",
                "时间复杂度": "O(n)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP033",
            "name": "InsertList (单链表实现)",
            "attributes": {
                "难度": "中等",
                "内容": "处理pos=0,-1,>=1。创建新结点。遍历查找插入位置（需记录前驱结点ap和当前结点cp）。修改ap和newptr的next指针完成插入。处理表头插入的特殊情况（ap为NULL）。",
                "时间复杂度": "O(n) (因查找位置)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP034",
            "name": "DeleteList (单链表实现)",
            "attributes": {
                "难度": "中等",
                "内容": "处理pos=0,-1,>=1。遍历查找待删除结点cp（需记录前驱结点ap）。修改ap的next指针指向cp的next。删除（delete）cp结点。处理删除表头结点的特殊情况（ap为NULL）。",
                "时间复杂度": "O(n) (因查找位置)"
            }
        },
        {
            "type": "操作",
            "ID": "02OP035",
            "name": "SortList (单链表实现-插入排序)",
            "attributes": {
                "难度": "中等",
                "内容": "创建一个新的空链表SL。遍历原链表HL，将HL中的每个结点按其值有序地插入到SL中。最后将HL指向SL。",
                "时间复杂度": "O(n^2)"
            }
        },
        {
            "type": "数据结构",
            "ID": "02DS008",
            "name": "静态链表",
            "attributes": {
                "难度": "中等",
                "内容": "使用数组来模拟链式存储结构。数组元素包含数据域和指针域（存储下一个元素在数组中的下标）。需要管理一个空闲链表。",
                "存储开销": "MaxSize * (sizeof(ElemType) + sizeof(int))，需要额外空间管理表头和空闲链表头。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON015",
            "name": "空闲链表",
            "attributes": {
                "难度": "中等",
                "内容": "在静态链表中，将所有未被使用的数组单元链接起来形成的链表，用于分配和回收结点空间。"
            }
        },
        {
            "type": "概念",
            "ID": "02CON016",
            "name": "多项式",
            "attributes": {
                "难度": "入门",
                "内容": "数学表达式，形如 P(x) = a0 + a1*x + a2*x^2 + ... + an*x^n。"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG002",
            "name": "多项式求值 (系数数组法)",
            "attributes": {
                "难度": "入门",
                "内容": "输入系数数组表示的多项式P和值x，计算P(x)。遍历系数数组，累加每一项 a_i * x^i 的值。",
                "时间复杂度": "O(n) (n为最高次幂+1, 假设幂运算高效)",
                "空间复杂度": "O(1) (除输入外)"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG003",
            "name": "多项式求值 (非零项链表法)",
            "attributes": {
                "难度": "入门",
                "内容": "输入非零项（系数coef, 指数exp）链表表示的多项式P和值x，计算P(x)。遍历链表，累加每一项 coef * x^exp 的值。",
                "时间复杂度": "O(m) (m为非零项数, 假设幂运算高效)",
                "空间复杂度": "O(1) (除输入外)"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG004",
            "name": "多项式相加 (基于InsertList)",
            "attributes": {
                "难度": "中等",
                "内容": "输入两个按指数升序排列的非零项链表p1, p2。创建一个空结果链表p3。同步遍历p1, p2，比较当前项指数，将指数较小的项或合并后的项（指数相等时）使用InsertList插入到p3。处理剩余链表。",
                "时间复杂度": "O((m+n)^2) (m,n为项数，因InsertList每次查找尾部耗时)",
                "空间复杂度": "O(m+n) (存储结果链表)"
            }
        },
        {
            "type": "算法",
            "ID": "02ALG005",
            "name": "多项式相加 (优化)",
            "attributes": {
                "难度": "中等",
                "内容": "输入两个按指数升序排列的非零项链表p1, p2。创建一个带附加头结点的结果链表p3，并维护一个指向p3尾部的指针t3。同步遍历p1, p2，比较当前项指数，将指数较小的项或合并后的项创建新结点，直接链接到t3之后，并移动t3。处理剩余链表。最后处理头结点。",
                "时间复杂度": "O(m+n) (m,n为项数)",
                "空间复杂度": "O(m+n) (存储结果链表)"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS001",
            "name": "集合",
            "attributes": {
                "难度": "入门",
                "内容": "由具有相同属性的数据元素组合而成，数据之间没有任何前驱和后继关系。集合长度可变，元素类型任意（用ElemType表示）。不允许重复元素（由InsertSet操作体现）。",
                "存储开销": "未知 (依赖具体实现)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON001",
            "name": "空集",
            "attributes": {
                "难度": "入门",
                "内容": "长度为0的集合，表示为 {} 或 Ø。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON002",
            "name": "抽象数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "定义数据对象、对象中元素间的关系以及对数据元素的操作集合。包括数据和操作两部分。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP001",
            "name": "InitSet",
            "attributes": {
                "难度": "入门",
                "内容": "初始化集合为空 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP002",
            "name": "ClearSet",
            "attributes": {
                "难度": "入门",
                "内容": "清除集合中的所有元素 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP003",
            "name": "LengthSet",
            "attributes": {
                "难度": "入门",
                "内容": "求出集合的长度 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP004",
            "name": "EmptySet",
            "attributes": {
                "难度": "入门",
                "内容": "判断集合是否为空 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP005",
            "name": "InSet",
            "attributes": {
                "难度": "入门",
                "内容": "判断一个元素是否属于集合 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP006",
            "name": "OutputSet",
            "attributes": {
                "难度": "入门",
                "内容": "输出集合中所有元素 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP007",
            "name": "FindSet",
            "attributes": {
                "难度": "入门",
                "内容": "从集合中查找一个元素 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP008",
            "name": "ModifySet",
            "attributes": {
                "难度": "中等",
                "内容": "修改集合中的一个指定元素 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP009",
            "name": "InsertSet",
            "attributes": {
                "难度": "入门",
                "内容": "向集合插入一个元素，不允许重复 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP010",
            "name": "DeleteSet",
            "attributes": {
                "难度": "入门",
                "内容": "从集合删除一个元素 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP011",
            "name": "UnionSet",
            "attributes": {
                "难度": "中等",
                "内容": "求两个集合的并集 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP012",
            "name": "InterseSet",
            "attributes": {
                "难度": "中等",
                "内容": "求两个集合的交集 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP013",
            "name": "DifferenceSet",
            "attributes": {
                "难度": "中等",
                "内容": "求两个集合的差集 (ADT定义)。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON003",
            "name": "顺序存储",
            "attributes": {
                "难度": "入门",
                "内容": "把逻辑上相邻的数据元素存储在物理位置也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。通常使用数组实现。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS002",
            "name": "集合的顺序存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "使用数组存储集合元素，并用整型变量存储当前长度(len)和数组容量(MaxSize)。元素存储次序任意，通常新元素加到末尾，删除元素后用末尾元素填补空位，以避免移动元素。可封装在结构体Set中。支持动态分配和调整数组大小。",
                "存储开销": "需要预分配或动态调整数组大小，可能浪费空间或需要扩容成本。空间复杂度O(MaxSize)。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG001",
            "name": "InitSet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InitSet操作。分配初始数组空间(如大小为10)，设置长度len为0。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(MaxSize)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG002",
            "name": "ClearSet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现ClearSet操作。释放动态分配的数组空间，重置len和MaxSize为0。",
                "时间复杂度": "O(1) 或 O(N) (取决于内存管理器)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG003",
            "name": "LengthSet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现LengthSet操作。返回长度变量len的值。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG004",
            "name": "EmptySet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现EmptySet操作。检查长度len是否为0。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG005",
            "name": "InSet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InSet操作。顺序遍历数组(从0到len-1)，比较元素值，找到返回true，否则返回false。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG006",
            "name": "OutputSet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现OutputSet操作。使用for循环遍历数组(从0到len-1)，输出每个元素。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG007",
            "name": "简单选择排序",
            "attributes": {
                "难度": "入门",
                "内容": "排序算法原理：进行n-1趟选择，每趟在无序区中找到最小(或最大)的元素，存放到无序区的起始位置（即有序区末尾）。",
                "时间复杂度": "O(n^2)",
                "空间复杂度": "O(1) (原地排序)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON004",
            "name": "时间复杂度",
            "attributes": {
                "难度": "中等",
                "内容": "算法执行时间随输入规模增长的度量，通常关注最坏情况或平均情况，使用大O表示法。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON005",
            "name": "O(n^2)",
            "attributes": {
                "难度": "入门",
                "内容": "平方时间复杂度。表示算法执行时间与输入规模n的平方大致成正比。常见于嵌套循环遍历或简单排序算法。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG008",
            "name": "OutputSet_Sorted_Sequential_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现OutputSet操作（按升序输出）。1. 创建临时数组a并复制集合元素。2. 对临时数组a使用简单选择排序。3. 遍历排序后的数组a并输出。4. 释放临时数组a。",
                "时间复杂度": "O(n^2) (主要来自排序)",
                "空间复杂度": "O(n) (临时数组)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG009",
            "name": "FindSet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现FindSet操作。顺序遍历数组查找值等于item（通常是关键字）的元素，若找到，则将完整元素赋给item引用参数并返回true，否则返回false。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG010",
            "name": "ModifySet_Sequential_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现ModifySet操作。顺序遍历数组查找关键字匹配的元素，若找到，则用item的完整值更新该元素，并返回true，否则返回false。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG011",
            "name": "InsertSet_Sequential_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现InsertSet操作。1. 顺序查找item是否存在，存在则返回false。2. 若集合满(len==MaxSize)，则动态扩容(如realloc * 2)，更新MaxSize。3. 将item插入数组末尾(S.set[S.len])。4. 长度len增1。5. 返回true。",
                "时间复杂度": "O(n) (最坏情况，主要来自查找和可能的扩容)",
                "空间复杂度": "O(1) (摊销)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON006",
            "name": "O(n)",
            "attributes": {
                "难度": "入门",
                "内容": "线性时间复杂度。表示算法执行时间与输入规模n大致成正比。常见于单次遍历。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG012",
            "name": "DeleteSet_Sequential_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现DeleteSet操作。1. 顺序查找待删元素item，找不到则返回false。2. 若找到(下标i)，将完整元素赋给item带回。3. 用数组最后一个元素(S.set[S.len-1])覆盖S.set[i]。4. 长度len减1。5. (可选)若空间利用率过低(如len/MaxSize < 0.4)，则缩容(如realloc / 2)，更新MaxSize。6. 返回true。",
                "时间复杂度": "O(n) (主要来自查找)",
                "空间复杂度": "O(1) (摊销)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG013",
            "name": "UnionSet_Sequential_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现UnionSet(S1, S2, S)。1. 确保S有足够空间，必要时重新分配以容纳S1。2. 将S1元素直接复制到S的数组，设置S.len = S1.len。3. 遍历S2，对S2中每个元素调用InsertSet(S, S2.set[i])将其插入结果集S。",
                "时间复杂度": "O(n*m) (n=|S1|, m=|S2|, 瓶颈在步骤3的重复插入查找)",
                "空间复杂度": "O(n+m) (结果集S的空间)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON007",
            "name": "O(n*m)",
            "attributes": {
                "难度": "入门",
                "内容": "时间复杂度，表示算法执行时间与两个输入规模n和m的乘积大致成正比。常见于双重循环或嵌套查找。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG014",
            "name": "InterseSet_Sequential_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现InterseSet(S1, S2, S)。1. 初始化结果集S为空(S.len=0)。2. 遍历S2中的每个元素x。3. 对每个x，调用FindSet(S1, x)在S1中查找。4. 若FindSet返回true，则将x插入结果集S的末尾(S.set[S.len]=x; S.len++)，并检查是否需要扩容。",
                "时间复杂度": "O(n*m) (n=|S1|, m=|S2|, 瓶颈在对S2每个元素查找S1)",
                "空间复杂度": "O(min(n,m)) (结果集S的空间)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG015",
            "name": "DifferenceSet_Sequential_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现DifferenceSet(S1, S2, S)。1. 初始化结果集S为空(S.len=0)。2. 遍历S1中的每个元素x。3. 对每个x，调用FindSet(S2, x)在S2中查找。4. 若FindSet返回false（即x不在S2中），则将x插入结果集S的末尾(S.set[S.len]=x; S.len++)，并检查是否需要扩容。",
                "时间复杂度": "O(n*m) (n=|S1|, m=|S2|, 瓶颈在对S1每个元素查找S2)",
                "空间复杂度": "O(n) (结果集S的空间)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON008",
            "name": "链接存储",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素的逻辑关系通过指针域链接表示。元素存储在任意物理位置。通常使用链表实现。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS003",
            "name": "集合的链接存储结构",
            "attributes": {
                "难度": "入门",
                "内容": "通常使用单链表存储集合元素，每个元素对应链表中的一个节点。由于集合无序，节点在链表中次序任意。插入删除若不考虑查找效率，可在表头进行O(1)操作。",
                "存储开销": "每个元素需要额外存储指针域。空间复杂度O(n)。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS004",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "由一系列节点组成，每个节点包含数据域(data)和指向下一个节点的指针域(next)。需要一个头指针(Head)指向第一个节点。",
                "存储开销": "每个节点有指针开销。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG016",
            "name": "InitSet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InitSet操作。将头指针HT置为NULL。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG017",
            "name": "ClearSet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现ClearSet操作。遍历链表，逐个删除(delete)节点并回收空间，最后将头指针HT置为NULL。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG018",
            "name": "LengthSet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现LengthSet操作。遍历链表，用计数器n记录节点个数，返回n。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG019",
            "name": "EmptySet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现EmptySet操作。检查头指针HT是否为NULL。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG020",
            "name": "InSet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InSet操作。从头指针HT开始遍历链表，比较节点data域与item，找到返回true，遍历结束未找到则返回false。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG021",
            "name": "OutputSet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现OutputSet操作。从头指针HT开始遍历链表，输出每个节点的data域。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG022",
            "name": "FindSet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现FindSet操作。从头指针HT开始遍历链表查找data域等于item的节点，若找到，将节点data赋给item引用参数并返回true，否则返回false。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG023",
            "name": "ModifySet_Linked_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现ModifySet操作。从头指针HT开始遍历链表查找data域等于item关键字的节点，若找到，用item的完整值更新节点data域，并返回true，否则返回false。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG024",
            "name": "InsertSet_Linked_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现InsertSet操作。1. 遍历链表查找item是否存在，存在则返回false。2. 若不存在，创建值为item的新节点tp。3. 将新节点插入到链表头部 (tp->next = HT; HT = tp)。4. 返回true。",
                "时间复杂度": "O(n) (主要来自查找)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG025",
            "name": "DeleteSet_Linked_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现DeleteSet操作。1. 遍历链表查找值为item的节点(cp)，同时记录其前驱节点(ap)。2. 若未找到(cp==NULL)，返回false。3. 若找到，由item带回节点值。4. 修改指针删除节点：若ap为空（删除的是头节点），则HT=cp->next；否则ap->next=cp->next。5. 释放cp节点(delete cp)。6. 返回true。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG026",
            "name": "UnionSet_Linked_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现UnionSet(HT1, HT2, HT)。1. 初始化结果集HT为空。2. 遍历HT1，对每个节点创建一个新副本并头插法插入HT (深拷贝)。3. 遍历HT2，对每个元素p->data调用InsertSet(HT, p->data)将其插入结果集HT。",
                "时间复杂度": "O(n*m) (n=|HT1|, m=|HT2|, 瓶颈在步骤3的重复插入查找)",
                "空间复杂度": "O(n+m) (结果集HT的空间)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG027",
            "name": "InterseSet_Linked_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现InterseSet(HT1, HT2, HT)。1. 初始化结果集HT为空。2. 遍历HT2中的每个元素x=p->data。3. 对每个x，调用FindSet(HT1, x)在HT1中查找。4. 若FindSet返回true，则调用InsertSet(HT, x)将x插入结果集HT。",
                "时间复杂度": "O(n*m) (n=|HT1|, m=|HT2|, 瓶颈在对HT2每个元素查找HT1)",
                "空间复杂度": "O(min(n,m)) (结果集HT的空间)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG028",
            "name": "DifferenceSet_Linked_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现DifferenceSet(HT1, HT2, HT)。1. 初始化结果集HT为空。2. 遍历HT1中的每个元素x=p->data。3. 对每个x，调用FindSet(HT2, x)在HT2中查找。4. 若FindSet返回false（即x不在HT2中），则调用InsertSet(HT, x)将x插入结果集HT。",
                "时间复杂度": "O(n*m) (n=|HT1|, m=|HT2|, 瓶颈在对HT1每个元素查找HT2)",
                "空间复杂度": "O(n) (结果集HT的空间)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON009",
            "name": "矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "一个m行n列的数表，包含m*n个元素，每个元素由唯一的行号和列号确定。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS005",
            "name": "稀疏矩阵",
            "attributes": {
                "难度": "中等",
                "内容": "矩阵的一种特殊情况，其非零元素的个数远小于零元素的个数。适用场景：高效存储和处理大型且大部分元素为零的矩阵。",
                "存储开销": "旨在节省空间，仅存储非零元素及其位置，相比二维数组开销小很多。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON010",
            "name": "非零元素",
            "attributes": {
                "难度": "入门",
                "内容": "矩阵中值不为零的元素。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON011",
            "name": "零元素",
            "attributes": {
                "难度": "入门",
                "内容": "矩阵中值为零的元素。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON012",
            "name": "三元组",
            "attributes": {
                "难度": "入门",
                "内容": "表示稀疏矩阵中一个非零元素的数据结构，包含三个信息：元素所在的行号(i)、列号(j)以及元素值(value)。记为 (i, j, value)。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS006",
            "name": "三元组线性表",
            "attributes": {
                "难度": "中等",
                "内容": "将稀疏矩阵的所有非零元素对应的三元组，按照行号为主序、列号为辅序排列构成的线性表。是稀疏矩阵的一种逻辑表示方法。",
                "存储开销": "O(t)，其中t为非零元素个数。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP014",
            "name": "Transpose",
            "attributes": {
                "难度": "中等",
                "内容": "求稀疏矩阵的转置矩阵 (ADT定义)。转置后矩阵B的(i, j)元素等于原矩阵A的(j, i)元素。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP015",
            "name": "Add",
            "attributes": {
                "难度": "中等",
                "内容": "求两个稀疏矩阵的和 (ADT定义)。要求两个矩阵行数和列数必须分别相同。结果矩阵C的(i,j)元素等于两加数矩阵对应位置元素之和。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP016",
            "name": "Multiply",
            "attributes": {
                "难度": "高级",
                "内容": "求两个稀疏矩阵的乘积 (ADT定义)。要求第一个矩阵A(m*n)的列数等于第二个矩阵B(n*p)的行数。结果矩阵C(m*p)的(i,j)元素等于A的第i行与B的第j列对应元素乘积之和。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP017",
            "name": "InitMatrix",
            "attributes": {
                "难度": "入门",
                "内容": "初始化稀疏矩阵为空矩阵，不含任何元素 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP018",
            "name": "InputMatrix",
            "attributes": {
                "难度": "中等",
                "内容": "按照特定格式（如三元组）向稀疏矩阵输入数据 (ADT定义)。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP019",
            "name": "OutputMatrix",
            "attributes": {
                "难度": "中等",
                "内容": "按照特定格式输出稀疏矩阵的内容 (ADT定义)。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS007",
            "name": "稀疏矩阵的顺序存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "使用一个结构体(SMatrix)存储，包含矩阵的行数m、列数n、非零元个数t，以及一个存储三元组(Triple)的数组sm[MaxTerms+1]。三元组在数组中通常按行主序存储。",
                "存储开销": "O(t) + O(1)。需要预定义数组最大容量MaxTerms。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS008",
            "name": "稀疏矩阵的链接存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "对稀疏矩阵对应的三元组线性表进行链接存储。有多种具体实现方式，如带行指针向量、十字链表等。",
                "存储开销": "通常为 O(t) * node_size，加上辅助指针结构的开销。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS009",
            "name": "带行指针向量的链接存储",
            "attributes": {
                "难度": "高级",
                "内容": "将每行具有相同行号的三元组节点按列号递增顺序链接成一个单链表。使用一个行指针向量(数组vector[MaxRows+1])存储每行单链表的头指针。结构体(LMatrix)包含m, n, t和行指针向量。",
                "存储开销": "O(t) * node_size + O(m) for row pointers。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS010",
            "name": "十字链接存储",
            "attributes": {
                "难度": "高级",
                "内容": "每个非零元素节点(CrossNode)包含row, col, val以及两个指针域：down指向同一列的下一个节点，right指向同一行的下一个节点。需要行指针向量(rv)和列指针向量(cv)分别存储行列单链表的头指针。结构体(CLMatrix)包含m, n, t, rv, cv。",
                "存储开销": "O(t) * node_size + O(m) + O(n) for pointers。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG029",
            "name": "InitMatrix_SMatrix_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InitMatrix for SMatrix类型。将对象M的m, n, t成员均置为0。",
                "时间复杂度": "O(1)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG030",
            "name": "InitMatrix_LMatrix_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InitMatrix for LMatrix类型。将对象M的m, n, t置为0，并循环将行指针向量vector的所有元素(1到MaxRows)置为NULL。",
                "时间复杂度": "O(MaxRows)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG031",
            "name": "InitMatrix_CLMatrix_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现InitMatrix for CLMatrix类型。将对象M的m, n, t置为0，并循环将行指针向量rv和列指针向量cv的所有元素分别置为NULL。",
                "时间复杂度": "O(MaxRows + MaxColumns)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG032",
            "name": "InputMatrix_SMatrix_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现InputMatrix for SMatrix类型。设置M的m, n。循环读取row, col, val三元组输入，存入M.sm数组中(从下标1开始)，直到输入(0,0,0)为止。记录非零元个数k到M.t。",
                "时间复杂度": "O(t)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG033",
            "name": "InputMatrix_CLMatrix_Impl",
            "attributes": {
                "难度": "高级",
                "内容": "实现InputMatrix for CLMatrix类型。设置M.m, M.n。循环读取row, col, val三元组输入，直到(0,0,0)。对每个有效三元组：1. 创建新节点newptr。2. 将newptr链接到对应行(M.rv[row])链表的末尾。3. 将newptr链接到对应列(M.cv[col])链表的末尾。记录非零元个数k到M.t。",
                "时间复杂度": "O(t * (平均行长 + 平均列长)) (因需遍历到链表末尾)",
                "空间复杂度": "O(t) (创建t个节点)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG034",
            "name": "OutputMatrix_SMatrix_Impl",
            "attributes": {
                "难度": "入门",
                "内容": "实现OutputMatrix for SMatrix类型。遍历M.sm数组从下标1到M.t，按三元组格式 '(row, col, val)' 输出每个元素。",
                "时间复杂度": "O(t)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG035",
            "name": "普通转置方法",
            "attributes": {
                "难度": "中等",
                "内容": "实现Transpose for SMatrix类型。创建结果矩阵S。外层循环遍历原矩阵的列(col=1 to n)。内层循环遍历M.sm数组(i=1 to t)。如果M.sm[i].col等于当前外层col，则将(col, M.sm[i].row, M.sm[i].val)存入S.sm的下一个可用位置k。",
                "时间复杂度": "O(n*t)",
                "空间复杂度": "O(t) (结果矩阵S的空间)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON013",
            "name": "O(n*t)",
            "attributes": {
                "难度": "入门",
                "内容": "时间复杂度，表示算法执行时间与输入矩阵列数n和非零元素个数t的乘积大致成正比。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG036",
            "name": "快速转置方法",
            "attributes": {
                "难度": "高级",
                "内容": "实现Transpose for SMatrix类型。利用辅助数组num[]和pot[]。1. (扫描1) 遍历M.sm，统计原矩阵每列(j=M.sm[i].col)的非零元个数num[j]++。2. 计算转置后每行(原列j)第一个元素在S.sm中的起始位置pot[j] (pot[1]=1; pot[j]=pot[j-1]+num[j-1])。3. (扫描2) 再次遍历M.sm，对于元素M.sm[i]，其列号为j=M.sm[i].col，应放入S.sm的位置为k=pot[j]。将(j, M.sm[i].row, M.sm[i].val)存入S.sm[k]，并执行pot[j]++为该列下一个元素准备位置。",
                "时间复杂度": "O(n+t)",
                "空间复杂度": "O(n+t) (结果矩阵S和辅助数组num, pot)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON014",
            "name": "O(n+t)",
            "attributes": {
                "难度": "入门",
                "内容": "时间复杂度，表示算法执行时间与输入矩阵列数n和非零元素个数t之和大致成正比。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG037",
            "name": "稀疏矩阵加法_LMatrix_Impl",
            "attributes": {
                "难度": "高级",
                "内容": "实现Add for LMatrix类型。检查M1, M2尺寸是否相同。创建结果矩阵M。逐行处理(i=1 to m)：同时遍历M1和M2的第i行链表(p1, p2)，按列号比较合并到M的第i行链表。若p1->col < p2->col，复制p1节点；若p1->col > p2->col，复制p2节点；若相等，计算和，若和不为0则创建和节点，若和为0则跳过。处理完一条链表后，将另一条链表剩余部分复制到M。记录结果非零元个数k。",
                "时间复杂度": "O(M1.t + M2.t)",
                "空间复杂度": "O(M1.t + M2.t) (结果矩阵M的空间)"
            }
        },
        {
            "type": "概念",
            "ID": "03CON015",
            "name": "O(M1.t + M2.t)",
            "attributes": {
                "难度": "入门",
                "内容": "时间复杂度，表示算法执行时间与两个输入稀疏矩阵非零元素个数之和大致成正比。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS011",
            "name": "广义表",
            "attributes": {
                "难度": "高级",
                "内容": "线性表的推广。是n(n>=0)个元素的有限序列，元素可以是原子（单元素）或子表（本身也是广义表）。是递归定义的数据结构。表示形式如 LS=(a1, a2, ..., an)。",
                "存储开销": "通常采用链接结构，指针开销较大。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON016",
            "name": "递归",
            "attributes": {
                "难度": "中等",
                "内容": "一种算法或函数定义技术，其中函数或过程直接或间接调用自身来解决问题。通常包含基本情况（终止条件）和递归步骤。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON017",
            "name": "单元素",
            "attributes": {
                "难度": "入门",
                "内容": "广义表中的基本数据项，不是表类型。也称为原子。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON018",
            "name": "子表",
            "attributes": {
                "难度": "入门",
                "内容": "广义表中作为元素出现的表。其本身也是一个广义表。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON019",
            "name": "空表 (广义表)",
            "attributes": {
                "难度": "入门",
                "内容": "长度为0的广义表，表示为 ()。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON020",
            "name": "广义表长度",
            "attributes": {
                "难度": "入门",
                "内容": "广义表最外层所包含的元素（原子或子表）的个数。"
            }
        },
        {
            "type": "概念",
            "ID": "03CON021",
            "name": "广义表深度",
            "attributes": {
                "难度": "中等",
                "内容": "广义表中括号嵌套的最大层数。空表深度为1，仅含原子的表深度为1。"
            }
        },
        {
            "type": "数据结构",
            "ID": "03DS012",
            "name": "广义表的链接存储结构",
            "attributes": {
                "难度": "高级",
                "内容": "采用动态链接结构，节点区分单元素和子表。节点结构(GLNode)通常包含: 标志域(tag, true为子表, false为原子), 联合域(union{ ElemType data; GLNode* sublist; })存储值或子表指针, 后继指针域(next)指向同层下一个元素。可能带表头附加节点以方便操作。",
                "存储开销": "每个节点包含tag、union、next指针，开销较大。"
            }
        },
        {
            "type": "操作",
            "ID": "03OP020",
            "name": "Length (广义表)",
            "attributes": {
                "难度": "中等",
                "内容": "求广义表最外层的元素个数 (ADT定义)。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG038",
            "name": "Length_Recursive_Impl",
            "attributes": {
                "难度": "中等",
                "内容": "实现广义表Length操作。递归算法：若表GL为空(NULL)，长度为0；否则长度为 1 + Length(GL->next)。遍历顶层next指针链计数。",
                "时间复杂度": "O(n) (n为广义表长度)",
                "空间复杂度": "O(n) (递归栈深度)"
            }
        },
        {
            "type": "操作",
            "ID": "03OP021",
            "name": "Depth (广义表)",
            "attributes": {
                "难度": "高级",
                "内容": "求广义表的最大嵌套深度 (ADT定义)。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG039",
            "name": "Depth_Recursive_Impl",
            "attributes": {
                "难度": "高级",
                "内容": "递归计算广义表深度。递归定义：若表GL为空或仅含原子，深度为1。否则，深度 = 1 + max(所有子表的深度)。算法：初始化max=0，遍历当前层节点GL，若GL->tag为true（子表），递归调用Depth(GL->sublist)得到子表深度dep，更新max = max(max, dep)。遍历完当前层后返回 max + 1。",
                "时间复杂度": "O(N) (N为广义表中总节点数)",
                "空间复杂度": "O(m) (m为广义表深度，即递归最大深度)"
            }
        },
        {
            "type": "操作",
            "ID": "03OP022",
            "name": "Create (广义表)",
            "attributes": {
                "难度": "高级",
                "内容": "根据特定格式的输入字符串，创建广义表的链接存储结构 (ADT定义)。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG040",
            "name": "Create_Recursive_Impl",
            "attributes": {
                "难度": "高级",
                "内容": "递归实现Create操作。读入字符ch：若为'('，创建子表节点(tag=true)，递归调用Create(GL->sublist)构建子表；若为字母，创建原子节点(tag=false)，存入data；若为''（表示空表），置GL=NULL。读入下一个字符ch（逗号、右括号或分号）：若为','，递归调用Create(GL->next)构建后继；若为')'或';'，置GL->next=NULL。",
                "时间复杂度": "O(N) (N为输入字符数或总节点数)",
                "空间复杂度": "O(N) (递归栈深度可能达到N)"
            }
        },
        {
            "type": "操作",
            "ID": "03OP023",
            "name": "Print (广义表)",
            "attributes": {
                "难度": "高级",
                "内容": "按照标准括号表示法打印输出广义表 (ADT定义)。"
            }
        },
        {
            "type": "算法",
            "ID": "03ALG041",
            "name": "Print_Recursive_Impl",
            "attributes": {
                "难度": "高级",
                "内容": "递归实现Print操作。若节点GL->tag为true（子表）：输出'('，若子表非空则递归调用Print(GL->sublist)，否则输出''，最后输出')'。若节点GL->tag为false（原子）：输出GL->data。处理完当前节点后，若GL->next非空，输出','，并递归调用Print(GL->next)。",
                "时间复杂度": "O(N) (N为广义表中总节点数)",
                "空间复杂度": "O(N) (递归栈深度可能达到N)"
            }
        },
        {
            "type": "概念",
            "ID": "04CON001",
            "name": "线性表",
            "attributes": {
                "难度": "入门",
                "内容": "数据元素之间存在一对一线性关系的结构。栈和队列是运算受限的线性表。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS001",
            "name": "栈",
            "attributes": {
                "难度": "入门",
                "内容": "运算受限的线性表，仅允许在表的一端（栈顶）进行插入（进栈/入栈）和删除（出栈/退栈）运算。也称堆栈。具有后进先出（LIFO）的特性。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS002",
            "name": "队列",
            "attributes": {
                "难度": "入门",
                "内容": "运算受限的线性表，允许在一端（队尾）进行插入（进队/入队），在另一端（队首）进行删除（出队/离队）。具有先进先出（FIFO）的特性。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "04CON002",
            "name": "LIFO",
            "attributes": {
                "难度": "入门",
                "内容": "后进先出（Last In First Out）原则，是栈的主要特性。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP001",
            "name": "Push",
            "attributes": {
                "难度": "入门",
                "内容": "向栈顶插入一个新元素，使其成为新的栈顶元素。也称进栈或入栈。顺序栈实现通常为O(1)，除非需要扩容；链栈实现为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP002",
            "name": "Pop",
            "attributes": {
                "难度": "入门",
                "内容": "删除栈顶元素，使其下面的相邻元素成为新的栈顶元素。也称出栈或退栈。顺序栈和链栈实现均为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP003",
            "name": "InitStack",
            "attributes": {
                "难度": "入门",
                "内容": "初始化一个栈，通常是将其置为空栈。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP004",
            "name": "Peek",
            "attributes": {
                "难度": "入门",
                "内容": "返回栈顶元素的值，但不改变栈的状态（不删除元素）。顺序栈和链栈实现均为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP005",
            "name": "EmptyStack",
            "attributes": {
                "难度": "入门",
                "内容": "判断栈是否为空。顺序栈和链栈实现均为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP006",
            "name": "ClearStack",
            "attributes": {
                "难度": "入门",
                "内容": "清除栈中所有元素，使其成为空栈。对于动态分配的存储可能涉及释放空间。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS003",
            "name": "顺序栈",
            "attributes": {
                "难度": "入门",
                "内容": "使用数组（顺序存储结构）实现的栈。需要一个整型变量（栈顶指针top）来指示栈顶元素的位置。插入和删除操作的时间复杂度为O(1)，但可能需要处理栈满（扩容）和栈空的情况。",
                "存储开销": "O(N)固定空间或动态数组开销。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS008",
            "name": "数组",
            "attributes": {
                "难度": "入门",
                "内容": "一种线性数据结构，用连续的内存空间存储相同类型的元素，可通过下标随机访问。",
                "存储开销": "O(N)"
            }
        },
        {
            "type": "概念",
            "ID": "04CON004",
            "name": "O(1)",
            "attributes": {
                "难度": "入门",
                "内容": "常数时间复杂度，表示算法或操作的执行时间不随输入数据规模增长而增长。"
            }
        },
        {
            "type": "概念",
            "ID": "04CON005",
            "name": "时间复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "衡量算法执行时间随输入数据规模增长而变化的趋势，通常使用大O表示法。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS004",
            "name": "链栈",
            "attributes": {
                "难度": "入门",
                "内容": "使用链式存储结构（通常是单链表）实现的栈。栈顶指针指向链表的头结点。插入和删除操作仅在链表头部进行，时间复杂度为O(1)。",
                "存储开销": "O(N)，每个元素需要额外存储指针。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS009",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种链式存储的线性结构，每个节点包含数据域和指向下一个节点的指针域。",
                "存储开销": "O(N)，每个节点有指针开销。"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG001",
            "name": "括号配对检查",
            "attributes": {
                "难度": "入门",
                "内容": "使用栈检查 C/C++ 等语言程序中的括号（{}、[]、()）是否配对。扫描字符，遇左括号入栈，遇右括号检查栈顶是否匹配，若匹配则出栈，否则错误。文件结束时栈空则配对成功。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG002",
            "name": "进制转换",
            "attributes": {
                "难度": "入门",
                "内容": "将十进制整数转换为其他进制（如二至九进制）数输出。采用逐次除基数取余法，将余数入栈，最后依次出栈得到转换结果。",
                "时间复杂度": "O(log_r N)",
                "空间复杂度": "O(log_r N)"
            }
        },
        {
            "type": "概念",
            "ID": "04CON007",
            "name": "中缀表达式",
            "attributes": {
                "难度": "入门",
                "内容": "运算符放在两个操作数中间的常规算术表达式表示法。计算需考虑括号和运算符优先级。"
            }
        },
        {
            "type": "概念",
            "ID": "04CON008",
            "name": "后缀表达式",
            "attributes": {
                "难度": "入门",
                "内容": "运算符放在两个操作数之后的算术表达式表示法，也称逆波兰式（RPN）。计算时无需考虑括号和优先级，只需按运算符出现顺序计算。"
            }
        },
        {
            "type": "概念",
            "ID": "04CON009",
            "name": "运算符优先级",
            "attributes": {
                "难度": "入门",
                "内容": "规定不同运算符计算先后顺序的规则，如乘除优先于加减。"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG003",
            "name": "后缀表达式求值",
            "attributes": {
                "难度": "中等",
                "内容": "使用栈计算后缀表达式的值。从左到右扫描表达式，遇操作数入栈，遇运算符则弹出所需数量的操作数进行计算，结果再入栈。表达式结束时栈中唯一的值即为结果。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG004",
            "name": "中缀转后缀",
            "attributes": {
                "难度": "中等",
                "内容": "使用栈将中缀表达式转换为后缀表达式。扫描中缀表达式，遇操作数直接输出；遇运算符，与栈顶运算符比较优先级，若低于或等于栈顶，则栈顶出栈输出，直至栈顶低于当前运算符或遇左括号，当前运算符再入栈；遇左括号入栈；遇右括号，将栈内运算符出栈输出直至遇左括号。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "概念",
            "ID": "04CON010",
            "name": "递归",
            "attributes": {
                "难度": "中等",
                "内容": "一种解决问题的方法，通过求解与原问题结构相同但规模更小的子问题来得到原问题的解。递归算法通常包含基本情况（终止条件）和递归步骤（调用自身）。系统通常使用栈来实现递归调用。"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG005",
            "name": "阶乘计算(递归)",
            "attributes": {
                "难度": "入门",
                "内容": "使用递归计算n的阶乘。定义f(n) = n * f(n-1)，基本情况f(0) = 1。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG006",
            "name": "布尔组合",
            "attributes": {
                "难度": "中等",
                "内容": "使用递归生成n个布尔量的所有可能组合（2^n种）。对第k个位置，分别尝试置0和置1，然后递归处理第k+1个位置。",
                "时间复杂度": "O(n*2^n)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG007",
            "name": "全排列",
            "attributes": {
                "难度": "中等",
                "内容": "使用递归生成n个元素的所有排列（n!种）。对于位置k，依次将k到n-1的元素放到位置k，然后递归处理位置k+1。",
                "时间复杂度": "O(n!)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG008",
            "name": "迷宫求解(递归)",
            "attributes": {
                "难度": "中等",
                "内容": "使用递归寻找从迷宫入口到出口的路径。从当前位置(x,y)尝试向四个方向移动到新位置(g,h)，如果(g,h)可通行且未访问过，则递归调用SeekPath(g,h)。找到出口则返回true并记录路径。",
                "时间复杂度": "O(m*n)",
                "空间复杂度": "O(m*n)"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG009",
            "name": "汉诺塔",
            "attributes": {
                "难度": "中等",
                "内容": "使用递归解决汉诺塔问题。将n个盘子从A移到C（借助B）：1. 将n-1个盘子从A移到B（借助C）；2. 将第n个盘子从A移到C；3. 将n-1个盘子从B移到C（借助A）。",
                "时间复杂度": "O(2^n)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "概念",
            "ID": "04CON011",
            "name": "FIFO",
            "attributes": {
                "难度": "入门",
                "内容": "先进先出（First In First Out）原则，是队列的主要特性。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP007",
            "name": "Enqueue",
            "attributes": {
                "难度": "入门",
                "内容": "向队尾插入一个新元素。也称进队或入队。循环队列实现为O(1)除非需要扩容；链队实现为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP008",
            "name": "OutQueue",
            "attributes": {
                "难度": "入门",
                "内容": "删除队首元素并返回其值。也称出队或离队。循环队列和链队实现均为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP009",
            "name": "InitQueue",
            "attributes": {
                "难度": "入门",
                "内容": "初始化一个队列，通常是将其置为空队列。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP010",
            "name": "PeekQueue",
            "attributes": {
                "难度": "入门",
                "内容": "返回队首元素的值，但不改变队列的状态（不删除元素）。循环队列和链队实现均为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP011",
            "name": "EmptyQueue",
            "attributes": {
                "难度": "入门",
                "内容": "判断队列是否为空。循环队列和链队实现均为O(1)。"
            }
        },
        {
            "type": "操作",
            "ID": "04OP012",
            "name": "ClearQueue",
            "attributes": {
                "难度": "入门",
                "内容": "清除队列中所有元素，使其成为空队列。对于动态分配的存储可能涉及释放空间。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS005",
            "name": "循环队列",
            "attributes": {
                "难度": "入门",
                "内容": "使用数组（顺序存储结构）实现的队列，通过取模运算将数组空间逻辑上视为环形，以解决“假溢出”问题。通常需要队首(front)和队尾(rear)指针。判空和判满条件需要特别设计（如牺牲一个空间，或使用计数器）。",
                "存储开销": "O(N)固定空间。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS006",
            "name": "链队",
            "attributes": {
                "难度": "入门",
                "内容": "使用链式存储结构（通常是带头尾指针的单链表）实现的队列。队首指针(front)指向头结点，队尾指针(rear)指向尾结点。入队在尾部操作，出队在头部操作，时间复杂度均为O(1)。",
                "存储开销": "O(N)，每个元素需要额外存储指针。"
            }
        },
        {
            "type": "数据结构",
            "ID": "04DS007",
            "name": "优先级队列",
            "attributes": {
                "难度": "中等",
                "内容": "一种特殊的队列，其中每个元素关联一个优先级。出队操作总是移除优先级最高的元素。插入操作需要维护优先级顺序。常用于调度算法，通常用堆来实现。",
                "存储开销": "依赖于具体实现，如堆实现为O(N)。"
            }
        },
        {
            "type": "概念",
            "ID": "04CON012",
            "name": "优先级",
            "attributes": {
                "难度": "入门",
                "内容": "表示元素重要性或紧急程度的值，用于优先级队列等场景。"
            }
        },
        {
            "type": "算法",
            "ID": "04ALG010",
            "name": "渡口车辆调度",
            "attributes": {
                "难度": "中等",
                "内容": "模拟轮船渡口车辆管理。使用两个队列分别存储客车和货车，根据特定规则（如客车优先，按比例上船）安排车辆上船。",
                "时间复杂度": "依赖于操作次数",
                "空间复杂度": "O(N)，N为等待车辆数"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS001",
            "name": "树",
            "attributes": {
                "难度": "入门",
                "内容": "重要的非线性数据结构。递归定义：空树或由一个根结点和m棵互不相交的子树组成。定义了结点间的前驱、后继关系。适用场景: 家族关系、组织结构、书籍目录、算术表达式、目录结构等。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON001",
            "name": "结点",
            "attributes": {
                "难度": "入门",
                "内容": "树的基本组成单元，用于存储数据元素。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON002",
            "name": "根结点",
            "attributes": {
                "难度": "入门",
                "内容": "树中唯一没有前驱的结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON003",
            "name": "子树",
            "attributes": {
                "难度": "入门",
                "内容": "非空树中，除根结点外，其余结点被分为m棵互不相交的树，每棵称为根的子树。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON004",
            "name": "递归",
            "attributes": {
                "难度": "中等",
                "内容": "一种定义或解决问题的方法，其中函数或结构在其定义中调用自身。树的定义是递归的，方便实现树的运算。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON005",
            "name": "前驱",
            "attributes": {
                "难度": "入门",
                "内容": "在一个结点和其子树根结点的关系中，该结点是其子树根结点的前驱。除根结点外，每个结点有且仅有一个前驱。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON006",
            "name": "后继",
            "attributes": {
                "难度": "入门",
                "内容": "在一个结点和其子树根结点的关系中，子树的根结点是该结点的后继。结点可以有任意多个后继。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON007",
            "name": "空树",
            "attributes": {
                "难度": "入门",
                "内容": "不含有任何结点的树。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON008",
            "name": "树形表示法",
            "attributes": {
                "难度": "入门",
                "内容": "最常用的树表示法，结点间通过连线表示关系，方向隐含为从上向下或从左向右。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON009",
            "name": "二元组表示法",
            "attributes": {
                "难度": "入门",
                "内容": "使用结点集合K和结点间的关系R定义树：tree=(K, R)。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON010",
            "name": "集合图表示",
            "attributes": {
                "难度": "入门",
                "内容": "一种树的表示法，每棵树对应一个圆形，内含根结点和子树。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON011",
            "name": "凹入表示",
            "attributes": {
                "难度": "入门",
                "内容": "一种树的表示法，根对应条形，子树根对应较短条形，树根在上子树根在下。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON012",
            "name": "广义表表示",
            "attributes": {
                "难度": "入门",
                "内容": "一种树的表示法，根作为表名放前面，子树列表放在括号内，如 A(B(...), C(...))。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON013",
            "name": "结点的度",
            "attributes": {
                "难度": "入门",
                "内容": "结点拥有的子树数目，或其直接后继结点的数目。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON014",
            "name": "树的度",
            "attributes": {
                "难度": "入门",
                "内容": "树中所有结点的度的最大值。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON015",
            "name": "叶子结点",
            "attributes": {
                "难度": "入门",
                "内容": "度为0的结点，也称终端结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON016",
            "name": "分支结点",
            "attributes": {
                "难度": "入门",
                "内容": "度大于0的结点，也称非终端结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON017",
            "name": "孩子结点",
            "attributes": {
                "难度": "入门",
                "内容": "一个结点的子树的根结点，即该结点的直接后继。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON018",
            "name": "双亲结点",
            "attributes": {
                "难度": "入门",
                "内容": "孩子结点的直接前驱结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON019",
            "name": "兄弟结点",
            "attributes": {
                "难度": "入门",
                "内容": "具有相同双亲结点的孩子结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON020",
            "name": "子孙",
            "attributes": {
                "难度": "入门",
                "内容": "一个结点的所有子树中的所有结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON021",
            "name": "祖先",
            "attributes": {
                "难度": "入门",
                "内容": "从根结点到某结点路径上经过的所有结点（不含该结点自身，但含根结点）。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON022",
            "name": "层数",
            "attributes": {
                "难度": "入门",
                "内容": "结点在树中的层次。根结点为第1层，其孩子为第2层，以此类推。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON023",
            "name": "深度",
            "attributes": {
                "难度": "入门",
                "内容": "树中所有结点的最大层数，也称高度。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS002",
            "name": "有序树",
            "attributes": {
                "难度": "入门",
                "内容": "树中各结点的子树是按照一定的次序从左向右安排的。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS003",
            "name": "无序树",
            "attributes": {
                "难度": "入门",
                "内容": "树中各结点的子树没有次序关系。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON024",
            "name": "森林",
            "attributes": {
                "难度": "入门",
                "内容": "m (m >= 0) 棵互不相交的树的集合。一个结点的子树集合构成森林。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON025",
            "name": "树性质1 (结点数与度数关系)",
            "attributes": {
                "难度": "中等",
                "内容": "树中的结点数等于所有结点的度数之和加1。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON026",
            "name": "树性质2 (层结点数上限)",
            "attributes": {
                "难度": "中等",
                "内容": "度为k的树中第i层 (i >= 1) 上至多有 k^(i-1) 个结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON027",
            "name": "数学归纳法",
            "attributes": {
                "难度": "中等",
                "内容": "一种数学证明方法，常用于证明与自然数相关的命题。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON028",
            "name": "树性质3 (总结点数上限)",
            "attributes": {
                "难度": "中等",
                "内容": "深度为h的k叉树至多有 (k^h - 1) / (k - 1) 个结点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS004",
            "name": "k叉树",
            "attributes": {
                "难度": "入门",
                "内容": "度为k的树，即树中任意结点的度数最大为k。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS005",
            "name": "满k叉树",
            "attributes": {
                "难度": "中等",
                "内容": "深度为h且结点总数达到最大值 (k^h - 1) / (k - 1) 的k叉树。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON029",
            "name": "树性质4 (k叉树最小深度)",
            "attributes": {
                "难度": "中等",
                "内容": "具有n个结点的k叉树的最小深度为 ceil(log_k(n(k-1)+1))。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON030",
            "name": "向上取整",
            "attributes": {
                "难度": "入门",
                "内容": "ceil(x)，取大于等于x的最小整数。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON031",
            "name": "向下取整",
            "attributes": {
                "难度": "入门",
                "内容": "floor(x)，取小于等于x的最大整数。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS006",
            "name": "二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "度为2的有序树。递归定义：空树或由一个根结点及两棵互不相交的左、右子树组成。是最简单且重要的树结构。",
                "存储开销": "根据存储方式变化"
            }
        },
        {
            "type": "概念",
            "ID": "05CON032",
            "name": "左子树",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树根结点的左边子树。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON033",
            "name": "右子树",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树根结点的右边子树。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON034",
            "name": "左孩子",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树中，结点左子树的根结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON035",
            "name": "右孩子",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树中，结点右子树的根结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON036",
            "name": "二叉树性质1 (叶子与度2结点关系)",
            "attributes": {
                "难度": "中等",
                "内容": "二叉树中，叶子结点数 (n0) 等于度为2的结点数 (n2) 加1，即 n0 = n2 + 1。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON037",
            "name": "二叉树性质2 (层结点数上限)",
            "attributes": {
                "难度": "中等",
                "内容": "二叉树第i层 (i >= 1) 上至多有 2^(i-1) 个结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON038",
            "name": "二叉树性质3 (总结点数上限)",
            "attributes": {
                "难度": "中等",
                "内容": "深度为h的二叉树至多有 2^h - 1 个结点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS007",
            "name": "满二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "深度为h且结点总数为 2^h - 1 的二叉树。每一层都达到最大结点数。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS008",
            "name": "完全二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "深度为h的二叉树，除第h层外，其它各层(1~h-1)的结点数都达到最大个数，第h层的所有结点都连续集中在最左边。",
                "存储开销": "适合顺序存储"
            }
        },
        {
            "type": "概念",
            "ID": "05CON039",
            "name": "完全二叉树性质 (编号关系)",
            "attributes": {
                "难度": "中等",
                "内容": "按层序编号 (从1开始) 的完全二叉树：结点i的左孩子为2i，右孩子为2i+1 (若存在)；结点i的双亲为 floor(i/2) (若i>1)。编号 <= floor(n/2) 的是分支结点，其余是叶子结点。"
            }
        },
        {
            "type": "概念",
            "ID": "05CON040",
            "name": "完全二叉树性质 (深度)",
            "attributes": {
                "难度": "中等",
                "内容": "具有n个 (n>0) 结点的完全二叉树的深度为 ceil(log2(n+1)) 或 floor(log2 n) + 1。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS009",
            "name": "理想平衡二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "除最后一层外，其余各层结点数都是满的二叉树。最后一层结点可以任意分布。包含满二叉树和完全二叉树。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "05CON041",
            "name": "抽象数据类型 (ADT)",
            "attributes": {
                "难度": "中等",
                "内容": "定义数据对象、数据对象中元素间的关系及对数据元素的基本操作的集合。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP001",
            "name": "InitBTree",
            "attributes": {
                "难度": "入门",
                "内容": "初始化二叉树，将其置为空树 (根指针置NULL)。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP002",
            "name": "CreateBTree",
            "attributes": {
                "难度": "高级",
                "内容": "根据特定输入格式 (如广义表字符串) 建立二叉树的内存存储结构。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP003",
            "name": "EmptyBTree",
            "attributes": {
                "难度": "入门",
                "内容": "判断二叉树是否为空。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP004",
            "name": "TraverseBTree",
            "attributes": {
                "难度": "中等",
                "内容": "按照特定次序访问二叉树中的所有结点，且每个结点仅被访问一次。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP005",
            "name": "FindBTree",
            "attributes": {
                "难度": "中等",
                "内容": "在二叉树中查找具有特定值的结点。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP006",
            "name": "BTreeDepth",
            "attributes": {
                "难度": "中等",
                "内容": "计算并返回二叉树的深度。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP007",
            "name": "PrintBTree",
            "attributes": {
                "难度": "中等",
                "内容": "按照某种表示方法 (如广义表) 输出二叉树的结构。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP008",
            "name": "ClearBTree",
            "attributes": {
                "难度": "中等",
                "内容": "清除二叉树中的所有结点，释放内存空间，使其变为空树。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS010",
            "name": "二叉树顺序存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "使用一维数组存储二叉树结点。按完全二叉树的层序编号规则将结点值存入数组对应下标位置。通过下标计算父子关系。",
                "存储开销": "对于满二叉树和完全二叉树空间利用率高；对于一般稀疏二叉树会浪费大量空间。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS011",
            "name": "二叉树链接存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "使用链式结构存储二叉树。每个结点包含数据域和指向左右孩子的指针域。",
                "存储开销": "每个结点需要额外存储指针，但空间利用率通常比稀疏二叉树的顺序存储高。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS012",
            "name": "二叉链表",
            "attributes": {
                "难度": "中等",
                "内容": "最常用的二叉树链接存储结构，结点包含数据域、左孩子指针域 (left)、右孩子指针域 (right)。",
                "存储开销": "数据 + 2个指针 / 结点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS013",
            "name": "带双亲指针的二叉链表",
            "attributes": {
                "难度": "中等",
                "内容": "在二叉链表的基础上，为每个结点增加一个指向其双亲结点的指针域 (parent)。",
                "存储开销": "数据 + 3个指针 / 结点。便于查找双亲。"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG001",
            "name": "二叉树遍历",
            "attributes": {
                "难度": "中等",
                "内容": "指按照一定次序访问树中所有结点，并且每个结点的值仅被访问一次的过程。基本操作包括访问根(D)、遍历左子树(L)、遍历右子树(R)。",
                "时间复杂度": "O(n)",
                "空间复杂度": "取决于实现方式 (递归O(h), 非递归可能不同)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG002",
            "name": "前序遍历 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "遍历顺序：根结点 -> 左子树 -> 右子树 (DLR)。使用递归实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)，h为树高 (递归栈深度)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG003",
            "name": "中序遍历 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "遍历顺序：左子树 -> 根结点 -> 右子树 (LDR)。使用递归实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)，h为树高 (递归栈深度)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG004",
            "name": "后序遍历 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "遍历顺序：左子树 -> 右子树 -> 根结点 (LRD)。使用递归实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)，h为树高 (递归栈深度)"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS014",
            "name": "栈",
            "attributes": {
                "难度": "入门",
                "内容": "一种后进先出(LIFO)的数据结构。在树的递归遍历中隐式使用 (系统栈)，也可用于非递归遍历的实现。",
                "存储开销": "取决于存储元素数量和类型"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG005",
            "name": "按层遍历",
            "attributes": {
                "难度": "中等",
                "内容": "按层次顺序遍历二叉树，从上到下，同一层从左到右。通常使用队列实现，非递归。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(w)，w为树的最大宽度 (队列所需空间)"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS015",
            "name": "队列",
            "attributes": {
                "难度": "入门",
                "内容": "一种先进先出(FIFO)的数据结构。常用于实现树的按层遍历。",
                "存储开销": "取决于存储元素数量和类型"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG006",
            "name": "建立二叉树 (广义表)",
            "attributes": {
                "难度": "高级",
                "内容": "根据广义表表示的字符串构建二叉树的链接存储结构。使用栈来辅助处理嵌套关系和左右子树的链接。",
                "时间复杂度": "O(N)，N为广义表字符串长度",
                "空间复杂度": "O(h)，h为树高 (栈深度)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG007",
            "name": "求二叉树深度 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归计算二叉树的深度。空树深度为0，非空树深度为左右子树深度的最大值加1。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG008",
            "name": "查找二叉树结点 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归地在二叉树中查找具有给定值的结点。类似于前序遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG009",
            "name": "输出二叉树 (广义表递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归地将二叉树以广义表的形式输出。类似于前序遍历，并在适当位置添加括号和逗号。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG010",
            "name": "清除二叉树 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归地删除二叉树的所有结点，释放内存。类似于后序遍历，先删除子树，再删除根。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "操作",
            "ID": "05OP009",
            "name": "InitGTree",
            "attributes": {
                "难度": "入门",
                "内容": "初始化普通树 (k叉树)，置为空树。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP010",
            "name": "CreateGTree",
            "attributes": {
                "难度": "高级",
                "内容": "根据广义表表示建立普通树 (k叉树) 的存储结构。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP011",
            "name": "TraverseGTree",
            "attributes": {
                "难度": "中等",
                "内容": "按一定次序遍历普通树 (k叉树)。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP012",
            "name": "FindGTree",
            "attributes": {
                "难度": "中等",
                "内容": "在普通树 (k叉树) 中查找特定值的结点。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP013",
            "name": "PrintGTree",
            "attributes": {
                "难度": "中等",
                "内容": "按某种表示法输出普通树 (k叉树)。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP014",
            "name": "EmptyGTree",
            "attributes": {
                "难度": "入门",
                "内容": "判断普通树 (k叉树) 是否为空。"
            }
        },
        {
            "type": "操作",
            "ID": "05OP015",
            "name": "ClearGTree",
            "attributes": {
                "难度": "中等",
                "内容": "清除普通树 (k叉树) 中的所有结点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS017",
            "name": "k叉树顺序存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "使用一维数组存储k叉树结点。需要定义结点编号规则及父子关系计算公式。如：根为1，结点i的孩子为 k*i-(k-2) 到 k*i+1；结点j的父亲为 floor((j-2)/k)+1。",
                "存储开销": "适合满k叉树和完全k叉树，否则空间浪费严重。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS018",
            "name": "k叉树链接存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "使用链式结构存储k叉树。有多种实现方式。",
                "存储开销": "取决于具体实现方式。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS019",
            "name": "标准方式 (k叉树链接存储)",
            "attributes": {
                "难度": "中等",
                "内容": "每个结点包含值域和k个指针域，分别指向k个孩子结点 (或子树)。",
                "存储开销": "数据 + k个指针 / 结点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS020",
            "name": "广义标准方式 (k叉树链接存储)",
            "attributes": {
                "难度": "中等",
                "内容": "在标准方式基础上，增加一个指向双亲结点的指针域。",
                "存储开销": "数据 + k+1个指针 / 结点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "05DS021",
            "name": "二叉树方式 (树存储)",
            "attributes": {
                "难度": "高级",
                "内容": "将普通树转换为等价的二叉树（左孩子-右兄弟表示法），然后使用二叉链表存储。",
                "存储开销": "同二叉链表 (数据 + 2指针 / 结点)。不适合表示某些有序树。"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG011",
            "name": "建立k叉树 (广义表)",
            "attributes": {
                "难度": "高级",
                "内容": "根据广义表字符串创建k叉树的标准链接存储结构。使用两个栈，一个存结点指针，一个存孩子序号。",
                "时间复杂度": "O(N)，N为广义表字符串长度",
                "空间复杂度": "O(h)，h为树高 (栈深度)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG012",
            "name": "先根遍历 (k叉树)",
            "attributes": {
                "难度": "中等",
                "内容": "遍历顺序：访问根结点 -> 从左到右依次先根遍历各子树。递归实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG013",
            "name": "后根遍历 (k叉树)",
            "attributes": {
                "难度": "中等",
                "内容": "遍历顺序：从左到右依次后根遍历各子树 -> 访问根结点。递归实现。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG014",
            "name": "按层遍历 (k叉树)",
            "attributes": {
                "难度": "中等",
                "内容": "按层次顺序遍历k叉树，从上到下，同层从左到右。使用队列实现，非递归。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(w)，w为树的最大宽度"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG015",
            "name": "查找k叉树结点 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归地在k叉树中查找具有给定值的结点。类似于先根遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG016",
            "name": "输出k叉树 (广义表递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归地将k叉树以广义表的形式输出。类似于先根遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG017",
            "name": "求k叉树深度 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归计算k叉树的深度。空树为0，非空树为所有子树深度的最大值加1。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "算法",
            "ID": "05ALG018",
            "name": "清除k叉树 (递归)",
            "attributes": {
                "难度": "中等",
                "内容": "递归地删除k叉树的所有结点。类似于后根遍历。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(h)"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS001",
            "name": "二叉搜索树",
            "attributes": {
                "难度": "中等",
                "内容": "又称二叉排序树。或为空树，或为非空二叉树，满足：若左子树非空，则左子树所有关键字小于根；若右子树非空，则右子树所有关键字大于(或大于等于)根；左右子树本身也是二叉搜索树。特性：中序遍历结果为有序序列。适用场景：需要高效查找、插入、删除的动态集合。",
                "存储开销": "链式存储"
            }
        },
        {
            "type": "概念",
            "ID": "06CON001",
            "name": "关键字",
            "attributes": {
                "难度": "入门",
                "内容": "结点中用于比较和排序的值。可以是结点本身的值（简单类型），也可以是结点记录中的某个域（记录类型）。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON002",
            "name": "中序遍历",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树的一种遍历方式（左子树-根结点-右子树）。对二叉搜索树进行中序遍历，得到的结点序列必然是有序的。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON003",
            "name": "抽象数据类型",
            "attributes": {
                "难度": "入门",
                "内容": "定义数据对象、数据对象上关系的集合以及数据对象的基本操作集。例如二叉搜索树ADT定义了数据（BST）和操作（查找、更新、插入、删除）。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP001",
            "name": "查找 (BST)",
            "attributes": {
                "难度": "入门",
                "内容": "从二叉搜索树中查找等于给定值的元素。步骤：若树空，失败；若根等于目标，成功；若目标小于根，递归查左子树；若目标大于根，递归查右子树。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP002",
            "name": "更新 (BST)",
            "attributes": {
                "难度": "入门",
                "内容": "从二叉搜索树中查找等于给定值的元素，若查找成功则用新值更新该元素。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP003",
            "name": "插入 (BST)",
            "attributes": {
                "难度": "入门",
                "内容": "向二叉搜索树中插入一个新元素，使得插入后仍保持二叉搜索树的性质。步骤：查找插入位置（查找失败的路径终点），链接新结点。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP004",
            "name": "删除 (BST)",
            "attributes": {
                "难度": "中等",
                "内容": "从二叉搜索树中删除等于给定值的结点，并保持二叉搜索树的性质。需分情况处理：删除叶子结点、删除单分支结点、删除双分支结点（通常用中序前驱或后继替换）。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG001",
            "name": "BST查找-递归",
            "attributes": {
                "难度": "入门",
                "内容": "原理：基于二叉搜索树定义，递归地在根、左子树或右子树中查找目标值。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "平均 O(log n), 最坏 O(n)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON004",
            "name": "递归",
            "attributes": {
                "难度": "入门",
                "内容": "一个函数在其定义中直接或间接调用自身的过程。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON005",
            "name": "末尾递归",
            "attributes": {
                "难度": "中等",
                "内容": "递归调用是函数体中最后一条可执行语句。可以被优化，避免栈空间积累。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON006",
            "name": "数据堆栈",
            "attributes": {
                "难度": "入门",
                "内容": "程序运行时用于存储函数调用信息（如返回地址、局部变量、参数）的内存区域，递归调用会使用。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG002",
            "name": "BST查找-非递归",
            "attributes": {
                "难度": "入门",
                "内容": "原理：使用循环代替递归，维护一个指向当前比较结点的指针，根据比较结果移动指针。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON007",
            "name": "时间复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "衡量算法执行时间随输入规模增长的量度，通常用大O表示法表示渐进时间复杂度。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON008",
            "name": "空间复杂度",
            "attributes": {
                "难度": "入门",
                "内容": "衡量算法执行过程中所需额外存储空间随输入规模增长的量度。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON009",
            "name": "O记号",
            "attributes": {
                "难度": "入门",
                "内容": "（大O表示法）描述函数渐进上界的数学符号，用于分析算法复杂度，如O(1), O(log n), O(n), O(n log n)。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON010",
            "name": "理想平衡树",
            "attributes": {
                "难度": "中等",
                "内容": "高度尽可能小的二叉树，对于n个结点的树，高度接近log n，查找效率最高。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON011",
            "name": "单支树",
            "attributes": {
                "难度": "入门",
                "内容": "所有结点只有左子树或只有右子树的退化二叉树，形态类似链表，查找等操作效率降为O(n)。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG003",
            "name": "BST插入-递归",
            "attributes": {
                "难度": "入门",
                "内容": "原理：递归查找插入位置，若找到空链接则创建新结点插入；否则根据比较结果递归进入左子树或右子树。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "平均 O(log n), 最坏 O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG004",
            "name": "BST插入-非递归",
            "attributes": {
                "难度": "入门",
                "内容": "原理：使用循环查找插入位置，需要记录父结点指针。找到合适的空链接后，链接新结点。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG005",
            "name": "CreateBSTree",
            "attributes": {
                "难度": "入门",
                "内容": "原理：从一个空的二叉搜索树开始，依次将数组中的n个元素通过调用插入算法添加到树中。",
                "时间复杂度": "一般 O(n log n)",
                "空间复杂度": "O(n) (树本身) + 插入算法空间"
            }
        },
        {
            "type": "概念",
            "ID": "06CON012",
            "name": "中序前驱",
            "attributes": {
                "难度": "入门",
                "内容": "在二叉树的中序遍历序列中，位于一个结点之前的那个结点。在BST删除双分支结点时，可用来替换被删结点。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG006",
            "name": "BST删除-递归",
            "attributes": {
                "难度": "中等",
                "内容": "原理：递归查找待删除结点。找到后分情况处理：(1)叶子结点：直接删除。(2)单分支结点：用其孩子替换。(3)双分支结点：用其中序前驱(左子树最右结点)或中序后继(右子树最左结点)的值替换，然后递归删除那个前驱/后继结点。",
                "时间复杂度": "平均 O(log n), 最坏 O(n)",
                "空间复杂度": "平均 O(log n), 最坏 O(n)"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS002",
            "name": "堆",
            "attributes": {
                "难度": "中等",
                "内容": "一种特殊的完全二叉树。分为小根堆（父结点值 <= 子结点值）和大根堆（父结点值 >= 子结点值）。特性：堆顶元素是最小（小根堆）或最大（大根堆）元素。适用场景：优先级队列实现、堆排序。",
                "存储开销": "顺序存储 (通常使用数组)"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS003",
            "name": "完全二叉树",
            "attributes": {
                "难度": "入门",
                "内容": "一棵深度为k、有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应时，称为完全二叉树。特点是结点按层序编号后是连续的，适合顺序存储。",
                "存储开销": "顺序存储或链式存储"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS004",
            "name": "小根堆",
            "attributes": {
                "难度": "中等",
                "内容": "堆的一种。它是一棵完全二叉树，且满足：对于树中任意结点，其值小于或等于其左右孩子结点的值。根结点的值是整个堆中的最小值。",
                "存储开销": "顺序存储"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS005",
            "name": "大根堆",
            "attributes": {
                "难度": "中等",
                "内容": "堆的一种。它是一棵完全二叉树，且满足：对于树中任意结点，其值大于或等于其左右孩子结点的值。根结点的值是整个堆中的最大值。",
                "存储开销": "顺序存储"
            }
        },
        {
            "type": "概念",
            "ID": "06CON013",
            "name": "优先级队列",
            "attributes": {
                "难度": "中等",
                "内容": "一种抽象数据类型，允许插入元素，并能从中取出具有最高（或最低）优先级的元素。堆是实现优先级队列的常用数据结构。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP005",
            "name": "初始化堆",
            "attributes": {
                "难度": "入门",
                "内容": "创建一个空堆。对于顺序存储的堆，通常涉及分配数组空间并将堆的当前大小置为0。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP006",
            "name": "清除堆",
            "attributes": {
                "难度": "入门",
                "内容": "释放堆所占用的存储空间，使其恢复到初始空状态。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP007",
            "name": "判断堆是否为空",
            "attributes": {
                "难度": "入门",
                "内容": "检查堆中当前包含的元素数量是否为0。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP008",
            "name": "插入 (Heap)",
            "attributes": {
                "难度": "中等",
                "内容": "向堆中添加一个新元素，并调整堆结构以维持堆属性。步骤：将新元素添加到堆底（数组末尾），然后执行向上调整（上滤）操作。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP009",
            "name": "删除 (Heap)",
            "attributes": {
                "难度": "中等",
                "内容": "从堆中移除并返回具有最高（大根堆）或最低（小根堆）优先级的元素（即堆顶元素），并调整堆结构以维持堆属性。步骤：保存堆顶元素，将堆底元素移至堆顶，然后执行向下调整（下滤）操作。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG007",
            "name": "堆插入调整算法",
            "attributes": {
                "难度": "中等",
                "内容": "（上滤）原理：新插入的元素（位于堆底）与其父结点比较，若违反堆序（如小根堆中子<父），则交换位置，并继续与新的父结点比较，直至满足堆序或到达堆顶。",
                "时间复杂度": "O(log n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG008",
            "name": "堆删除调整算法",
            "attributes": {
                "难度": "中等",
                "内容": "（下滤）原理：将移至堆顶的元素与其子结点比较，若违反堆序（如小根堆中父>子），则与较小（小根堆）或较大（大根堆）的孩子交换位置，并继续与新的子结点比较，直至满足堆序或到达叶子结点。",
                "时间复杂度": "O(log n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON014",
            "name": "路径",
            "attributes": {
                "难度": "入门",
                "内容": "树中从一个结点到另一个结点的唯一结点序列 k1, k2, ..., kj，其中 ki 是 ki+1 的双亲。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON015",
            "name": "路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "树中两个结点之间路径上的分支（边）的数量，等于路径上的结点数减 1。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON016",
            "name": "结点的权",
            "attributes": {
                "难度": "入门",
                "内容": "赋予树中结点的一个具有特定意义的数值（通常是实数）。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON017",
            "name": "带权路径长度 (结点)",
            "attributes": {
                "难度": "入门",
                "内容": "从树根结点到该结点之间的路径长度与该结点上的权的乘积。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON018",
            "name": "树的带权路径长度 (WPL)",
            "attributes": {
                "难度": "中等",
                "内容": "树中所有叶子结点的带权路径长度之和，记为 WPL = Σ(wi * li)，其中 wi 是叶结点的权，li 是根到该叶结点的路径长度。"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS006",
            "name": "哈夫曼树",
            "attributes": {
                "难度": "中等",
                "内容": "又称最优二叉树。对于n个带权叶子结点，它是构成的所有二叉树中带权路径长度（WPL）最小的二叉树。特性：权值越大的叶结点离根越近；树中只有度为0（叶子）和度为2的结点。适用场景：哈夫曼编码（数据压缩）。",
                "存储开销": "链式存储"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG009",
            "name": "构造哈夫曼树算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：(1)初始化n棵只有一个带权根结点的树构成森林。(2)循环n-1次：从森林中选取权值最小的两棵树，合并成一棵新树（根权值为子树根权值之和），新树的左右子树为选出的两棵树。(3)从森林删除选出的两棵树，加入新树。(4)最终森林只剩一棵树即为哈夫曼树。",
                "时间复杂度": "O(n log n) (使用优先队列优化选择过程)",
                "空间复杂度": "O(n)"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG010",
            "name": "WeightPathLength算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：递归计算哈夫曼树的WPL。函数接收树根指针和当前深度len。若为空树返回0；若为叶子结点返回权值*len；否则递归计算左右子树的WPL并求和（传递len+1）。",
                "时间复杂度": "O(N) (N为总结点数)",
                "空间复杂度": "O(H) (H为树高)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON019",
            "name": "哈夫曼编码",
            "attributes": {
                "难度": "中等",
                "内容": "利用哈夫曼树生成的一种最优前缀编码。将字符按出现频率赋予权值构造哈夫曼树，从根到各叶子结点的路径（左0右1）即为对应字符的编码。频率高的字符编码短，频率低的编码长，可用于数据压缩。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON020",
            "name": "等长编码",
            "attributes": {
                "难度": "入门",
                "内容": "为字符集中的每个字符分配相同长度的二进制码字的编码方式。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON021",
            "name": "不等长编码",
            "attributes": {
                "难度": "入门",
                "内容": "为字符集中的不同字符分配不同长度的二进制码字的编码方式。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON022",
            "name": "无前缀编码",
            "attributes": {
                "难度": "中等",
                "内容": "一种编码方案，其中没有任何码字是另一个码字的前缀。这保证了编码序列可以被唯一地、无歧义地解码。哈夫曼编码是一种无前缀编码。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG011",
            "name": "HuffManCoding算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：递归遍历哈夫曼树，使用一个数组记录从根到当前结点的路径编码（左分支记0，右分支记1）。当访问到叶子结点时，输出该叶子结点的权值和记录的路径编码。",
                "时间复杂度": "O(N) (N为总结点数)",
                "空间复杂度": "O(H) (H为树高)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON023",
            "name": "前驱",
            "attributes": {
                "难度": "入门",
                "内容": "在线性序列（如遍历序列）中，位于某元素之前的那个元素。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON024",
            "name": "后继",
            "attributes": {
                "难度": "入门",
                "内容": "在线性序列（如遍历序列）中，位于某元素之后的那个元素。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON025",
            "name": "中序后继",
            "attributes": {
                "难度": "入门",
                "内容": "在二叉树的中序遍历序列中，位于一个结点之后的那个结点。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON026",
            "name": "线索",
            "attributes": {
                "难度": "中等",
                "内容": "利用二叉链表中空的指针域（原本指向NULL的left或right指针）存放指向结点在某种遍历次序下的前驱或后继结点的指针。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON027",
            "name": "左线索",
            "attributes": {
                "难度": "中等",
                "内容": "存放在结点空左指针域中，指向其（某种遍历次序下）前驱结点的线索。也称前驱线索。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON028",
            "name": "右线索",
            "attributes": {
                "难度": "中等",
                "内容": "存放在结点空右指针域中，指向其（某种遍历次序下）后继结点的线索。也称后继线索。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP010",
            "name": "线索化",
            "attributes": {
                "难度": "中等",
                "内容": "按照某种遍历次序（如先序、中序、后序），将二叉树中所有结点的空指针域改为指向其前驱或后继结点的线索的过程。"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS007",
            "name": "线索二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "将二叉树经过线索化处理后得到的二叉树。结点结构通常增加标志域以区分指针是指向孩子还是线索。优点是可以在不使用栈的情况下进行相应次序的遍历。",
                "存储开销": "链式存储 (结点增加标志域)"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS008",
            "name": "中序线索二叉树",
            "attributes": {
                "难度": "中等",
                "内容": "进行了中序线索化的二叉树。空左指针指向中序前驱，空右指针指向中序后继。",
                "存储开销": "链式存储 (结点增加标志域)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON029",
            "name": "线索标志域",
            "attributes": {
                "难度": "入门",
                "内容": "在线索二叉树的结点结构中增加的标志位（如 ltag, rtag），用于区分对应的指针域（left, right）存放的是指向孩子结点的指针还是指向前驱/后继结点的线索。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP011",
            "name": "中序线索化",
            "attributes": {
                "难度": "中等",
                "内容": "对二叉树进行中序遍历，在遍历过程中修改结点的空指针域，使其指向相应的中序前驱或中序后继。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG012",
            "name": "InThread算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：在中序遍历递归框架内实现中序线索化。维护一个指向前驱结点的全局或引用指针pre。访问当前结点时，检查pre的右指针是否为空（rtag=true），若是则令其指向当前结点；检查当前结点的左指针是否为空，若是则令其指向pre并设ltag=true；检查当前结点的右指针是否为空，若是则设rtag=true；最后更新pre为当前结点。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(H) (递归栈)"
            }
        },
        {
            "type": "操作",
            "ID": "06OP012",
            "name": "前序线索化",
            "attributes": {
                "难度": "中等",
                "内容": "对二叉树进行前序遍历，在遍历过程中修改结点的空指针域，使其指向相应的前序前驱或前序后继。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP013",
            "name": "后序线索化",
            "attributes": {
                "难度": "中等",
                "内容": "对二叉树进行后序遍历，在遍历过程中修改结点的空指针域，使其指向相应的后序前驱或后序后继。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG013",
            "name": "InsertThreed算法",
            "attributes": {
                "难度": "入门",
                "内容": "原理：向带线索标志域的二叉搜索树中插入元素，但只建立父子关系，不创建或更新线索链接，插入的新结点线索标志域默认为假（指向孩子，即使孩子为空）。",
                "时间复杂度": "未知",
                "空间复杂度": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG014",
            "name": "CreateThreed算法",
            "attributes": {
                "难度": "入门",
                "内容": "原理：初始化空树，然后循环调用InsertThreed算法，将数组中的n个元素依次插入，建立一个带线索标志域但未线索化的二叉搜索树。",
                "时间复杂度": "未知",
                "空间复杂度": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG015",
            "name": "InsertThreed1算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：向已线索化的二叉搜索树中插入新元素，并同时维护和更新线索。查找插入位置时需考虑线索标志。插入新结点（作为叶子）后，需正确设置其左右线索指向其前驱和后继，并修改其父结点的相应指针和标志域。",
                "时间复杂度": "未知",
                "空间复杂度": "未知"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG016",
            "name": "CreateThread1算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：初始化空树，然后循环调用InsertThreed1算法，将数组中的n个元素依次插入，建立一个完全线索化的二叉搜索树。",
                "时间复杂度": "未知",
                "空间复杂度": "未知"
            }
        },
        {
            "type": "操作",
            "ID": "06OP014",
            "name": "查找中序后继",
            "attributes": {
                "难度": "入门",
                "内容": "在中序线索二叉树中查找给定结点p的中序后继。步骤：(1)若p的右线索标志为真(rtag=true)，则p的右指针直接指向后继。(2)若p的右线索标志为假(rtag=false)，则其后继是其右子树中第一个被中序遍历到的结点（即右子树的最左下结点）。"
            }
        },
        {
            "type": "算法",
            "ID": "06ALG017",
            "name": "ThInorder算法",
            "attributes": {
                "难度": "中等",
                "内容": "原理：利用中序线索进行非递归的中序遍历。(1)找到整棵树中序遍历的第一个结点（沿根的左指针链一直向下直到ltag=true）。(2)循环：访问当前结点；利用查找中序后继操作找到下一个结点，直到后继为空。",
                "时间复杂度": "O(n)",
                "空间复杂度": "O(1)"
            }
        },
        {
            "type": "数据结构",
            "ID": "06DS009",
            "name": "平衡二叉树",
            "attributes": {
                "难度": "高级",
                "内容": "简称平衡树，通常指AVL树。是一种自平衡的二叉搜索树。要求树中任何结点的左、右子树的高度差的绝对值不超过1（即平衡因子为-1, 0, 1）。插入和删除操作可能破坏平衡，需要通过旋转操作（LL, RR, LR, RL）来恢复平衡。优点：查找、插入、删除的平均和最坏时间复杂度都是O(log n)。缺点：插入删除操作相对复杂。",
                "存储开销": "链式存储 (结点通常需存储平衡因子或高度)"
            }
        },
        {
            "type": "概念",
            "ID": "06CON030",
            "name": "平衡因子",
            "attributes": {
                "难度": "入门",
                "内容": "二叉树中结点的左子树高度减去其右子树高度的值。在平衡二叉树（AVL树）中，每个结点的平衡因子只能是-1、0或1。"
            }
        },
        {
            "type": "概念",
            "ID": "06CON031",
            "name": "最小不平衡子树",
            "attributes": {
                "难度": "中等",
                "内容": "在向（或从）平衡二叉树插入（或删除）结点后，以离插入（或删除）位置最近的那个平衡因子绝对值大于1的结点作为根的子树。平衡调整操作通常针对最小不平衡子树进行。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP015",
            "name": "LL型调整",
            "attributes": {
                "难度": "高级",
                "内容": "平衡二叉树的一种旋转操作。当因在结点A的左孩子B的左子树上插入新结点，导致A的平衡因子变为2时进行。执行一次右旋转：将B提升为子树的新根，A成为B的右孩子，B原来的右子树成为A的左子树。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP016",
            "name": "RR型调整",
            "attributes": {
                "难度": "高级",
                "内容": "平衡二叉树的一种旋转操作。当因在结点A的右孩子B的右子树上插入新结点，导致A的平衡因子变为-2时进行。执行一次左旋转：将B提升为子树的新根，A成为B的左孩子，B原来的左子树成为A的右子树。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP017",
            "name": "LR型调整",
            "attributes": {
                "难度": "高级",
                "内容": "平衡二叉树的一种旋转操作。当因在结点A的左孩子B的右子树C上插入新结点，导致A的平衡因子变为2时进行。执行先左后右两次旋转：先对B进行一次左旋转（RR型），再对A进行一次右旋转（LL型）。"
            }
        },
        {
            "type": "操作",
            "ID": "06OP018",
            "name": "RL型调整",
            "attributes": {
                "难度": "高级",
                "内容": "平衡二叉树的一种旋转操作。当因在结点A的右孩子B的左子树C上插入新结点，导致A的平衡因子变为-2时进行。执行先右后左两次旋转：先对B进行一次右旋转（LL型），再对A进行一次左旋转（RR型）。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS001",
            "name": "图",
            "attributes": {
                "难度": "中等",
                "内容": "复杂的非线性数据结构，由顶点集 (V) 和边集 (E) 组成。V 是顶点集合，E 是 V 上顶点对（序偶或无序对）的集合，表示顶点之间的关系。对每个顶点的前驱和后继个数均不加限制。",
                "存储开销": "依赖具体存储结构（如邻接矩阵O(n^2), 邻接表O(n+e)）"
            }
        },
        {
            "type": "概念",
            "ID": "07CON001",
            "name": "顶点集",
            "attributes": {
                "难度": "入门",
                "内容": "图 G=(V,E) 中的顶点集合 V，包含图的所有顶点。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON002",
            "name": "边集",
            "attributes": {
                "难度": "入门",
                "内容": "图 G=(V,E) 中的边集 E，是 V 上顶点的序偶（有向边）或无序对（无向边）的集合，表示顶点之间的关系。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS002",
            "name": "有向图",
            "attributes": {
                "难度": "中等",
                "内容": "边集 E 由序偶（有向边）组成的图。边表示从一个顶点指向另一个顶点的关系。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS003",
            "name": "无向图",
            "attributes": {
                "难度": "中等",
                "内容": "边集 E 由无序对（无向边）组成的图。边表示顶点之间无方向的连接关系。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "07CON003",
            "name": "孤立顶点",
            "attributes": {
                "难度": "入门",
                "内容": "图中没有任何边与其相连的顶点。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON004",
            "name": "端点",
            "attributes": {
                "难度": "入门",
                "内容": "一条边的两个顶点被称为该边的端点。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON005",
            "name": "邻接点",
            "attributes": {
                "难度": "入门",
                "内容": "若两个顶点之间存在一条边，则称它们互为邻接点。在有向图中，区分出边邻接点和入边邻接点。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON006",
            "name": "出边",
            "attributes": {
                "难度": "入门",
                "内容": "有向图中从一个顶点出发指向另一个顶点的边。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON007",
            "name": "入边",
            "attributes": {
                "难度": "入门",
                "内容": "有向图中指向一个顶点的边。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON008",
            "name": "起点",
            "attributes": {
                "难度": "入门",
                "内容": "有向边<v_i,v_j>中的顶点v_i。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON009",
            "name": "终点",
            "attributes": {
                "难度": "入门",
                "内容": "有向边<v_i,v_j>中的顶点v_j。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON010",
            "name": "度",
            "attributes": {
                "难度": "入门",
                "内容": "与一个顶点相关联的边的数量。在无向图中指连接到该顶点的边的数量；在有向图中等于入度和出度之和。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON011",
            "name": "入度",
            "attributes": {
                "难度": "入门",
                "内容": "有向图中指向一个顶点的边的数量。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON012",
            "name": "出度",
            "attributes": {
                "难度": "入门",
                "内容": "有向图中从一个顶点出发的边的数量。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS004",
            "name": "完全图",
            "attributes": {
                "难度": "中等",
                "内容": "无向图中每对不同顶点之间都恰好有一条边相连，或有向图中每对不同顶点之间都有两条方向相反的边相连的图。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS005",
            "name": "稠密图",
            "attributes": {
                "难度": "中等",
                "内容": "边数接近顶点数平方量级的图。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS006",
            "name": "稀疏图",
            "attributes": {
                "难度": "中等",
                "内容": "边数远小于顶点数平方量级（通常与顶点数n同数量级）的图。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "07CON013",
            "name": "子图",
            "attributes": {
                "难度": "入门",
                "内容": "由原图 G 的部分顶点 V' (⊆V) 和部分边 E' (⊆E) 构成的图 G'，且 E' 中的边的端点必须属于 V'。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON014",
            "name": "路径",
            "attributes": {
                "难度": "入门",
                "内容": "图中从一个顶点到另一个顶点的顶点序列，序列中相邻顶点之间必须有边相连。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON015",
            "name": "路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "路径中所包含的边的数量。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON016",
            "name": "简单路径",
            "attributes": {
                "难度": "入门",
                "内容": "路径上所有顶点（除了可能的起点和终点）均不重复的路径。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON017",
            "name": "回路",
            "attributes": {
                "难度": "入门",
                "内容": "起点和终点相同的路径。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON018",
            "name": "简单回路",
            "attributes": {
                "难度": "入门",
                "内容": "除了起点和终点相同外，其余所有顶点均不重复的回路。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON019",
            "name": "连通 (无向)",
            "attributes": {
                "难度": "入门",
                "内容": "在无向图中，如果两个顶点 v_i 和 v_j 之间存在路径，则称它们是连通的。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS007",
            "name": "连通图",
            "attributes": {
                "难度": "中等",
                "内容": "无向图中任意两个顶点之间都存在路径的图。",
                "存储开销": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS008",
            "name": "非连通图",
            "attributes": {
                "难度": "中等",
                "内容": "无向图中存在至少一对顶点之间没有路径相连的图。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "07CON020",
            "name": "连通分量",
            "attributes": {
                "难度": "中等",
                "内容": "无向图中的一个极大连通子图。非连通图由多个连通分量组成。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON021",
            "name": "连通 (有向)",
            "attributes": {
                "难度": "入门",
                "内容": "在有向图中，如果从顶点 v_i 到顶点 v_j 存在路径，则称 v_i 到 v_j 是连通的。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS009",
            "name": "强连通图",
            "attributes": {
                "难度": "中等",
                "内容": "有向图中任意两个顶点 v_i 和 v_j 之间都相互存在路径（即从 v_i 到 v_j 和从 v_j 到 v_i 都有路径）的图。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "07CON022",
            "name": "强连通分量",
            "attributes": {
                "难度": "中等",
                "内容": "有向图中的一个极大强连通子图。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON023",
            "name": "权",
            "attributes": {
                "难度": "入门",
                "内容": "赋予图中边的数值，通常为非负实数，可以表示长度、成本、容量等含义。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS010",
            "name": "带权图",
            "attributes": {
                "难度": "中等",
                "内容": "边上赋有权值的图，也称作网 (Network)。",
                "存储开销": "未知"
            }
        },
        {
            "type": "概念",
            "ID": "07CON024",
            "name": "图的抽象数据类型",
            "attributes": {
                "难度": "中等",
                "内容": "定义了图的数据对象（一个图G）和在该对象上的一组操作（如初始化、创建、遍历、查找、输出、清除、最小生成树、最短路径、拓扑排序、关键路径等）。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP001",
            "name": "InitGraph",
            "attributes": {
                "难度": "入门",
                "内容": "初始化图的存储空间。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP002",
            "name": "CreateGraph",
            "attributes": {
                "难度": "中等",
                "内容": "根据给定的顶点和边集信息构建图的具体存储表示。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP003",
            "name": "TraverseGraph",
            "attributes": {
                "难度": "中等",
                "内容": "按照特定搜索策略（如DFS、BFS）访问图中所有可达顶点。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP004",
            "name": "FindGraph",
            "attributes": {
                "难度": "入门",
                "内容": "在图中查找具有特定值的顶点。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP005",
            "name": "PrintGraph",
            "attributes": {
                "难度": "入门",
                "内容": "按照图的一种表示方法输出一个图的顶点和边信息。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP006",
            "name": "ClearGraph",
            "attributes": {
                "难度": "入门",
                "内容": "清除图中动态分配的存储空间，释放资源。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON025",
            "name": "最小生成树问题",
            "attributes": {
                "难度": "高级",
                "内容": "在带权连通无向图中找到一棵包含所有顶点且总权值最小的生成树的问题。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON026",
            "name": "最短路径问题",
            "attributes": {
                "难度": "高级",
                "内容": "在图中找到两个顶点之间或从一个顶点到所有其他顶点之间路径长度（或权值和）最小的路径的问题。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON027",
            "name": "拓扑排序问题",
            "attributes": {
                "难度": "高级",
                "内容": "对有向无环图（DAG）的顶点进行排序，使得对于图中每一条有向边 (u, v)，u 在排序中都在 v 之前的问题。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON028",
            "name": "关键路径问题",
            "attributes": {
                "难度": "高级",
                "内容": "在带权有向图（通常用于项目管理）中找到从源点到汇点的最长路径的问题，该路径决定了项目的最短完成时间。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON029",
            "name": "图的存储结构",
            "attributes": {
                "难度": "中等",
                "内容": "在计算机内存中表示图的顶点和边及其关系的方法。常见的有邻接矩阵、邻接表、边集数组等。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS011",
            "name": "邻接矩阵",
            "attributes": {
                "难度": "中等",
                "内容": "用 n x n 的矩阵 A 表示 n 个顶点的图，A[i,j]=1（或权值）表示顶点 i 到顶点 j 有边，否则为 0（或特定值如无穷大）。无向图的邻接矩阵是对称的。适用于稠密图，查找边 O(1)，求度 O(n)。",
                "存储开销": "O(n^2)"
            }
        },
        {
            "type": "操作",
            "ID": "07OP007",
            "name": "InitMatrix",
            "attributes": {
                "难度": "入门",
                "内容": "初始化邻接矩阵，对角线为0，其他根据有无权设为0或MaxValue。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP008",
            "name": "CreateMatrix",
            "attributes": {
                "难度": "中等",
                "内容": "根据边集信息填充邻接矩阵。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP009",
            "name": "PrintMatrix",
            "attributes": {
                "难度": "入门",
                "内容": "根据邻接矩阵输出图的顶点集和边集表示。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS012",
            "name": "邻接表",
            "attributes": {
                "难度": "中等",
                "内容": "使用一个顶点数组（表头向量），每个数组元素指向一个存储该顶点所有邻接点（及边信息）的链表。适用于稀疏图，查找顶点邻接点 O(度数)，查找特定边 O(度数)。",
                "存储开销": "O(n+e)"
            }
        },
        {
            "type": "概念",
            "ID": "07CON030",
            "name": "边结点",
            "attributes": {
                "难度": "入门",
                "内容": "邻接表中链表的结点，通常包含邻接点序号（adjvex）、权值（weight，可选）和指向下一个边结点的指针（next）。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON031",
            "name": "表头向量",
            "attributes": {
                "难度": "入门",
                "内容": "邻接表中使用的一维数组，用于存储每个顶点邻接链表的头指针。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP010",
            "name": "InitAdjoin",
            "attributes": {
                "难度": "入门",
                "内容": "初始化邻接表的表头向量，所有指针置为NULL。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP011",
            "name": "CreateAdjoin",
            "attributes": {
                "难度": "中等",
                "内容": "根据边集信息构建邻接表，为每条边创建边结点并插入到相应的链表中（通常采用头插法）。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP012",
            "name": "PrintAdjJoin",
            "attributes": {
                "难度": "入门",
                "内容": "根据邻接表输出图的顶点集和边集表示。"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS013",
            "name": "逆邻接表",
            "attributes": {
                "难度": "中等",
                "内容": "类似于邻接表，但每个顶点的链表存储的是指向该顶点的边的信息（即入边），邻接域存储的是入边邻接点的序号。方便查找入度、入边邻接点。",
                "存储开销": "O(n+e)"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS014",
            "name": "十字邻接表",
            "attributes": {
                "难度": "高级",
                "内容": "用于有向图的存储结构。顶点结点包含第一个入边和第一个出边指针。边结点包含起点、终点、权值、指向同起点的下一条出边指针、指向同终点的下一条入边指针。方便查找入度和出度。",
                "存储开销": "O(n+e)"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS015",
            "name": "边集数组",
            "attributes": {
                "难度": "中等",
                "内容": "使用一个数组存储图中的每一条边，每个数组元素记录一条边的起点（fromvex）、终点（endvex）和权值（weight，可选）。适合对边进行迭代处理（如Kruskal算法），不适合顶点操作（查找度、邻接点等需要O(e)时间）。适用于稀疏图。",
                "存储开销": "O(e)"
            }
        },
        {
            "type": "操作",
            "ID": "07OP013",
            "name": "InitArray",
            "attributes": {
                "难度": "入门",
                "内容": "初始化边集数组，通常将标记字段（如fromvex, endvex）设为无效值。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP014",
            "name": "CreateArray",
            "attributes": {
                "难度": "中等",
                "内容": "根据输入的边信息填充边集数组。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP015",
            "name": "PrintArray",
            "attributes": {
                "难度": "入门",
                "内容": "根据边集数组输出图的顶点集和边集表示。"
            }
        },
        {
            "type": "概念",
            "ID": "07CON032",
            "name": "图的遍历",
            "attributes": {
                "难度": "中等",
                "内容": "系统性地访问图中每个顶点的过程，确保每个顶点只访问一次。常用方法有深度优先搜索（DFS）和广度优先搜索（BFS）。需要标记已访问顶点以避免重复和死循环。对于非连通图或无法从单一源点到达所有顶点的有向图，需要从每个未访问过的顶点启动遍历过程以确保访问所有顶点。"
            }
        },
        {
            "type": "算法",
            "ID": "07ALG001",
            "name": "深度优先搜索",
            "attributes": {
                "难度": "中等",
                "内容": "一种图遍历算法。从起点出发，访问顶点并标记，然后递归地访问其一个未被访问的邻接点，尽可能深地探索图的分支，直到当前路径所有顶点都被访问，然后回溯到上一个顶点，访问其其他未被访问的邻接点。通常使用递归或栈实现。",
                "时间复杂度": "邻接矩阵 O(n^2), 邻接表 O(n+e)",
                "空间复杂度": "O(n) (递归栈或显式栈)"
            }
        },
        {
            "type": "概念",
            "ID": "07CON033",
            "name": "递归",
            "attributes": {
                "难度": "中等",
                "内容": "函数或过程在其定义中直接或间接调用自身的一种编程技巧。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP016",
            "name": "dfsMatrix",
            "attributes": {
                "难度": "中等",
                "内容": "使用邻接矩阵实现深度优先搜索遍历图的递归函数。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP017",
            "name": "dfsAdjoin",
            "attributes": {
                "难度": "中等",
                "内容": "使用邻接表实现深度优先搜索遍历图的递归函数。"
            }
        },
        {
            "type": "算法",
            "ID": "07ALG002",
            "name": "广度优先搜索",
            "attributes": {
                "难度": "中等",
                "内容": "一种图遍历算法。从起点出发，访问顶点并标记，然后将其所有未被访问的邻接点加入队列。之后，从队列中取出一个顶点，访问其所有未被访问的邻接点并加入队列，重复此过程直到队列为空。逐层扩展访问。通常使用队列实现。",
                "时间复杂度": "邻接矩阵 O(n^2), 邻接表 O(n+e)",
                "空间复杂度": "O(n) (队列)"
            }
        },
        {
            "type": "数据结构",
            "ID": "07DS016",
            "name": "队列",
            "attributes": {
                "难度": "入门",
                "内容": "一种先进先出（FIFO）的线性数据结构，允许在表的一端（队尾）插入元素，在另一端（队头）删除元素。",
                "存储开销": "未知"
            }
        },
        {
            "type": "操作",
            "ID": "07OP018",
            "name": "bfsMatrix",
            "attributes": {
                "难度": "中等",
                "内容": "使用邻接矩阵和队列实现广度优先搜索遍历图的函数。"
            }
        },
        {
            "type": "操作",
            "ID": "07OP019",
            "name": "bfsAdjoin",
            "attributes": {
                "难度": "中等",
                "内容": "使用邻接表和队列实现广度优先搜索遍历图的函数。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON001",
            "name": "图",
            "attributes": {
                "难度": "入门",
                "内容": "由顶点和边构成的数据结构，用于表示对象之间的关系。本章讨论其在工程技术和日常生活中的应用，如最小生成树、最短路径、拓扑序列、关键路径等。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON002",
            "name": "最小生成树",
            "attributes": {
                "难度": "中等",
                "内容": "在一个连通网（带权无向连通图）中，连接所有顶点且权值总和最小的生成树。具有实际意义，如构建最低成本通信网络。当边权值唯一时，最小生成树唯一；否则可能不唯一，但权值相同。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON003",
            "name": "最短路径",
            "attributes": {
                "难度": "中等",
                "内容": "在图中，连接两个顶点之间路径长度（无权图为边数，带权图为权值之和）最短的路径。可应用于运输网络优化等。主要问题包括单源最短路径和所有顶点对之间的最短路径。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON004",
            "name": "拓扑序列",
            "attributes": {
                "难度": "中等",
                "内容": "在有向无环图（如AOV网）中，将所有顶点排成一个线性序列，使得图中任意一条有向边<u, v>，顶点u都在顶点v之前。表示活动的一种可行执行顺序。一个图的拓扑序列可能不唯一。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON005",
            "name": "关键路径",
            "attributes": {
                "难度": "中等/高级",
                "内容": "在AOE网中，从源点到汇点的一条或多条路径，其上的活动均为关键活动（时间余量为0）。关键路径的长度决定了整个工程的最短完成时间。可能存在多条关键路径。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON006",
            "name": "生成树",
            "attributes": {
                "难度": "入门",
                "内容": "连通图G的一个子图G'，包含G的所有顶点和部分边，使得G'连通且无回路。n个顶点的生成树恰有n-1条边。增加一条边会形成回路，删除一条边会使其不连通。是极小连通子图。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON007",
            "name": "深度优先生成树",
            "attributes": {
                "难度": "中等",
                "内容": "通过深度优先搜索（DFS）遍历连通图生成的生成树。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON008",
            "name": "广度优先生成树",
            "attributes": {
                "难度": "中等",
                "内容": "通过广度优先搜索（BFS）遍历连通图生成的生成树。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON009",
            "name": "连通网",
            "attributes": {
                "难度": "入门",
                "内容": "带权的无向连通图，通常假定权值为正实数。最小生成树在此类图上定义。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON010",
            "name": "树的权",
            "attributes": {
                "难度": "入门",
                "内容": "生成树中所有边上的权值总和。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG001",
            "name": "普里姆算法",
            "attributes": {
                "难度": "中等",
                "内容": "构造连通网最小生成树的算法。从一个顶点开始，逐步扩大生成树，每次选择连接树内顶点和树外顶点之间权值最小的边加入树中，直到包含所有顶点。关键在于高效查找最小权边。",
                "时间复杂度": "O(n^2) (基于邻接矩阵和简单查找)",
                "空间复杂度": "O(1) (辅助空间，不计输入输出)"
            }
        },
        {
            "type": "概念",
            "ID": "08CON011",
            "name": "邻接矩阵",
            "attributes": {
                "难度": "入门",
                "内容": "图的一种存储方式，使用二维数组表示顶点间的连接关系和权值。适用于稠密图。"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS001",
            "name": "边集数组",
            "attributes": {
                "难度": "入门",
                "内容": "用数组存储图的所有边，每条边通常记录起点、终点和权值。常用于Kruskal算法，也可用于存储Prim算法的结果。",
                "存储开销": "O(E) 或 O(n)，取决于具体用途"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG002",
            "name": "克鲁斯卡尔算法",
            "attributes": {
                "难度": "中等",
                "内容": "构造连通网最小生成树的算法。将所有边按权值排序，依次检查每条边，如果该边连接的两个顶点不在同一个连通分量（即加入该边不形成回路），则将其加入生成树，直到包含n-1条边。关键在于判断是否形成回路（常用并查集）。",
                "时间复杂度": "O(n^2) (基于特定实现的集合操作)",
                "空间复杂度": "O(n^2) (基于特定实现的集合存储)"
            }
        },
        {
            "type": "概念",
            "ID": "08CON012",
            "name": "回路",
            "attributes": {
                "难度": "入门",
                "内容": "图中一条起点和终点相同的路径。在生成树和拓扑排序中需要避免或检测回路。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON013",
            "name": "连通分量",
            "attributes": {
                "难度": "入门/中等",
                "内容": "无向图中的极大连通子图。Kruskal算法利用此概念判断是否形成回路。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON014",
            "name": "路径",
            "attributes": {
                "难度": "入门",
                "内容": "图中顶点之间通过边连接形成的序列。本节主要讨论无回路的简单路径。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON015",
            "name": "路径长度 (无权)",
            "attributes": {
                "难度": "入门",
                "内容": "路径上所包含的边的数量。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON016",
            "name": "最短路径 (无权)",
            "attributes": {
                "难度": "入门",
                "内容": "连接两个顶点之间边数最少的路径。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON017",
            "name": "带权路径长度",
            "attributes": {
                "难度": "入门",
                "内容": "路径上所有边的权值之和。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON018",
            "name": "源点",
            "attributes": {
                "难度": "入门",
                "内容": "最短路径问题中的起始顶点；AOE网中表示工程开始的事件，只有出边。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON019",
            "name": "终点",
            "attributes": {
                "难度": "入门",
                "内容": "最短路径问题中的目标顶点。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG003",
            "name": "狄克斯特拉算法",
            "attributes": {
                "难度": "中等",
                "内容": "解决单源最短路径问题的算法（要求边权非负）。按路径长度递增的顺序，逐步确定从源点到其他各顶点的最短路径。维护一个已确定最短路径的顶点集合S，每次从未包含在S中的顶点里选择距离源点最近的顶点加入S，并更新其邻接顶点的距离。",
                "时间复杂度": "O(n^2) (基于邻接矩阵和简单查找)",
                "空间复杂度": "未知"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS002",
            "name": "单链表",
            "attributes": {
                "难度": "入门",
                "内容": "一种线性数据结构，节点包含数据域和指向下一个节点的指针。文中用于存储Dijkstra算法找到的最短路径上的顶点序列。",
                "存储开销": "O(L)，L为链表长度"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG004",
            "name": "弗洛伊德算法",
            "attributes": {
                "难度": "中等",
                "内容": "解决所有顶点对之间最短路径问题的算法。通过动态规划思想，迭代地考虑每个顶点k是否能作为中间点缩短其他任意两点i, j之间的路径。即 A[i][j] = min(A[i][j], A[i][k]+A[k][j])。可以处理负权边（但不能处理负权回路）。",
                "时间复杂度": "O(n^3)",
                "空间复杂度": "O(n^2)"
            }
        },
        {
            "type": "概念",
            "ID": "08CON020",
            "name": "活动",
            "attributes": {
                "难度": "入门",
                "内容": "表示一个工程中的子工程或任务。在AOV网中由顶点表示，在AOE网中由边表示。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON021",
            "name": "先后关系",
            "attributes": {
                "难度": "入门",
                "内容": "活动之间的约束，表示一个活动必须在另一个活动完成后才能开始。在AOV网中由有向边表示。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON022",
            "name": "顶点活动网 (AOV网)",
            "attributes": {
                "难度": "中等",
                "内容": "用顶点表示活动，用有向边表示活动间的先后关系的图。必须是DAG，用于表示任务依赖关系，如课程先修关系。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON023",
            "name": "有向无环图 (DAG)",
            "attributes": {
                "难度": "中等",
                "内容": "没有有向回路的有向图。AOV网和AOE网都必须是DAG。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG005",
            "name": "拓扑排序算法",
            "attributes": {
                "难度": "中等",
                "内容": "生成AOV网拓扑序列的算法。反复执行：选择一个入度为0的顶点并输出；从图中删除该顶点及其所有出边。若最终输出顶点数小于总顶点数，则图中存在回路。",
                "时间复杂度": "O(n+e) (基于邻接表)",
                "空间复杂度": "O(n) (用于存储入度和栈)"
            }
        },
        {
            "type": "概念",
            "ID": "08CON024",
            "name": "入度",
            "attributes": {
                "难度": "入门",
                "内容": "指向一个顶点的边的数量。在拓扑排序中用于选择起始顶点。"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS003",
            "name": "邻接表",
            "attributes": {
                "难度": "入门/中等",
                "内容": "图的一种存储方式，为每个顶点维护一个链表，存储所有与该顶点邻接的顶点信息（及边权）。适用于稀疏图，常用于拓扑排序、DFS、BFS等。",
                "存储开销": "O(V+E)"
            }
        },
        {
            "type": "数据结构",
            "ID": "08DS004",
            "name": "栈",
            "attributes": {
                "难度": "入门",
                "内容": "后进先出（LIFO）的数据结构。文中拓扑排序算法使用（静态实现的）栈来存储所有入度为0的顶点。",
                "存储开销": "O(n) (在本例实现中)"
            }
        },
        {
            "type": "概念",
            "ID": "08CON025",
            "name": "边表示活动的网络 (AOE网)",
            "attributes": {
                "难度": "中等/高级",
                "内容": "用带权有向边表示活动及其持续时间，用顶点表示事件（活动的开始或结束）的图。必须是DAG，用于工程计划与进度管理，分析关键路径。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON026",
            "name": "事件",
            "attributes": {
                "难度": "入门",
                "内容": "AOE网中的顶点，表示活动之间的转接点或里程碑，标志着入边活动的完成和出边活动的开始。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON027",
            "name": "活动持续时间",
            "attributes": {
                "难度": "入门",
                "内容": "完成一个活动所需的时间。在AOE网中表示为边的权值。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON028",
            "name": "汇点",
            "attributes": {
                "难度": "入门",
                "内容": "AOE网中表示整个工程结束的事件，只有入边。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON029",
            "name": "事件最早发生时间 (ve)",
            "attributes": {
                "难度": "中等",
                "内容": "事件能发生的最早时刻，等于从源点到该事件的最长路径长度。按拓扑序计算：ve[k] = max(ve[j] + dut(<j, k>))。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON030",
            "name": "活动最早开始时间 (e)",
            "attributes": {
                "难度": "中等",
                "内容": "活动能开始的最早时刻，等于其起始事件的最早发生时间：e[i] = ve[j] (活动i=<j, k>)。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON031",
            "name": "事件最迟发生时间 (vl)",
            "attributes": {
                "难度": "中等",
                "内容": "在不延误整个工程的前提下，事件必须发生的最晚时刻。按逆拓扑序计算：vl[j] = min(vl[k] - dut(<j, k>))，且vl[汇点]=ve[汇点]。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON032",
            "name": "活动最迟开始时间 (l)",
            "attributes": {
                "难度": "中等",
                "内容": "在不延误整个工程的前提下，活动必须开始的最晚时刻：l[i] = vl[k] - dut(<j, k>) (活动i=<j, k>)。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON033",
            "name": "时间余量 (浮动时间)",
            "attributes": {
                "难度": "中等",
                "内容": "活动可以推迟开始而不影响总工期的时间：l[i] - e[i]。"
            }
        },
        {
            "type": "概念",
            "ID": "08CON034",
            "name": "关键活动",
            "attributes": {
                "难度": "中等",
                "内容": "时间余量为0的活动。这些活动必须按时开始和完成，否则会延误整个工程。"
            }
        },
        {
            "type": "算法",
            "ID": "08ALG006",
            "name": "关键路径算法",
            "attributes": {
                "难度": "中等/高级",
                "内容": "计算AOE网中关键路径的算法。步骤包括计算所有事件的ve和vl，然后计算所有活动的e和l，找出时间余量为0的关键活动，最后确定由关键活动构成的路径。",
                "时间复杂度": "O(n+e)",
                "空间复杂度": "O(n)"
            }
        }
    ],
    "relations": [
        {
            "type": "继承",
            "关系ID": "01REL001",
            "source": "01DS003",
            "target": "01DS004",
            "attributes": {
                "父类 ID": "01DS004",
                "子类 ID": "01DS003",
                "约束条件": "图形结构中每个结点最多只有一个前驱（除根结点外）的特例"
            }
        },
        {
            "type": "继承",
            "关系ID": "01REL002",
            "source": "01DS002",
            "target": "01DS003",
            "attributes": {
                "父类 ID": "01DS003",
                "子类 ID": "01DS002",
                "约束条件": "树形结构中每个结点最多只有一个后继（除尾结点外）的特例"
            }
        },
        {
            "type": "继承",
            "关系ID": "01REL003",
            "source": "01DS005",
            "target": "01DS002",
            "attributes": {
                "父类 ID": "01DS002",
                "子类 ID": "01DS005",
                "约束条件": "元素类型相同，大小固定，通过下标访问的线性结构实现"
            }
        },
        {
            "type": "继承",
            "关系ID": "01REL004",
            "source": "01DS006",
            "target": "01DS002",
            "attributes": {
                "父类 ID": "01DS002",
                "子类 ID": "01DS006",
                "约束条件": "元素类型可不同，大小固定，通过成员名访问的线性结构实现"
            }
        },
        {
            "type": "继承",
            "关系ID": "01REL005",
            "source": "01DS007",
            "target": "01DS005",
            "attributes": {
                "父类 ID": "01DS005",
                "子类 ID": "01DS007",
                "约束条件": "元素类型为字符的特殊一维数组，通常以空字符结尾"
            }
        },
        {
            "type": "继承",
            "关系ID": "01REL006",
            "source": "01DS008",
            "target": "01DS002",
            "attributes": {
                "父类 ID": "01DS002",
                "子类 ID": "01DS008",
                "约束条件": "按位置有序的数据集合，逻辑上视为线性结构，存储在外存"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL007",
            "source": "01CON008",
            "target": "01CON015",
            "attributes": {
                "实体 ID": "01CON008",
                "概念 ID": "01CON015",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL008",
            "source": "01CON009",
            "target": "01CON010",
            "attributes": {
                "实体 ID": "01CON009",
                "概念 ID": "01CON010",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL009",
            "source": "01CON009",
            "target": "01CON011",
            "attributes": {
                "实体 ID": "01CON009",
                "概念 ID": "01CON011",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL010",
            "source": "01CON009",
            "target": "01CON012",
            "attributes": {
                "实体 ID": "01CON009",
                "概念 ID": "01CON012",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL011",
            "source": "01CON009",
            "target": "01CON013",
            "attributes": {
                "实体 ID": "01CON009",
                "概念 ID": "01CON013",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL012",
            "source": "01CON030",
            "target": "01CON070",
            "attributes": {
                "实体 ID": "01CON030",
                "概念 ID": "01CON070",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL013",
            "source": "01CON030",
            "target": "01CON027",
            "attributes": {
                "实体 ID": "01CON030",
                "概念 ID": "01CON027",
                "依赖强度": "强"
            }
        },
        {
            "type": "使用",
            "关系ID": "01REL014",
            "source": "01ALG001",
            "target": "01DS005",
            "attributes": {
                "算法 ID": "01ALG001",
                "数据结构 ID": "01DS005",
                "使用角色": "输入数据"
            }
        },
        {
            "type": "使用",
            "关系ID": "01REL015",
            "source": "01ALG002",
            "target": "01DS005",
            "attributes": {
                "算法 ID": "01ALG002",
                "数据结构 ID": "01DS005",
                "使用角色": "输入输出数据 (二维数组)"
            }
        },
        {
            "type": "使用",
            "关系ID": "01REL016",
            "source": "01ALG003",
            "target": "01DS005",
            "attributes": {
                "算法 ID": "01ALG003",
                "数据结构 ID": "01DS005",
                "使用角色": "待排序数据"
            }
        },
        {
            "type": "使用",
            "关系ID": "01REL017",
            "source": "01ALG004",
            "target": "01DS005",
            "attributes": {
                "算法 ID": "01ALG004",
                "数据结构 ID": "01DS005",
                "使用角色": "待查找数据"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL018",
            "source": "01ALG001",
            "target": "01CON051",
            "attributes": {
                "实体 ID": "01ALG001",
                "概念 ID": "01CON051",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL019",
            "source": "01ALG001",
            "target": "01CON066",
            "attributes": {
                "实体 ID": "01ALG001",
                "概念 ID": "01CON066",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL020",
            "source": "01ALG002",
            "target": "01CON051",
            "attributes": {
                "实体 ID": "01ALG002",
                "概念 ID": "01CON051",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL021",
            "source": "01ALG002",
            "target": "01CON066",
            "attributes": {
                "实体 ID": "01ALG002",
                "概念 ID": "01CON066",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL022",
            "source": "01ALG003",
            "target": "01CON051",
            "attributes": {
                "实体 ID": "01ALG003",
                "概念 ID": "01CON051",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL023",
            "source": "01ALG003",
            "target": "01CON066",
            "attributes": {
                "实体 ID": "01ALG003",
                "概念 ID": "01CON066",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL024",
            "source": "01ALG004",
            "target": "01CON051",
            "attributes": {
                "实体 ID": "01ALG004",
                "概念 ID": "01CON051",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL025",
            "source": "01ALG004",
            "target": "01CON066",
            "attributes": {
                "实体 ID": "01ALG004",
                "概念 ID": "01CON066",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL026",
            "source": "01ALG004",
            "target": "01CON063",
            "attributes": {
                "实体 ID": "01ALG004",
                "概念 ID": "01CON063",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL027",
            "source": "01ALG004",
            "target": "01CON064",
            "attributes": {
                "实体 ID": "01ALG004",
                "概念 ID": "01CON064",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL028",
            "source": "01ALG004",
            "target": "01CON065",
            "attributes": {
                "实体 ID": "01ALG004",
                "概念 ID": "01CON065",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL029",
            "source": "01DS001",
            "target": "01CON070",
            "attributes": {
                "实体 ID": "01DS001",
                "概念 ID": "01CON070",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL030",
            "source": "01DS002",
            "target": "01CON070",
            "attributes": {
                "实体 ID": "01DS002",
                "概念 ID": "01CON070",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL031",
            "source": "01DS003",
            "target": "01CON070",
            "attributes": {
                "实体 ID": "01DS003",
                "概念 ID": "01CON070",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL032",
            "source": "01DS004",
            "target": "01CON070",
            "attributes": {
                "实体 ID": "01DS004",
                "概念 ID": "01CON070",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL033",
            "source": "01DS001",
            "target": "01CON008",
            "attributes": {
                "实体 ID": "01DS001",
                "概念 ID": "01CON008",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL034",
            "source": "01DS002",
            "target": "01CON008",
            "attributes": {
                "实体 ID": "01DS002",
                "概念 ID": "01CON008",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL035",
            "source": "01DS003",
            "target": "01CON008",
            "attributes": {
                "实体 ID": "01DS003",
                "概念 ID": "01CON008",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL036",
            "source": "01DS004",
            "target": "01CON008",
            "attributes": {
                "实体 ID": "01DS004",
                "概念 ID": "01CON008",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL037",
            "source": "01OP001",
            "target": "01CON030",
            "attributes": {
                "实体 ID": "01OP001",
                "概念 ID": "01CON030",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL038",
            "source": "01OP002",
            "target": "01CON030",
            "attributes": {
                "实体 ID": "01OP002",
                "概念 ID": "01CON030",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL039",
            "source": "01OP003",
            "target": "01CON030",
            "attributes": {
                "实体 ID": "01OP003",
                "概念 ID": "01CON030",
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL040",
            "source": "01CON030",
            "target": "01CON031",
            "attributes": {
                "实体 ID": "01CON030",
                "概念 ID": "01CON031",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL041",
            "source": "01CON030",
            "target": "01CON032",
            "attributes": {
                "实体 ID": "01CON030",
                "概念 ID": "01CON032",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL042",
            "source": "01CON030",
            "target": "01CON033",
            "attributes": {
                "实体 ID": "01CON030",
                "概念 ID": "01CON033",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL043",
            "source": "01CON051",
            "target": "01CON054",
            "attributes": {
                "实体 ID": "01CON051",
                "概念 ID": "01CON054",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "01REL044",
            "source": "01CON066",
            "target": "01CON054",
            "attributes": {
                "实体 ID": "01CON066",
                "概念 ID": "01CON054",
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL001",
            "source": "02DS001",
            "target": "02CON001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL002",
            "source": "02DS001",
            "target": "02CON002",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL003",
            "source": "02OP001",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL004",
            "source": "02OP002",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL005",
            "source": "02OP003",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL006",
            "source": "02OP004",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL007",
            "source": "02OP005",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL008",
            "source": "02OP006",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL009",
            "source": "02OP007",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL010",
            "source": "02OP008",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL011",
            "source": "02OP009",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL012",
            "source": "02OP010",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL013",
            "source": "02OP011",
            "target": "02DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL014",
            "source": "02DS002",
            "target": "02DS001",
            "attributes": {
                "变体类型": "顺序存储实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL015",
            "source": "02DS002",
            "target": "02CON003",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL016",
            "source": "02DS002",
            "target": "02CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL017",
            "source": "02OP012",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL018",
            "source": "02OP012",
            "target": "02OP001",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL019",
            "source": "02OP013",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL020",
            "source": "02OP013",
            "target": "02OP002",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL021",
            "source": "02OP014",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL022",
            "source": "02OP014",
            "target": "02OP003",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL023",
            "source": "02OP014",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL024",
            "source": "02OP015",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL025",
            "source": "02OP015",
            "target": "02OP004",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL026",
            "source": "02OP015",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL027",
            "source": "02OP016",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL028",
            "source": "02OP016",
            "target": "02OP005",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL029",
            "source": "02OP016",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL030",
            "source": "02OP017",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL031",
            "source": "02OP017",
            "target": "02OP006",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL032",
            "source": "02OP017",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL033",
            "source": "02OP018",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL034",
            "source": "02OP018",
            "target": "02OP007",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL035",
            "source": "02OP018",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL036",
            "source": "02OP019",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL037",
            "source": "02OP019",
            "target": "02OP008",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL038",
            "source": "02OP019",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL039",
            "source": "02OP020",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL040",
            "source": "02OP020",
            "target": "02OP009",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL041",
            "source": "02OP020",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL042",
            "source": "02OP021",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL043",
            "source": "02OP021",
            "target": "02OP010",
            "attributes": {
                "变体类型": "顺序表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL044",
            "source": "02OP021",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL045",
            "source": "02ALG001",
            "target": "02DS002",
            "attributes": {
                "使用角色": "排序对象"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL046",
            "source": "02ALG001",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL047",
            "source": "02ALG001",
            "target": "02CON006",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL048",
            "source": "02OP022",
            "target": "02DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL049",
            "source": "02OP022",
            "target": "02OP011",
            "attributes": {
                "变体类型": "顺序表实现(插入排序)"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL050",
            "source": "02OP022",
            "target": "02ALG001",
            "attributes": {
                "使用角色": "实现方法"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL051",
            "source": "02OP022",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL052",
            "source": "02DS003",
            "target": "02CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL053",
            "source": "02DS003",
            "target": "02CON008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL054",
            "source": "02DS003",
            "target": "02CON011",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL055",
            "source": "02DS003",
            "target": "02DS001",
            "attributes": {
                "变体类型": "链接存储实现"
            }
        },
        {
            "type": "继承 (is-a)",
            "关系ID": "02REL056",
            "source": "02DS004",
            "target": "02DS003",
            "attributes": {
                "约束条件": "每个结点只有一个后继指针域"
            }
        },
        {
            "type": "继承 (is-a)",
            "关系ID": "02REL057",
            "source": "02DS005",
            "target": "02DS003",
            "attributes": {
                "约束条件": "每个结点有前驱和后继两个指针域"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL058",
            "source": "02OP023",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL059",
            "source": "02OP024",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL060",
            "source": "02DS006",
            "target": "02DS004",
            "attributes": {
                "变体类型": "增加头附加结点"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL061",
            "source": "02DS006",
            "target": "02DS005",
            "attributes": {
                "变体类型": "增加头附加结点"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL062",
            "source": "02DS007",
            "target": "02DS004",
            "attributes": {
                "变体类型": "循环链接"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL063",
            "source": "02DS007",
            "target": "02DS005",
            "attributes": {
                "变体类型": "循环链接"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL064",
            "source": "02OP025",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL065",
            "source": "02OP025",
            "target": "02OP001",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL066",
            "source": "02OP026",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL067",
            "source": "02OP026",
            "target": "02OP002",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL068",
            "source": "02OP026",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL069",
            "source": "02OP027",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL070",
            "source": "02OP027",
            "target": "02OP003",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL071",
            "source": "02OP027",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL072",
            "source": "02OP028",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL073",
            "source": "02OP028",
            "target": "02OP004",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL074",
            "source": "02OP028",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL075",
            "source": "02OP029",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL076",
            "source": "02OP029",
            "target": "02OP005",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL077",
            "source": "02OP029",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL078",
            "source": "02OP030",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL079",
            "source": "02OP030",
            "target": "02OP006",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL080",
            "source": "02OP030",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL081",
            "source": "02OP031",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL082",
            "source": "02OP031",
            "target": "02OP007",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL083",
            "source": "02OP031",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL084",
            "source": "02OP032",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL085",
            "source": "02OP032",
            "target": "02OP008",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL086",
            "source": "02OP032",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL087",
            "source": "02OP033",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL088",
            "source": "02OP033",
            "target": "02OP009",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL089",
            "source": "02OP033",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL090",
            "source": "02OP034",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL091",
            "source": "02OP034",
            "target": "02OP010",
            "attributes": {
                "变体类型": "单链表实现"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL092",
            "source": "02OP034",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "操作绑定 (has-op)",
            "关系ID": "02REL093",
            "source": "02OP035",
            "target": "02DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL094",
            "source": "02OP035",
            "target": "02OP011",
            "attributes": {
                "变体类型": "单链表实现(插入排序)"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL095",
            "source": "02OP035",
            "target": "02CON005",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "变体 (variant-of)",
            "关系ID": "02REL096",
            "source": "02DS008",
            "target": "02DS004",
            "attributes": {
                "变体类型": "数组模拟实现"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL097",
            "source": "02DS008",
            "target": "02CON015",
            "attributes": {
                "使用角色": "空间管理"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL098",
            "source": "02ALG002",
            "target": "02CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL099",
            "source": "02ALG002",
            "target": "02DS002",
            "attributes": {
                "使用角色": "系数存储"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL100",
            "source": "02ALG003",
            "target": "02CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL101",
            "source": "02ALG003",
            "target": "02DS004",
            "attributes": {
                "使用角色": "非零项存储"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL102",
            "source": "02ALG004",
            "target": "02CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL103",
            "source": "02ALG004",
            "target": "02DS004",
            "attributes": {
                "使用角色": "多项式存储"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL104",
            "source": "02ALG004",
            "target": "02OP033",
            "attributes": {
                "使用角色": "构建结果链表"
            }
        },
        {
            "type": "理论依赖 (depends-on)",
            "关系ID": "02REL105",
            "source": "02ALG005",
            "target": "02CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL106",
            "source": "02ALG005",
            "target": "02DS004",
            "attributes": {
                "使用角色": "多项式存储"
            }
        },
        {
            "type": "使用 (uses)",
            "关系ID": "02REL107",
            "source": "02ALG005",
            "target": "02DS006",
            "attributes": {
                "使用角色": "辅助实现(简化尾插)"
            }
        },
        {
            "type": "优化 (optimizes)",
            "关系ID": "02REL108",
            "source": "02ALG005",
            "target": "02ALG004",
            "attributes": {
                "优化方向": "时间复杂度 (避免重复查找尾部)"
            }
        },
        {
            "type": "has-op",
            "关系ID": "03REL001",
            "source": "03OP001",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL002",
            "source": "03OP002",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL003",
            "source": "03OP003",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL004",
            "source": "03OP004",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL005",
            "source": "03OP005",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL006",
            "source": "03OP006",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL007",
            "source": "03OP007",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL008",
            "source": "03OP008",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL009",
            "source": "03OP009",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL010",
            "source": "03OP010",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL011",
            "source": "03OP011",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL012",
            "source": "03OP012",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL013",
            "source": "03OP013",
            "target": "03DS001",
            "attributes": {}
        },
        {
            "type": "uses",
            "关系ID": "03REL014",
            "source": "03DS002",
            "target": "03CON003",
            "attributes": {
                "使用角色": "实现基础"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL015",
            "source": "03ALG001",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL016",
            "source": "03ALG002",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL017",
            "source": "03ALG003",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL018",
            "source": "03ALG004",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL019",
            "source": "03ALG005",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL020",
            "source": "03ALG006",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL021",
            "source": "03ALG009",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL022",
            "source": "03ALG010",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL023",
            "source": "03ALG011",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL024",
            "source": "03ALG012",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL025",
            "source": "03ALG013",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL026",
            "source": "03ALG014",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL027",
            "source": "03ALG015",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL028",
            "source": "03ALG008",
            "target": "03DS002",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL029",
            "source": "03ALG008",
            "target": "03ALG007",
            "attributes": {
                "使用角色": "核心算法"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL030",
            "source": "03ALG007",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL031",
            "source": "03ALG007",
            "target": "03CON005",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL032",
            "source": "03ALG011",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL033",
            "source": "03ALG011",
            "target": "03CON006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL034",
            "source": "03ALG012",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL035",
            "source": "03ALG012",
            "target": "03CON006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL036",
            "source": "03ALG013",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL037",
            "source": "03ALG013",
            "target": "03CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL038",
            "source": "03ALG014",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL039",
            "source": "03ALG014",
            "target": "03CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL040",
            "source": "03ALG015",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL041",
            "source": "03ALG015",
            "target": "03CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL042",
            "source": "03DS003",
            "target": "03CON008",
            "attributes": {
                "使用角色": "实现基础"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL043",
            "source": "03DS003",
            "target": "03DS004",
            "attributes": {
                "使用角色": "核心组件"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL044",
            "source": "03ALG016",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL045",
            "source": "03ALG017",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL046",
            "source": "03ALG018",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL047",
            "source": "03ALG019",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL048",
            "source": "03ALG020",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL049",
            "source": "03ALG021",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL050",
            "source": "03ALG022",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL051",
            "source": "03ALG023",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL052",
            "source": "03ALG024",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL053",
            "source": "03ALG025",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL054",
            "source": "03ALG026",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL055",
            "source": "03ALG027",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL056",
            "source": "03ALG028",
            "target": "03DS003",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "is-a",
            "关系ID": "03REL057",
            "source": "03DS005",
            "target": "03CON009",
            "attributes": {
                "约束条件": "非零元素远少于零元素"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL058",
            "source": "03DS005",
            "target": "03CON012",
            "attributes": {
                "使用角色": "表示方法"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL059",
            "source": "03DS005",
            "target": "03DS006",
            "attributes": {
                "使用角色": "逻辑表示"
            }
        },
        {
            "type": "has-op",
            "关系ID": "03REL060",
            "source": "03OP014",
            "target": "03DS005",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL061",
            "source": "03OP015",
            "target": "03DS005",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL062",
            "source": "03OP016",
            "target": "03DS005",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL063",
            "source": "03OP017",
            "target": "03DS005",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL064",
            "source": "03OP018",
            "target": "03DS005",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL065",
            "source": "03OP019",
            "target": "03DS005",
            "attributes": {}
        },
        {
            "type": "variant-of",
            "关系ID": "03REL066",
            "source": "03DS006",
            "target": "03DS007",
            "attributes": {
                "变体类型": "顺序存储实现"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "03REL067",
            "source": "03DS006",
            "target": "03DS008",
            "attributes": {
                "变体类型": "链接存储实现"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "03REL068",
            "source": "03DS008",
            "target": "03DS009",
            "attributes": {
                "变体类型": "带行指针向量"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "03REL069",
            "source": "03DS008",
            "target": "03DS010",
            "attributes": {
                "变体类型": "十字链接"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL070",
            "source": "03ALG029",
            "target": "03DS007",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL071",
            "source": "03ALG030",
            "target": "03DS009",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL072",
            "source": "03ALG031",
            "target": "03DS010",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL073",
            "source": "03ALG032",
            "target": "03DS007",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL074",
            "source": "03ALG033",
            "target": "03DS010",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL075",
            "source": "03ALG034",
            "target": "03DS007",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL076",
            "source": "03ALG035",
            "target": "03DS007",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL077",
            "source": "03ALG035",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL078",
            "source": "03ALG035",
            "target": "03CON013",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL079",
            "source": "03ALG036",
            "target": "03DS007",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "优化",
            "关系ID": "03REL080",
            "source": "03ALG035",
            "target": "03ALG036",
            "attributes": {
                "优化方向": "时间复杂度"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL081",
            "source": "03ALG036",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL082",
            "source": "03ALG036",
            "target": "03CON014",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL083",
            "source": "03ALG037",
            "target": "03DS009",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL084",
            "source": "03ALG037",
            "target": "03CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL085",
            "source": "03ALG037",
            "target": "03CON015",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL086",
            "source": "03DS011",
            "target": "03CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL087",
            "source": "03DS011",
            "target": "03CON017",
            "attributes": {
                "使用角色": "组成部分"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL088",
            "source": "03DS011",
            "target": "03CON018",
            "attributes": {
                "使用角色": "组成部分"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL089",
            "source": "03DS012",
            "target": "03CON008",
            "attributes": {
                "使用角色": "实现基础"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "03REL090",
            "source": "03DS011",
            "target": "03DS012",
            "attributes": {
                "变体类型": "链接存储实现"
            }
        },
        {
            "type": "has-op",
            "关系ID": "03REL091",
            "source": "03OP020",
            "target": "03DS011",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL092",
            "source": "03OP021",
            "target": "03DS011",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL093",
            "source": "03OP022",
            "target": "03DS011",
            "attributes": {}
        },
        {
            "type": "has-op",
            "关系ID": "03REL094",
            "source": "03OP023",
            "target": "03DS011",
            "attributes": {}
        },
        {
            "type": "uses",
            "关系ID": "03REL095",
            "source": "03ALG038",
            "target": "03DS012",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL096",
            "source": "03ALG038",
            "target": "03CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL097",
            "source": "03ALG039",
            "target": "03DS012",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL098",
            "source": "03ALG039",
            "target": "03CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL099",
            "source": "03ALG040",
            "target": "03DS012",
            "attributes": {
                "使用角色": "构建对象"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL100",
            "source": "03ALG040",
            "target": "03CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "03REL101",
            "source": "03ALG041",
            "target": "03DS012",
            "attributes": {
                "使用角色": "操作对象"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "03REL102",
            "source": "03ALG041",
            "target": "03CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "is-a",
            "关系ID": "04REL001",
            "source": "04DS001",
            "target": "04CON001",
            "attributes": {}
        },
        {
            "type": "is-a",
            "关系ID": "04REL002",
            "source": "04DS002",
            "target": "04CON001",
            "attributes": {}
        },
        {
            "type": "depends-on",
            "关系ID": "04REL003",
            "source": "04DS001",
            "target": "04CON002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL004",
            "source": "04OP001",
            "target": "04DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL005",
            "source": "04OP002",
            "target": "04DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL006",
            "source": "04OP003",
            "target": "04DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL007",
            "source": "04OP004",
            "target": "04DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL008",
            "source": "04OP005",
            "target": "04DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL009",
            "source": "04OP006",
            "target": "04DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL010",
            "source": "04DS003",
            "target": "04DS008",
            "attributes": {
                "使用角色": "存储"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "04REL011",
            "source": "04DS003",
            "target": "04DS001",
            "attributes": {
                "变体类型": "存储实现"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL012",
            "source": "04DS003",
            "target": "04CON005",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL013",
            "source": "04DS004",
            "target": "04DS009",
            "attributes": {
                "使用角色": "存储"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "04REL014",
            "source": "04DS004",
            "target": "04DS001",
            "attributes": {
                "变体类型": "存储实现"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL015",
            "source": "04ALG001",
            "target": "04DS001",
            "attributes": {
                "使用角色": "核心"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL016",
            "source": "04ALG002",
            "target": "04DS001",
            "attributes": {
                "使用角色": "核心"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL017",
            "source": "04ALG003",
            "target": "04DS001",
            "attributes": {
                "使用角色": "核心"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL018",
            "source": "04ALG003",
            "target": "04CON008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL019",
            "source": "04ALG004",
            "target": "04DS001",
            "attributes": {
                "使用角色": "核心"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL020",
            "source": "04ALG004",
            "target": "04CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL021",
            "source": "04ALG004",
            "target": "04CON008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL022",
            "source": "04ALG004",
            "target": "04CON009",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL023",
            "source": "04CON010",
            "target": "04DS001",
            "attributes": {
                "使用角色": "实现机制 (系统栈)"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL024",
            "source": "04ALG005",
            "target": "04CON010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL025",
            "source": "04ALG006",
            "target": "04CON010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL026",
            "source": "04ALG007",
            "target": "04CON010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL027",
            "source": "04ALG008",
            "target": "04CON010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL028",
            "source": "04ALG009",
            "target": "04CON010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL029",
            "source": "04DS002",
            "target": "04CON011",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL030",
            "source": "04OP007",
            "target": "04DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL031",
            "source": "04OP008",
            "target": "04DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL032",
            "source": "04OP009",
            "target": "04DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL033",
            "source": "04OP010",
            "target": "04DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL034",
            "source": "04OP011",
            "target": "04DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "04REL035",
            "source": "04OP012",
            "target": "04DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL036",
            "source": "04DS005",
            "target": "04DS008",
            "attributes": {
                "使用角色": "存储"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "04REL037",
            "source": "04DS005",
            "target": "04DS002",
            "attributes": {
                "变体类型": "存储实现 (循环)"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL038",
            "source": "04DS006",
            "target": "04DS009",
            "attributes": {
                "使用角色": "存储"
            }
        },
        {
            "type": "variant-of",
            "关系ID": "04REL039",
            "source": "04DS006",
            "target": "04DS002",
            "attributes": {
                "变体类型": "存储实现"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "04REL040",
            "source": "04DS007",
            "target": "04CON012",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "04REL042",
            "source": "04ALG010",
            "target": "04DS002",
            "attributes": {
                "使用角色": "核心 (客车队列, 货车队列)"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL001",
            "source": "05DS002",
            "target": "05DS001",
            "attributes": {
                "约束条件": "子树有序"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL002",
            "source": "05DS003",
            "target": "05DS001",
            "attributes": {
                "约束条件": "子树无序"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL003",
            "source": "05DS004",
            "target": "05DS001",
            "attributes": {
                "约束条件": "度<=k"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL004",
            "source": "05DS005",
            "target": "05DS004",
            "attributes": {
                "约束条件": "深度h且结点数=(k^h-1)/(k-1)"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL005",
            "source": "05DS006",
            "target": "05DS002",
            "attributes": {
                "约束条件": "度=2"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL006",
            "source": "05DS006",
            "target": "05DS004",
            "attributes": {
                "约束条件": "k=2"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL007",
            "source": "05DS007",
            "target": "05DS006",
            "attributes": {
                "约束条件": "深度h且结点数=2^h-1"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL008",
            "source": "05DS007",
            "target": "05DS005",
            "attributes": {
                "约束条件": "k=2"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL009",
            "source": "05DS008",
            "target": "05DS006",
            "attributes": {
                "约束条件": "除最后层外满,最后层左对齐"
            }
        },
        {
            "type": "变体",
            "关系ID": "05REL010",
            "source": "05DS008",
            "target": "05DS006",
            "attributes": {
                "基础ID": "05DS006",
                "变体ID": "05DS008",
                "变体类型": "结构约束"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL011",
            "source": "05DS009",
            "target": "05DS006",
            "attributes": {
                "约束条件": "除最后层外满"
            }
        },
        {
            "type": "变体",
            "关系ID": "05REL012",
            "source": "05DS010",
            "target": "05DS006",
            "attributes": {
                "基础ID": "05DS006",
                "变体ID": "05DS010",
                "变体类型": "存储实现"
            }
        },
        {
            "type": "变体",
            "关系ID": "05REL013",
            "source": "05DS011",
            "target": "05DS006",
            "attributes": {
                "基础ID": "05DS006",
                "变体ID": "05DS011",
                "变体类型": "存储实现"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL014",
            "source": "05DS012",
            "target": "05DS011",
            "attributes": {}
        },
        {
            "type": "变体",
            "关系ID": "05REL015",
            "source": "05DS013",
            "target": "05DS012",
            "attributes": {
                "基础ID": "05DS012",
                "变体ID": "05DS013",
                "变体类型": "增加指针"
            }
        },
        {
            "type": "变体",
            "关系ID": "05REL016",
            "source": "05DS017",
            "target": "05DS004",
            "attributes": {
                "基础ID": "05DS004",
                "变体ID": "05DS017",
                "变体类型": "存储实现"
            }
        },
        {
            "type": "变体",
            "关系ID": "05REL017",
            "source": "05DS018",
            "target": "05DS004",
            "attributes": {
                "基础ID": "05DS004",
                "变体ID": "05DS018",
                "变体类型": "存储实现"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL018",
            "source": "05DS019",
            "target": "05DS018",
            "attributes": {}
        },
        {
            "type": "变体",
            "关系ID": "05REL019",
            "source": "05DS020",
            "target": "05DS019",
            "attributes": {
                "基础ID": "05DS019",
                "变体ID": "05DS020",
                "变体类型": "增加指针"
            }
        },
        {
            "type": "变体",
            "关系ID": "05REL020",
            "source": "05DS021",
            "target": "05DS018",
            "attributes": {
                "基础ID": "05DS018",
                "变体ID": "05DS021",
                "变体类型": "转换存储"
            }
        },
        {
            "type": "使用",
            "关系ID": "05REL021",
            "source": "05DS021",
            "target": "05DS012",
            "attributes": {
                "使用角色": "核心实现"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL022",
            "source": "05OP001",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL023",
            "source": "05OP002",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL024",
            "source": "05OP003",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL025",
            "source": "05OP004",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL026",
            "source": "05OP005",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL027",
            "source": "05OP006",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL028",
            "source": "05OP007",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL029",
            "source": "05OP008",
            "target": "05DS006",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL030",
            "source": "05OP009",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL031",
            "source": "05OP010",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL032",
            "source": "05OP011",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL033",
            "source": "05OP012",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL034",
            "source": "05OP013",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL035",
            "source": "05OP014",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "05REL036",
            "source": "05OP015",
            "target": "05DS004",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "使用",
            "关系ID": "05REL037",
            "source": "05ALG001",
            "target": "05DS006",
            "attributes": {
                "使用角色": "核心"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL038",
            "source": "05ALG002",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "继承",
            "关系ID": "05REL039",
            "source": "05ALG003",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "继承",
            "关系ID": "05REL040",
            "source": "05ALG004",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "继承",
            "关系ID": "05REL041",
            "source": "05ALG005",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "使用",
            "关系ID": "05REL042",
            "source": "05ALG005",
            "target": "05DS015",
            "attributes": {
                "使用角色": "辅助"
            }
        },
        {
            "type": "使用",
            "关系ID": "05REL043",
            "source": "05ALG006",
            "target": "05DS014",
            "attributes": {
                "使用角色": "辅助"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL044",
            "source": "05ALG006",
            "target": "05CON012",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL045",
            "source": "05ALG002",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL046",
            "source": "05ALG003",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL047",
            "source": "05ALG004",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL048",
            "source": "05ALG007",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL049",
            "source": "05ALG008",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL050",
            "source": "05ALG009",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL051",
            "source": "05ALG010",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用",
            "关系ID": "05REL052",
            "source": "05ALG011",
            "target": "05DS019",
            "attributes": {
                "使用角色": "输出结构"
            }
        },
        {
            "type": "使用",
            "关系ID": "05REL053",
            "source": "05ALG011",
            "target": "05DS014",
            "attributes": {
                "使用角色": "辅助"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL054",
            "source": "05ALG011",
            "target": "05CON012",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "继承",
            "关系ID": "05REL055",
            "source": "05ALG012",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "继承",
            "关系ID": "05REL056",
            "source": "05ALG013",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "继承",
            "关系ID": "05REL057",
            "source": "05ALG014",
            "target": "05ALG001",
            "attributes": {}
        },
        {
            "type": "使用",
            "关系ID": "05REL058",
            "source": "05ALG014",
            "target": "05DS015",
            "attributes": {
                "使用角色": "辅助"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL059",
            "source": "05ALG012",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL060",
            "source": "05ALG013",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL061",
            "source": "05ALG015",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL062",
            "source": "05ALG016",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL063",
            "source": "05ALG017",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL064",
            "source": "05ALG018",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL065",
            "source": "05DS001",
            "target": "05CON001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL066",
            "source": "05DS001",
            "target": "05CON002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL067",
            "source": "05DS001",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL068",
            "source": "05DS006",
            "target": "05CON004",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL069",
            "source": "05CON014",
            "target": "05CON013",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL070",
            "source": "05CON023",
            "target": "05CON022",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL071",
            "source": "05CON019",
            "target": "05CON018",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL072",
            "source": "05CON019",
            "target": "05CON017",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL073",
            "source": "05CON017",
            "target": "05CON006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL074",
            "source": "05CON018",
            "target": "05CON005",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL075",
            "source": "05CON034",
            "target": "05CON017",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL076",
            "source": "05CON035",
            "target": "05CON017",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL077",
            "source": "05CON025",
            "target": "05DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL078",
            "source": "05CON026",
            "target": "05DS004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL079",
            "source": "05CON028",
            "target": "05DS004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL080",
            "source": "05CON029",
            "target": "05DS004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL081",
            "source": "05CON036",
            "target": "05DS006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL082",
            "source": "05CON037",
            "target": "05DS006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL083",
            "source": "05CON038",
            "target": "05DS006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL084",
            "source": "05CON039",
            "target": "05DS008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "05REL085",
            "source": "05CON040",
            "target": "05DS008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL001",
            "source": "06DS001",
            "target": "06CON001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL002",
            "source": "06DS001",
            "target": "06CON002",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL003",
            "source": "06OP001",
            "target": "06DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL004",
            "source": "06OP002",
            "target": "06DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL005",
            "source": "06OP003",
            "target": "06DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL006",
            "source": "06OP004",
            "target": "06DS001",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL007",
            "source": "06ALG001",
            "target": "06CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL008",
            "source": "06ALG001",
            "target": "06CON005",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL009",
            "source": "06ALG001",
            "target": "06CON006",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "optimizes",
            "关系ID": "06REL010",
            "source": "06ALG002",
            "target": "06ALG001",
            "attributes": {
                "优化方向": "空间复杂度"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL011",
            "source": "06ALG001",
            "target": "06CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL012",
            "source": "06ALG001",
            "target": "06CON008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL013",
            "source": "06ALG002",
            "target": "06CON007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL014",
            "source": "06ALG002",
            "target": "06CON008",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL015",
            "source": "06DS001",
            "target": "06CON010",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL016",
            "source": "06DS001",
            "target": "06CON011",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL017",
            "source": "06ALG003",
            "target": "06CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL018",
            "source": "06ALG003",
            "target": "06CON005",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "optimizes",
            "关系ID": "06REL019",
            "source": "06ALG004",
            "target": "06ALG003",
            "attributes": {
                "优化方向": "空间复杂度"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL020",
            "source": "06ALG005",
            "target": "06ALG003",
            "attributes": {
                "使用角色": "核心步骤"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL021",
            "source": "06ALG005",
            "target": "06DS001",
            "attributes": {
                "使用角色": "创建实例"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL022",
            "source": "06ALG006",
            "target": "06CON012",
            "attributes": {
                "使用角色": "双分支处理"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL023",
            "source": "06ALG006",
            "target": "06CON004",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL024",
            "source": "06DS002",
            "target": "06DS003",
            "attributes": {
                "父类 ID": "06DS003",
                "子类 ID": "06DS002",
                "约束条件": "满足堆序性"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL025",
            "source": "06DS004",
            "target": "06DS002",
            "attributes": {
                "父类 ID": "06DS002",
                "子类 ID": "06DS004",
                "约束条件": "父结点值 <= 子结点值"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL026",
            "source": "06DS005",
            "target": "06DS002",
            "attributes": {
                "父类 ID": "06DS002",
                "子类 ID": "06DS005",
                "约束条件": "父结点值 >= 子结点值"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL027",
            "source": "06DS002",
            "target": "06CON013",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL028",
            "source": "06OP005",
            "target": "06DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL029",
            "source": "06OP006",
            "target": "06DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL030",
            "source": "06OP007",
            "target": "06DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL031",
            "source": "06OP008",
            "target": "06DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL032",
            "source": "06OP009",
            "target": "06DS002",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL033",
            "source": "06ALG007",
            "target": "06DS002",
            "attributes": {
                "使用角色": "维护插入时堆属性"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL034",
            "source": "06ALG008",
            "target": "06DS002",
            "attributes": {
                "使用角色": "维护删除时堆属性"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL035",
            "source": "06DS006",
            "target": "06CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL036",
            "source": "06DS006",
            "target": "06CON018",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL037",
            "source": "06ALG009",
            "target": "06DS006",
            "attributes": {
                "使用角色": "构建实例"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL038",
            "source": "06ALG009",
            "target": "06CON016",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL039",
            "source": "06ALG010",
            "target": "06DS006",
            "attributes": {
                "使用角色": "计算属性"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL040",
            "source": "06ALG010",
            "target": "06CON018",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL041",
            "source": "06CON019",
            "target": "06DS006",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL042",
            "source": "06CON019",
            "target": "06CON022",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL043",
            "source": "06ALG011",
            "target": "06DS006",
            "attributes": {
                "使用角色": "生成编码"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL044",
            "source": "06ALG011",
            "target": "06CON019",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL045",
            "source": "06CON027",
            "target": "06CON026",
            "attributes": {
                "父类 ID": "06CON026",
                "子类 ID": "06CON027"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL046",
            "source": "06CON027",
            "target": "06CON023",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL047",
            "source": "06CON028",
            "target": "06CON026",
            "attributes": {
                "父类 ID": "06CON026",
                "子类 ID": "06CON028"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL048",
            "source": "06CON028",
            "target": "06CON024",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL049",
            "source": "06DS007",
            "target": "06CON026",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL050",
            "source": "06DS008",
            "target": "06DS007",
            "attributes": {
                "父类 ID": "06DS007",
                "子类 ID": "06DS008",
                "约束条件": "中序线索"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL051",
            "source": "06DS007",
            "target": "06CON029",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL052",
            "source": "06OP011",
            "target": "06OP010",
            "attributes": {
                "父类 ID": "06OP010",
                "子类 ID": "06OP011",
                "约束条件": "中序遍历次序"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL053",
            "source": "06ALG012",
            "target": "06DS007",
            "attributes": {
                "使用角色": "修改结点结构"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL054",
            "source": "06OP012",
            "target": "06OP010",
            "attributes": {
                "父类 ID": "06OP010",
                "子类 ID": "06OP012",
                "约束条件": "先序遍历次序"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL055",
            "source": "06OP013",
            "target": "06OP010",
            "attributes": {
                "父类 ID": "06OP010",
                "子类 ID": "06OP013",
                "约束条件": "后序遍历次序"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL056",
            "source": "06ALG013",
            "target": "06DS007",
            "attributes": {
                "使用角色": "操作结点类型"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL057",
            "source": "06ALG014",
            "target": "06ALG013",
            "attributes": {
                "使用角色": "核心步骤"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL058",
            "source": "06ALG015",
            "target": "06DS008",
            "attributes": {
                "使用角色": "修改线索树结构"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL059",
            "source": "06ALG016",
            "target": "06ALG015",
            "attributes": {
                "使用角色": "核心步骤"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL060",
            "source": "06OP014",
            "target": "06DS008",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL061",
            "source": "06ALG017",
            "target": "06DS008",
            "attributes": {
                "使用角色": "遍历线索树"
            }
        },
        {
            "type": "uses",
            "关系ID": "06REL062",
            "source": "06ALG017",
            "target": "06OP014",
            "attributes": {
                "使用角色": "核心步骤"
            }
        },
        {
            "type": "is-a",
            "关系ID": "06REL063",
            "source": "06DS009",
            "target": "06DS001",
            "attributes": {
                "父类 ID": "06DS001",
                "子类 ID": "06DS009",
                "约束条件": "平衡因子为-1, 0, 或 1"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL064",
            "source": "06DS009",
            "target": "06CON030",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL065",
            "source": "06DS009",
            "target": "06CON031",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL066",
            "source": "06OP015",
            "target": "06DS009",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL067",
            "source": "06OP016",
            "target": "06DS009",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL068",
            "source": "06OP017",
            "target": "06DS009",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "has-op",
            "关系ID": "06REL069",
            "source": "06OP018",
            "target": "06DS009",
            "attributes": {
                "必需性": "是"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL070",
            "source": "06OP015",
            "target": "06CON030",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL071",
            "source": "06OP015",
            "target": "06CON031",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL072",
            "source": "06OP016",
            "target": "06CON030",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL073",
            "source": "06OP016",
            "target": "06CON031",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL074",
            "source": "06OP017",
            "target": "06CON030",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL075",
            "source": "06OP017",
            "target": "06CON031",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL076",
            "source": "06OP018",
            "target": "06CON030",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "06REL077",
            "source": "06OP018",
            "target": "06CON031",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL001",
            "source": "07DS001",
            "target": "07CON001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL002",
            "source": "07DS001",
            "target": "07CON002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL005",
            "source": "07DS002",
            "target": "07DS001",
            "attributes": {
                "父类 ID": "07DS001",
                "子类 ID": "07DS002",
                "约束条件": "边是序偶（有向边）"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL006",
            "source": "07DS003",
            "target": "07DS001",
            "attributes": {
                "父类 ID": "07DS001",
                "子类 ID": "07DS003",
                "约束条件": "边是无序对（无向边）"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL007",
            "source": "07CON003",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL008",
            "source": "07CON004",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL009",
            "source": "07CON005",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL010",
            "source": "07CON006",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL011",
            "source": "07CON007",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL012",
            "source": "07CON008",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL013",
            "source": "07CON009",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL014",
            "source": "07CON010",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL015",
            "source": "07CON011",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL016",
            "source": "07CON011",
            "target": "07CON010",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL017",
            "source": "07CON012",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL018",
            "source": "07CON012",
            "target": "07CON010",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL019",
            "source": "07DS004",
            "target": "07DS001",
            "attributes": {
                "父类 ID": "07DS001",
                "子类 ID": "07DS004",
                "约束条件": "任意顶点间都有边（无向）或双向边（有向）"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL020",
            "source": "07DS005",
            "target": "07DS001",
            "attributes": {
                "父类 ID": "07DS001",
                "子类 ID": "07DS005",
                "约束条件": "边数接近顶点数平方"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL021",
            "source": "07DS005",
            "target": "07DS004",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL022",
            "source": "07DS006",
            "target": "07DS001",
            "attributes": {
                "父类 ID": "07DS001",
                "子类 ID": "07DS006",
                "约束条件": "边数远小于顶点数平方"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL023",
            "source": "07CON013",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL024",
            "source": "07CON014",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL025",
            "source": "07CON015",
            "target": "07CON014",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL026",
            "source": "07CON016",
            "target": "07CON014",
            "attributes": {
                "父类 ID": "07CON014",
                "子类 ID": "07CON016",
                "约束条件": "顶点不重复"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL027",
            "source": "07CON017",
            "target": "07CON014",
            "attributes": {
                "父类 ID": "07CON014",
                "子类 ID": "07CON017",
                "约束条件": "起点终点相同"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL028",
            "source": "07CON018",
            "target": "07CON017",
            "attributes": {
                "父类 ID": "07CON017",
                "子类 ID": "07CON018",
                "约束条件": "中间顶点不重复"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL030",
            "source": "07CON019",
            "target": "07DS003",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL031",
            "source": "07CON019",
            "target": "07CON014",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL032",
            "source": "07DS007",
            "target": "07DS003",
            "attributes": {
                "父类 ID": "07DS003",
                "子类 ID": "07DS007",
                "约束条件": "任意两点连通"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL033",
            "source": "07DS007",
            "target": "07CON019",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL034",
            "source": "07DS008",
            "target": "07DS003",
            "attributes": {
                "父类 ID": "07DS003",
                "子类 ID": "07DS008",
                "约束条件": "存在不连通顶点对"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL035",
            "source": "07CON020",
            "target": "07CON013",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL036",
            "source": "07CON020",
            "target": "07DS007",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL037",
            "source": "07CON021",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL038",
            "source": "07CON021",
            "target": "07CON014",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "继承",
            "关系ID": "07REL039",
            "source": "07DS009",
            "target": "07DS002",
            "attributes": {
                "父类 ID": "07DS002",
                "子类 ID": "07DS009",
                "约束条件": "任意两点互相可达"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL040",
            "source": "07DS009",
            "target": "07CON021",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL041",
            "source": "07CON022",
            "target": "07CON013",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL042",
            "source": "07CON022",
            "target": "07DS009",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL043",
            "source": "07CON023",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL044",
            "source": "07DS001",
            "target": "07DS010",
            "attributes": {
                "基础 ID": "07DS001",
                "变体 ID": "07DS010",
                "变体类型": "边带权值"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL045",
            "source": "07DS010",
            "target": "07CON023",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL046",
            "source": "07CON024",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL047",
            "source": "07OP001",
            "target": "07DS001",
            "attributes": {
                "操作 ID": "07OP001",
                "数据结构 ID": "07DS001",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL048",
            "source": "07OP002",
            "target": "07DS001",
            "attributes": {
                "操作 ID": "07OP002",
                "数据结构 ID": "07DS001",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL049",
            "source": "07OP003",
            "target": "07DS001",
            "attributes": {
                "操作 ID": "07OP003",
                "数据结构 ID": "07DS001",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL050",
            "source": "07OP004",
            "target": "07DS001",
            "attributes": {
                "操作 ID": "07OP004",
                "数据结构 ID": "07DS001",
                "必需性": "否"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL051",
            "source": "07OP005",
            "target": "07DS001",
            "attributes": {
                "操作 ID": "07OP005",
                "数据结构 ID": "07DS001",
                "必需性": "否"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL052",
            "source": "07OP006",
            "target": "07DS001",
            "attributes": {
                "操作 ID": "07OP006",
                "数据结构 ID": "07DS001",
                "必需性": "是"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL053",
            "source": "07CON025",
            "target": "07DS010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL054",
            "source": "07CON026",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL054b",
            "source": "07CON026",
            "target": "07DS010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL055",
            "source": "07CON027",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL056",
            "source": "07CON028",
            "target": "07DS010",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL056b",
            "source": "07CON028",
            "target": "07DS002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL057",
            "source": "07CON029",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL058",
            "source": "07CON029",
            "target": "07DS011",
            "attributes": {
                "基础 ID": "07CON029",
                "变体 ID": "07DS011",
                "变体类型": "矩阵表示"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL060",
            "source": "07OP007",
            "target": "07DS011",
            "attributes": {
                "操作 ID": "07OP007",
                "数据结构 ID": "07DS011",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL061",
            "source": "07OP008",
            "target": "07DS011",
            "attributes": {
                "操作 ID": "07OP008",
                "数据结构 ID": "07DS011",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL062",
            "source": "07OP009",
            "target": "07DS011",
            "attributes": {
                "操作 ID": "07OP009",
                "数据结构 ID": "07DS011",
                "必需性": "否"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL063",
            "source": "07CON029",
            "target": "07DS012",
            "attributes": {
                "基础 ID": "07CON029",
                "变体 ID": "07DS012",
                "变体类型": "链式表示"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL065",
            "source": "07CON030",
            "target": "07DS012",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL066",
            "source": "07CON031",
            "target": "07DS012",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL067",
            "source": "07OP010",
            "target": "07DS012",
            "attributes": {
                "操作 ID": "07OP010",
                "数据结构 ID": "07DS012",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL068",
            "source": "07OP011",
            "target": "07DS012",
            "attributes": {
                "操作 ID": "07OP011",
                "数据结构 ID": "07DS012",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL069",
            "source": "07OP012",
            "target": "07DS012",
            "attributes": {
                "操作 ID": "07OP012",
                "数据结构 ID": "07DS012",
                "必需性": "否"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL070",
            "source": "07DS012",
            "target": "07DS013",
            "attributes": {
                "基础 ID": "07DS012",
                "变体 ID": "07DS013",
                "变体类型": "存储入边"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL071",
            "source": "07DS012",
            "target": "07DS014",
            "attributes": {
                "基础 ID": "07DS012",
                "变体 ID": "07DS014",
                "变体类型": "结合入边出边链"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL072",
            "source": "07DS013",
            "target": "07DS014",
            "attributes": {
                "基础 ID": "07DS013",
                "变体 ID": "07DS014",
                "变体类型": "结合入边出边链"
            }
        },
        {
            "type": "变体",
            "关系ID": "07REL073",
            "source": "07CON029",
            "target": "07DS015",
            "attributes": {
                "基础 ID": "07CON029",
                "变体 ID": "07DS015",
                "变体类型": "边列表表示"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL075",
            "source": "07OP013",
            "target": "07DS015",
            "attributes": {
                "操作 ID": "07OP013",
                "数据结构 ID": "07DS015",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL076",
            "source": "07OP014",
            "target": "07DS015",
            "attributes": {
                "操作 ID": "07OP014",
                "数据结构 ID": "07DS015",
                "必需性": "是"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL077",
            "source": "07OP015",
            "target": "07DS015",
            "attributes": {
                "操作 ID": "07OP015",
                "数据结构 ID": "07DS015",
                "必需性": "否"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL078",
            "source": "07CON032",
            "target": "07DS001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用",
            "关系ID": "07REL079",
            "source": "07ALG001",
            "target": "07DS001",
            "attributes": {
                "算法 ID": "07ALG001",
                "数据结构 ID": "07DS001",
                "使用角色": "核心"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL080",
            "source": "07ALG001",
            "target": "07CON033",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL081",
            "source": "07OP016",
            "target": "07DS011",
            "attributes": {
                "操作 ID": "07OP016",
                "数据结构 ID": "07DS011",
                "必需性": "否"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL082",
            "source": "07OP016",
            "target": "07ALG001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL083",
            "source": "07OP017",
            "target": "07DS012",
            "attributes": {
                "操作 ID": "07OP017",
                "数据结构 ID": "07DS012",
                "必需性": "否"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL084",
            "source": "07OP017",
            "target": "07ALG001",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "使用",
            "关系ID": "07REL085",
            "source": "07ALG002",
            "target": "07DS001",
            "attributes": {
                "算法 ID": "07ALG002",
                "数据结构 ID": "07DS001",
                "使用角色": "核心"
            }
        },
        {
            "type": "使用",
            "关系ID": "07REL086",
            "source": "07ALG002",
            "target": "07DS016",
            "attributes": {
                "算法 ID": "07ALG002",
                "数据结构 ID": "07DS016",
                "使用角色": "核心"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL087",
            "source": "07OP018",
            "target": "07DS011",
            "attributes": {
                "操作 ID": "07OP018",
                "数据结构 ID": "07DS011",
                "必需性": "否"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL088",
            "source": "07OP018",
            "target": "07ALG002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "操作绑定",
            "关系ID": "07REL089",
            "source": "07OP019",
            "target": "07DS012",
            "attributes": {
                "操作 ID": "07OP019",
                "数据结构 ID": "07DS012",
                "必需性": "否"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL090",
            "source": "07OP019",
            "target": "07ALG002",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL091",
            "source": "07ALG001",
            "target": "07CON020",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "理论依赖",
            "关系ID": "07REL092",
            "source": "07ALG002",
            "target": "07CON020",
            "attributes": {
                "依赖强度": "弱"
            }
        },
        {
            "type": "is-a",
            "关系ID": "08REL001",
            "source": "08CON007",
            "target": "08CON006",
            "attributes": {
                "约束条件": "使用DFS生成"
            }
        },
        {
            "type": "is-a",
            "关系ID": "08REL002",
            "source": "08CON008",
            "target": "08CON006",
            "attributes": {
                "约束条件": "使用BFS生成"
            }
        },
        {
            "type": "is-a",
            "关系ID": "08REL003",
            "source": "08CON009",
            "target": "08CON001",
            "attributes": {
                "约束条件": "连通, 无向, 带权"
            }
        },
        {
            "type": "is-a",
            "关系ID": "08REL004",
            "source": "08CON002",
            "target": "08CON006",
            "attributes": {
                "约束条件": "在连通网中权值最小"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL005",
            "source": "08ALG001",
            "target": "08CON009",
            "attributes": {
                "使用角色": "输入图类型"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL006",
            "source": "08ALG001",
            "target": "08CON011",
            "attributes": {
                "使用角色": "输入表示(示例代码)"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL007",
            "source": "08ALG001",
            "target": "08DS001",
            "attributes": {
                "使用角色": "输出/中间存储(示例代码)"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL008",
            "source": "08ALG002",
            "target": "08CON009",
            "attributes": {
                "使用角色": "输入图类型"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL009",
            "source": "08ALG002",
            "target": "08DS001",
            "attributes": {
                "使用角色": "输入/输出存储"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL010",
            "source": "08ALG002",
            "target": "08CON012",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL011",
            "source": "08ALG002",
            "target": "08CON013",
            "attributes": {
                "使用角色": "回路检测基础"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL012",
            "source": "08CON015",
            "target": "08CON014",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL013",
            "source": "08CON016",
            "target": "08CON015",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL014",
            "source": "08CON017",
            "target": "08CON014",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL015",
            "source": "08CON003",
            "target": "08CON017",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL016",
            "source": "08ALG003",
            "target": "08CON011",
            "attributes": {
                "使用角色": "输入表示(示例代码)"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL017",
            "source": "08ALG003",
            "target": "08CON018",
            "attributes": {
                "使用角色": "输入参数"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL018",
            "source": "08ALG003",
            "target": "08DS002",
            "attributes": {
                "使用角色": "路径存储(示例代码)"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL019",
            "source": "08ALG004",
            "target": "08CON011",
            "attributes": {
                "使用角色": "输入/输出存储"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL020",
            "source": "08CON022",
            "target": "08CON020",
            "attributes": {
                "使用角色": "顶点表示"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL021",
            "source": "08CON022",
            "target": "08CON021",
            "attributes": {
                "使用角色": "边表示"
            }
        },
        {
            "type": "is-a",
            "关系ID": "08REL022",
            "source": "08CON022",
            "target": "08CON023",
            "attributes": {}
        },
        {
            "type": "depends-on",
            "关系ID": "08REL023",
            "source": "08CON004",
            "target": "08CON022",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL024",
            "source": "08ALG005",
            "target": "08CON022",
            "attributes": {
                "使用角色": "输入图类型"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL025",
            "source": "08ALG005",
            "target": "08CON024",
            "attributes": {
                "使用角色": "核心概念"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL026",
            "source": "08ALG005",
            "target": "08DS003",
            "attributes": {
                "使用角色": "输入表示(推荐)"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL027",
            "source": "08ALG005",
            "target": "08DS004",
            "attributes": {
                "使用角色": "内部数据结构"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL028",
            "source": "08CON025",
            "target": "08CON020",
            "attributes": {
                "使用角色": "边表示"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL029",
            "source": "08CON025",
            "target": "08CON026",
            "attributes": {
                "使用角色": "顶点表示"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL030",
            "source": "08CON025",
            "target": "08CON027",
            "attributes": {
                "使用角色": "边权表示"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL031",
            "source": "08CON029",
            "target": "08CON004",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL032",
            "source": "08CON029",
            "target": "08CON027",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL033",
            "source": "08CON030",
            "target": "08CON029",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL034",
            "source": "08CON031",
            "target": "08CON004",
            "attributes": {
                "依赖强度": "中"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL035",
            "source": "08CON031",
            "target": "08CON027",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL036",
            "source": "08CON032",
            "target": "08CON031",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL037",
            "source": "08CON032",
            "target": "08CON027",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL038",
            "source": "08CON033",
            "target": "08CON030",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL039",
            "source": "08CON033",
            "target": "08CON032",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL040",
            "source": "08CON034",
            "target": "08CON033",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL041",
            "source": "08CON005",
            "target": "08CON034",
            "attributes": {
                "使用角色": "构成元素"
            }
        },
        {
            "type": "depends-on",
            "关系ID": "08REL042",
            "source": "08CON005",
            "target": "08CON025",
            "attributes": {
                "依赖强度": "强"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL043",
            "source": "08ALG006",
            "target": "08CON025",
            "attributes": {
                "使用角色": "输入图类型"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL044",
            "source": "08ALG006",
            "target": "08DS003",
            "attributes": {
                "使用角色": "输入表示(示例代码)"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL045",
            "source": "08ALG006",
            "target": "08ALG005",
            "attributes": {
                "使用角色": "依赖/子过程"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL046",
            "source": "08ALG006",
            "target": "08CON029",
            "attributes": {
                "使用角色": "计算"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL047",
            "source": "08ALG006",
            "target": "08CON031",
            "attributes": {
                "使用角色": "计算"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL048",
            "source": "08ALG006",
            "target": "08CON030",
            "attributes": {
                "使用角色": "计算"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL049",
            "source": "08ALG006",
            "target": "08CON032",
            "attributes": {
                "使用角色": "计算"
            }
        },
        {
            "type": "uses",
            "关系ID": "08REL050",
            "source": "08ALG006",
            "target": "08CON034",
            "attributes": {
                "使用角色": "识别目标"
            }
        }
    ]
}