{
  "entities": [
    {
      "type": "数据结构",
      "ID": "08DS001",
      "name": "图",
      "attributes": {
        "难度": "中等",
        "内容": "图是表示对象之间关系的数据结构，由顶点（Vertex）集合和边（Edge）集合组成。边连接顶点对。图可以是无向的或有向的，带权的（网）或无权的。在工程技术和日常生活中应用广泛，涉及最小生成树、最短路径、拓扑排序、关键路径等运算。",
        "存储开销": "邻接矩阵 O(V^2)，邻接表 O(V+E)",
        "核心特性": "顶点、边、连通性、有向/无向、带权/无权"
      }
    },
    {
      "type": "概念",
      "ID": "08CON001",
      "name": "生成树",
      "attributes": {
        "难度": "入门",
        "内容": "在一个连通图中，包含所有顶点但只包含部分边，使得这些边连接所有顶点且不形成回路的子图。n个顶点的生成树恰好有n-1条边。是能够连通图中所有顶点的极小连通子图。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON002",
      "name": "最小生成树",
      "attributes": {
        "难度": "中等",
        "内容": "对于带权连通图（网），其所有生成树中，边的权值总和最小的那棵生成树。用于解决如通信网络建设中总造价最低的问题。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG001",
      "name": "普里姆算法",
      "attributes": {
        "难度": "中等",
        "内容": "一种构造最小生成树的贪心算法。从任一顶点开始，逐步扩展生成树，每次选择连接已选顶点集和未选顶点集的最短边，直到包含所有顶点。维护到未选顶点的最短边信息可优化查找过程。",
        "时间复杂度": "O(V^2)（使用邻接矩阵，简单实现）或 O(E log V)（使用优先队列优化）",
        "空间复杂度": "O(V) 或 O(V+E)",
        "设计思想": "贪心",
        "适用场景": "求解稠密图的最小生成树"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG002",
      "name": "克鲁斯卡尔算法",
      "attributes": {
        "难度": "中等",
        "内容": "一种构造最小生成树的贪心算法。将所有边按权值升序排序，依次考察每条边，若该边连接的两个顶点不属于同一连通分量（即加入该边不形成回路），则将其加入生成树，直到包含n-1条边。",
        "时间复杂度": "O(E log E) 或 O(E log V)（主要取决于排序和并查集操作）",
        "空间复杂度": "O(V+E)（存储边和并查集）",
        "设计思想": "贪心",
        "适用场景": "求解稀疏图的最小生成树"
      }
    },
    {
      "type": "概念",
      "ID": "08CON003",
      "name": "连通分量",
      "attributes": {
        "难度": "入门",
        "内容": "无向图中的极大连通子图。在克鲁斯卡尔算法中用于判断加入边是否会形成回路，通过维护顶点所属的集合（连通分量）来实现。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS002",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "一种存储图的边信息的数据结构，通常包含边的两个端点和权值。适用于需要对边进行排序或独立处理的算法，如克鲁斯卡尔算法。",
        "存储开销": "O(E)",
        "核心特性": "存储边信息（起点、终点、权值）"
      }
    },
    {
      "type": "概念",
      "ID": "08CON004",
      "name": "最短路径",
      "attributes": {
        "难度": "入门",
        "内容": "在图中，连接两个顶点之间所有路径中长度（无权图指边数，带权图指权值之和）最短的那条路径。其长度称为最短路径长度或最短距离。分为单源最短路径和所有顶点对最短路径问题。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG003",
      "name": "狄克斯特拉算法",
      "attributes": {
        "难度": "中等",
        "内容": "解决单源最短路径问题的贪心算法。维护一个已找到最短路径的顶点集合S，从未在S中的顶点中选择距离源点最近的顶点u加入S，并用u更新其邻接顶点的距离。不能处理负权边。",
        "时间复杂度": "O(V^2)（简单实现）或 O(E + V log V)（使用优先队列优化）",
        "空间复杂度": "O(V)",
        "设计思想": "贪心",
        "适用场景": "求解非负权图的单源最短路径问题"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG004",
      "name": "弗洛伊德算法",
      "attributes": {
        "难度": "中等",
        "内容": "解决所有顶点对之间最短路径问题的动态规划算法。通过考虑允许经过的中间顶点k (从0到n-1)，逐步放松(i, j)之间的最短路径估计值：dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])。可以处理负权边（但不能处理负权回路）。",
        "时间复杂度": "O(V^3)",
        "空间复杂度": "O(V^2)",
        "设计思想": "动态规划",
        "适用场景": "求解所有顶点对之间的最短路径，图规模不大时适用，可处理负权边"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG005",
      "name": "拓扑排序",
      "attributes": {
        "难度": "中等",
        "内容": "对有向无环图（DAG）的顶点进行线性排序，使得对于图中任意一条有向边(u, v)，顶点u都在顶点v之前。常用于任务调度等场景。算法通常基于统计和更新顶点的入度。",
        "时间复杂度": "O(V+E)",
        "空间复杂度": "O(V+E)（使用邻接表）",
        "设计思想": "基于入度的迭代删除/选择",
        "适用场景": "有向无环图（DAG）的顶点排序，检查图中是否存在环"
      }
    },
    {
      "type": "概念",
      "ID": "08CON005",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，指向某个顶点的边的数量。拓扑排序算法的核心是不断选择并移除入度为0的顶点。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON006",
      "name": "顶点活动网 (AOV网)",
      "attributes": {
        "难度": "中等",
        "内容": "用顶点表示活动（如工程中的子任务、课程），用有向边表示活动之间的优先关系（如前置任务、先修课程）的有向无环图。拓扑排序是处理AOV网的典型应用。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON007",
      "name": "关键路径",
      "attributes": {
        "难度": "中等",
        "内容": "在边表示活动的网络（AOE网）中，从源点到汇点的最长路径。关键路径的长度决定了整个工程的最短完成时间。路径上的活动称为关键活动。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON008",
      "name": "边表示活动的网络 (AOE网)",
      "attributes": {
        "难度": "中等",
        "内容": "用带权有向边表示活动及其持续时间，用顶点表示事件（活动的开始或结束）的有向无环图。用于项目管理和进度规划，分析关键路径。",
        "核心特性": "源点、汇点、事件、活动（带权边）"
      }
    },
    {
      "type": "概念",
      "ID": "08CON009",
      "name": "事件最早发生时间 (ve)",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，事件（顶点）能够发生的最早时刻。等于从源点到该事件顶点的所有路径中的最长路径长度。按拓扑顺序计算。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON010",
      "name": "事件最迟发生时间 (vl)",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，为了不延误整个工程的完成，事件（顶点）必须发生的最晚时刻。等于汇点的最早（最迟）发生时间减去从该事件顶点到汇点的最长路径长度。按逆拓扑顺序计算。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON011",
      "name": "活动最早开始时间 (e)",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，活动（边）能够开始的最早时刻。等于该活动起点事件的最早发生时间。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON012",
      "name": "活动最迟开始时间 (l)",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，为了不延误整个工程的完成，活动（边）必须开始的最晚时刻。等于该活动终点事件的最迟发生时间减去活动的持续时间。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON013",
      "name": "关键活动",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，最早开始时间等于最迟开始时间的活动。这些活动位于关键路径上，它们的延迟会直接导致整个工程的延迟。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS003",
      "name": "邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "一种图的存储结构。使用一个顶点数组，每个顶点对应一个链表，存储从该顶点出发的所有边（或指向该顶点的边，取决于实现）。适用于稀疏图。",
        "存储开销": "O(V+E)",
        "核心特性": "空间效率高（对稀疏图），方便查找顶点的邻接点"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS004",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "一种图的存储结构。使用一个V*V的二维数组，matrix[i][j]存储顶点i到顶点j的边的信息（如权值或是否存在）。适用于稠密图。",
        "存储开销": "O(V^2)",
        "核心特性": "方便判断两顶点间是否有边，方便计算度（有向图的出度/入度）"
      }
    },
    {
      "type": "概念",
      "ID": "08CON014",
      "name": "深度优先生成树",
      "attributes": {
        "难度": "入门",
        "内容": "通过深度优先搜索（DFS）遍历连通图生成的生成树。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON015",
      "name": "广度优先生成树",
      "attributes": {
        "难度": "入门",
        "内容": "通过广度优先搜索（BFS）遍历连通图生成的生成树。"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "关系ID": "08REL001",
      "source": "08CON001",
      "target": "08DS001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL002",
      "source": "08CON002",
      "target": "08CON001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL003",
      "source": "08CON002",
      "target": "08DS001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL004",
      "source": "08ALG001",
      "target": "08CON002",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL005",
      "source": "08ALG001",
      "target": "08DS001",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
     {
      "type": "使用",
      "关系ID": "08REL006",
      "source": "08ALG001",
      "target": "08DS004",
      "attributes": {
        "使用角色": "数据表示"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL007",
      "source": "08ALG002",
      "target": "08CON002",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL008",
      "source": "08ALG002",
      "target": "08DS001",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL009",
      "source": "08ALG002",
      "target": "08DS002",
      "attributes": {
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL010",
      "source": "08ALG002",
      "target": "08CON003",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL011",
      "source": "08ALG003",
      "target": "08CON004",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL012",
      "source": "08ALG003",
      "target": "08DS001",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
     {
      "type": "使用",
      "关系ID": "08REL013",
      "source": "08ALG003",
      "target": "08DS004",
      "attributes": {
        "使用角色": "数据表示（示例中）"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL014",
      "source": "08ALG004",
      "target": "08CON004",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL015",
      "source": "08ALG004",
      "target": "08DS001",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL016",
      "source": "08ALG004",
      "target": "08DS004",
      "attributes": {
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL017",
      "source": "08ALG005",
      "target": "08CON005",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL018",
      "source": "08ALG005",
      "target": "08CON006",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL019",
      "source": "08ALG005",
      "target": "08DS001",
      "attributes": {
        "使用角色": "操作对象 (DAG)"
      }
    },
     {
      "type": "使用",
      "关系ID": "08REL020",
      "source": "08ALG005",
      "target": "08DS003",
      "attributes": {
        "使用角色": "推荐数据表示"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL021",
      "source": "08CON007",
      "target": "08CON008",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL022",
      "source": "08CON007",
      "target": "08CON009",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL023",
      "source": "08CON007",
      "target": "08CON010",
      "attributes": {
        "依赖强度": "强"
      }
    },
     {
      "type": "理论依赖",
      "关系ID": "08REL024",
      "source": "08CON007",
      "target": "08CON013",
      "attributes": {
        "依赖强度": "强"
      }
    },
     {
      "type": "使用",
      "关系ID": "08REL025",
      "source": "08CON007",
      "target": "08ALG005",
      "attributes": {
        "使用角色": "前置计算"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL026",
      "source": "08CON009",
      "target": "08ALG005",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL027",
      "source": "08CON010",
      "target": "08ALG005",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL028",
      "source": "08CON011",
      "target": "08CON009",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL029",
      "source": "08CON012",
      "target": "08CON010",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL030",
      "source": "08CON013",
      "target": "08CON011",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL031",
      "source": "08CON013",
      "target": "08CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "08REL032",
      "source": "08CON001",
      "target": "08CON014",
      "attributes": {
        "约束条件": "通过DFS生成"
      }
    },
    {
      "type": "继承",
      "关系ID": "08REL033",
      "source": "08CON001",
      "target": "08CON015",
      "attributes": {
        "约束条件": "通过BFS生成"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL034",
      "source": "08DS001",
      "target": "08DS003",
      "attributes": {
        "使用角色": "数据表示"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL035",
      "source": "08DS001",
      "target": "08DS004",
      "attributes": {
        "使用角色": "数据表示"
      }
    }
  ]
}