{
  "entities": [
    {
      "type": "概念",
      "ID": "08CON001",
      "name": "图",
      "attributes": {
        "难度": "入门",
        "内容": "由顶点和边构成的数据结构，用于表示对象之间的关系。本章讨论其在工程技术和日常生活中的应用，如最小生成树、最短路径、拓扑序列、关键路径等。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON002",
      "name": "最小生成树",
      "attributes": {
        "难度": "中等",
        "内容": "在一个连通网（带权无向连通图）中，连接所有顶点且权值总和最小的生成树。具有实际意义，如构建最低成本通信网络。当边权值唯一时，最小生成树唯一；否则可能不唯一，但权值相同。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON003",
      "name": "最短路径",
      "attributes": {
        "难度": "中等",
        "内容": "在图中，连接两个顶点之间路径长度（无权图为边数，带权图为权值之和）最短的路径。可应用于运输网络优化等。主要问题包括单源最短路径和所有顶点对之间的最短路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON004",
      "name": "拓扑序列",
      "attributes": {
        "难度": "中等",
        "内容": "在有向无环图（如AOV网）中，将所有顶点排成一个线性序列，使得图中任意一条有向边<u, v>，顶点u都在顶点v之前。表示活动的一种可行执行顺序。一个图的拓扑序列可能不唯一。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON005",
      "name": "关键路径",
      "attributes": {
        "难度": "中等/高级",
        "内容": "在AOE网中，从源点到汇点的一条或多条路径，其上的活动均为关键活动（时间余量为0）。关键路径的长度决定了整个工程的最短完成时间。可能存在多条关键路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON006",
      "name": "生成树",
      "attributes": {
        "难度": "入门",
        "内容": "连通图G的一个子图G'，包含G的所有顶点和部分边，使得G'连通且无回路。n个顶点的生成树恰有n-1条边。增加一条边会形成回路，删除一条边会使其不连通。是极小连通子图。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON007",
      "name": "深度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过深度优先搜索（DFS）遍历连通图生成的生成树。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON008",
      "name": "广度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过广度优先搜索（BFS）遍历连通图生成的生成树。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON009",
      "name": "连通网",
      "attributes": {
        "难度": "入门",
        "内容": "带权的无向连通图，通常假定权值为正实数。最小生成树在此类图上定义。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON010",
      "name": "树的权",
      "attributes": {
        "难度": "入门",
        "内容": "生成树中所有边上的权值总和。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG001",
      "name": "普里姆算法",
      "attributes": {
        "难度": "中等",
        "内容": "构造连通网最小生成树的算法。从一个顶点开始，逐步扩大生成树，每次选择连接树内顶点和树外顶点之间权值最小的边加入树中，直到包含所有顶点。关键在于高效查找最小权边。",
        "时间复杂度": "O(n^2) (基于邻接矩阵和简单查找)",
        "空间复杂度": "O(1) (辅助空间，不计输入输出)"
      }
    },
    {
      "type": "概念",
      "ID": "08CON011",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "图的一种存储方式，使用二维数组表示顶点间的连接关系和权值。适用于稠密图。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS001",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "用数组存储图的所有边，每条边通常记录起点、终点和权值。常用于Kruskal算法，也可用于存储Prim算法的结果。",
        "存储开销": "O(E) 或 O(n)，取决于具体用途"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG002",
      "name": "克鲁斯卡尔算法",
      "attributes": {
        "难度": "中等",
        "内容": "构造连通网最小生成树的算法。将所有边按权值排序，依次检查每条边，如果该边连接的两个顶点不在同一个连通分量（即加入该边不形成回路），则将其加入生成树，直到包含n-1条边。关键在于判断是否形成回路（常用并查集）。",
        "时间复杂度": "O(n^2) (基于特定实现的集合操作)",
        "空间复杂度": "O(n^2) (基于特定实现的集合存储)"
      }
    },
    {
      "type": "概念",
      "ID": "08CON012",
      "name": "回路",
      "attributes": {
        "难度": "入门",
        "内容": "图中一条起点和终点相同的路径。在生成树和拓扑排序中需要避免或检测回路。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON013",
      "name": "连通分量",
      "attributes": {
        "难度": "入门/中等",
        "内容": "无向图中的极大连通子图。Kruskal算法利用此概念判断是否形成回路。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON014",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "图中顶点之间通过边连接形成的序列。本节主要讨论无回路的简单路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON015",
      "name": "路径长度 (无权)",
      "attributes": {
        "难度": "入门",
        "内容": "路径上所包含的边的数量。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON016",
      "name": "最短路径 (无权)",
      "attributes": {
        "难度": "入门",
        "内容": "连接两个顶点之间边数最少的路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON017",
      "name": "带权路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "路径上所有边的权值之和。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON018",
      "name": "源点",
      "attributes": {
        "难度": "入门",
        "内容": "最短路径问题中的起始顶点；AOE网中表示工程开始的事件，只有出边。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON019",
      "name": "终点",
      "attributes": {
        "难度": "入门",
        "内容": "最短路径问题中的目标顶点。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG003",
      "name": "狄克斯特拉算法",
      "attributes": {
        "难度": "中等",
        "内容": "解决单源最短路径问题的算法（要求边权非负）。按路径长度递增的顺序，逐步确定从源点到其他各顶点的最短路径。维护一个已确定最短路径的顶点集合S，每次从未包含在S中的顶点里选择距离源点最近的顶点加入S，并更新其邻接顶点的距离。",
        "时间复杂度": "O(n^2) (基于邻接矩阵和简单查找)",
        "空间复杂度": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS002",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "一种线性数据结构，节点包含数据域和指向下一个节点的指针。文中用于存储Dijkstra算法找到的最短路径上的顶点序列。",
        "存储开销": "O(L)，L为链表长度"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG004",
      "name": "弗洛伊德算法",
      "attributes": {
        "难度": "中等",
        "内容": "解决所有顶点对之间最短路径问题的算法。通过动态规划思想，迭代地考虑每个顶点k是否能作为中间点缩短其他任意两点i, j之间的路径。即 A[i][j] = min(A[i][j], A[i][k]+A[k][j])。可以处理负权边（但不能处理负权回路）。",
        "时间复杂度": "O(n^3)",
        "空间复杂度": "O(n^2)"
      }
    },
    {
      "type": "概念",
      "ID": "08CON020",
      "name": "活动",
      "attributes": {
        "难度": "入门",
        "内容": "表示一个工程中的子工程或任务。在AOV网中由顶点表示，在AOE网中由边表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON021",
      "name": "先后关系",
      "attributes": {
        "难度": "入门",
        "内容": "活动之间的约束，表示一个活动必须在另一个活动完成后才能开始。在AOV网中由有向边表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON022",
      "name": "顶点活动网 (AOV网)",
      "attributes": {
        "难度": "中等",
        "内容": "用顶点表示活动，用有向边表示活动间的先后关系的图。必须是DAG，用于表示任务依赖关系，如课程先修关系。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON023",
      "name": "有向无环图 (DAG)",
      "attributes": {
        "难度": "中等",
        "内容": "没有有向回路的有向图。AOV网和AOE网都必须是DAG。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG005",
      "name": "拓扑排序算法",
      "attributes": {
        "难度": "中等",
        "内容": "生成AOV网拓扑序列的算法。反复执行：选择一个入度为0的顶点并输出；从图中删除该顶点及其所有出边。若最终输出顶点数小于总顶点数，则图中存在回路。",
        "时间复杂度": "O(n+e) (基于邻接表)",
        "空间复杂度": "O(n) (用于存储入度和栈)"
      }
    },
    {
      "type": "概念",
      "ID": "08CON024",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "指向一个顶点的边的数量。在拓扑排序中用于选择起始顶点。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS003",
      "name": "邻接表",
      "attributes": {
        "难度": "入门/中等",
        "内容": "图的一种存储方式，为每个顶点维护一个链表，存储所有与该顶点邻接的顶点信息（及边权）。适用于稀疏图，常用于拓扑排序、DFS、BFS等。",
        "存储开销": "O(V+E)"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS004",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "后进先出（LIFO）的数据结构。文中拓扑排序算法使用（静态实现的）栈来存储所有入度为0的顶点。",
        "存储开销": "O(n) (在本例实现中)"
      }
    },
    {
      "type": "概念",
      "ID": "08CON025",
      "name": "边表示活动的网络 (AOE网)",
      "attributes": {
        "难度": "中等/高级",
        "内容": "用带权有向边表示活动及其持续时间，用顶点表示事件（活动的开始或结束）的图。必须是DAG，用于工程计划与进度管理，分析关键路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON026",
      "name": "事件",
      "attributes": {
        "难度": "入门",
        "内容": "AOE网中的顶点，表示活动之间的转接点或里程碑，标志着入边活动的完成和出边活动的开始。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON027",
      "name": "活动持续时间",
      "attributes": {
        "难度": "入门",
        "内容": "完成一个活动所需的时间。在AOE网中表示为边的权值。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON028",
      "name": "汇点",
      "attributes": {
        "难度": "入门",
        "内容": "AOE网中表示整个工程结束的事件，只有入边。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON029",
      "name": "事件最早发生时间 (ve)",
      "attributes": {
        "难度": "中等",
        "内容": "事件能发生的最早时刻，等于从源点到该事件的最长路径长度。按拓扑序计算：ve[k] = max(ve[j] + dut(<j, k>))。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON030",
      "name": "活动最早开始时间 (e)",
      "attributes": {
        "难度": "中等",
        "内容": "活动能开始的最早时刻，等于其起始事件的最早发生时间：e[i] = ve[j] (活动i=<j, k>)。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON031",
      "name": "事件最迟发生时间 (vl)",
      "attributes": {
        "难度": "中等",
        "内容": "在不延误整个工程的前提下，事件必须发生的最晚时刻。按逆拓扑序计算：vl[j] = min(vl[k] - dut(<j, k>))，且vl[汇点]=ve[汇点]。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON032",
      "name": "活动最迟开始时间 (l)",
      "attributes": {
        "难度": "中等",
        "内容": "在不延误整个工程的前提下，活动必须开始的最晚时刻：l[i] = vl[k] - dut(<j, k>) (活动i=<j, k>)。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON033",
      "name": "时间余量 (浮动时间)",
      "attributes": {
        "难度": "中等",
        "内容": "活动可以推迟开始而不影响总工期的时间：l[i] - e[i]。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON034",
      "name": "关键活动",
      "attributes": {
        "难度": "中等",
        "内容": "时间余量为0的活动。这些活动必须按时开始和完成，否则会延误整个工程。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG006",
      "name": "关键路径算法",
      "attributes": {
        "难度": "中等/高级",
        "内容": "计算AOE网中关键路径的算法。步骤包括计算所有事件的ve和vl，然后计算所有活动的e和l，找出时间余量为0的关键活动，最后确定由关键活动构成的路径。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n)"
      }
    }
  ],
  "relations": [
    {
      "type": "is-a",
      "关系ID": "08REL001",
      "source": "08CON007",
      "target": "08CON006",
      "attributes": {
        "约束条件": "使用DFS生成"
      }
    },
    {
      "type": "is-a",
      "关系ID": "08REL002",
      "source": "08CON008",
      "target": "08CON006",
      "attributes": {
        "约束条件": "使用BFS生成"
      }
    },
    {
      "type": "is-a",
      "关系ID": "08REL003",
      "source": "08CON009",
      "target": "08CON001",
      "attributes": {
        "约束条件": "连通, 无向, 带权"
      }
    },
    {
      "type": "is-a",
      "关系ID": "08REL004",
      "source": "08CON002",
      "target": "08CON006",
      "attributes": {
        "约束条件": "在连通网中权值最小"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL005",
      "source": "08ALG001",
      "target": "08CON009",
      "attributes": {
        "使用角色": "输入图类型"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL006",
      "source": "08ALG001",
      "target": "08CON011",
      "attributes": {
        "使用角色": "输入表示(示例代码)"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL007",
      "source": "08ALG001",
      "target": "08DS001",
      "attributes": {
        "使用角色": "输出/中间存储(示例代码)"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL008",
      "source": "08ALG002",
      "target": "08CON009",
      "attributes": {
        "使用角色": "输入图类型"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL009",
      "source": "08ALG002",
      "target": "08DS001",
      "attributes": {
        "使用角色": "输入/输出存储"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL010",
      "source": "08ALG002",
      "target": "08CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL011",
      "source": "08ALG002",
      "target": "08CON013",
      "attributes": {
        "使用角色": "回路检测基础"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL012",
      "source": "08CON015",
      "target": "08CON014",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL013",
      "source": "08CON016",
      "target": "08CON015",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL014",
      "source": "08CON017",
      "target": "08CON014",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL015",
      "source": "08CON003",
      "target": "08CON017",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL016",
      "source": "08ALG003",
      "target": "08CON011",
      "attributes": {
        "使用角色": "输入表示(示例代码)"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL017",
      "source": "08ALG003",
      "target": "08CON018",
      "attributes": {
        "使用角色": "输入参数"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL018",
      "source": "08ALG003",
      "target": "08DS002",
      "attributes": {
        "使用角色": "路径存储(示例代码)"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL019",
      "source": "08ALG004",
      "target": "08CON011",
      "attributes": {
        "使用角色": "输入/输出存储"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL020",
      "source": "08CON022",
      "target": "08CON020",
      "attributes": {
        "使用角色": "顶点表示"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL021",
      "source": "08CON022",
      "target": "08CON021",
      "attributes": {
        "使用角色": "边表示"
      }
    },
    {
      "type": "is-a",
      "关系ID": "08REL022",
      "source": "08CON022",
      "target": "08CON023",
      "attributes": {}
    },
    {
      "type": "depends-on",
      "关系ID": "08REL023",
      "source": "08CON004",
      "target": "08CON022",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL024",
      "source": "08ALG005",
      "target": "08CON022",
      "attributes": {
        "使用角色": "输入图类型"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL025",
      "source": "08ALG005",
      "target": "08CON024",
      "attributes": {
        "使用角色": "核心概念"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL026",
      "source": "08ALG005",
      "target": "08DS003",
      "attributes": {
        "使用角色": "输入表示(推荐)"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL027",
      "source": "08ALG005",
      "target": "08DS004",
      "attributes": {
        "使用角色": "内部数据结构"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL028",
      "source": "08CON025",
      "target": "08CON020",
      "attributes": {
        "使用角色": "边表示"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL029",
      "source": "08CON025",
      "target": "08CON026",
      "attributes": {
        "使用角色": "顶点表示"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL030",
      "source": "08CON025",
      "target": "08CON027",
      "attributes": {
        "使用角色": "边权表示"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL031",
      "source": "08CON029",
      "target": "08CON004",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL032",
      "source": "08CON029",
      "target": "08CON027",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL033",
      "source": "08CON030",
      "target": "08CON029",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL034",
      "source": "08CON031",
      "target": "08CON004",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL035",
      "source": "08CON031",
      "target": "08CON027",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL036",
      "source": "08CON032",
      "target": "08CON031",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL037",
      "source": "08CON032",
      "target": "08CON027",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL038",
      "source": "08CON033",
      "target": "08CON030",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL039",
      "source": "08CON033",
      "target": "08CON032",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL040",
      "source": "08CON034",
      "target": "08CON033",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL041",
      "source": "08CON005",
      "target": "08CON034",
      "attributes": {
        "使用角色": "构成元素"
      }
    },
    {
      "type": "depends-on",
      "关系ID": "08REL042",
      "source": "08CON005",
      "target": "08CON025",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL043",
      "source": "08ALG006",
      "target": "08CON025",
      "attributes": {
        "使用角色": "输入图类型"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL044",
      "source": "08ALG006",
      "target": "08DS003",
      "attributes": {
        "使用角色": "输入表示(示例代码)"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL045",
      "source": "08ALG006",
      "target": "08ALG005",
      "attributes": {
        "使用角色": "依赖/子过程"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL046",
      "source": "08ALG006",
      "target": "08CON029",
      "attributes": {
        "使用角色": "计算"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL047",
      "source": "08ALG006",
      "target": "08CON031",
      "attributes": {
        "使用角色": "计算"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL048",
      "source": "08ALG006",
      "target": "08CON030",
      "attributes": {
        "使用角色": "计算"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL049",
      "source": "08ALG006",
      "target": "08CON032",
      "attributes": {
        "使用角色": "计算"
      }
    },
    {
      "type": "uses",
      "关系ID": "08REL050",
      "source": "08ALG006",
      "target": "08CON034",
      "attributes": {
        "使用角色": "识别目标"
      }
    }
  ]
}