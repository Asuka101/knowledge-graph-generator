{
  "entities": [
    {
      "type": "知识点",
      "name": "树",
      "attributes": {
        "ID": "1",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "树（tree）是树形结构的简称。它是一种重要的非线性数据结构。树或者是一棵空树，即不含有任何结点（元素），或者是一棵非空树，即至少含有一个结点",
        "相关领域": "计算机领域"
      }
    },
    {
      "type": "知识点",
      "name": "根",
      "attributes": {
        "ID": "2",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在一棵非空树中，有且仅有一个称作根（root）的结点"
      }
    },
    {
      "type": "知识点",
      "name": "子树",
      "attributes": {
        "ID": "3",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "其余所有结点被分为$m$棵 ($m geq 0$) 互不相交的子树（即称做根的子树），每棵子树（subtree）又同样是一棵树",
        "包含": "根结点"
      }
    },
    {
      "type": "知识点",
      "name": "结点的度",
      "attributes": {
        "ID": "4",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "每个结点具有的子树数或者说后继结点数被定义为该结点的度（degree）"
      }
    },
    {
      "type": "知识点",
      "name": "树的度",
      "attributes": {
        "ID": "5",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "树中所有结点的度的最大值被定义为该树的度。"
      }
    },
    {
      "type": "知识点",
      "name": "叶子结点",
      "attributes": {
        "ID": "6",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "终端结点",
        "定义": "在一棵树中，度等于 0 的结点称作叶子结点或终端结点"
      }
    },
    {
      "type": "知识点",
      "name": "分支结点",
      "attributes": {
        "ID": "7",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "非终端结点",
        "定义": "度大于 0 的结点称作分支结点或非终端结点"
      }
    },
    {
      "type": "知识点",
      "name": "单分支结点",
      "attributes": {
        "ID": "8",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "对于度为 1 的结点，其分支数为 1，所以被称之为单分支结点"
      }
    },
    {
      "type": "知识点",
      "name": "双分支结点",
      "attributes": {
        "ID": "9",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "对于度为 2 的结点，其分支数为 2，所以被称之为双分支结点"
      }
    },
    {
      "type": "知识点",
      "name": "孩子结点",
      "attributes": {
        "ID": "10",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "儿子、子女",
        "定义": "在一棵树中，每个结点的子树的根，或者说每个结点的后继，被习惯地称为该结点的孩子、儿子或子女（child）"
      }
    },
    {
      "type": "知识点",
      "name": "双亲结点",
      "attributes": {
        "ID": "11",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "父亲、父母",
        "定义": "相应地，该结点被称为孩子结点的双亲、父亲或父母（parent）"
      }
    },
    {
      "type": "知识点",
      "name": "兄弟结点",
      "attributes": {
        "ID": "12",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "具有同一双亲的孩子互称兄弟（brothers）"
      }
    },
    {
      "type": "知识点",
      "name": "子孙结点",
      "attributes": {
        "ID": "13",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "一个结点的所有子树中的结点被称为该结点的子孙"
      }
    },
    {
      "type": "知识点",
      "name": "祖先结点",
      "attributes": {
        "ID": "14",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "一个结点的祖先则被定义为从树根结点到达该结点的路径上经过的所有结点"
      }
    },
    {
      "type": "知识点",
      "name": "结点的层数",
      "attributes": {
        "ID": "15",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "树中的每个结点都处在一定的层数上。结点的层数（level）从树根开始定义，根结点为第 1 层，它的孩子结点为第 2 层，以此类推。"
      }
    },
    {
      "type": "知识点",
      "name": "树的深度",
      "attributes": {
        "ID": "16",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "高度",
        "定义": "树中所有结点的最大层数称为树的深度（depth）或高度（height）。"
      }
    },
    {
      "type": "知识点",
      "name": "有序树",
      "attributes": {
        "ID": "17",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "若树中各结点的子树是按照一定的次序从左向右安排的，则称之为有序树"
      }
    },
    {
      "type": "知识点",
      "name": "无序树",
      "attributes": {
        "ID": "18",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "若树中各结点的子树不是按照一定的次序从左向右安排的，则称之为无序树"
      }
    },
    {
      "type": "知识点",
      "name": "森林",
      "attributes": {
        "ID": "19",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "森林是$m(m geqslant 0)$棵互不相交的树的集合"
      }
    },
    {
      "type": "知识点",
      "name": "树的性质1",
      "attributes": {
        "ID": "20",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "树中的结点数等于所有结点的度数加1。"
      }
    },
    {
      "type": "知识点",
      "name": "树的性质2",
      "attributes": {
        "ID": "21",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "度为$k$的树中第$i$层上至多有$k^{i-1}$个结点$(i geqslant 1)$。"
      }
    },
    {
      "type": "知识点",
      "name": "树的性质3",
      "attributes": {
        "ID": "22",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "深度为$h$的$k$叉树至多有$\frac{k^h-1}{k-1}$个结点。"
      }
    },
    {
      "type": "知识点",
      "name": "满k叉树",
      "attributes": {
        "ID": "23",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "当一棵$k$叉树上的结点数等于$\frac{k^h-1}{k-1}$时，则称该树为满$k$叉树。"
      }
    },
    {
      "type": "知识点",
      "name": "树的性质4",
      "attributes": {
        "ID": "24",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "具有$n$个结点的$k$叉树的最小深度为$leftlceil log_k(n(k-1)+1) \right\rceil$。"
      }
    },
    {
      "type": "知识点",
      "name": "非线性数据结构",
      "attributes": {
        "ID": "25",
        "掌握程度": "未掌握",
        "难度": "低"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树",
      "attributes": {
        "ID": "26",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "二叉树（binary tree）是指树的度为 2 的有序树。它是一种最简单、而且最重要的树，在计算机领域有着广泛的应用。二叉树的递归定义为：二叉树或者是一棵空树，或者是一棵由一个根结点和两棵互不相交的分别称做根的左子树和右子树所组成的非空树，左子树和右子树又同样都是一棵二叉树。"
      }
    },
    {
      "type": "知识点",
      "name": "左子树",
      "attributes": {
        "ID": "27",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "二叉树的左子树"
      }
    },
    {
      "type": "知识点",
      "name": "右子树",
      "attributes": {
        "ID": "28",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "二叉树的右子树"
      }
    },
    {
      "type": "知识点",
      "name": "左孩子",
      "attributes": {
        "ID": "29",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在二叉树中，每个结点的左子树的根结点被称之为左孩子（left child）"
      }
    },
    {
      "type": "知识点",
      "name": "右孩子",
      "attributes": {
        "ID": "30",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在二叉树中，每个结点的右子树的根结点被称之为右孩子（right child）"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树的性质 1",
      "attributes": {
        "ID": "31",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "二叉树上终端结点数等于双分支结点数加 1。"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树的性质 2",
      "attributes": {
        "ID": "32",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "二叉树上第 i 层上至多有$2^{i-1}$个结点（$i geq 1$）。"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树的性质 3",
      "attributes": {
        "ID": "33",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "深度为 h 的二叉树至多有$2^h - 1$个结点。"
      }
    },
    {
      "type": "知识点",
      "name": "满二叉树",
      "attributes": {
        "ID": "34",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在一棵二叉树中，当第 i 层的结点数为$2^{i-1}$个时，则称此层的结点数是满的，当树中的每一层都满时，则称此树为满二叉树。"
      }
    },
    {
      "type": "知识点",
      "name": "完全二叉树",
      "attributes": {
        "ID": "35",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干个结点，则称此树为完全二叉树。"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树的性质 4",
      "attributes": {
        "ID": "36",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "对完全二叉树中编号为$i$的结点（$1 leq i leq n, n geq 1, n$为结点数）有如下性质:(1) 若编号为$i$的结点有左孩子，则左孩子结点的编号为$2i$；若编号为$i$的结点有右孩子，则右孩子结点的编号为$2i+1$。(2) 除树根结点外，若一个结点的编号为$i$，则它的双亲结点的编号为$i/2$，也就是说，当$i$为偶数时，其双亲结点的编号为$i/2$，它是双亲结点的左孩子；当$i$为奇数时，其双亲结点的编号为$(i-1)/2$，它是双亲结点的右孩子。(3) 若$i leq lfloor n/2 \rfloor$，即$2i leq n$，则编号为$i$的结点为分支结点，否则为叶子结点。(4) 若$n$为奇数，则每个分支结点都既有左孩子，又有右孩子；若$n$为偶数，则编号最大的分支结点（编号为$n/2$）只有左孩子，没有右孩子，其余分支结点左、右孩子都有。"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树的性质 5",
      "attributes": {
        "ID": "37",
        "掌握程度": "未掌握",
        "难度": "中",
        "内容": "具有$n$个 ($n > 0$) 结点的完全二叉树的深度为$lceil log_2(n + 1) \rceil$或$lfloor log_2 n \rfloor + 1$。"
      }
    },
    {
      "type": "知识点",
      "name": "理想平衡二叉树",
      "attributes": {
        "ID": "38",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "理想平衡树、理想二叉树",
        "定义": "在一棵二叉树中, 若除最后一层外, 其余层都是满的, 而最后一层上的结点可以任意分布, 则称此树为理想平衡二叉树"
      }
    },
    {
      "type": "知识点",
      "name": "初始化二叉树",
      "attributes": {
        "ID": "39",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void InitBTree(BTreeType& BT);// 初始化二叉树, 即把它置为一棵空树"
      }
    },
    {
      "type": "知识点",
      "name": "建立二叉树",
      "attributes": {
        "ID": "40",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void CreateBTree(BTreeType& BT, char* a);// 根据广义表表示的二叉树建立对应的存储结构"
      }
    },
    {
      "type": "知识点",
      "name": "判空二叉树",
      "attributes": {
        "ID": "41",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "bool EmptyBTree(BTreeType& BT);// 判断一棵二叉树是否为空, 若是则返回 true, 否则返回 false"
      }
    },
    {
      "type": "知识点",
      "name": "遍历二叉树",
      "attributes": {
        "ID": "42",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void TraverseBTree(BTreeType& BT);// 按照一定次序遍历一棵二叉树, 使得每个结点的值均被访问一次"
      }
    },
    {
      "type": "知识点",
      "name": "查找二叉树",
      "attributes": {
        "ID": "43",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "bool FindBTree(BTreeType& BT, ElemType& item);// 从二叉树中查找值为 item 的结点, 若存在该结点则由 item 带回它的完整值// 并返回 true, 否则返回 false 表示查找失败"
      }
    },
    {
      "type": "知识点",
      "name": "求二叉树深度",
      "attributes": {
        "ID": "44",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "int BTreeDepth(BTreeType & BT);//求出一棵二叉树的深度"
      }
    },
    {
      "type": "知识点",
      "name": "输出二叉树",
      "attributes": {
        "ID": "45",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void PrintBTree(BTreeType& BT);//按照树的一种表示方法输出一棵二叉树"
      }
    },
    {
      "type": "知识点",
      "name": "清除二叉树",
      "attributes": {
        "ID": "46",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void ClearBTree(BTreeType& BT);//清除二叉树中的所有结点,使之变为一棵空树"
      }
    },
    {
      "type": "知识点",
      "name": "顺序存储结构",
      "attributes": {
        "ID": "47",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "顺序存储一棵二叉树时, 首先对该树中每个结点进行编号, 然后以各结点的编号为下标, 把各结点的值对应存储到一个一维数组中。"
      }
    },
    {
      "type": "知识点",
      "name": "链接存储结构",
      "attributes": {
        "ID": "48",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在二叉树的链接存储中，通常采用的方法是，在每个结点中设置 3 个域：值域、左指针域和右指针域"
      }
    },
    {
      "type": "知识点",
      "name": "二叉链表",
      "attributes": {
        "ID": "49",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "不带双亲指针的链接存储结构"
      }
    },
    {
      "type": "知识点",
      "name": "带双亲指针的二叉链表",
      "attributes": {
        "ID": "50",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "带双亲指针的链接存储结构"
      }
    },
    {
      "type": "知识点",
      "name": "遍历二叉树",
      "attributes": {
        "ID": "51",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "二叉树的遍历是指按照一定次序访问树中所有结点，并且每个结点的值仅被访问一次的过程。"
      }
    },
    {
      "type": "知识点",
      "name": "前序遍历",
      "attributes": {
        "ID": "52",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "先根遍历",
        "定义": "访问根结点的操作在遍历左、右子树之前"
      }
    },
    {
      "type": "知识点",
      "name": "中序遍历",
      "attributes": {
        "ID": "53",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "中根遍历",
        "定义": "访问根结点的操作在遍历左子树之后和遍历右子树之前"
      }
    },
    {
      "type": "知识点",
      "name": "后序遍历",
      "attributes": {
        "ID": "54",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "后根遍历",
        "定义": "访问根结点的操作在遍历左、右子树之后"
      }
    },
    {
      "type": "知识点",
      "name": "按层遍历算法",
      "attributes": {
        "ID": "55",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "需要使用一个队列，开始时把整个树的根结点入队，然后每从队列中删除一个结点并输出该结点的值时，都把它的非空的左、右孩子结点入队，这样当队列空时算法结束"
      }
    },
    {
      "type": "知识点",
      "name": "广义表",
      "attributes": {
        "ID": "56",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "二叉树广义表表示的规定如下。(1) 每棵树的根结点作为由子树构成的表的名字而放在表的前面。(2) 每个结点的左子树和右子树用逗号分开，若只有右子树而没有左子树，则逗号不能省略。"
      }
    },
    {
      "type": "知识点",
      "name": "多元树",
      "attributes": {
        "ID": "57",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "多叉树",
        "定义": "度大于等于3的树"
      }
    },
    {
      "type": "知识点",
      "name": "初始化树",
      "attributes": {
        "ID": "58",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void InitGTree(GTREE& GT);//初始化树,即把它置为一棵空树"
      }
    },
    {
      "type": "知识点",
      "name": "建立树",
      "attributes": {
        "ID": "59",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void CreateGTree(GTREE& GT, char* a);//根据广义表表示的树建立对应的存储结构"
      }
    },
    {
      "type": "知识点",
      "name": "遍历树",
      "attributes": {
        "ID": "60",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void TraverseGTree(GTREE GT);//按照一定次序遍历树,使得每个结点的值均被访问一次"
      }
    },
    {
      "type": "知识点",
      "name": "查找树",
      "attributes": {
        "ID": "61",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "bool FindGTree(GTREE GT, ElemType& item);//从树中查找值为item的结点,若存在该结点则由item带回//它的完整值并返回true,否则返回false表示查找失败"
      }
    },
    {
      "type": "知识点",
      "name": "输出树",
      "attributes": {
        "ID": "62",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void PrintGTree(GTREE GT);//按照树的一种表示方法输出一棵树"
      }
    },
    {
      "type": "知识点",
      "name": "判空树",
      "attributes": {
        "ID": "63",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "bool EmptyGTree (GTREE GT);//判断树是否为空,若是则返回true,否则返回false"
      }
    },
    {
      "type": "知识点",
      "name": "清除树",
      "attributes": {
        "ID": "64",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "void ClearGTree(GTREE& GT);//清除树中的所有结点,使之变为一棵空树"
      }
    },
    {
      "type": "知识点",
      "name": "树的顺序存储结构",
      "attributes": {
        "ID": "65",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "需要使用一个一维数组, 存储方法是: 首先对树中每个结点进行编号, 然后以各结点的编号为下标, 把结点值对应存储到相应元素中。"
      }
    },
    {
      "type": "知识点",
      "name": "树的链接存储结构",
      "attributes": {
        "ID": "66",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "树的链接存储结构"
      }
    },
    {
      "type": "知识点",
      "name": "标准方式",
      "attributes": {
        "ID": "67",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "树中的每个结点除了包含有存储数据元素的值域外, 还包含有$k$个指针域, 用来分别指向$k$个孩子结点, 或者说, 用来分别链接$k$棵子树, 其中$k$为树的度"
      }
    },
    {
      "type": "知识点",
      "name": "广义标准方式",
      "attributes": {
        "ID": "68",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "标准方式的每个结点中增加一个指向其双亲结点的指针域"
      }
    },
    {
      "type": "知识点",
      "name": "二叉树方式",
      "attributes": {
        "ID": "69",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "将树转换为对应的二叉树形式, 然后再采用二叉链表存储这棵二叉树"
      }
    },
    {
      "type": "知识点",
      "name": "先根遍历",
      "attributes": {
        "ID": "70",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "深度优先遍历",
        "定义": "先访问根结点，然后从左到右依次先根遍历每棵子树"
      }
    },
    {
      "type": "知识点",
      "name": "后根遍历",
      "attributes": {
        "ID": "71",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "从左到右依次后根遍历根结点的每棵子树，然后再访问根结点"
      }
    },
    {
      "type": "知识点",
      "name": "按层遍历",
      "attributes": {
        "ID": "72",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "广度优先遍历",
        "定义": "先访问第1层结点（即树根结点），再从左到右访问第2层结点，依次按层访问，直到全树中的所有结点都被访问为止，或者说直到访问完最深一层结点为止。"
      }
    }
  ],
  "relations": [
    {
      "type": "包含关系",
      "source": "树",
      "target": "根",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "子树",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "结点",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "结点的度",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "树的度",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "叶子结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "分支结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "孩子结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "双亲结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "兄弟结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "子孙结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "祖先结点",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "结点的层数",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "树的深度",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "树",
      "target": "有序树",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    }
  ]
}
  