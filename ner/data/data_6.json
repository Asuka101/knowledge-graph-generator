{
  "entities": [
    {
      "type": "知识点",
      "name": "特殊二叉树",
      "attributes": {
        "ID": "1",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "包括二叉搜索树、堆、哈夫曼树、线索二叉树和平衡二叉树等"
      }
    },
    {
      "type": "知识点",
      "name": "二叉搜索树",
      "attributes": {
        "ID": "2",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "又称二叉排序树，它或是一棵空树，或者是一棵具有如下特性的非空二叉树：（1）若它的左子树非空，则左子树上所有结点的关键字均小于根结点的关键字。（2）若它的右子树非空，则右子树上所有结点的关键字均大于（若允许具有相同的关键字的结点存在，则大于等于）根结点的关键字。（3）左、右子树本身又各是一棵二叉搜索树。"
      }
    },
    {
      "type": "知识点",
      "name": "结点的关键字",
      "attributes": {
        "ID": "3",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "当每个结点的元素类型为简单类型时，则结点的关键字就是该结点的值；当每个结点的元素类型为记录类型时，则结点的关键字为该结点的某一个域的值"
      }
    },
    {
      "type": "知识点",
      "name": "有序序列",
      "attributes": {
        "ID": "4",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在一棵非空的二叉搜索树中，其结点的关键字是按照左子树、根和右子树有序的，所以对它进行中序遍历得到的结点序列必然是一个有序序列。"
      }
    },
    {
      "type": "知识点",
      "name": "抽象数据类型",
      "attributes": {
        "ID": "5",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "二叉搜索树的抽象数据类型中的数据部分是一棵二叉搜索树，它可以具有同一般二叉树一样的任何存储结构，操作部分除了已经讨论过的对一般二叉树的操作外，还具有对二叉搜索树的一些常用操作，即搜索（查找）、更新、插入和删除元素的操作。"
      }
    },
    {
      "type": "知识点",
      "name": "搜索",
      "attributes": {
        "ID": "6",
        "掌握程度": "未掌握",
        "难度": "中",
        "别名": "查找",
        "定义": "从二叉搜索树 BST 中查找等于给定值 item 的元素，若查找成功则返回 true，并由 item 带回该元素的值，否则返回 false"
      }
    },
    {
      "type": "知识点",
      "name": "更新",
      "attributes": {
        "ID": "7",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "从二叉搜索树 BST 中查找等于给定值 item 的元素，若查找成功则用 item 的值更新该元素并返回 true，否则返回 false"
      }
    },
    {
      "type": "知识点",
      "name": "插入",
      "attributes": {
        "ID": "8",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "向二叉搜索树 BST 中插入一个元素 item，使得插入后仍保持为一棵二叉搜索树"
      }
    },
    {
      "type": "知识点",
      "name": "删除",
      "attributes": {
        "ID": "9",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "从二叉搜索树中删除等于给定值 item 的结点，若删除成功则返回 true，否则返回 false"
      }
    },
    {
      "type": "知识点",
      "name": "递归查找",
      "attributes": {
        "ID": "10",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "根据二叉搜索树的定义，查找等于给定值 item 的元素时，若二叉搜索树为空，则表明查找失败，应返回假。否则，若 item 等于当前树根结点的值，则表明查找成功，应由引用参数 item 带回根结点的值并返回真；若 item 小于根结点的值，则继续在根的左子树中查找；若 item 大于根结点的值，则继续在根的右子树中查找。"
      }
    },
    {
      "type": "知识点",
      "name": "末尾递归",
      "attributes": {
        "ID": "11",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "递归调用语句是函数体中最后一条可执行语句，每次递归调用返回后不执行任何语句又返回到上一层"
      }
    },
    {
      "type": "知识点",
      "name": "时间复杂度",
      "attributes": {
        "ID": "12",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "若二叉搜索树是一棵理想平衡树或接近理想平衡树, 则进行查找的时间复杂度为$O(log n)$; 若退化为一棵单支树（最极端和最差的情况），则其时间复杂度为$O(n)$。对于一般情况, 其时间复杂度可大致看作$O(log n)$。"
      }
    },
    {
      "type": "知识点",
      "name": "空间复杂度",
      "attributes": {
        "ID": "13",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "二叉搜索树查找的递归算法的空间复杂度平均情况为$O(log n)$, 最差情况为$O(n)$, 非递归算法的空间复杂度为$O(1)$。"
      }
    },
    {
      "type": "知识点",
      "name": "理想平衡树",
      "attributes": {
        "ID": "14",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "未知"
      }
    },
    {
      "type": "知识点",
      "name": "单支树",
      "attributes": {
        "ID": "15",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "未知"
      }
    },
     {
      "type": "知识点",
      "name": "更新算法",
      "attributes": {
        "ID": "16",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "二叉搜索树的更新算法与查找算法基本相同, 区别仅有两点: 一是在更新算法中当查找到待更新的元素时, 应将 item 的值赋给该元素, 而在查找算法中是将该元素的值赋给 item 带回; 二是在更新算法中参数 item 可以为变参 (即引用参数), 也可以为值参, 并且在参数说明的前面可以加或不加常量标识符 const, 而在查找算法中参数 item 只能为变参, 并且不能加常量标识符 const。"
      }
    },
    {
      "type": "知识点",
      "name": "插入算法",
      "attributes": {
        "ID": "17",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "根据二叉搜索树的定义, 向二叉搜索树中插入元素 item 的过程为: 若二叉树为空, 则由 item 元素生成的新结点将作为根结点插入; 否则, 若 item 小于根结点, 则将新结点插入到根的左子树上, 若 item 大于等于 根结点，则将新结点插入到根的右子树上。"
      }
    },
    {
      "type": "知识点",
      "name": "CreateBSTree",
      "attributes": {
        "ID": "18",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "利用数组中的$n$个元素建立二叉搜索树的算法",
        "时间复杂度": "$O(n \times lg n)$"
      }
    },
    {
      "type": "知识点",
      "name": "删除算法",
      "attributes": {
        "ID": "19",
        "掌握程度": "未掌握",
        "难度": "高",
        "定义": "从二叉搜索树上删除结点（元素），可能删除的是叶子结点，也可能删除的是分支结点，当删除分支结点时，就破坏了原有结点之间的链接关系，需要重新修改指针，使得删除后仍为一棵二叉搜索树。"
      }
    },
    {
      "type": "知识点",
      "name": "叶子结点",
      "attributes": {
        "ID": "20",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "没有左右子树的结点"
      }
    },
    {
      "type": "知识点",
      "name": "分支结点",
      "attributes": {
        "ID": "21",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "有左右子树的结点"
      }
    },
    {
      "type": "知识点",
      "name": "单支结点",
      "attributes": {
        "ID": "22",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "只有左子树或右子树的结点"
      }
    },
    {
      "type": "知识点",
      "name": "双支结点",
      "attributes": {
        "ID": "23",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "有两个后继指针的结点"
      }
    },
    {
      "type": "知识点",
      "name": "堆",
      "attributes": {
        "ID": "24",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "分为小根堆和大根堆两种"
      }
    },
    {
      "type": "知识点",
      "name": "小根堆",
      "attributes": {
        "ID": "25",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "具有如下特性的一棵完全二叉树：（1）若树根结点存在左孩子，则根结点的值 (或某个域的值) 小于等于左孩子结点的值 (或某个域的值)。（2）若树根结点存在右孩子，则根结点的值 (或某个域的值) 小于等于右孩子结点的值 (或某个域的值)。(3) 以左、右孩子为根的子树又各是一个堆。"
      }
    },
    {
      "type": "知识点",
      "name": "大根堆",
      "attributes": {
        "ID": "26",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "把小根堆的小于等于改为大于等于"
      }
    },
    {
      "type": "知识点",
      "name": "优先级队列",
      "attributes": {
        "ID": "27",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "若用堆来表示优先级队列, 则堆顶结点具有最高的优先级, 每次做删除操作要删除堆顶结点。"
      }
    },
    {
      "type": "知识点",
      "name": "堆的抽象数据类型",
      "attributes": {
        "ID": "28",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "抽象数据类型中的数据部分是按任一种存储结构表示的堆, 用标识符 HBT 表示,其存储类型用标识符 HeapType 表示。堆的抽象数据类型中的操作部分通常为: 向堆中插入一个元素、从堆中删除堆顶元素、初始化一个堆、清除一个堆和判断一个堆是否为空等。"
      }
    },
    {
      "type": "知识点",
      "name": "InitHeap",
      "attributes": {
        "ID": "29",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "初始化一个堆为空"
      }
    },
    {
      "type": "知识点",
      "name": "ClearHeap",
      "attributes": {
        "ID": "30",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "清除一个堆, 使之变为空"
      }
    },
    {
      "type": "知识点",
      "name": "EmptyHeap",
      "attributes": {
        "ID": "31",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "判断一个堆是否为空"
      }
    },
    {
      "type": "知识点",
      "name": "InsertHeap",
      "attributes": {
        "ID": "32",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "向堆中插入元素"
      }
    },
    {
      "type": "知识点",
      "name": "DeleteHeap",
      "attributes": {
        "ID": "33",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "从堆中删除堆顶元素并返回"
      }
    },
    {
      "type": "知识点",
      "name": "顺序存储",
      "attributes": {
        "ID": "34",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "对堆进行顺序存储时, 首先要对堆中的所有结点进行编号, 然后再以编号为下标存储到指定数组的对应元素中。为了利用数组的 0 号元素, 堆中结点的编号从 0 而不是从 1 开始, 当然编号次序仍然按照从上到下、同一层从左到右进行"
      }
    },
    {
      "type": "知识点",
      "name": "时间复杂度",
      "attributes": {
        "ID": "35",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "向堆中插入一个元素时, 算法的时间复杂度为$O(log n)$，其中$n$表示堆的大小"
      }
    },
    {
      "type": "知识点",
      "name": "时间复杂度",
      "attributes": {
        "ID": "36",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "堆删除算法的时间复杂度同插入算法相同，均为$O(log n)$。"
      }
    },
    {
      "type": "知识点",
      "name": "哈夫曼树",
      "attributes": {
        "ID": "37",
        "掌握程度": "未掌握",
        "难度": "中",
        "别名": "最优二叉树",
        "定义": "它是$n$个带权叶子结点构成的所有二叉树中，带权路径长度 WPL 最小的二叉树。"
      }
    },
    {
      "type": "知识点",
      "name": "路径",
      "attributes": {
        "ID": "38",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在一棵树中存在着一个结点序列$k_1,k_2,cdots,k_j$，使得$k_i$是$k_{i+1}$的双亲$(1 leq i < j)$，则称此结点序列是从$k_1$到$k_j$的路径"
      }
    },
     {
      "type": "知识点",
      "name": "路径长度",
      "attributes": {
        "ID": "39",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "从$k_1$到$k_j$所经过的分支数称为这两点之间的路径长度，它等于路径上的结点数减 1"
      }
    },
    {
      "type": "知识点",
      "name": "结点的权",
      "attributes": {
        "ID": "40",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "常常将树中的结点赋上一个有着某种意义的实数，称此实数为该结点的权"
      }
    },
    {
      "type": "知识点",
      "name": "带权路径长度",
      "attributes": {
        "ID": "41",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "结点的带权路径长度规定为从树根结点到该结点之间的路径长度与该结点上权的乘积"
      }
    },
    {
      "type": "知识点",
      "name": "树的带权路径长度",
      "attributes": {
        "ID": "42",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "树的带权路径长度定义为树中所有叶子结点的带权路径长度之和，通常记为：$\text{WPL}=sum_{i=1}^{n} w_i l_i$，其中，$n$表示叶子结点的数目，$w_i$和$l_i$分别表示叶子结点$k_i$的权值和树根结点到$k_i$之间的路径长度。"
      }
    },
    {
      "type": "知识点",
      "name": "CreateHuffman",
      "attributes": {
        "ID": "43",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "根据数组 a 中 n 个权值建立一棵哈夫曼树, 返回树根指针"
      }
    },
    {
      "type": "知识点",
      "name": "WeightPathLength",
      "attributes": {
        "ID": "44",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "根据FBT指针所指向的哈夫曼树求出带权路径长度"
      }
    },
    {
      "type": "知识点",
      "name": "哈夫曼编码",
      "attributes": {
        "ID": "45",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "由编码哈夫曼树得到的字符编码称作哈夫曼编码"
      }
    },
    {
      "type": "知识点",
      "name": "等长编码",
      "attributes": {
        "ID": "46",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "最简单的二进制编码方式是等长编码"
      }
    },
    {
      "type": "知识点",
      "name": "无前缀编码",
      "attributes": {
        "ID": "47",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "若对某一字符集进行不等长编码，则要求字符集中任一字符的编码都不能是其他字符编码的前缀"
      }
    },
    {
      "type": "知识点",
      "name": "HuffManCoding",
      "attributes": {
        "ID": "48",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "根据 FBT 指针所指向的哈夫曼树输出每个叶子的编码"
      }
    },
    {
      "type": "知识点",
      "name": "线索二叉树",
      "attributes": {
        "ID": "49",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "对一棵二叉树中的所有结点的空指针域按照某种遍历次序加线索的过程叫做线索化, 被线索化了的二叉树称做线索二叉树"
      }
    },
    {
      "type": "知识点",
      "name": "线索",
      "attributes": {
        "ID": "50",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "在结点的空指针域中存放的该结点在某次遍历次序下的前驱结点或后继结点的指针叫做线索"
      }
    },
    {
      "type": "知识点",
      "name": "左线索",
      "attributes": {
        "ID": "51",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "前驱线索",
        "定义": "在空的左指针域中存放的指向其前驱结点的指针叫做左线索"
      }
    },
    {
      "type": "知识点",
      "name": "右线索",
      "attributes": {
        "ID": "52",
        "掌握程度": "未掌握",
        "难度": "低",
        "别名": "后继线索",
        "定义": "在空的右指针域中存放的指向其后继结点的指针叫做右线索"
      }
    },
    {
      "type": "知识点",
      "name": "线索标志域",
      "attributes": {
        "ID": "53",
        "掌握程度": "未掌握",
        "难度": "低",
        "定义": "在一个线索二叉树中，为了区别各个结点的左、右指针域所存放的是孩子指针，或是线索，必须在结点结构中增加两个线索标志域，一个是左线索标志域，用$ltag$表示，另一个是右线索标志域，用$rtag$表示"
      }
    },
    {
      "type": "知识点",
      "name": "InThread",
      "attributes": {
        "ID": "54",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "对二叉树 HBT 加中序线索"
      }
    },
    {
      "type": "知识点",
      "name": "InsertThreed",
      "attributes": {
        "ID": "55",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "向带线索标志域的二叉搜索树插入元素，但不进行中序线索的链接"
      }
    },
    {
      "type": "知识点",
      "name": "CreateThreed",
      "attributes": {
        "ID": "56",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "建立带线索标志域的二叉搜索树，但不进行中序线索链接"
      }
    },
    {
      "type": "知识点",
      "name": "InsertThreed1",
      "attributes": {
        "ID": "57",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "向带线索的二叉搜索树插入元素，并进行线索链接"
      }
    },
     {
      "type": "知识点",
      "name": "CreateThread1",
      "attributes": {
        "ID": "58",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "利用数组中的 n 个元素建立带线索的二叉搜索树的算法"
      }
    },
     {
      "type": "知识点",
      "name": "InorderNext",
      "attributes": {
        "ID": "59",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "返回 p 结点的中继后继结点"
      }
    },
    {
      "type": "知识点",
      "name": "ThInorder",
      "attributes": {
        "ID": "60",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "按中序线索遍历二叉树 HBT"
      }
    },
    {
      "type": "知识点",
      "name": "时间复杂度",
      "attributes": {
        "ID": "61",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "利用线索进行二叉树遍历的时间复杂度为$O(n)$"
      }
    },
    {
      "type": "知识点",
      "name": "空间复杂度",
      "attributes": {
        "ID": "62",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "利用线索进行二叉树遍历的空间复杂度为$O(1)$"
      }
    },
    {
      "type": "知识点",
      "name": "平衡二叉树",
      "attributes": {
        "ID": "63",
        "掌握程度": "未掌握",
        "难度": "中",
        "别名": "平衡树",
        "定义": "若一棵二叉树中每个结点的左、右子树的高度至多相差 1，则称此树为平衡的"
      }
    },
    {
      "type": "知识点",
      "name": "平衡因子",
      "attributes": {
        "ID": "64",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "把二叉树中每个结点的左子树高度减去右子树高度定义为该结点的平衡因子"
      }
    },
    {
      "type": "知识点",
      "name": "最小不平衡子树",
      "attributes": {
        "ID": "65",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "以离插入结点最近、且平衡因子绝对值大于1的结点做根的子树"
      }
    },
    {
      "type": "知识点",
      "name": "LL型调整操作",
      "attributes": {
        "ID": "66",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "在A结点的左孩子（用B表示）的左子树上插入结点，使得A结点的平衡因子由1变为2而引起的不平衡所进行的调整操作"
      }
    },
     {
      "type": "知识点",
      "name": "RR型调整操作",
      "attributes": {
        "ID": "67",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "在A结点的右孩子（用B表示）的右子树上插入结点，使得A结点的平衡因子由-1变为-2而引起的不平衡所进行的调整操作"
      }
    },
    {
      "type": "知识点",
      "name": "LR型调整操作",
      "attributes": {
        "ID": "68",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "在A结点的左孩子（用B表示）的右子树上插入结点，使得A结点的平衡因子由1变为2而引起的不平衡所进行的调整操作"
      }
    },
    {
      "type": "知识点",
      "name": "RL型调整操作",
      "attributes": {
        "ID": "69",
        "掌握程度": "未掌握",
        "难度": "中",
        "定义": "在 A 结点的右孩子的左子树上插入结点, 使 A 结点的平衡因子由 -1 变为 -2 而引起的不平衡所进行的调整操作"
      }
    }
  ],
  "relations": [
    {
      "type": "包含关系",
      "source": "特殊二叉树",
      "target": "二叉搜索树",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "特殊二叉树",
      "target": "堆",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "特殊二叉树",
      "target": "哈夫曼树",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "特殊二叉树",
      "target": "线索二叉树",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "特殊二叉树",
      "target": "平衡二叉树",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "堆",
      "target": "小根堆",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "堆",
      "target": "大根堆",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "哈夫曼树",
      "target": "哈夫曼编码",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "上位关系",
      "source": "无前缀编码",
      "target": "等长编码",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "线索二叉树",
      "target": "左线索",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "线索二叉树",
      "target": "右线索",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "平衡二叉树",
      "target": "LL型调整操作",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "平衡二叉树",
      "target": "RR型调整操作",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "平衡二叉树",
      "target": "LR型调整操作",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "平衡二叉树",
      "target": "RL型调整操作",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    }
  ]
}