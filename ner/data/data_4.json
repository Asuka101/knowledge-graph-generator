{
  "entities": [
    {
      "type": "知识点",
      "name": "栈",
      "attributes": {
        "ID": "1",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "一种运算受限的线性表，仅允许在表的一端进行插入和删除运算",
        "相关领域": "数据结构"
      }
    },
    {
      "type": "知识点",
      "name": "栈顶",
      "attributes": {
        "ID": "2",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "对栈进行运算的一端"
      }
    },
    {
      "type": "知识点",
      "name": "栈顶元素",
      "attributes": {
        "ID": "3",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "栈顶的第1个元素"
      }
    },
    {
      "type": "知识点",
      "name": "栈底",
      "attributes": {
        "ID": "4",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "栈的另一端，相对栈顶"
      }
    },
    {
      "type": "知识点",
      "name": "进栈",
      "attributes": {
        "ID": "5",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "向一个栈插入新元素",
        "别名": "入栈"
      }
    },
    {
      "type": "知识点",
      "name": "出栈",
      "attributes": {
        "ID": "6",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "从一个栈删除元素",
        "别名": "退栈"
      }
    },
    {
      "type": "知识点",
      "name": "后进先出表",
      "attributes": {
        "ID": "7",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "栈的别称，因为后进栈的元素必定先出栈",
        "别名": "LIFO"
      }
    },
    {
      "type": "知识点",
      "name": "栈的抽象数据类型",
      "attributes": {
        "ID": "8",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "包含数据部分（ElemType类型的栈）和操作部分（进栈、出栈、读取栈顶元素、检查栈是否为空等）"
      }
    },
    {
      "type": "知识点",
      "name": "InitStack",
      "attributes": {
        "ID": "9",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "初始化栈，将其置为空"
      }
    },
    {
      "type": "知识点",
      "name": "Push",
      "attributes": {
        "ID": "10",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "元素进栈，插入到栈顶"
      }
    },
    {
      "type": "知识点",
      "name": "Pop",
      "attributes": {
        "ID": "11",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "删除栈顶元素并返回之"
      }
    },
    {
      "type": "知识点",
      "name": "Peek",
      "attributes": {
        "ID": "12",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "返回栈顶元素的值，但不改变栈"
      }
    },
    {
      "type": "知识点",
      "name": "EmptyStack",
      "attributes": {
        "ID": "13",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "判断栈是否为空"
      }
    },
    {
      "type": "知识点",
      "name": "ClearStack",
      "attributes": {
        "ID": "14",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "清除栈中所有元素，使之成为空栈"
      }
    },
    {
      "type": "知识点",
      "name": "栈的顺序存储结构",
      "attributes": {
        "ID": "15",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "使用一个数组和一个整型变量来实现，数组存储栈元素，整型变量存储栈顶元素的下标位置"
      }
    },
    {
      "type": "知识点",
      "name": "顺序栈",
      "attributes": {
        "ID": "16",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "顺序存储的栈",
        "属性": "最大长度又称为深度，即栈空间最多能够存储的元素个数"
      }
    },
    {
      "type": "知识点",
      "name": "栈顶指针",
      "attributes": {
        "ID": "17",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "指示栈顶元素的位置的整型变量"
      }
    },
    {
      "type": "知识点",
      "name": "栈空",
      "attributes": {
        "ID": "18",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "top的值为-1表示栈空，通常利用栈空作为循环结束的条件，表明数据已经处理完毕"
      }
    },
    {
      "type": "知识点",
      "name": "顺序表",
      "attributes": {
        "ID": "19",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "顺序存储的线性表"
      }
    },
    {
      "type": "知识点",
      "name": "时间复杂度",
      "attributes": {
        "ID": "20",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "对顺序栈的插入和删除运算相当于是在顺序表的表尾进行的，其时间复杂度为$O(1)$"
      }
    },
    {
      "type": "知识点",
      "name": "栈满",
      "attributes": {
        "ID": "21",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "在一个顺序栈中，若top已经指向了MaxSize-1的位置，则表示栈满，若再向其插入新元素时就需要进行栈满处理"
      }
    },
    {
      "type": "知识点",
      "name": "栈的链接存储结构",
      "attributes": {
        "ID": "22",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "是通过由结点构成的单链表实现的，此时表头指针被称为栈顶指针，由栈顶指针指向的表头结点被称为栈顶结点，整个单链表被称为链栈，即链接存储的栈"
      }
    },
    {
      "type": "知识点",
      "name": "链栈",
      "attributes": {
        "ID": "23",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "链接存储的栈"
      }
    },
    {
      "type": "知识点",
      "name": "栈顶指针",
      "attributes": {
        "ID": "24",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "链栈的表头指针"
      }
    },
    {
      "type": "知识点",
      "name": "语法检查",
      "attributes": {
        "ID": "25",
        "掌握程度": "未知",
        "难度": "高",
        "定义": "栈在计算机语言的编译过程中用来进行语法检查"
      }
    },
    {
      "type": "知识点",
      "name": "队列",
      "attributes": {
        "ID": "26",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "一种运算受限的线性表，其限制是仅允许在表的一端进行插入, 而在表的另一端进行删除"
      }
    },
    {
      "type": "知识点",
      "name": "队尾",
      "attributes": {
        "ID": "27",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "进行插入的一端"
      }
    },
    {
      "type": "知识点",
      "name": "队首",
      "attributes": {
        "ID": "28",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "进行删除的一端"
      }
    },
    {
      "type": "知识点",
      "name": "进队",
      "attributes": {
        "ID": "29",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "向队列中插入新元素",
        "别名": "入队"
      }
    },
    {
      "type": "知识点",
      "name": "离队",
      "attributes": {
        "ID": "30",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "从队列中删除元素",
        "别名": "出队"
      }
    },
    {
      "type": "知识点",
      "name": "先进先出表",
      "attributes": {
        "ID": "31",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "队列的别称，因为每个元素必然按照进入的次序离队",
        "别名": "FIFO"
      }
    },
    {
      "type": "知识点",
      "name": "队列的抽象数据类型",
      "attributes": {
        "ID": "32",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "包含数据部分（ElemType类型的队列）和操作部分（进队、出队、读取队首元素、检查队列是否为空等）"
      }
    },
    {
      "type": "知识点",
      "name": "EnQueue",
      "attributes": {
        "ID": "33",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "将新元素插入队尾"
      }
    },
    {
      "type": "知识点",
      "name": "OutQueue",
      "attributes": {
        "ID": "34",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "从队列中删除队首元素并返回"
      }
    },
    {
      "type": "知识点",
      "name": "PeekQueue",
      "attributes": {
        "ID": "35",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "返回队首元素，不改变队列状态"
      }
    },
    {
      "type": "知识点",
      "name": "队列的顺序存储结构",
      "attributes": {
        "ID": "36",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "需要使用一个数组和2~3个整型变量来实现, 利用数组来顺序存储队列中的所有元素, 利用一个整型变量存储队首元素的位置 (通常存储队首元素的前一个位置), 利用另一个整型变量存储队尾元素的位置, 利用第三个整型变量 (若使用的话) 存储队列的长度, 即队列中当前已有的元素个数。"
      }
    },
    {
      "type": "知识点",
      "name": "队首指针",
      "attributes": {
        "ID": "37",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "指向队首元素前一个位置的变量"
      }
    },
    {
      "type": "知识点",
      "name": "队尾指针",
      "attributes": {
        "ID": "38",
        "掌握程度": "未知",
        "难度": "低",
        "定义": "指向队尾元素位置的变量"
      }
    },
    {
      "type": "知识点",
      "name": "循环队列",
      "attributes": {
        "ID": "39",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "顺序存储的队列，其存储空间是首尾循环利用的"
      }
    },
    {
      "type": "知识点",
      "name": "顺序队列",
      "attributes": {
        "ID": "40",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "采用顺序存储结构的队列"
      }
    },
    {
      "type": "知识点",
      "name": "队列的链接存储结构",
      "attributes": {
        "ID": "41",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "通过由结点构成的单链表实现的，此时只允许在单链表的表头进行删除和在单链表的表尾进行插入，因此它需要使用两个指针: 队首指针 front 和队尾指针 rear"
      }
    },
    {
      "type": "知识点",
      "name": "链接队列",
      "attributes": {
        "ID": "42",
        "掌握程度": "未知",
        "难度": "中",
        "别名": "链队",
        "定义": "用于存储队列的单链表"
      }
    },
    {
      "type": "知识点",
      "name": "优先级队列",
      "attributes": {
        "ID": "43",
        "掌握程度": "未知",
        "难度": "高",
        "定义": "每个元素都带有一个优先级号的队列，优先级最高的元素必须处在队首位置"
      }
    },
    {
      "type": "知识点",
      "name": "递归",
      "attributes": {
        "ID": "44",
        "掌握程度": "未知",
        "难度": "中",
        "定义": "一种非常重要的数学概念和解决问题的方法, 当求解一个问题时, 是通过求解与它具有同样解法的子问题而得到的"
      }
    },
    {
      "type": "知识点",
      "name": "中缀表达式",
      "attributes": {
        "ID": "45",
        "掌握程度": "未知",
        "难度": "高",
        "定义": "把双目运算符出现在两个操作数中间的这种习惯表示",
        "别名": "中缀算术表达式"
      }
    },
    {
      "type": "知识点",
      "name": "后缀表达式",
      "attributes": {
        "ID": "46",
        "掌握程度": "未知",
        "难度": "高",
        "定义": "把运算符放在两个运算对象的后面。",
        "别名": "逆波兰式",
        "优点": "不存在括号，也不存在运算符优先级的差别，计算过程完全按照运算符出现的先后次序进行，整个计算过程仅需扫描一遍便可完成，显然比中缀表达式的计算要简单得多"
      }
    },
        {
      "type": "知识点",
      "name": "空间复杂度",
      "attributes": {
        "ID": "47",
        "掌握程度": "未知",
        "难度": "高",
        "定义": "运行时所占用的临时空间",
        "别名": "运行时所占用的临时空间"
      }
    }
  ],
  "relations": [
    {
      "type": "包含关系",
      "source": "线性表",
      "target": "栈",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈",
      "target": "栈顶",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈",
      "target": "栈底",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "进栈",
      "target": "栈顶",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "出栈",
      "target": "栈顶",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相等关系",
      "source": "栈",
      "target": "后进先出表",
      "attributes": {
        "强度": "强",
        "方向": "双向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈的抽象数据类型",
      "target": "InitStack",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈的抽象数据类型",
      "target": "Push",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈的抽象数据类型",
      "target": "Pop",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈的抽象数据类型",
      "target": "Peek",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "栈的抽象数据类型",
      "target": "EmptyStack",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
        {
      "type": "包含关系",
      "source": "栈的抽象数据类型",
      "target": "ClearStack",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "顺序栈",
      "target": "栈的顺序存储结构",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "链栈",
      "target": "栈的链接存储结构",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
     {
      "type": "包含关系",
      "source": "线性表",
      "target": "队列",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "队列",
      "target": "队尾",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "队列",
      "target": "队首",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "进队",
      "target": "队尾",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相关关系",
      "source": "离队",
      "target": "队首",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "相等关系",
      "source": "队列",
      "target": "先进先出表",
      "attributes": {
        "强度": "强",
        "方向": "双向"
      }
    },
     {
      "type": "包含关系",
      "source": "队列的抽象数据类型",
      "target": "InitQueue",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "队列的抽象数据类型",
      "target": "EnQueue",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "队列的抽象数据类型",
      "target": "OutQueue",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "队列的抽象数据类型",
      "target": "PeekQueue",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "队列的抽象数据类型",
      "target": "EmptyQueue",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
        {
      "type": "包含关系",
      "source": "队列的抽象数据类型",
      "target": "ClearQueue",
      "attributes": {
        "强度": "中",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "顺序队列",
      "target": "队列的顺序存储结构",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    },
    {
      "type": "包含关系",
      "source": "链队列",
      "target": "队列的链接存储结构",
      "attributes": {
        "强度": "强",
        "方向": "单向"
      }
    }
  ]
}