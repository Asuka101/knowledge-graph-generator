{
  "entities": [
    {
      "type": "数据结构",
      "ID": "03DS001",
      "name": "集合",
      "attributes": {
        "难度": "入门",
        "内容": "由具有相同属性的数据元素组合而成，数据元素之间无任何前驱和后继关系。集合中元素个数称为长度。元素类型可变。",
        "存储开销": "依赖具体实现（顺序或链接）",
        "核心特性": "无序性, 元素唯一性（不允许重复元素）"
      }
    },
    {
      "type": "概念",
      "ID": "03CON001",
      "name": "集合的长度",
      "attributes": {
        "难度": "入门",
        "内容": "集合中数据元素的个数。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON002",
      "name": "空集",
      "attributes": {
        "难度": "入门",
        "内容": "长度为 0 的集合。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON003",
      "name": "集合的抽象数据类型",
      "attributes": {
        "难度": "入门",
        "内容": "定义了集合的数据（一个集合结构）和操作（初始化、清除、求长度、判空、判断元素归属、输出、查找、删除、插入、修改、并集、交集、差集等）。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS002",
      "name": "集合(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "使用数组存储集合元素，并用一个变量记录当前长度。可实现动态扩容。",
        "存储开销": "O(MaxSize) 或 O(n)（动态分配），n为元素个数",
        "核心特性": "基于数组，插入/删除可能需要特殊处理（如移动末尾元素）以维持O(1)（不考虑查找时间）"
      }
    },
    {
      "type": "概念",
      "ID": "03CON004",
      "name": "动态分配",
      "attributes": {
        "难度": "入门",
        "内容": "在程序运行时根据需要分配内存空间，如使用 new 或 malloc。用于实现可变大小的数据结构。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG001",
      "name": "初始化集合(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "分配初始数组空间，并将集合长度置为0。",
        "时间复杂度": "O(1) (分配固定大小) 或 O(initialSize)",
        "空间复杂度": "O(initialSize)",
        "设计思想": "初始化",
        "适用场景": "创建新的顺序存储集合"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG002",
      "name": "清除集合(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "释放动态分配的数组空间，并将长度和容量置为0。",
        "时间复杂度": "O(1) (或取决于内存释放机制)",
        "空间复杂度": "O(1)",
        "设计思想": "资源释放",
        "适用场景": "销毁顺序存储集合"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG003",
      "name": "求集合长度(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "返回存储当前长度的变量值。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "直接访问",
        "适用场景": "获取顺序存储集合的大小"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG004",
      "name": "判断集合是否为空(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "检查集合长度是否为0。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "比较",
        "适用场景": "检查顺序存储集合是否为空"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG005",
      "name": "判断元素是否属于集合(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "顺序查找数组中是否存在该元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "检查元素是否存在于顺序存储集合中"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG006",
      "name": "输出集合元素(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历数组并输出每个元素。可扩展为有序输出（需排序）。",
        "时间复杂度": "O(n) (无序输出), O(n^2) (使用简单选择/插入排序后输出)",
        "空间复杂度": "O(1) (无序输出), O(n) (若排序需要临时数组)",
        "设计思想": "遍历",
        "适用场景": "显示顺序存储集合的内容"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG007",
      "name": "简单选择排序",
      "attributes": {
        "难度": "入门",
        "内容": "每次从未排序部分选择最小元素放到已排序部分的末尾。",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1) (原地排序)",
        "设计思想": "选择",
        "适用场景": "小规模数据排序，教学示例"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG008",
      "name": "简单插入排序",
      "attributes": {
        "难度": "入门",
        "内容": "将元素逐个插入到已排序好的序列中的适当位置。（文本中提及，但未详细描述）",
        "时间复杂度": "O(n^2)",
        "空间复杂度": "O(1) (原地排序)",
        "设计思想": "插入",
        "适用场景": "基本有序或小规模数据排序"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG009",
      "name": "查找集合元素(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "顺序查找指定关键字的元素，找到则返回元素完整值和true，否则返回false。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "在顺序存储集合中查找特定元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG010",
      "name": "修改集合元素(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "先查找指定关键字的元素，找到后用新值替换旧值。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找与替换",
        "适用场景": "更新顺序存储集合中特定元素的值"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG011",
      "name": "向集合插入元素(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "先检查元素是否存在（不允许重复），若不存在且空间足够则插入到末尾，长度加1。若空间不足则先扩容。",
        "时间复杂度": "O(n) (主要时间在检查重复), O(1) (插入本身，摊销后若考虑扩容也是O(1))",
        "空间复杂度": "O(1) (摊销后)",
        "设计思想": "查找, 追加, 动态扩容",
        "适用场景": "向顺序存储集合添加新元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG012",
      "name": "从集合删除元素(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "查找元素，找到后用最后一个元素覆盖它，长度减1。可选择性地在空间空余过多时缩容。",
        "时间复杂度": "O(n) (主要时间在查找)",
        "空间复杂度": "O(1)",
        "设计思想": "查找, 替换(覆盖), 动态缩容(可选)",
        "适用场景": "从顺序存储集合移除元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG013",
      "name": "求两个集合的并集(顺序存储)",
      "attributes": {
        "难度": "中等",
        "内容": "将第一个集合复制到结果集，然后遍历第二个集合，将不在结果集中的元素插入结果集。",
        "时间复杂度": "O(n1 + n2*n_res) ~= O(n1*n2) (n_res最大为n1+n2)",
        "空间复杂度": "O(n1+n2) (存储结果集)",
        "设计思想": "复制, 遍历, 插入（带查重）",
        "适用场景": "合并两个顺序存储的集合"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG014",
      "name": "求两个集合的交集(顺序存储)",
      "attributes": {
        "难度": "中等",
        "内容": "遍历第二个集合的每个元素，检查它是否存在于第一个集合中，若存在则插入结果集。",
        "时间复杂度": "O(n2 * n1)",
        "空间复杂度": "O(min(n1, n2)) (结果集大小)",
        "设计思想": "遍历, 查找, 插入",
        "适用场景": "找出两个顺序存储集合的共同元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG015",
      "name": "求两个集合的差集(顺序存储)",
      "attributes": {
        "难度": "中等",
        "内容": "遍历第一个集合的每个元素，检查它是否存在于第二个集合中，若不存在则插入结果集 (求 S1 - S2)。",
        "时间复杂度": "O(n1 * n2)",
        "空间复杂度": "O(n1) (结果集大小)",
        "设计思想": "遍历, 查找, 插入",
        "适用场景": "找出属于第一个集合但不属于第二个集合的元素（顺序存储）"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS003",
      "name": "集合(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "使用单链表存储集合元素，每个元素对应一个结点。",
        "存储开销": "O(n) (n为元素个数，每个结点有开销)",
        "核心特性": "基于链表，插入删除（若不考虑查找）通常在O(1)（如表头操作），动态性好"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS004",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "由一系列结点组成，每个结点包含数据域和指向下一个结点的指针域。通过表头指针访问。",
        "存储开销": "O(n)",
        "核心特性": "动态大小, 插入/删除便捷(已知位置), 随机访问困难"
      }
    },
    {
      "type": "概念",
      "ID": "03CON005",
      "name": "结点",
      "attributes": {
        "难度": "入门",
        "内容": "构成链式存储结构的基本单元，通常包含数据域和指针域。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON006",
      "name": "表头指针",
      "attributes": {
        "难度": "入门",
        "内容": "指向链表中第一个结点的指针。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG016",
      "name": "初始化集合(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "将表头指针置为空。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "初始化",
        "适用场景": "创建新的链接存储集合"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG017",
      "name": "清除集合(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，逐个释放所有结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历, 资源释放",
        "适用场景": "销毁链接存储集合"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG018",
      "name": "求集合长度(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，统计结点个数。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历计数",
        "适用场景": "获取链接存储集合的大小"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG019",
      "name": "判断集合是否为空(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "检查表头指针是否为空。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "比较",
        "适用场景": "检查链接存储集合是否为空"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG020",
      "name": "判断元素是否属于集合(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表，查找是否存在包含该元素的结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "检查元素是否存在于链接存储集合中"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG021",
      "name": "输出集合元素(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表并输出每个结点的数据域。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历",
        "适用场景": "显示链接存储集合的内容"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG022",
      "name": "查找集合元素(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表查找指定关键字的结点，找到则返回元素值和true，否则false。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "在链接存储集合中查找特定元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG023",
      "name": "修改集合元素(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表查找指定关键字的结点，找到后用新值替换结点的数据域。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找与替换",
        "适用场景": "更新链接存储集合中特定元素的值"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG024",
      "name": "向集合插入元素(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "先检查元素是否存在，若不存在则创建新结点并插入到链表（通常是表头），返回true。若存在则返回false。",
        "时间复杂度": "O(n) (主要时间在检查重复), O(1) (插入本身)",
        "空间复杂度": "O(1) (不计新结点空间)",
        "设计思想": "查找, 创建结点, 头插法",
        "适用场景": "向链接存储集合添加新元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG025",
      "name": "从集合删除元素(链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "遍历链表查找指定元素（需要记录前驱结点），找到后修改前驱结点的指针以跳过该结点，并释放该结点内存。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找(带前驱), 指针修改, 资源释放",
        "适用场景": "从链接存储集合移除元素"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG026",
      "name": "求两个集合的并集(链接存储)",
      "attributes": {
        "难度": "中等",
        "内容": "将第一个集合复制到结果集，然后遍历第二个集合，将不在结果集中的元素插入结果集（通常头插）。",
        "时间复杂度": "O(n1*n_res) ~= O(n1*(n1+n2)) 或 O(n1+n2*n_res) ~= O(n1*n2)",
        "空间复杂度": "O(n1+n2) (存储结果集)",
        "设计思想": "复制, 遍历, 插入（带查重）",
        "适用场景": "合并两个链接存储的集合"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG027",
      "name": "求两个集合的交集(链接存储)",
      "attributes": {
        "难度": "中等",
        "内容": "遍历第二个集合的每个元素，检查它是否存在于第一个集合中，若存在则创建新结点插入结果集（通常头插）。",
        "时间复杂度": "O(n2 * n1)",
        "空间复杂度": "O(min(n1, n2)) (结果集大小)",
        "设计思想": "遍历, 查找, 插入",
        "适用场景": "找出两个链接存储集合的共同元素"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG028",
      "name": "求两个集合的差集(链接存储)",
      "attributes": {
        "难度": "中等",
        "内容": "遍历第一个集合的每个元素，检查它是否存在于第二个集合中，若不存在则创建新结点插入结果集（通常头插） (求 S1 - S2)。",
        "时间复杂度": "O(n1 * n2)",
        "空间复杂度": "O(n1) (结果集大小)",
        "设计思想": "遍历, 查找, 插入",
        "适用场景": "找出属于第一个集合但不属于第二个集合的元素（链接存储）"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS005",
      "name": "稀疏矩阵",
      "attributes": {
        "难度": "中等",
        "内容": "非零元素个数远小于零元素个数的矩阵。通常只存储非零元素以节省空间。",
        "存储开销": "依赖具体实现（三元组顺序/链接、十字链表），远小于 M*N",
        "核心特性": "稀疏性"
      }
    },
    {
      "type": "概念",
      "ID": "03CON007",
      "name": "矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "一个 M 行 N 列的数表，包含 M*N 个元素。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON008",
      "name": "非零元素",
      "attributes": {
        "难度": "入门",
        "内容": "矩阵中值不为零的元素。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON009",
      "name": "零元素",
      "attributes": {
        "难度": "入门",
        "内容": "矩阵中值为零的元素。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON010",
      "name": "三元组",
      "attributes": {
        "难度": "入门",
        "内容": "用于表示稀疏矩阵非零元素的数据结构，包含行号、列号和元素值。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON011",
      "name": "行号",
      "attributes": {
        "难度": "入门",
        "内容": "矩阵中元素所在的行索引。"
      }
    },
     {
      "type": "概念",
      "ID": "03CON012",
      "name": "列号",
      "attributes": {
        "难度": "入门",
        "内容": "矩阵中元素所在的列索引。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS006",
      "name": "三元组线性表",
      "attributes": {
        "难度": "入门",
        "内容": "按行号为主序、列号为辅序排列的稀疏矩阵非零元素三元组构成的线性表。",
        "存储开销": "O(非零元素个数)",
        "核心特性": "有序性（按行列）"
      }
    },
    {
      "type": "概念",
      "ID": "03CON013",
      "name": "稀疏矩阵的抽象数据类型",
      "attributes": {
        "难度": "入门",
        "内容": "定义了稀疏矩阵的数据（三元组线性表表示）和操作（初始化、转置、求和、求积、输入、输出等）。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG029",
      "name": "稀疏矩阵转置",
      "attributes": {
        "难度": "中等",
        "内容": "将原矩阵的行号和列号互换得到新矩阵。",
        "时间复杂度": "依赖实现（普通O(列数*非零数)，快速O(列数+非零数))",
        "空间复杂度": "O(非零数) (存储转置结果)",
        "设计思想": "行列互换",
        "适用场景": "计算矩阵的转置"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG030",
      "name": "稀疏矩阵加法",
      "attributes": {
        "难度": "中等",
        "内容": "将两个相同大小的稀疏矩阵对应位置的非零元素相加（零元素视为0）。",
        "时间复杂度": "O(n1+n2) (n1, n2为两矩阵非零元素个数)",
        "空间复杂度": "O(n1+n2) (最坏情况)",
        "设计思想": "按行合并/相加",
        "适用场景": "计算两个稀疏矩阵的和"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG031",
      "name": "稀疏矩阵乘法",
      "attributes": {
        "难度": "高级",
        "内容": "计算两个矩阵的乘积（C[i,j] = sum(A[i,k]*B[k,j])）。实现较复杂。",
        "时间复杂度": "依赖具体实现，通常比稠密矩阵优化",
        "空间复杂度": "O(结果矩阵非零数)",
        "设计思想": "基于矩阵乘法定义，优化非零元素计算",
        "适用场景": "计算两个稀疏矩阵的乘积"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS007",
      "name": "稀疏矩阵(顺序存储)",
      "attributes": {
        "难度": "中等",
        "内容": "使用一个结构体存储矩阵的行数、列数、非零元素个数，并用一个数组存储三元组线性表。",
        "存储开销": "O(非零元素个数)",
        "核心特性": "基于数组的三元组存储"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS008",
      "name": "稀疏矩阵(带行指针向量链接存储)",
      "attributes": {
        "难度": "中等",
        "内容": "每行一个单链表（按列号有序），存储该行的非零元素结点。用一个行指针向量（数组）存储每行链表的头指针。",
        "存储开销": "O(行数 + 非零元素个数)",
        "核心特性": "按行快速访问，行内有序"
      }
    },
     {
      "type": "概念",
      "ID": "03CON014",
      "name": "行指针向量",
      "attributes": {
        "难度": "入门",
        "内容": "一个数组，每个元素存储稀疏矩阵对应行单链表的表头指针。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS009",
      "name": "稀疏矩阵(十字链接存储)",
      "attributes": {
        "难度": "高级",
        "内容": "每个非零元素结点同时处于所在行的单链表和所在列的单链表中。需要行、列两个指针向量。",
        "存储开销": "O(行数 + 列数 + 非零元素个数)",
        "核心特性": "按行、按列均可快速访问"
      }
    },
    {
      "type": "概念",
      "ID": "03CON015",
      "name": "列指针向量",
      "attributes": {
        "难度": "入门",
        "内容": "一个数组，每个元素存储稀疏矩阵对应列单链表的表头指针。"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG032",
      "name": "初始化稀疏矩阵(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "将行数、列数、非零元素个数置为0。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "初始化",
        "适用场景": "创建空的顺序存储稀疏矩阵对象"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG033",
      "name": "初始化稀疏矩阵(带行指针向量)",
      "attributes": {
        "难度": "入门",
        "内容": "将行数、列数、非零元素个数置为0，并将行指针向量所有元素置为空。",
        "时间复杂度": "O(行数)",
        "空间复杂度": "O(1) (不计指针向量本身)",
        "设计思想": "初始化",
        "适用场景": "创建空的带行指针向量的稀疏矩阵对象"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG034",
      "name": "初始化稀疏矩阵(十字链接存储)",
      "attributes": {
        "难度": "入门",
        "内容": "将行数、列数、非零元素个数置为0，并将行、列指针向量所有元素置为空。",
        "时间复杂度": "O(行数 + 列数)",
        "空间复杂度": "O(1) (不计指针向量本身)",
        "设计思想": "初始化",
        "适用场景": "创建空的十字链表稀疏矩阵对象"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG035",
      "name": "输入稀疏矩阵(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "读取矩阵维度，然后循环读取三元组（行、列、值），存入数组，直到遇到结束标志。",
        "时间复杂度": "O(非零元素个数)",
        "空间复杂度": "O(1)",
        "设计思想": "循环读取, 存储",
        "适用场景": "从输入流构建顺序存储的稀疏矩阵"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG036",
      "name": "输入稀疏矩阵(十字链接存储)",
      "attributes": {
        "难度": "中等",
        "内容": "读取维度，循环读取三元组，为每个三元组创建结点，并将其链接到对应行链表和列链表的末尾。",
        "时间复杂度": "O(非零元素个数 * (平均行长 + 平均列长)) (查找链表尾部)",
        "空间复杂度": "O(1)",
        "设计思想": "循环读取, 创建结点, 链表插入",
        "适用场景": "从输入流构建十字链表稀疏矩阵"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG037",
      "name": "输出稀疏矩阵(顺序存储)",
      "attributes": {
        "难度": "入门",
        "内容": "输出矩阵维度，然后遍历三元组数组，按格式输出每个三元组。",
        "时间复杂度": "O(非零元素个数)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历, 格式化输出",
        "适用场景": "显示顺序存储稀疏矩阵的内容"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG038",
      "name": "普通转置方法(稀疏矩阵)",
      "attributes": {
        "难度": "中等",
        "内容": "按原矩阵的列序遍历三元组数组，将找到的元素（行列互换）依次存入结果数组。",
        "时间复杂度": "O(列数 * 非零元素个数)",
        "空间复杂度": "O(非零元素个数) (存储转置结果)",
        "设计思想": "按列扫描, 行列互换",
        "适用场景": "实现稀疏矩阵转置（较慢）"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG039",
      "name": "快速转置方法(稀疏矩阵)",
      "attributes": {
        "难度": "中等",
        "内容": "第一遍扫描统计原矩阵每列的非零元素个数，计算转置后每行的起始位置。第二遍扫描将原三元组（行列互换）直接放到计算好的位置。",
        "时间复杂度": "O(列数 + 非零元素个数)",
        "空间复杂度": "O(列数 + 非零元素个数) (需要辅助数组和结果数组)",
        "设计思想": "空间换时间, 预计算位置",
        "适用场景": "高效实现稀疏矩阵转置"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG040",
      "name": "稀疏矩阵加法(带行指针向量)",
      "attributes": {
        "难度": "高级",
        "内容": "逐行处理，合并两个输入矩阵对应行的有序链表（按列号），将结果链接到结果矩阵的对应行。相同位置元素相加，和为0则不存，和不为0则存和，不同位置元素直接复制。",
        "时间复杂度": "O(n1 + n2) (n1, n2为两矩阵非零元素个数)",
        "空间复杂度": "O(n1 + n2) (最坏情况，存储结果)",
        "设计思想": "按行归并, 链表操作",
        "适用场景": "计算两个带行指针向量存储的稀疏矩阵的和"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS010",
      "name": "广义表",
      "attributes": {
        "难度": "中等",
        "内容": "线性表的推广，元素可以是单个原子（单元素）或另一个广义表（子表）。递归定义的数据结构。",
        "存储开销": "O(N) (N为总原子数+子表数，采用链接存储)",
        "核心特性": "递归结构, 元素类型多样（原子或表）"
      }
    },
     {
      "type": "概念",
      "ID": "03CON016",
      "name": "单元素",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中的原子类型元素，不是表。"
      }
    },
     {
      "type": "概念",
      "ID": "03CON017",
      "name": "子表",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中作为元素的另一个广义表。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON018",
      "name": "广义表的长度",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中最外层包含的元素（单元素或子表）的个数。"
      }
    },
    {
      "type": "概念",
      "ID": "03CON019",
      "name": "广义表的深度",
      "attributes": {
        "难度": "入门",
        "内容": "广义表中括号嵌套的最大层数。空表或只有单元素的表深度为1。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS011",
      "name": "广义表(链接存储)",
      "attributes": {
        "难度": "中等",
        "内容": "采用动态链接结构，结点分为单元素结点（存值+后继指针）和子表结点（存标志+子表头指针+后继指针）。",
        "存储开销": "O(N) (N为总原子数+子表数)",
        "核心特性": "递归表示, 区分原子和子表"
      }
    },
    {
      "type": "概念",
      "ID": "03CON020",
      "name": "单元素结点",
      "attributes": {
        "难度": "入门",
        "内容": "广义表链接存储中表示单元素的结点，包含标志、值域和后继指针域。"
      }
    },
     {
      "type": "概念",
      "ID": "03CON021",
      "name": "子表结点",
      "attributes": {
        "难度": "入门",
        "内容": "广义表链接存储中表示子表的结点，包含标志、指向子表第一个结点的指针域和后继指针域。"
      }
    },
     {
      "type": "概念",
      "ID": "03CON022",
      "name": "标志域",
      "attributes": {
        "难度": "入门",
        "内容": "广义表链接存储结点中用于区分单元素结点和子表结点的域。"
      }
    },
    {
      "type": "数据结构",
      "ID": "03DS012",
      "name": "广义表(带表头附加结点)",
      "attributes": {
        "难度": "中等",
        "内容": "在广义表链接存储的第一个结点前增加一个额外的表结点（表头附加结点），其指针域指向真正的第一个元素结点。",
        "存储开销": "O(N)",
        "核心特性": "方便某些运算（如插入/删除首元素）的统一处理"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG041",
      "name": "求广义表长度(递归)",
      "attributes": {
        "难度": "入门",
        "内容": "递归计算广义表第一层元素的个数（遍历后继指针）。",
        "时间复杂度": "O(L) (L为广义表长度)",
        "空间复杂度": "O(L) (递归深度)",
        "设计思想": "递归遍历",
        "适用场景": "计算广义表长度"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG042",
      "name": "求广义表深度(递归)",
      "attributes": {
        "难度": "中等",
        "内容": "递归计算，深度等于所有子表深度的最大值加1。基础情况（无子表）深度为1。",
        "时间复杂度": "O(N) (N为结点总数)",
        "空间复杂度": "O(D) (D为广义表深度，递归栈深度)",
        "设计思想": "递归遍历, 深度优先",
        "适用场景": "计算广义表深度"
      }
    },
     {
      "type": "算法",
      "ID": "03ALG043",
      "name": "建立广义表存储结构(递归)",
      "attributes": {
        "难度": "中等",
        "内容": "根据特定格式（如 `(a,(b,c))`）的字符串输入，递归地创建广义表的链接存储结构（带表头附加结点）。",
        "时间复杂度": "O(S) (S为输入字符串长度或结点数)",
        "空间复杂度": "O(N) (N为结点数，递归栈深度)",
        "设计思想": "递归解析, 结点创建, 链接",
        "适用场景": "从字符串表示构建广义表"
      }
    },
    {
      "type": "算法",
      "ID": "03ALG044",
      "name": "打印广义表(递归)",
      "attributes": {
        "难度": "中等",
        "内容": "递归遍历广义表的链接存储结构，按标准格式（如 `(a,(b,c))`）输出。",
        "时间复杂度": "O(N) (N为结点总数)",
        "空间复杂度": "O(D) (D为广义表深度，递归栈深度)",
        "设计思想": "递归遍历, 格式化输出",
        "适用场景": "显示广义表内容"
      }
    }
  ],
  "relations": [
    {
      "type": "操作绑定",
      "关系ID": "03REL001",
      "source": "03ALG001",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL002",
      "source": "03ALG002",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL003",
      "source": "03ALG003",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL004",
      "source": "03ALG004",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL005",
      "source": "03ALG005",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL006",
      "source": "03ALG006",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "使用",
      "关系ID": "03REL007",
      "source": "03ALG006",
      "target": "03ALG007",
      "attributes": {
         "使用角色": "可选排序方法"
      }
    },
     {
      "type": "使用",
      "关系ID": "03REL008",
      "source": "03ALG006",
      "target": "03ALG008",
      "attributes": {
         "使用角色": "可选排序方法"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL009",
      "source": "03ALG009",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL010",
      "source": "03ALG010",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL011",
      "source": "03ALG011",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL012",
      "source": "03ALG012",
      "target": "03DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL013",
      "source": "03ALG013",
      "target": "03DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL014",
      "source": "03ALG014",
      "target": "03DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL015",
      "source": "03ALG015",
      "target": "03DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "变体",
      "关系ID": "03REL016",
      "source": "03DS002",
      "target": "03DS001",
      "attributes": {
        "变体类型": "顺序存储实现"
      }
    },
    {
      "type": "变体",
      "关系ID": "03REL017",
      "source": "03DS003",
      "target": "03DS001",
      "attributes": {
        "变体类型": "链接存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "03REL018",
      "source": "03DS003",
      "target": "03DS004",
      "attributes": {
        "使用角色": "核心构建块"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL019",
      "source": "03DS004",
      "target": "03CON005",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL020",
      "source": "03DS004",
      "target": "03CON006",
      "attributes": {
        "依赖强度": "强"
      }
    },
        {
      "type": "操作绑定",
      "关系ID": "03REL021",
      "source": "03ALG016",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL022",
      "source": "03ALG017",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL023",
      "source": "03ALG018",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL024",
      "source": "03ALG019",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL025",
      "source": "03ALG020",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL026",
      "source": "03ALG021",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL027",
      "source": "03ALG022",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL028",
      "source": "03ALG023",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL029",
      "source": "03ALG024",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL030",
      "source": "03ALG025",
      "target": "03DS003",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL031",
      "source": "03ALG026",
      "target": "03DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL032",
      "source": "03ALG027",
      "target": "03DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL033",
      "source": "03ALG028",
      "target": "03DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL034",
      "source": "03DS005",
      "target": "03CON007",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL035",
      "source": "03DS005",
      "target": "03CON008",
      "attributes": {
        "依赖强度": "强"
      }
    },
     {
      "type": "理论依赖",
      "关系ID": "03REL036",
      "source": "03DS005",
      "target": "03CON009",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "03REL037",
      "source": "03DS005",
      "target": "03DS006",
      "attributes": {
        "使用角色": "核心表示法"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL038",
      "source": "03DS006",
      "target": "03CON010",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL039",
      "source": "03CON010",
      "target": "03CON011",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL040",
      "source": "03CON010",
      "target": "03CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL041",
      "source": "03ALG029",
      "target": "03DS005",
      "attributes": {
        "必需性": "否"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL042",
      "source": "03ALG030",
      "target": "03DS005",
      "attributes": {
        "必需性": "否"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL043",
      "source": "03ALG031",
      "target": "03DS005",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "变体",
      "关系ID": "03REL044",
      "source": "03DS007",
      "target": "03DS005",
      "attributes": {
        "变体类型": "顺序存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "03REL045",
      "source": "03DS007",
      "target": "03DS006",
      "attributes": {
        "使用角色": "核心存储内容"
      }
    },
    {
      "type": "变体",
      "关系ID": "03REL046",
      "source": "03DS008",
      "target": "03DS005",
      "attributes": {
        "变体类型": "带行指针向量链接存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "03REL047",
      "source": "03DS008",
      "target": "03CON014",
      "attributes": {
        "使用角色": "核心组件"
      }
    },
    {
      "type": "使用",
      "关系ID": "03REL048",
      "source": "03DS008",
      "target": "03DS004",
      "attributes": {
        "使用角色": "行表示"
      }
    },
     {
      "type": "变体",
      "关系ID": "03REL049",
      "source": "03DS009",
      "target": "03DS005",
      "attributes": {
        "变体类型": "十字链接存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "03REL050",
      "source": "03DS009",
      "target": "03CON014",
      "attributes": {
        "使用角色": "核心组件"
      }
    },
     {
      "type": "使用",
      "关系ID": "03REL051",
      "source": "03DS009",
      "target": "03CON015",
      "attributes": {
        "使用角色": "核心组件"
      }
    },
     {
      "type": "使用",
      "关系ID": "03REL052",
      "source": "03DS009",
      "target": "03DS004",
      "attributes": {
        "使用角色": "行/列表示"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL053",
      "source": "03ALG032",
      "target": "03DS007",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL054",
      "source": "03ALG033",
      "target": "03DS008",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL055",
      "source": "03ALG034",
      "target": "03DS009",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL056",
      "source": "03ALG035",
      "target": "03DS007",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL057",
      "source": "03ALG036",
      "target": "03DS009",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL058",
      "source": "03ALG037",
      "target": "03DS007",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "继承",
      "关系ID": "03REL059",
      "source": "03ALG038",
      "target": "03ALG029",
      "attributes": {
          "约束条件": "基于顺序存储的实现"
      }
    },
     {
      "type": "继承",
      "关系ID": "03REL060",
      "source": "03ALG039",
      "target": "03ALG029",
      "attributes": {
          "约束条件": "基于顺序存储的实现"
      }
    },
     {
      "type": "优化",
      "关系ID": "03REL061",
      "source": "03ALG038",
      "target": "03ALG039",
      "attributes": {
          "优化方向": "时间复杂度"
      }
    },
     {
      "type": "继承",
      "关系ID": "03REL062",
      "source": "03ALG040",
      "target": "03ALG030",
      "attributes": {
          "约束条件": "基于带行指针向量的实现"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL063",
      "source": "03DS010",
      "target": "03CON016",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL064",
      "source": "03DS010",
      "target": "03CON017",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "变体",
      "关系ID": "03REL065",
      "source": "03DS011",
      "target": "03DS010",
      "attributes": {
        "变体类型": "链接存储实现"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL066",
      "source": "03DS011",
      "target": "03CON020",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL067",
      "source": "03DS011",
      "target": "03CON021",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "03REL068",
      "source": "03DS011",
      "target": "03CON022",
      "attributes": {
        "依赖强度": "强"
      }
    },
     {
      "type": "变体",
      "关系ID": "03REL069",
      "source": "03DS012",
      "target": "03DS011",
      "attributes": {
        "变体类型": "增加表头附加结点"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL070",
      "source": "03ALG041",
      "target": "03DS010",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL071",
      "source": "03ALG042",
      "target": "03DS010",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "03REL072",
      "source": "03ALG043",
      "target": "03DS011",
      "attributes": {
        "必需性": "是"
      }
    },
     {
      "type": "操作绑定",
      "关系ID": "03REL073",
      "source": "03ALG044",
      "target": "03DS012",
      "attributes": {
        "必需性": "是"
      }
    }
  ]
}