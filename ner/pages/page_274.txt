```cpp
{
    //输出用邻接矩阵表示一个图的顶点集和边集

    int i,j;
    cout<<"V={";                                    //输出顶点集开始
    for(i=0; i<n-1; i++) cout<<i<<',';
    cout<<n-1<<'}'<<endl;                           //输出顶点集结束
    cout<<"E={" ;                                   //输出边集开始
    if(k2==0) {
        //对无权图的处理情况
        for(i=0; i<n; i++)
            for(j=0; j<n; j++)
                if(GA[i][j]==1)
                    if(k1==0) {
                        //对无向无权图的处理
                        if(i<j) cout<<'('<<i<<','<<j<<')'<<',';
                    }
                    else
                        //对有向无权图的处理
                        cout<<'<'<<i<<','<<j<<'>'<<',';
    }
    else {
        //对有权图的处理情况
        for(i=0; i<n; i++)
            for(j=0; j<n; j++)
                if(GA[i][j]!=0 && GA[i][j]!=MaxValue)
                    if(k1==0) {
                        //对无向有权图的处理
                        if(i<j) cout<<'('<<i<<','<<j<<')'<<GA[i][j]<<',';
                    }
                    else
                        //对有向有权图的处理
                        cout<<'<'<<i<<','<<j<<'>'<<GA[i][j]<<',';
    }
    cout<<'}'<<endl;                                //注意:边集的最后一条边的后面多出一个逗号
}

在上面的各算法中，邻接矩阵参数 GA 为值参，由于它是指针参数，只占用 4 个字节的存储空间，与调用它的实参指向同一个二维数组，共同访问该实参数组中的相应元素。所以，对于指针值参，也同样具有一般引用参数的作用。

\section*{7.2 .2 邻接表}

邻接表 (adjacency list) 是对图中的每个顶点建立一个邻接关系的单链表，并把它们的表头指针用一维向量（数组）存储的一种图的表示方法。为顶点$v_i$建立的邻接关系的单链表称作$v_i$邻接表。$v_i$邻接表中的每个结点用来存储以该顶点为端点或起点的一条边的信息，因而被称为边结点。$v_i$邻接表中的结点数，对于无向图来说，等于$v_i$的度数、邻接点数或出度数；对于有向图来说，等于$v_i$的出边数、出边邻接点数或出度数。边结点的类型通常被定义为 3 个域：一是邻接点域 (adjvex)，用以存储顶点$v_i$的一个邻接顶点$v_j$的序号$j$；二是权域 (weight)，用以存储边$(v_i,v_j)$或$<v_i,v_j>$上的权；三是链域 (next)，用以链接$v_i$邻接表中的下一个结点。在这 3 个域中，邻接点域和链域是必不可少的，权域可根据情况取舍，
```
