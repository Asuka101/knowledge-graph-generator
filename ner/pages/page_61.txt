【习题 1-2】按要求设计抽象数据类型。

设计二次多项式$ax^2+bx+c$的一种抽象数据类型为 QUAdratic，该类型的数据部分为 3 个系数项$a$、$b$和$c$。操作部分如下。

1. 初始化数据成员$a$、$b$和$c$（假定用记录类型 Quadratic 定义数据成员），每个数据成员的默认值为 0。
void InitQuadratic(Quadratic& q, float aa=0, float bb=0, float cc=0);

2. 做两个多项式加法，即使对应的系数相加，返回相加结果。
Quadratic Add(Quadratic& q1, Quadratic& q2);

3. 根据给定$x$的值，计算多项式的值并返回。
float Eval(Quadratic& q, float x);

4. 计算方程$ax^2+bx+c=0$的两个实数根并引用返回，对于有实根、无实根和不是二次方程（即$a=0$）这 3 种情况都要返回不同的整数值，以便调用函数做不同的处理。
int Root(Quadratic& q, float& r1, float& r2);

5. 按照$ax**2+bx+c$的格式（$x^2$用$x**2$表示）输出二次多项式，在输出时要注意去掉系数为 0 的项，并且当$b$和$c$的值为负时，其前不能出现加号。
void Print(Quadratic& q);

请写出上面每一个操作的具体实现。作为选择，有兴趣的读者还可以给出该抽象数据类型所对应的 C++语言的描述。

【习题 1-3】用 C++函数描述算法并求出其时间复杂度。

1. 比较同一简单类型的两个数据$x_1$和$x_2$的大小，对于$x_1>x_2$、$x_1==x_2$和$x_1<x_2$这 3 种不同情况应分别返回 “>”、“=” 和 “<” 字符。假定简单类型用 SimpleType 表示，它可通过 typedef 语句定义为任一简单类型。

2. 将一个字符串中的所有字符按相反的次序重新放置。

3. 求一维 double 型数组 a[n]中的所有元素之乘积。

4. 计算$\sum_{i=0}^{n}\frac{x^i}{i+1}$的值。

5. 假定一维整型数组 a[n]中的每个元素值均在 [0,200] 区间内，分别统计出落在 [0,20)，[20,50)，[50,80]，[80,130]，[130,200] 等各区间内的元素个数。

6. 从二维整型数组 a[m][n]中查找出最大元素所在的行、列下标。

【习题 1-4】指出下列各算法的功能并求出其时间复杂度。

1. int Prime(int n)
{
    int i=2;
    int x=(int)sqrt(n);
    while(i<=x){
        if(n%i==0) break;
        i++;
    }
    if(i>x) return 1;
    else return 0;
}
