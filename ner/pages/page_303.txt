PATH 函数的定义如下。

void PATH (edgenode *path, int m, int j)
{
    //由到顶点$m$的最短路径和顶点$j$构成到顶点$j$的目前最短路径
    edgenode *p,*q,*s;
    //把顶点$j$的当前最短路径清除掉
    p=path[j];
    while(p!=NULL) {
        path[j]=p->next;
        delete p;
        p=path[j];
    }
    //把到顶点$m$的最短路径复制过来到顶点$j$的最短路径上
    p=path[m];
    while(p!=NULL) {
        q=new edgenode;
        q->adjvex=p->adjvex;
        if(path[j]==NULL) path[j]=q;
        else s->next=q;
        s=q;
        p=p->next;
    }
    //把顶点$j$加入到 path[j]单链表的最后，形成新的目前最短路径
    q=new edgenode;
    q->adjvex=j;
    q->next=NULL;
    s->next=q;
}

*8.2.3 每对顶点之间的最短路径

求图中每对顶点之间的最短路径是指把图中任意两个顶点$v_i$和$v_j(i \neq j)$之间的最短路径都计算出来。若图中有$n$个顶点，则共需要计算$n(n-1)$条最短路径。解决此问题有两种方法：第 1 种是分别以图中的每个顶点为源点共调用$n$次狄克斯特拉算法，因狄克斯特拉算法的时间复杂度为$O(n^2)$，所以此方法的时间复杂度为$O(n^3)$；第 2 种是采用下面介绍的弗洛伊德（Floyd）算法，此算法的时间复杂度仍为$O(n^3)$，但比较简单。

弗洛伊德算法从图的邻接矩阵开始，按照顶点$v_0,v_1,\cdots,v_{n-1}$的次序，分别以每个顶点$v_k(0 \leq k < n-1)$作为新考虑的中间点，在第$k-1$次运算得到的$A^{(k-1)}(A^{(-1)})$为图的邻接矩阵$GA$的基础上，求出每对顶点$v_i$到$v_j$的目前最短路径长度$A^{(k)}[i][j]$，计算公式为：$A^{(k)}[i][j]=\min(A^{(k-1)}[i][j], A^{(k-1)}[i][k]+A^{(k-1)}[k][j]) \quad (0 \leq i \leq n-1, \; 0 \leq j \leq n-1)$其中，$\min$函数表示取其参数表中的较小值，参数表中的前项表在第$k-1$次运算后得到的从$v_i$到$v_j$的目前最短路径长度，后项表示考虑以$v_k$作为新的中间点所得到的从$v_i$到$v_j$
