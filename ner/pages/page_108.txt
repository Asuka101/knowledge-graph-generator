```c
//释放原附加表头结点
delete t3;
//返回结果单链表的表头指针 p3
return p3;
}

算法中使用的 p3 单链表是带有表头附加结点的单链表, 这给插入运算带来方便, 不需要对空表时的插入做特殊处理, 待整个运算完成后再把附加表头结点删除, 使 p3 单链表又成为一般形式的单链表。对带有表头附加结点的单链表进行删除也同样方便, 删除表头结点和删除其他位置结点的操作完全相同, 因为始终不需要修改表头指针。

可以使用下面的主函数调用上面的多项式加法函数。

void main()
{
    LNode *a, *b;
    InitList(a);InitList(b);
    Term ra[4]={{5,0},{3,2},{-6,3},{2,5}};
    Term rb[6]={{3,0},{4,1},{-2,2},{3,3},{-2,5},{9,6}};
    int i;
    for(i=3; i>=0; i--) InsertList(a,ra[i],1); //每次插入到表头
    for(i=5; i>=0; i--) InsertList(b,rb[i],1); //每次插入到表头
    cout<<"线性表 a:";
    TraverseList(a);
    cout<<"线性表 b:";
    TraverseList(b);
    LNode *c=PolyAdd2(a,b); //或者使用 PolyAdd1(a,b)调用
    cout<<"线性表 c:";
    TraverseList(c);
    ClearList(a); ClearList(b); ClearList(c);
}

程序执行后的结果如下:

线性表 a:5 0 3 2 -6 3 2 5
线性表 b:3 0 4 1 -2 2 3 3 -2 5 9 6
线性表 c:8 0 4 1 1 2 -3 3 9 6

习题 2

【习题 2-1】分析程序。
在下面的每个程序段中, 线性表 La 的类型为 List, 元素类型 ElemType 为 int, 假定每个程序段是连续执行的, 试写出每个程序段执行后所得到的线性表 La。

1. int i;
    List La;
    InitList(La);
```
