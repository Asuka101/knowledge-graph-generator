定义一个集合对象之后，在初始化时要使该对象中的 set 指针指向由 new ElemType[MaxSize]或(ElemType*)malloc(sizeof(Elemtype)*MaxSize))分配的动态数组空间，同时使 len 的值为 0，表示为空集。

集合的顺序存储结构如图 3-1 所示。

下标$0$1$2$\cdots$n-1$n+1$\rightarrow$MaxSize-1
set |$a_1$|$a_2$|$a_3$|$\cdots$|$a_n$| | | | |
|---|---|---|---|---|---|---|---|---|---|
|  |  |  |  |  |  |  |  |  |  |

图 3-1 集合的顺序存储结构示意图

下面以 set 为集合的顺序存储类型，给出每个集合运算的算法。

1. 初始化集合并置为空

初始化集合时，让 set 指向动态数组空间，用于保存集合元素，数组空间的初始大小可以任意设定，假定为 10，以后可以在插入元素的过程中根据需要增加。

void InitSet(Set& S)
{
    //初始定义数组长度为 10,以后可增减
    S.MaxSize=10;
    //动态存储空间分配
    S.set=new ElemType [10];
    if (!S.set) {
        cout<<“动态可分配的存储空间用完,退出运行!”<<endl;
        exit(1);
    }
    //置集合长度为 0,即为空集合
    S.len=0;
}

2. 清除集合中的所有元素

在 Set 集合类型的对象中，由于集合数组空间是动态分配的，所以清除集合就是释放所拥有的动态存储空间。

void ClearSet(Set& S)
{
    if(S.set!=NULL) {
        delete []S.set;
        S.set=NULL;
    }
    S.MaxSize=0;
}
