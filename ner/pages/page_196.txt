其中,$n$为树中结点数,$n=0$则为空树,$n>0$则为非空树。对于一棵非空树, 关系$R$应满足下列条件。

(1) 有且仅有一个结点没有前驱, 该结点被称为树的根。

(2) 除树根结点外, 其余每个结点有且仅有一个前驱结点。

(3) 包括树根结点在内的每个结点, 可以有任意多个 (含 0 个) 后继。

上面的树$\mathrm{T}$若采用二元组表示, 则结点的集合$K$和$K$上二元关系$R$分别为:$K=\{\text { A,B,C,D,E,F,G,H,I }\}$r=\{<\text { A,B }>,<\text { A,C }>,<\text { B,D }>,<\text { B,E }>,<\text { B,F }>,<\text { C,G }>,<\text { E,H }>,<\text { E,I }>\}$其中$\mathrm{A}$结点无前驱结点, 被称为树的根结点; 其余每个结点有且仅有一个前驱结点; 在所有结点中,$\mathrm{B}$结点有三个后继结点,$\mathrm{A}$结点和$\mathrm{E}$结点分别有两个后继结点,$\mathrm{C}$结点有一个后继结点, 其余结点均没有后继结点。

在日常生活和计算机领域, 树结构广泛存在。

【例5-1】可把一个家族看作一棵树, 树中的结点为家族成员的姓名及相关信息, 树中的关系为父子关系, 即父亲是儿子的前驱, 儿子是父亲的后继。一棵家族树, 如图 5.2(a) 所示, 王庭贵有两个儿子王万胜和王万利, 王万胜又有 3 个儿子王家新、王家中和王家国。

【例5-2】可把一个地区或一个单位的组织结构看作一棵树, 树中的结点为机构的名称及相关信息, 树中的关系为上下级关系。如一个城市分为若干个区, 每个区又分为若干个街道, 每个街道又分为若干个居委会等。

【例5-3】可把一本书的结构看作一棵树, 树中的结点为书、章、节的名称及相关信息, 树中的关系为包含关系。一本书的结构, 如图 5.2(b) 所示, 根结点为书的名称数学, 它包含 3 章, 每章名称分别为加法、减法和乘法, 加法一章又包含两节, 分别为一位加和两位和, 减法和乘法也分别包含若干节。

【例5-4】可把一个算术表达式表示成一棵树, 运算符作为根结点, 它的前后两个运算对象分别作为根的左、右两棵子树。如把算术表达式 a*b+(c-d/e)*f 表示成树, 如图 5-2(c) 所示。

![图像内容]

(a) 家族树
(b) 书的结构树
(c) 算术表达式树

图 5-2 树应用的例子

【例5-5】在计算机领域, 每个逻辑盘上信息组织的目录结构就是一棵树, 树中的结点为包含有目录名或文件名的每个目录项或文件项, 树中的根目录用反斜线表示, 根目录下包含有若干个子目录项和文件项, 每个子目录下又包含有若干个子目录项和文件项, 以
