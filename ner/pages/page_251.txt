树中每个叶子的哈夫曼编码:

结点权值为 9 的编码:$0 \ 0$结点权值为 12 的编码:$0 \ 1$结点权值为 6 的编码:$1 \ 0 \ 0$结点权值为 3 的编码:$1 \ 0 \ 1 \ 0$结点权值为 5 的编码:$1 \ 0 \ 1 \ 1$结点权值为 15 的编码:$1 \ 1$*6.4 线索二叉树

\subsection{6.4.1 二叉树的线索化}

对二叉树进行某种遍历得到的结点序列, 可以看作一个线性表。在该线性表中, 除第一个结点外, 每个结点有且仅有一个前驱, 除最后一个结点外, 每个结点有且仅有一个后继。为了同在二叉树中所具有的结点前驱 (即双亲) 和后继 (即孩子) 区别开来, 在容易混淆的地方, 通常把遍历序列中结点的前驱或后继冠以某种遍历的名称, 如把中序序列中结点的前驱称作中序前驱, 结点的后继称作中序后继。对于如图 6-12 所示的二叉树, 中序遍历的结点序列为 B、G、D、A、E、H、C、F, 其中 B 结点为中序遍历得到的线性序列的表头结点, 它没有前驱, 其中序后继为 G 结点, A 结点的中序前驱为 D 结点, 中序后继为 E 结点等。

对于一棵具有$n$个结点的二叉树, 对应的二叉链表中共有$2n$个指针域, 其中$n-1$个用于指向除树根结点以外的其余$n-1$个结点, 另有$n+1$个指针域空闲着。若把每个结点中空着的左指针域和右指针域用于分别指向某种遍历次序的前驱结点和后继结点, 则在遍历这种二叉树时, 可由此信息直接找到在该遍历次序下的前驱结点或后继结点, 从而比递归遍历提高了遍历速度、节省了建立系统栈所使用的存储空间。这种在结点的空指针域中存放的该结点在某次遍历次序下的前驱结点或后继结点的指针叫做线索 (thread), 其中在空的左指针域中存放的指向其前驱结点的指针叫做左线索或前驱线索, 在空的右指针域中存放的指向其后继结点的指针叫做右线索或后继线索。对一棵二叉树中的所有结点的空指针域按照某种遍历次序加线索的过程叫做线索化, 被线索化了的二叉树称做线索二叉树。如图 6-12 (b) 所示是对图 6-12 (a) 的二叉树加中序线索而得到的中序线索二叉树。

\n
(a) 二叉树
(b) 加中序线索后的二叉树

图 6-12 中序线索二叉树
