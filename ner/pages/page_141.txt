法做准备。

2. 求广义表的深度

广义表深度的递归定义是它等于所有子表中表的最大深度加 1，若一个表为空或仅由单元素所组成，则深度为 1。设 dep 表示任一子表的深度，max 表示所有子表中表的最大深度，Depth 表示广义表的深度，则有：$\text{Depth}=\max+1$因一个表不包含任何子表时，其深度为 1，所以 max 的初值应为 0。

求一个广义表深度的算法如下。

int Depth(GLNode* GL) //求值参 GL 所指向的广义表的深度
{
    int max=0; //给 max 赋初值 0
    while (GL!=NULL) {
        if (GL->tag==true) {
            int dep=Depth(GL->sublist); //递归调用求出子表的深度
            if (dep>max) max=dep; //让 max 为同层求过子表深度的最大值
        }
        GL=GL->next; //使 GL 指向同一层的下一个结点
    }
    return max+1; //返回表的深度
}

从这个算法可以看出，当 GL 为一个空表或仅由单元素组成的线性表时，不进入下一层的递归调用，而结束本次调用并返回 1，当 GL 含有子表时才会进入求子表深度的递归调用，返回后修改 max 的值，使之为所求过的本层次子表中深度的最大值，本层次的所有结点都扫描完毕后，结束本次调用并返回表的深度。

设一个广义表为:$G=((),a,((b,c),d))$它的存储结构如图 3-11 所示。

为了便于分析，在图中每个链接指针上都标明数字，假定它为该指针的具体值。

在第 1 次非递归调用和以后每次递归调用 Depth 算法时，系统都要在动态堆存储区中为值参 GL，局部变量 max 和 dep 以及保存调用后的返回地址分配存储空间，每次调用结束按所保存的返回地址返回后，系统都释放为本次调用所分配的存储空间，从而使上一
