对于三维或更高维数组，其每个元素的存储位置（即首字节地址）也容易计算出来。如对于三维数组$c[p][m][n]$，其相应的一维数组元素、二维数组元素和三维数组元素的存储位置的计算公式分别如下：$\text{Address}(c[k]) = \text{Loc}(c) + k * m * n * L \quad (0 \leq k \leq p-1)$\text{Address}(c[k][i]) = \text{Loc}(c) + k * m * n * L + i * n * L \quad (0 \leq k \leq p-1, 0 \leq i \leq m-1)$\text{Address}(c[k][i][j]) = \text{Loc}(c) + k * m * n * L + i * n * L + j * L \quad (0 \leq k \leq p-1, 0 \leq i \leq m-1, 0 \leq j \leq n-1)$上面对于多维数组的存储空间的分配是按照行序为主进行的，即第$i$行元素所占用的存储空间的后面紧接着保存第$i+1$行的元素。C、C++、BASIC、PASCAL、Java 等大多数计算机语言对数组的存储空间分配都是按此方法进行的。但也有的计算机语言，如 FORTRAN 语言是采用列序为主进行的，即第$i$列元素所占用的存储空间的后面紧接着保存第$i+1$列的元素。如对于一个二维数组$a[m][n]$，若采用列序为主分配存储空间，则元素$a[i][j]$的存储位置为：$\text{Address}(a[i][j]) = \text{Loc}(a) + j * m * L + i * L \quad (0 \leq i \leq m-1, 0 \leq j \leq n-1)$对于以列序为主进行存储空间分配的三维数组，有兴趣的读者可进行类似的分析。

(2) 字符串。

字符串类型是一种特殊的一维字符数组类型，该类型中的每一个值，从下标 0 位置保存的字符起到下标$i$位置$(0 \leq i < n-1, n$为一维下标上界）保存的 ASCII 码为 0 的空字符 '\0' 止，连续$i$个字符（不含'\0'字符在内）称为一个字符串。

一个字符串常量是用双引号括起来的一串字符，当把它作为初值赋给一个字符数组时，是把该常量中的每个字符依次写入到字符数组中从下标 0 开始的对应位置上，并在最后写入一个'\0'字符作为字符串的结束标志。若一个字符串的长度为 len，则它占据字符数组中$0 \sim \text{len}$位置，其中每个位置为一个字节，用来保存一个字符，$0 \sim \text{len}-1$位置保存字符串本身的字符，$\text{len}$位置保存空字符'\0'。

在字符数组定义时，允许把一个字符串常量作为初值赋给字符数组，而在其他地方，要把一个字符串常量或一个字符数组中保存的字符串赋给一个字符数组时，则必须使用串复制函数 strcpy。保存字符串的字符数组的数组名是一个字符指针常量，它不能作为左值使用，但在其他地方可以像字符指针变量一样使用。如当出现在输出语句时，不是输出数组名指针的值，而是输出以数组名指针为开始地址的、在字符数组中保存的一个字符串；当使用在输入语句时，不是把输入的一个字符串常量的存储地址赋给数组名指针，而是把该字符串保存到字符数组中，并在其后保存一个'\0'字符。

注意：在键盘上输入的一个字符串常量，两边不要使用双引号作为起止符，它自动以非空格和非回车符作为字符串的第一个字符，以空格或回车符作为结束符，即其前一个字符是字符串的最后一个字符。

对字符串的运算操作主要有求串的长度、把一个串复制到另一个字符指针所指的字符数组空间中、比较两个串的大小、串输入和输出等。

注意：当把一个字符串赋值或复制到另一个字符串时，目的字符串的存储空间要大于等于源字符串的长度加 1。
