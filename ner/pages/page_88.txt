```cpp
cin>>q->data; //从键盘输入一个整数赋给 q 结点的值域
p->next=q;    //将 q 结点链接到 p 结点之后
p=q;          //使 p 指针后移, 指向后继新结点 q
}
p->next=NULL;  //置链表的最后一个结点的指针域为空
p=p1->next;    //链表的表头结点为 p1 结点的指针域所指向的结点
while(p!=NULL) {
    cout<<p->data<<" "; //输出 p 结点的值, 即其数值域的值
    p=p->next;         //使 p 指向链表中的下一个结点
}
cout<<endl;
}

单链表中的结点既可以来自静态或动态产生的独立结点（如以上两个程序所示），也可以来自静态或动态产生的数组中的元素（结点），若来自数组中的结点（元素），则 next 域指向的是后继结点所在的下标，所以它应被定义为整数类型。用 ALNode 表示数组中结点的类型，则对应的定义如下。

struct ALNode{
    ElemType data;
    int next;
};

由数组中的结点构造单链表的所属数组类型可定义如下。

typedef ALNode ALinkList[MaxSize];

ALinkList 被定义为包含有 MaxSize 个元素的、元素类型为 ALNode 的数组类型。由该类型的对象（即数组）构造单链表时，通常下标为 0 的元素不作为单链表中的结点使用，而是用它的指针域保存表头指针，这样，数组最多能够提供 MaxSize-1 个结点。另外，当一个结点无后继结点时，其指针域应被赋予数值 0，表示空指针。

利用 ALinkList 类型的数组构成单链表的情况，如图 2-8 (a) 所示。表头指针为下标 0 位置中 next 域的值 4，单链表的结构示意图，如图 2-8 (b) 所示。表头指针用 f 表示，每个指针上标出的数值就是该指针的具体值。

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|}
\hline data & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \(\cdots\) \\
\hline next & 4 & 3 & 8 & 6 & 7 & 2 & 0 & 5 & 1 & \\
\hline
\end{tabular}

(a) 数组构成的单链表

f$\rightarrow$44$\rightarrow$75$\rightarrow$50$\rightarrow$57$\rightarrow$62$\rightarrow$68$\rightarrow$75$\rightarrow$83$\rightarrow$94$\rightarrow$0

(b) 单链表的结构

图 2-8 利用数组建立单链表示意图
```
