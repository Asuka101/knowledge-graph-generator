void KeyPathGraph(GraphType&G, int n); //求有向带权图中的关键路径
end GeneralTree

本章将结合图的存储结构和遍历讨论图的常用运算的算法，对于图的特定运算的方法和算法，将留到第8章专门讨论。

\section*{7.2 图的存储结构}

图的存储结构又称图的存储表示或图的表示。图有多种表示方法，这里介绍比较常用的邻接矩阵、邻接表和边集数组3种。

\subsection*{7.2.1 邻接矩阵}

邻接矩阵（adjacency matrix）是表示图形中顶点之间相邻关系的矩阵。设$G=(V,E)$是具有$n$个顶点的图，顶点序号依次为$0,1,2,\cdots,n-1$，则$G$的邻接矩阵是具有如下定义的$n$阶方阵。$A[i,j]=\begin{cases} 1 & \text{对于无向图，}(v_i,v_j)\text{或}(v_j,v_i)\in E(G); \\ 1 & \text{对于有向图，}\langle v_i,v_j\rangle\in E(G) \\ 0 & E(G)\text{中不存在}v_i\sim v_j\text{的边} \end{cases}$对于图7-1中的$G_1$和$G_2$，它们的邻接矩阵分别为如$A_1$和$A_2$所示。由$A_1$可以看出，无向图的邻接矩阵是按主对角线为轴对称的。$A_1=\begin{bmatrix} 0 & 1 & 1 & 1 & 1 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 0 & 0 & 0 & 1 & 0 \\ 1 & 0 & 0 & 0 & 0 & 1 \\ 1 & 1 & 1 & 0 & 0 & 1 \\ 0 & 0 & 1 & 1 & 1 & 0 \end{bmatrix}, A_2=\begin{bmatrix} 0 & 1 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 & 1 \\ 0 & 1 & 0 & 1 & 0 \\ 0 & 0 & 0 & 0 & 0 \\ 0 & 0 & 0 & 1 & 0 \end{bmatrix}$若图$G$是一个带权图，则用邻接矩阵表示也很方便，只要把1换为相应边上的权值，把非对角线上的0换为某一个很大的特定实数，表示这个边不存在，这个特定实数通常用$\infty$或MaxValue表示，它要大于图$G$中所有边上的权值之和。

例如，对于图7-5中的带权图$G_5$和$G_6$，它们的邻接矩阵分别用$A_3$和$A_4$所示。$A_1=\begin{bmatrix} 0 & 5 & 7 & \infty & \infty \\ 5 & 0 & 12 & 3 & 8 \\ \infty & 12 & 0 & 6 & 20 \\ \infty & 3 & 6 & 0 & 15 \\ \infty & 8 & 20 & 15 & 0 \end{bmatrix}, A_2=\begin{bmatrix} 0 & 2 & 3 & 8 & \infty \\ \infty & 0 & \infty & 12 & \infty \\ 6 & \infty & 0 & 6 & 1 \\ \infty & \infty & \infty & 0 & 4 \\ \infty & \infty & \infty & \infty & 0 \end{bmatrix}$
