若用一个数组 a[n]来保存 1～n之间的 n个自然数, 对于 i=0～n-1, 每次使 a[0]同 a[i]交换 (i=0,1,2,\cdots,n-1) 后, 对 a[1]~a[n-1]中的 n-1个元素进行全排列, 然后再交换 a[0]与 a[i]的值, 使它恢复为此次排列前的状态; 同样, 对于 a[1]~a[n-1]区间内的 n-1个元素,每次使 a[1]同 a[i]交换 (i=1,2,\cdots,n-1) 后, 对 a[2]~a[n-1]区间内的 n-2个元素进行全排列, 然后再把交换的元素交换回来, 以此类推, 直到对 a[n-1]进行全排列时, 输出整个数组的值, 即得到一种排列结果。

对 n个元素的全排列是一个递归过程, 具体描述如下。

void Permute(int a[], int s, int n)
    //对 a[s]~a[n-1]中的 n-s个元素进行全排列, s 的初值应为 0
{
    int i, temp;
    //当递归排序到最后一个元素时结束递归, 输出 a 中保存的一种排列
    if (s==n-1) {
        for(i=0; i<n; i++) cout<<a[i]<<" ";
        cout<<endl;
    }
    //其他情况需要递归排列
    else
        for (i=s; i<n; i++) { 
            //循环 n-s 次, 每次使 a[s]取一个新值
            //交换 a[s]与 a[i]的元素值
            temp=a[s]; a[s]=a[i]; a[i]=temp;
            //对 a[s+1]~a[n-1]中的元素进行递归排序
            Permute(a, s+1, n);
            //恢复 a[s]与 a[i]的原有值
            temp=a[s]; a[s]=a[i]; a[i]=temp;
        }
}

此算法的时间复杂度为$O(n!)$, 因为共需要进行 n!次递归调用; 空间复杂度为$O(n)$,因为系统栈的最大深度为 n。可以使用下面程序调用此算法。

#include<iostream.h>
const int UpperLimit=6;          //定义全排列的元素个数的最大值
void Permute(int a[], int s, int n)
    //对 a[s]~a[n-1]中的 n-s个元素进行全排列, s 的初值为 0
{ 
    //函数体如上所述
}
void main(void)
{
    int a[UpperLimit];           //定义存储 n 个整型元素的数组
    int n;
    while(1) {
        cout<<"输入 n 的值, 它应在 1 和 "<<UpperLimit<<"之间:";
        cin>>n;
        //输入待全排列的元素的实际个数
        if(n>=1 && n<=UpperLimit) break;
    }
