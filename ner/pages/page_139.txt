别为 2、3 和 4。

\section*{3.5 .2 广义表的存储结构}

广义表是一种递归的数据结构, 因此很难为每个广义表分配固定大小的存储空间, 所以其存储结构只好采用动态链接结构。

在一个广义表中, 其数据元素有单元素和子表之分, 所以在对应的存储结构中, 其存储结点也有单元素结点和子表结点之分。对于单元素结点, 应包括值域和指向其后继结点的指针域; 对于子表结点, 应包括指向子表中第一个结点的表头指针域和指向其后继结点的指针域。为了把广义表中的单元素结点和子表结点区别开来, 还必须在每个结点中增设一个标志域, 让标志域取两种不同的值, 从而区分两种不同的结点。

根据分析, 广义表中的结点类型在 C++语言中可定义如下。

struct GLNode {
    bool tag; //标志域
    union{
        ElemType data; //值域或子表的表头指针域
        GLNode* sublist;
    };
    GLNode* next; //指向后继结点的指针域
};

其中, tag 作为标志域, 其值为 false 时表示单元素结点, 使用无名联合中的 data 域, 用来存储元素值; 其值为 true 时表示子表结点, 使用无名联合中的 sublist 域, 用来存储指向子表中第一个结点的指针, 即子表的表头指针, 通过它实现向子表的链接, 即实现广义表的递归结构, 结点中的 next 作为指向其后继结点的指针域, 通过它把表中同一层的所有结点依次链接起来。

上述 5 个广义表的存储结构的示意图, 如图 3-9 所示。

A=NULL

B→[0 e ∧]

D→[1 ∧]→[1]→[1 ∧]

E→[1 ∧]→[0 a]→[1]→[0 a]→[0 b ∧]→[1]→[0 c ∧]→[0 d ∧]

C [0 a] [1]∧

[0 b]→[0 c]→[0 d ∧]

[0 e ∧]→[0 a]→[1]∧

[0 b]→[0 c]→[0 d ∧]

[0 a]→[0 b ∧]

[0 a]→[0 b ∧]

图 3-9 广义表的链接存储结构
