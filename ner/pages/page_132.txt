请自行编写出采用带行指针向量的链接存储所对应的输入算法。

3. 稀疏矩阵的输出

对于采用顺序存储的稀疏矩阵，按三元组线性表的格式输出，其输出算法如下。

void OutputMatrix (SMatrix& M)
{
    cout<<"( ";
    for(int i=1; i<M.t; i++) {
        cout<<"(<M.sm[i].row<<",";
        cout<<M.sm[i].col<<",";
        cout<<M.sm[i].val<<") "<<",";
    }
    if(M.t!=0) {
        cout<<"(<M.sm[M.t].row<<",";
        cout<<M.sm[M.t].col<<",";
        cout<<M.sm[M.t].val<<")";
    }
    cout<<")"<<endl;
}

对于采用其他存储结构的稀疏矩阵，不难写出其相应的输出算法。

4. 稀疏矩阵的转置运算

以稀疏矩阵的顺序存储结构为例讨论稀疏矩阵的转置运算。

设图 3-3(b) 所示的稀疏矩阵命名为$A$，它所对应的顺序存储类型的对象命名为$M$，则图 3-4 就是该对象中数组 sm 中的内容。矩阵$A$的转置矩阵如图 3-7(a) 所示，其命名为$B$，用顺序存储类型的对象$S$来存储它，$S$中 sm 数组的内容如图 3-7(b) 所示。$\left[\begin{array}{rrrrr}3 & 0 & 1 & 0 & 0 \\ 0 & 0 & 0 & 0 & 0 \\ 0 & -2 & 4 & 0 & -1 \\ 5 & 0 & 0 & 0 & 0 \\ 0 & 0 & 6 & 0 & 0 \\ 0 & 0 & 0 & 0 & 0\end{array}\right]$(a)$A$的转置矩阵$\begin{array}{c|c|c|c} \hline S & \text { row } & \text { col } & \text { val } \\ \hline 1 & 1 & 1 & 3 \\ \hline 2 & 1 & 3 & 1 \\ \hline 3 & 2 & -2 & \\ \hline 4 & 3 & 3 & 4 \\ \hline 5 & 3 & 5 & -1 \\ \hline 6 & 4 & 1 & 5 \\ \hline 7 & 5 & 3 & 6 \\ \hline \vdots & & & \\ \hline \end{array}$MaxTerms

(b)$B$的顺序存储结构

图 3-7 稀疏矩阵$B$和它的顺序存储结构

下面根据稀疏矩阵$A$的顺序存储对象$M$求它的转置矩阵的顺序存储对象$S$，来讨论进行稀疏矩阵转置运算的两种方法：普通转置方法和快速转置方法。
