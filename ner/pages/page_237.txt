cout<<"中序: "; InOrder(bst); cout<<endl;
                                //从二叉搜索树中查找一个结点
cout<<"输入一个待查找的整数值:";
cin>>x;
if(Find1(bst,x)) cout<<"查找元素"<<x<<"成功!"<<endl;
else cout<<"查找元素"<<x<<"失败!"<<endl;
                        //向二叉搜索树中插入一个结点
cout<<"输入一个待插入结点的整数值:";
cin>>x;
Insert1(bst,x);
                            //从二叉搜索树中删除一个结点
cout<<"输入一个待删除结点的值:";
cin>>x;
if(Delete(bst,x)) cout<<"删除元素"<<x<<"成功!"<<endl;
else cout<<"删除元素"<<x<<"失败!"<<endl;
                    //再以广义表形式输出二叉搜索树
PrintBTree(bst); cout<<endl;
                //再次中序遍历以bst为树根指针的二叉搜索树
cout<<"中序: "; InOrder(bst); cout<<endl;
                        //清除以bst为树根指针的二叉树
ClearBTree(bst);

程序的一次运行结果如下。$30(20(,25(23)),50(40,70(54,80(,92))))$深度: 5
中序: 20 23 25 30 40 50 54 70 80 92
输入一个待查找的整数值:70
查找元素70 成功!
输入一个待插入结点的整数值:15
输入一个待删除结点的值:30
删除元素30 成功!$25(20(15,23),50(40,70(54,80(,92))))$中序: 15 20 23 25 40 50 54 70 80 92

6.2 堆

6.2.1 堆的定义

堆(heap)分为小根堆和大根堆两种, 对于一个小根堆, 它是具有如下特性的一棵完全二叉树。
（1）若树根结点存在左孩子，则根结点的值 (或某个域的值) 小于等于左孩子结点的值 (或某个域的值)。
（2）若树根结点存在右孩子，则根结点的值 (或某个域的值) 小于等于右孩子结点的值
