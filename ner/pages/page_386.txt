```cpp
f.write((char*) &x, sizeof(ElemType));
                        //把记录 x 顺序写入到文件流 f 所对应的物理文件中
}
f.close();              //关闭逻辑文件 f
}

void main()
{
    int n;
    cout<<"输入存于文件的记录数：";
    cin>>n;
    int BlockSize=10;   //规定初始归并段的大小，假定为 10
    LoadFile(f1,n);     //建立含有 n 个记录的无序的数据文件
                        //定义所给的文件为能够进行随机存取的逻辑文件 ff1
    fstream ff1(f1,ios::in|ios::out|ios::nocreate|ios::binary);
                        //定义两个能够随机存取的逻辑文件 ff2 和 ff3
    fstream ff2(f2,ios::in|ios::out|ios::binary);
    fstream ff3(f3,ios::in|ios::out|ios::binary);
    if(!ff1 || !ff2 || !ff3) {
        cerr<<"File not open!"<<endl; exit(1);
    }
                        //顺序打印出原数据文件 f1 中的所有记录
    cout<<"排序前文件中的数据为:"<<endl;
    Print(ff1);
    cout<<endl;
                        //求出文件 f1 中的记录个数并赋给 n，接着将文件指针移至文件开始
    ff1.seekg(0,ios::end);
    n=ff1.tellg()/b;
    ff1.seekg(0);
                        //当文件长度小于等于初始归并段的长度时，无须进行外排序，只要
                        //将文件内容一次读入内存数组，进行内排序后再写入外存文件即可
    if(n<=BlockSize)
    {
                        //定义与文件大小相同的数组 A
        ElemType*A=new ElemType[n];
        if(A==NULL) {
            cerr<<"memory allocation failure!"<<endl;
            exit(1);
        }
                        //将文件内容整块读入数组 A 中
        ff1.read((char*) A, n*b);
                        //任选一种内排序方法对数组 A 进行内排序，此处采用插入排序方法
        InsertSort(A,n);
                        //使文件指针指向开始位置，把已排序过的数组内容重新写回文件中
        ff1.seekg(0);
```
