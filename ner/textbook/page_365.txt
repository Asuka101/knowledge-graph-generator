开始）待排序区间包含所有元素 A[0]~A[n-1]，经过选择和交换后，A[0]为具有最小排序码的元素；第 2 次待排序区间为 A[1]~A[n-1]，经过选择和交换后，A[1]为仅次于A[0]的具有最小排序码的元素；第 3 次待排序区间为 A[2]~A[n-1]，经过选择和交换后，A[2]为仅次于 A[0] 和 A[1] 的具有最小排序码的元素；以此类推，经过$n-1$次选择和交换后，A[0]~A[n-1] 就成为了有序表，整个排序过程结束。

直接选择排序的算法描述如下。

void SelectSort(ElemType A[], int n)
{
    ElemType x;
    int i, j, k;
    for(i=1; i<=n-1; i++) { //i 表示次数, 共进行 n-1 次选择和交换
        k=i-1;               //用 k 保存当前最小排序码元素的下标, 初始值为 i-1
        for(j=i; j<=n-1; j++)
        {
            if(A[j].stn<A[k].stn) k=j;
        }
        if(k!=i-1)
        {
            x=A[i-1]; A[i-1]=A[k]; A[k]=x;
        }
    }
}

在直接选择排序中，共需要进行$n-1$次选择和交换，每次选择需要比较$n-i$次，其中$1 \leq i \leq n-1$，每次交换最多需移动 3 次记录，故

总比较次数$\quad C=\sum_{i=1}^{n-1}(n-i)=\frac{1}{2}(n^2-n)$总移动次数（即最大值）$M=\sum_{i=1}^{n-1}3=3(n-1)$可见，直接选择排序的时间复杂度为$O(n^2)$，但由于它移动记录的总次数为$O(n)$数量级，所以当记录占用的字节数较多时通常比直接插入排序的执行速度要快一些。

由于在直接选择排序中存在着不相邻元素之间的互换，因而可能会改变具有相同排序码元素的前后位置，所以此方法是不稳定的。

\section*{10.3 .2 堆排序}

堆排序 (heap sorting) 是利用堆的特性进行排序的过程。堆排序包括构成初始堆和利用堆排序这两个阶段。堆分为小根堆和大根堆两种，在堆排序中需要按大根堆进行讨论。

构成初始堆就是把待排序的元素序列$\{R_0, R_1, \cdots, R_{n-1}\}$，按照堆的定义调整为堆$\{R'_0, R'_1, \cdots, R'_{n-1}\}$，其中对应的排序码$S'_i \geq S'_{2i+1}$和$S'_i \geq S'_{2i+2}$，$0 \leq i \leq \lfloor n/2 \rfloor - 1$。为此需从对
