在二叉搜索树的插入和删除运算中，采用平衡树的优点是：使树的结构较好，从而提高查找运算的速度。缺点是：使插入和删除运算变得复杂化，从而降低它们的运算速度。在每次插入或删除运算中，不仅要进行插入和删除结点的操作，而且要检查是否存在有最小不平衡子树，若存在，则需要对最小不平衡子树中有关指针进行修改。因此，采用平衡树，适合于那种对二叉搜索树一经建立就很少进行插入和删除运算，而主要是进行查找运算的应用场合。

对二叉搜索树删除结点而引起的不平衡而进行的调整操作比插入结点的情况还要复杂，当调整完最小不平衡子树后，还可能引起祖先结点中的不平衡，还需要继续向上调整。平衡二叉树的插入和删除算法是在二叉搜索树算法的基础上修改而成的，是比较复杂的，有关这方面的内容超出了教学要求，故本节不做介绍。

\section*{习 题 6}

【习题 6-1】运算题。

1. 已知一组元素为$(46,25,78,62,12,37,70,29)$，画出按元素排列顺序输入生成的一棵二叉搜索树，再以广义表形式给出该二叉搜索树。

2. 已知一棵二叉搜索树的广义表表示为$28(12(16),49(34(30),72(63)))$，若从中依次删除 72、12、49、28 等 4 个结点，试分别画出每删除一个结点后得到的图形表示的二叉搜索树，并写出对应的广义表表示。

3. 从空堆开始依次向小根堆中插入集合$\{38,64,52,15,73,40,48,55,26,12\}$中的每个元素，试以顺序表的形式给出每插入一个元素后堆的状态。

4. 已知一个堆为$(12,15,40,38,26,52,48,64)$，若从堆中依次删除 4 个元素，请给出每删除一个元素后堆的状态。

5. 有 7 个带权结点，其权值分别为 3、7、8、2、6、10、14，试以它们为叶子结点构造一棵哈夫曼树，给出其广义表表示，并计算带权路径长度 WPL。

6. 在一份电文中共使用 5 种字符，即 a、b、c、d、e，它们的出现频率依次为 4、7、5、2、9，试画出对应的编码哈夫曼树，求每个字符的哈夫曼编码和传送电文的总长度。

7. 一棵二叉树的广义表表示为 A(B,(C(D(G)),C(E,(H),F))，试画出对应的图示二叉树，并在此树上添加先序线索。

8. 一组关键字为$(40,28,16,56,50,32,30,63)$，试依次插入结点生成一棵平衡二叉搜索树，并标明插入时所需平衡的类型。

9. 一组关键字为$(36,75,83,54,12,67,60,40,92,72)$，试依次插入结点分别生成一棵二叉搜索树和二叉平衡树，并分别求查找每个元素的平均查找长度。

【习题 6-2】算法设计题。

1. 设在一棵二叉搜索树的每个结点的数据域中，含有用于排序的 pxm 域和统计相同排序码结点个数的 count 域，当向该树插入一个元素时，若树中已存在与该元素的排序码相同的结点，则就使该结点的 count 域增 1，否则就由该元素生成一个新结点而插入到树中，并使其 count 域置为 1，试按照这种插入要求编写一个算法。

2. 编写一个非递归算法，求出二叉搜索树中的关键字最大的元素。

3. 求一棵二叉搜索树中单分支结点数。

4. 写出在先序线索二叉树上求 p 结点的先序后继结点的算法和利用先序线索进行遍历的算法。

5. 一棵二叉搜索树被存储在具有 ABTList 数据类型（已在第 5 章中定义）的一个对象 BST 中，试编
