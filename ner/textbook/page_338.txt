$\{92317602, 92326875, 92739628, 92343634, 92706816, 92774638, 92381262, 92394220\}$,

通过分析可知，每个关键字从左到右的第$1$、$2$、$3$位和第$6$位取值较集中，不宜作散列地址，剩余的第$4$、$5$、$7$和$8$位取值较分散，可根据实际需要取其中的若干位作为散列地址。若取最后两位作为散列地址，则散列地址的集合为$\{2, 75, 28, 34, 16, 38, 62, 20\}$。

4. 平方取中法

平方取中法是取关键字平方的中间几位作为散列地址的方法，具体取多少位视实际要求而定。一个数的平方值的中间几位和数的每一位都有关。从而可知，由平方取中法得到的散列地址同关键字的每一位都有关，使得散列地址具有较好的分散性。平方取中法适用于关键字中的每一位取值都不够分散或者较分散的位数小于散列地址所需要的位数的情况。

5. 折叠法

折叠法是首先将关键字分割成位数相同的几段（最后一段的位数可少一些），段的位数取决于散列地址的位数，由实际需要而定，然后将它们的叠加和（舍去最高位进位）作为散列地址的方法。例如一个关键字$K=68242324$，散列地址为$3$位，则将此关键字从左到右每$3$位一段进行划分，得到的三段为$682, 423$和$24$，叠加和为$682+423+24=129$，此值就是存储关键字为$68242324$元素的散列地址。折叠法适用于关键字的位数较多，而所需的散列地址的位数又较少，同时关键字中每一位的取值又较集中的情况。

\section*{9.4.3 处理冲突的方法}

处理冲突的方法可分为开放定址法和链接法两类。

\section*{1. 开放定址法}

开放定址法就是从发生冲突的那个单元开始，按照一定的次序，从散列表中查找出一个空闲的存储单元，把发生冲突的待插入元素存入到该单元中的一类处理冲突的方法。在开放定址法中，散列表中的空闲单元（假定下标为$d$）不仅向散列地址为$d$的同义词元素开放，即允许它们使用，而且向发生冲突的其他元素开放，因它们的散列地址不为$d$，所以称为非同义词元素。总之，在开放定址法中，空闲单元既向同义词元素开放，也向发生冲突的非同义词元素开放，此方法的名称也由此而来。在使用开放定址法处理冲突的散列表中，下标为$d$的单元究竟存储的是同义词中的一个元素，还是其他元素，就看谁先占用它。

在使用开放定址法处理冲突的散列表中，查找一个元素的过程是：首先根据给定的关键字$K$，利用与插入时使用的同一散列函数$h(K)$计算出散列地址（假定为下标$d$），然后，用$K$同$d$单元的关键字进行比较，若相等则查找成功，否则按照插入时处理冲突的相同次序，依次用$K$同所查单元的关键字进行比较，直到查找成功或查找到一个空单元（表明查找失败）为止。

在开放定址法中，从发生冲突的散列地址为$d$的单元起进行查找有多种方法，每一种
