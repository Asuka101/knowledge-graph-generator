ffl.write((char*) A, n*b);
delete [] A;          //删除临时数组A
}
        //当文件长度大于初始归并段长度时须进行外排序,首先要对文件建立好
        //两个保存初始归并段的文件 ff2 和 ff3,然后再调用文件归并排序算法
else
{
        //动态分配具有初始归并段长度的数组A
        ElemType* A=new ElemType[BlockSize];
        if(A==NULL) {
                cerr<<"memory allocation failure!"<<endl;
                exit(1);
        }
        //求出文件中的初始归并段的整个数并赋给k
        int k=n/BlockSize;
        //求出最后一个不足长度的归并段的长度并赋给m
        int m=n%BlockSize;
        //依次建立好k个初始归并段,并相间地写入到ff2和ff3中
        for(int i=0; i<k; i++)
        {
                ffl.read((char*) A, BlockSize*b);
                InsertSort(A,BlockSize);           //对数组A排序
                if(i%2==0) ff2.write((char*) A, BlockSize*b);
                else ff3.write((char*) A, BlockSize*b);
        }
        //建立好最后一个不足BlockSize长度的归并段
        if(m>0) {
                ffl.read((char*) A, m*b);
                InsertSort(A,m);
                if(k%2==0) ff2.write((char*) A, m*b);
                else ff3.write((char*) A, m*b);
        }
        delete [] A;                      //删除动态数组A
        //对文件ff2和ff3进行外归并排序,ff2中初始归并段的个数或者与
        //ff3中的个数相等,或者多一个,可能存在著一个末尾归并段较短
        FMergeSort(ff2,ff3,BlockSize);
        //求出只含有一个归并段的文件ff2中的记录个数并赋给n2
        ff2.seekg(0,ios::end);
        int n2=ff2.tellg()/b;
        //关闭并重新打开ff1文件并置为空
        ffl.close();
        ffl.open(f1,ios::in|ios::out|ios::trunc|ios::binary);
        //把ff2和ff3中的各个归并段归并到ff1中,此时ff3可能为空
        FTwoMerge(ff2,ff3,ff1,0,n2,0,n-n2);
        //关闭辅助文件ff2和ff3,从磁盘上删除它们对应的物理文件
