是顺序存储的有序表, 通常假定有序表是按关键字从小到大有序, 即若关键字为数值, 则按数值有序, 若关键字为字符数据, 则按对应的 ASCII 码有序, 若关键字为汉字, 则按汉字区位码有序。二分查找的过程是: 首先取整个有序表$A[0] \sim A[n-1]$的中点元素$A[\text{mid}]$(其中$\text{mid} = (n-1)/2$) 的关键字同给定值$K$比较, 若相等, 则查找成功, 返回该元素的下标 mid, 否则, 若$K < A[\text{mid}].\text{key}$, 则说明待查元素 (即关键字等于$K$的元素) 只可能落在左子表$A[0] \sim A[\text{mid}-1]$中, 接着只要在左子表中继续进行二分查找即可; 若$K > A[\text{mid}].\text{key}$, 则说明待查元素只可能落在右子表$A[\text{mid}+1] \sim A[n-1]$中, 接着只要在右子表中继续进行二分查找即可; 这样, 经过一次关键字的比较, 就缩小一半查找空间, 如此进行下去, 直到找到关键字为$K$的元素, 或者当前查找区间为空 (即表明查找失败) 时止。

二分查找的过程是递归的, 其递归的算法描述如下。

int Binsch(ElemType A[], int low, int high, KeyType K)
//在$A[\text{low}] \sim A[\text{high}]$区间内二分递归查找关键字为$K$的元素
//low 和 high 的初值应分别为 0 和 n-1

{
    if(low<=high) {
        int mid=(low+high)/2; //求出待查区间内中点元素的下标
        if(K==A[mid].key) //查找成功返回元素的下标
            return mid;
        else if(K<A[mid].key) //在左子表上继续查找
            return Binsch(A,low,mid-1,K);
        else //在右子表上继续查找
            return Binsch(A,mid+1,high,K);
    }
    else return -1; //查找区间为空,查找失败返回-1
}

二分查找的递归算法也属于末尾递归的调用, 很容易把它改写成不使用栈的非递归算法, 其算法描述如下。

int Binsch(ElemType A[], int n, KeyType K)
//在$A[0] \sim A[n-1]$区间内二分查找关键字为$K$的元素
{
    int low=0, high=n-1; //给表示待查区间上界和下界的变量赋初值
    while(low<=high) {
        int mid=(low+high)/2; //求出待查区间内中点元素的下标
        if(K==A[mid].key) //查找成功返回元素的下标
            return mid;
        else if(K<A[mid].key) //修改区间上界,使之在左子表上继续查找
            high=mid-1;
        else low=mid+1; //修改区间下界,使之在右子表上继续查找
    }
    return -1; //查找区间为空,返回-1 表示查找失败
}

若有序表 A 中 10 个元素（即$n=10$）的关键字序列为:
