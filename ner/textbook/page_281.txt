```cpp
            cout<<'('<<GE[i].fromvex<<','<<GE[i].endvex<<')'<<',';
        else
            //对有向无权图的处理
            cout<<'<''<GE[i].fromvex<<','<<GE[i].endvex<<'>'<<',';
    }
    else {
        if(x1==0) {  //对无向有权图的处理
            cout<<'('<<GE[i].fromvex<<','<<GE[i].endvex;
            cout<<')'<<GE[i].weight<<',';
        }
        else {
            //对有向有权图的处理
            cout<<'<''<GE[i].fromvex<<','<<GE[i].endvex;
            cout<<'>'<<GE[i].weight<<',';
        }
    }
}
cout<<')'<<endl;  //注意:边集的最后一条边的后面多出一个逗号
}

若一个图中有$e$条边，在边集数组中查找一条边或一个顶点的度都需要扫描整个数组，所以其时间复杂度为$O(e)$。边集数组适合那些对边依次进行处理的运算，不适合对顶点的运算和对任一条边的运算。边集数组表示的空间复杂度为$O(e)$。从空间复杂度上讲，边集数组也适合表示稀疏图。

图的邻接矩阵、邻接表和边集数组表示各有利弊，具体应用时，要根据图的稠密和稀疏程度以及算法的要求进行选择。

\section*{7.3 图的遍历}

图的遍历就是从指定的某个顶点（称此为初始点）出发，按照一定的搜索方法对图中的所有顶点都做一次访问的过程。图的遍历比树的遍历要复杂，因为从树根到达树中的每个结点只有一条路径，而从图的初始点到达图中的每个顶点可能存在着多条路径。当顺着图中的一条路径访问过某一个顶点后，可能还会顺着另一条路径回到该顶点。为了避免重复访问图中的同一个顶点，必须记住每个顶点是否被访问过，为此可设置一个辅助数组 visited[n]，它的每个元素的初值均为逻辑值假，即常量 0，表明未被访问过，一旦访问了顶点$v_i$，就把对应元素 visited[i]置为逻辑值真，即常量 1，表明$v_i$已被访问过。

根据搜索方法的不同，图的遍历有两种：深度优先搜索遍历和广度优先搜索遍历。

\subsection*{7.3.1 深度优先搜索遍历}

深度优先搜索（depth-first search）遍历类似于对树的先根遍历，它是一个递归过程，可叙述为：首先访问一个顶点$v_i$（一开始为初始点），并将其标记为已访问过，然后从$v_i$的任一个未被访问过的邻接点（有向图的入边邻接点除外，下同）出发进行深度优先搜索
```
