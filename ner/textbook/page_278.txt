顶点入边或入边邻接点的运算, 可以为此专门建立一个逆邻接表(Contrary Adjacency List),该表中每个顶点的单链表不是存储该顶点的所有出边的信息, 而是存储所有入边的信息,邻接域存储的是入边邻接点的序号。如图 7-5 所示是为图 7-5 中的$G_6$建立的逆邻接表,从此表中很容易求出每个顶点的入边、入边上的权、入边邻接点和入度。

![0] -> [2 6 ∧]
1 -> [0 2 ∧]
2 -> [0 3 ∧]
3 -> [0 8 -] -> [1 12 -] -> [2 6 ∧]
4 -> [2 1 -] -> [3 4 ∧]

图 7-7 G6 的逆邻接表

在有向图的邻接表中, 求顶点的出边信息较方便, 在逆邻接表中, 则求顶点的入边信息较方便, 若把它们合起来构成一个十字邻接表 (orthogonal adjacency list), 则求顶点的出边信息和入边信息都将很方便。如图 7-8 所示是为图 7-5 中的$G_6$建立的十字邻接表。

![0] -> [0 1 2 ∧] -> [0 2 3 ∧] -> [0 3 8 ∧]
1 -> [1 3 12 ∧]
2 -> [2 0 6 ∧] -> [2 3 6 ∧] -> [2 4 1 ∧]
3 -> [3 4 4 ∧]
4 -> []

图 7-8 G6 的十字邻接表

在十字邻接表中, 每个边结点对应图中的一条有向边, 它包含 5 个域: 边的起点域、终点域、边上的权域、入边链域和出边链域。其中, 入边链域用于指向同一个顶点的下一条入边结点, 通过它把入边链接起来; 出边链域用于指向同一个顶点的下一条出边结点,通过它把出边链接起来。表头向量中的每个分量包括两个域: 入边表的表头指针域和出边表的表头指针域。

在图的邻接表、逆邻接表或十字邻接表示中, 表头向量需要占用$n$个或$2n$个指针存储空间, 所有边结点需要占用$2e$(对于无向图) 或$e$(对于有向图) 个边结点空间, 所以其空间复杂度为$O(n+e)$。这种存储结构用于表示稀疏图比较节省存储空间, 因为只需要很少的边结点, 若用于表示稠密图, 则将占用较多的存储空间, 同时也将增加在每个顶点邻接表中查找结点的时间。

图的邻接表表示和图的邻接矩阵表示, 虽然方法不同, 但也存在着对应的关系。邻接
