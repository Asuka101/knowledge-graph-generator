序表的长度为$len$(但最后一个表的长度可能小于$len$)，进行两两归并后的结果存于数组 R[n]中。进行一趟归并排序时，对于 A 中可能除最后一个（当 A 中有序表个数为奇数时）或两个（当 A 中有序表个数为偶数，但最后一个表的长度小于$len$时）有序表，共剩有偶数个长度为$len$的有序表，由前到后对每两个假定从下标 p 单元开始的有序表调用。

TwoMerge(A,R,p,p+len-1,p+2*len-1)过程即可完成归并；对可能剩下的最后两个有序表(后一个长度小于$len$, 否则不会剩下)，假定是从下标 p 单元开始的，则调用 TwoMerge(A, R,p,p+len-1,n-1)过程即可完成归并；对可能剩下的最后一个有序表（其长度小于等于$len$），则把它直接复制到 R 中对应区间。至此，一趟归并完成。

进行一趟二路归并的算法描述如下。

void MergePass(ElemType A[], ElemType R[], int n, int len)

{
    //把数组 A[n]中每个长度为 len 的有序表两两归并到数组 R[n]中
    int p=0;                          //p 为每一对待合并表的第一个元素的下标,初值为 0
    while(p+2*len-1<=n-1) {           //两两归并长度均为 len 的有序表
        TwoMerge(A,R,p,p+len-1,p+2*len-1);
        p+=2*len;
    }
    if(p+len-1<n-1)                   //归并最后两个长度不等的有序表
        TwoMerge(A,R,p,p+len-1,n-1);
    else
        for(int i=p; i<=n-1; i++)
            R[i]=A[i];                //把剩下的最后一个有序表复制到 R 中
}

二路归并排序的过程需要进行$\left\lceil\log _{2} n\right\rceil$趟，第 1 趟$len$等于 1，以后每进行一趟将$len$加倍。设待排序的$n$个记录保存在数组 A[n]中，并在过程中使用的辅助数组为 R[n]，第 1 趟由 A 归并到 R，第 2 趟由 R 归并到 A；如此反复进行，直到$n$个记录成为一个有序表为止。

在归并过程中，为了将最后的排序结果仍置于数组 A 中，需要进行的趟数为偶数，如果实际只需奇数趟（即$\left\lceil\log _{2} n\right\rceil$为奇数）完成，那么最后还要进行一趟，正好此时 R 中的$n$个有序元素为一个长度不大于$len$（此时$len \geqslant n$）的表，将会被直接复制到 A 中。

二路归并排序的算法描述如下。

void MergeSort(ElemType A[], int n)
{
    //采用归并排序的方法对数组 A 中的 n 个记录进行排序
    ElemType* R=new ElemType[n];      //定义长度为 n 的辅助数组 R
    int len=1;                        //从有序表长度为 1 开始
    while(len<n) {
        //从 A 归并到 R 中,得到每个有序表的长度为 2*len
        MergePass(A,R,n,len);
        //修改 len 的值为 R 中的每个有序表的长度
        len*=2;
        //从 R 归并到 A 中,得到每个有序表的长度为 2*len
        MergePass(R,A,n,len);
        //修改 len 的值为 A 中的每个有序表的长度
    }
}
