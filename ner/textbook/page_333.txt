和移动，与其他任何子表无关，不像顺序表那样需涉及到整个表中的所有元素，即牵一发而动全身。

在数据表的索引存储结构上进行插入和删除运算的算法，也同查找算法类似，其过程为：首先根据待插入或删除元素的某个域（子表就是按照此域的值划分的）的值查找索引表，确定出对应的子表，然后再根据待插入或删除元素的关键字，在该子表中做插入或删除元素的操作。由于每个子表不是顺序存储，就是链接存储，所以对它们做插入或删除操作都是很简单的。

*9.3.3 分块查找

分块查找 (blocking search) 属于索引查找。它要求主表中每个子表（子表又称为块）之间是递增（或递减）有序的，即前块中的最大关键字必须小于后块中的最小关键字，或者说后块中的最小关键字必须大于前块中的最大关键字，但每个块中元素的排列次序可以是任意的；它还要求索引表中每个索引项的索引值域用来存储对应块中的最大关键字。由分块查找对主表和索引表的要求可知：索引表是按索引值递增（或递减）有序的，即索引表是一个有序表；主表中的关键字域和索引表中的索引值域具有相同的数据类型，即为关键字所属的类型。

如图 9-4 所示是一个分块查找的示例，主表被划分为 3 块，每块都占有 5 个记录位置，第 1 块中含有 4 个记录，第 2 块中含有 5 个记录，第 3 块中含有 3 个记录。第 1 块中的最大关键字为 34，它小于第 2 块中的最小关键字 36，第 2 块中的最大关键字为 72，它小于第 3 块中的最小关键字 86，所以，主表中块与块之间是递增有序的。从图中的索引表可以看出：每个索引项中的索引值域保存着对应块中的最大关键字，索引表是按照索引值递增有序的。

\begin{tabular}{c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 \\
\hline \multirow{2}{*}{ 索引表 } & \multicolumn{15}{|c|}{ index } \\
\cline { 2 - 16 } & 34 & 72 & 98 & & & & & & & & & & & & \\
\hline start & 0 & 5 & 10 & & & & & & & & & & & & \\
\hline length & 4 & 5 & 3 & & & & & & & & & & & & \\
\hline
\end{tabular}

图 9-4 用于分块查找的主表和索引表的示例

当进行分块查找时，应根据所给的关键字首先查找索引表，从中找出大于等于所给关键字的那个索引项，从而找到待查块，然后再查找这个块，从中找到待查的记录（若存在的话）。由于索引表是有序的，所以在索引表上既可以采用顺序查找，也可以采用二分查找，而每个块中的记录排列是任意的，所以在块内只能采用顺序查找。

如根据图 9-4 查找关键字为 40 的记录时，假定采用顺序的方法查找索引表，首先用 40 同第 1 项索引值 34 比较，因$40 > 34$，则接着同第 2 项索引值 72 比较，因$40 < 72$，所以查找索引表结束，转而顺序查找主表中从下标 5 开始的块，因关键字为 40 的记录位于该块
