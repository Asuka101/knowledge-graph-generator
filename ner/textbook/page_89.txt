可以看出，该单链表中各数据元素之间的逻辑顺序如下。$44, 50, 57, 62, 68, 75, 83, 94$由数组建立一个单链表时，通常将所有空闲元素链接起来构成一个空闲单链表，空闲单链表的表头指针也需要用一个元素结点的指针域保存起来，假定使用1号（即下标为1）的指针域。在这种数组中链接存储的线性表的长度至多为MaxSize-2，因为0号和1号元素均被表头指针所占有。当对整个数组进行初始化时，不仅置单链表为空，即把0赋给0号元素的指针域，而且将全部MaxSize-2个空闲结点链接起来构成空闲单链表，同时把它的表头指针（即2）赋给1号元素的指针域。对数组进行初始化后的情况，如图2-9所示。

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|}
\hline data & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & MaxSize-1 \\
\hline next & 0 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 0 \\
\hline
\end{tabular}

图2-9 空闲单链表

向数组中的单链表插入一个新元素时，首先从空闲表中取出（即删除）表头结点作为保存新元素的结点使用，然后再把该结点按条件插入到单链表中；当从数组中的单链表删除一个元素结点时，首先从单链表中取出这个结点，然后再把该结点插入到空闲单链表的表头。

数组中的元素单链表和空闲单链表的结点总数，在任何时候都等于MaxSize-2，当空闲单链表为空时，则元素单链表为满，此时无法再向它插入新结点。

例如，在下面的数组中，链接存储的线性表为(35,68,57,26,70)，空闲单链表中依次包含有3,5,8号元素结点，MaxSize=10，如图2-10所示。

\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|}
\hline data & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 \\
\hline next & 4 & 3 & 6 & 5 & 2 & 8 & 9 & 0 & 0 \\
\hline
\end{tabular}

图2-10 元素和空闲单链表

5. 双向链表中的结点类型和插入与删除操作

对于双向链表也可进行以上对单链表那样的讨论，若双向链表采用独立结点构成，则结点类型定义为:

struct DNode {
    ElemType data;
    DNode* left;
    DNode* right;
};

若双向链表采用数组中的元素结点构成，则结点类型应定义为:

struct ADNode {
    ElemType data;
    int left;
    int right;
};
