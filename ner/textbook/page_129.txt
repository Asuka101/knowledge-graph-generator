表和列单链表的交点处。

在十字链接存储中，每个结点的类型可定义如下。

struct CrossNode {
    int row, col;
    ElemType val;
    CrossNode *down, *right;
};

其中 row、col 和 val 域分别用来存储非零元素的行号、列号和元素值，down 域用来存储指向同一列下一个结点的指针，right 域用来存储指向同一行下一个结点的指针，当然若不存在下一个结点，则相应的指针域为空值。

在稀疏矩阵的十字链接存储中，需要使用两个指针向量，一个是行指针向量，用来存储行单链表的表头指针，另一个是列指针向量，用来存储列单链表的表头指针。稀疏矩阵的十字链接存储类型定义如下。

struct C1Matrix {
    int m, n, t;
    CrossNode* rv[MaxRows+1];
    CrossNode* cv[MaxColumns+1];
};

其中，全局常量 MaxRows 用来规定行指针向量的大小，全局常量 MaxColumns 用来规定列指针向量的大小，它们应分别大于等于所存稀疏矩阵的行数和列数。同样，在 rv 和 cv 向量中，下标为 0 的元素未用。

利用图 3-3(b) 所示的稀疏矩阵，则得到十字链接存储结构的示意图，如图 3-6 所示。

列向量 1 2 3 4 5 6
行向量
1 [1 1 3] -> [1 4 5]
2 [2 3 -2]
3 [3 1 1] -> [3 3 4] -> [3 5 6]
4 [5 3 -1]

图 3-6 稀疏矩阵的十字链接存储结构
