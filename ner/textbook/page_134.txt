设$col$表示$A$中元素的列号（即对应转置矩阵$B$中元素的行号），$num$和$pot$均表示具有$n$（$n$为$A$中的列数即$B$中的行数）个分量的向量，$num$向量的第$col$分量（即$num[col]$）用来统计第$col$列中的非零元素的个数，$pot$向量的第$col$分量（即$pot[col]$）用来指向第$col$列待转换的非零元素被存储在$S.sm$数组中的下标位置，显然$pot$向量的第$col$分量的初始值（即第$col$列的第一个非零元素被存储在$S.sm$数组中的下标位置）由下式计算。$\begin{aligned}
& pot[1]=1 \\
& pot[col]=pot[col-1]+num[col-1] \quad (2 \leq col \leq n)
\end{aligned}$根据稀疏矩阵$A$和顺序存储对象$M$，得到$num$向量的各分量值和$pot$向量的各分量初始值如表 3-1 所示。

表 3-1 num 和 pot 向量初始值

|       | 1 | 2 | 3 | 4 | 5 | 6 |
|-------|---|---|---|---|---|---|
| col   | 1 | 2 | 3 | 4 | 5 | 6 |
| num[col] | 2 | 0 | 3 | 1 | 1 | 0 |
| pot[col] | 1 | 3 | 3 | 6 | 7 | 8 |

结合图 3-7 进行分析，验证$num$和$pot$数组中各分量值的正确性，$num$数组中的第$i$个分量值等于稀疏矩阵$B$中第$i$行上非零元素的个数，$pot$数组中的第$i$个分量值等于$B$中第$i$行上第一个（即列号最小的）非零元素在$S.sm$数组中的下标位置。

用 C++语言描述稀疏矩阵的快速转置方法的算法如下。

```cpp
SMatrix FastTranspose(SMatrix& M)
{
    SMatrix S; //用 S 暂存转置结果
    InitMatrix(S);
    int m, n, t;
    //用 m,n,t 分别暂存 M 的行数、列数和非零元素的个数
    m=M.m; n=M.n; t=M.t;
    //分别置 S 的行数域、列数域和非零元素的个数域为 n,m 和 t
    S.m=n; S.n=m; S.t=t;
    //若是零矩阵(即非零元素的个数为 0 的矩阵)则转换完毕返回
    if(t==0) return S;
    //为 num 和 pot 向量动态分配存储空间
    int* num=new int[n+1];
    int* pot=new int[n+1];
    //对 num 向量进行初始化, 置每个分量为 0
    int col,i;
    for(col=1; col<=n; col++) num[col]=0;
    //对第 1 遍扫描数组 M.sm, 统计出每一列(即转换后的每一行)非零元素的个数
    for(i=1; i<=t; i++) {
        int j=M.sm[i].col;
        num[j]++;
    }
    //计算每一列(即转换后的每一行)的第 1 个非零元素在 S.sm 中存储位置
}
```
