4.7.3 队列的顺序存储结构和操作实现

队列的顺序存储结构需要使用一个数组和 2~3 个整型变量来实现, 利用数组来顺序存储队列中的所有元素, 利用一个整型变量存储队首元素的位置 (通常存储队首元素的前一个位置), 利用另一个整型变量存储队尾元素的位置, 利用第三个整型变量 (若使用的话) 存储队列的长度, 即队列中当前已有的元素个数。把指向队首元素前一个位置的变量称为队首指针, 由它加 1 就得到队首元素的下标位置, 把指向队尾元素位置的变量称为队尾指针, 由它可直接得到队尾元素的下标位置。若存储队列的数组用 queue[MaxSize]表示, 队首指针和队尾指针分别用 front 和 rear 表示, 存储队列长度的变量用 len 表示, 则元素类型为 ElemType 的队列的顺序存储结构可通过下列一组定义来描述。

ElemType queue[MaxSize]; //MaxSize 为已定义的常量
int front, rear, len;

其中, MaxSize 的值确定了 queue 数组所能存储队列的最大长度。

队列的顺序存储结构同样可以被定义在一个结构类型中, 假定该结构类型用 Queue 表示, 则定义为:

struct Queue {
    ElemType queue[MaxSize];
    int front, rear, len;
};

若要对存储队列的数组空间采用动态分配, 则定义为:

struct Queue {
    ElemType *queue; //指向存储队列的数组空间
    int front, rear, len; //队首指针、队尾指针、队列长度变量
    int MaxSize; //queue 数组长度
};

每次向队列插入一个元素, 需要首先使队尾指针后移一个位置, 然后再向这个位置写入新元素。当队尾指针指向数组空间的最后一个位置 MaxSize-1 时, 若队首元素的前面仍存在空闲的位置, 则表明队列未占满整个数组空间, 下一个存储位置应是下标为 0 的空闲位置, 因此, 首先要使队尾指针指向下标为 0 的位置, 然后再向该位置写入新元素。通过赋值表达式$rear=(rear+1)\%MaxSize$可使存储队列的整个数组空间变为首尾相接的一个环, 所以顺序存储的队列又称为循环队列。在循环队列中, 其存储空间是首尾循环利用的, 当 rear 指向最后一个存储位置时, 下一个所求的位置自动为数组空间的开始位置 (即下标为 0 的位置)。

每次从队列中删除一个元素时, 若队列非空, 则首先把队首指针后移, 使之指向队首元素, 然后再返回该元素的值。使队首指针后移也必须采用取模运算, 该计算表达式为$front=(front+1)\%MaxSize$, 这样才能够实现存储空间的首尾相接。
