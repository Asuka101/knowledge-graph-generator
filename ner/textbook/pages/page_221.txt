void LayerOrder (GTreeNode* GT)
    //按层遍历由 GT 指针所指向的 k 叉树
{
    Queue q;                           //定义一个队列 q, 其元素类型应为 GTreeNode*
    InitQueue(q);                     //初始化队列 q
    GTreeNode*p;
    if(GT!=NULL) EnQueue(q,GT);       //非空的树根指针进队
    while (!EmptyQueue(q)) {          //当队列非空时执行循环
        p=OutQueue(q);                //从队列中删除一个结点指针
        cout<<p->data<<' ';
        for(int i=0; i<k; i++)
            if(p->t[i]!=NULL)
                EnQueue(q,p->t[i]);
    }
}

3. 从树中查找结点值

此算法要求: 当从树中查找值为 item 的结点时, 若存在该结点则由 item 带回它的完整值并返回 true, 否则返回 false 表示查找失败。此算法类似树的先根遍历算法, 它首先访问根结点, 若相等则带回结点值并返回真, 否则依次查找每个子树。具体算法描述如下。

bool FindGTree (GTreeNode* GT, ElemType& item)
{
    if(GT==NULL) return false;         //树空返回假
    else {
        if(GT->data==item) {
            item=GT->data; return true;
        }
        for(int i=0; i<k; i++)
            if(FindGTree(GT->t[i],item)) return true;
        return false;                  //查找不成功返回假
    }
}

4. 树的输出

要求输出为树的广义表形式。此算法同样类似于树的先根遍历算法, 它首先输出树根结点的值, 然后若存在非空子树则接着输出表的左括号及输出第一棵子树, 再依次输出每个逗号和每棵子树, 最后输出表的右括号。该算法描述如下。

void PrintGTree(GTreeNode* GT)
    //以广义表形式输出按标准方式存储的 k 叉树
{
    if (GT!=NULL) {
        cout<<GT->data<<' ';           //输出根结点的值
}
