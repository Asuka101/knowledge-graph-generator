```cpp
//给作为累加变量的 sum 赋初值为 0
double sum=0;
//累加计算多项式的值
for(int i=0; i<P.size; i++) {
    int y=P.list[i].exp;                      //把一个新项的 x 的指数赋给 y
    sum+=P.list[i].coef*pow(x,y);             //把新项的值累加到 sum 中
}
//返回所求结果
return sum;
}

在函数中使用的 pow(x,y)是求$x$的$y$次幂的函数, 该函数定义在 math.h 头文件中。利用链接存储结构存储这种线性表的多项式求值的算法如下。

double PolySum2(LNode* P, double x)
{
    LNode *t=P;
    double sum=0;
    while(t!=NULL) {
        int y=t->data.exp;
        sum+=t->data.coef*pow(x,y);
        t=t->next;
    }
    return sum;
}

用下面程序来调用求顺序存储的多项式值的算法。由于把结构类型 Term 作为线性表中的元素类型 ElemType 使用, 所以在整个程序中必须包含相应的运算符重载函数的定义,使得元素之间的小于、等于、插入等运算是有效的。当然不通过运算符重载也是可行的,则需要修改相应操作的算法, 使之进行比较的是元素的某个域的值 (如 exp 域的值), 而不是整个元素值, 依次输出元素的每个域的值, 而不是整个结构元素的值。

#include<iostream.h>
#include<stdlib.h>
#include<math.h>
struct Term {
    double coef;                   //系数
    int exp;                       //指数
};
typedef Term ElemType;
struct List {
    ElemType *list;                //存线性表元素的动态存储空间的指针
    int size;                      //存线性表长度
    int MaxSize;                   //规定 list 数组的长度
};
```
