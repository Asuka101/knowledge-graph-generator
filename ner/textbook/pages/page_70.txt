int size;
};

若要对存储线性表的数组空间采用动态分配，并且其数组长度能够按需要增加，则可以定义出如下的 List 类型:

struct List {
    ElemType *list;                 //存线性表元素的动态存储空间的指针
    int size;                       //存线性表长度
    int MaxSize;                    //规定 list 数组的长度
};

当初始化此类型的一个线性表时，要使 list 指针指向大小为 MaxSize 的动态数组空间。

\subsection*{2.2.2 顺序存储下的线性表操作的实现}

在顺序存储方式下，在线性表抽象数据类型中所列出的每一个操作的具体实现如下。

\section*{1. 初始化线性表}

初始化线性表需要完成动态存储空间的初始分配，并且把线性表置为空。

void InitList(List &L)
{
    //初始定义数组长度为 10, 以后可增减, 或者附加一个形参给定初始数组长度
    L.MaxSize=10;
    //动态存储空间分配
    L.list=new ElemType[L.MaxSize];
    if(L.list==NULL) {
        cout<<"动态可分配的存储空间用完, 退出运行!"<<endl;
        exit(1);
    }
    //置线性表长度为 0, 即为空表
    L.size=0;
}

此算法中的 if 语句用于判断动态分配是否成功，若成功 L.list 指针非空，若分配失败，即系统中没有存储空间可供动态分配，则 L.list 指针值为空。当分配失败时通过执行此语句退出程序运行。现在计算机系统中，操作系统功能强大，内存和外存空间都能够用于动态存储分配，所以通常不会出现动态存储分配失败的情况。所以，在编程时通常省略对动态存储分配失败情况的处理语句。在此情况下，若出现动态存储分配失败，系统会自动停止运行程序。

\section*{2. 删除线性表中的所有元素，使之成为一个空表}

此操作需要释放动态存储空间，并且把线性表的长度置 0。
