TTreeNode* InorderNext (TTreeNode*p) //返回 p 结点的中继后继结点
{
    if(p->rtag==true)
        return p->right;
    else {
        p=p->right;
        while(p->ltag==false) p=p->left;
        return p;
    }
}

有了求中序后继结点的算法，就不难写出在中序线索二叉树上进行中序遍历的算法。此算法可叙述为：首先从根结点起沿左指针链往下查找，直到找到一个左线索标志域为真的结点为止，该结点的左指针域必为空，它就是整个中序序列的第一个结点；然后打印该结点，接着利用上述求中序后继结点的算法得到下一个结点，以此类推，直到中序后继结点为空时止。

设 HBT 为具有 TTreeNode*指针类型的一个值参，初始指向一棵中序线索二叉树的根结点，则对此树进行中序遍历的算法可描述如下。

void ThInorder (TTreeNode*HBT) //按中序线索遍历二叉树 HBT
{
    if(HBT!=NULL) {
        while(HBT->ltag==false)
            HBT=HBT->left; //查找出中序遍历中的第一个结点
        do {
            cout<<HBT->data<<' '; //输出结点的值
            HBT=InorderNext(HBT); //查找出 HBT 结点的中序后继结点
        } while(HBT!=NULL); //当 HT 为空时算法结束
    }
}

利用线索进行二叉树遍历的时间复杂度为$O(n)$，空间复杂度为$O(1)$。实际运行时间要少于不加线索的情况。

以广义表形式输出一棵线索二叉树的算法如下。

void PrintTTreel (TTreeNode*HBT)
{
    if(HBT!=NULL) {
        cout<<HBT->data; //输出根结点的值
        if(HBT->ltag==false || HBT->rtag==false) {
            cout<<'('; //输出左括号
            if(HBT->ltag==false)
                PrintTTreel(HBT->left); //输出左子树
            if(HBT->rtag==false) {
                cout<<','; //若右子树不为空则首先输出逗号分隔符
                PrintTTreel(HBT->right); //输出右子树
