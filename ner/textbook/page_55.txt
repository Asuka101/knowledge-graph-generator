```cpp
pupil& find(char* k, pupil b[], int n)
{
    for(int i=0;i<n;i++)
        if(strcmp(b[i].pnum,k)==0) return b[i];
    cerr<<k<<" not found!"<<endl;
    exit(1);
}

该程序运行结果如下。

010203 78
010204 92
020101 85
020301 63
040502 87
请输入你的选择$(1,2,3)$?1
010203 78
010204 92
020101 98
020301 63
040502 87

一个C++语言函数可以不带任何参数，此时函数名后的圆括号内为空，或使用void关键字表示；也可以带有一个或多个参数，它们被依次列到函数名后的圆括号内。函数中所带的每一个参数可分为值参数和引用参数两种方式，当在说明一个形参的类型说明符后带有引用说明符“&”时，则该形参被说明为引用参数，不带有引用说明符“&”时则被说明为值参数。对于函数中的值参数，它可以被说明为任何一种类型，包括任一种简单类型、任一种结构类型，还可以为一种函数类型，而对于引用参数，则可以被说明为除了数组类型和函数类型之外的任何类型。

函数中的值参数从调用该函数的实际参数中得到相应的值，值参数具有自己的存储空间，其内容的改变不会影响到对应的实际参数；引用参数从调用该函数的实际变量参数中得到其存储位置，这样引用参数和实际变量参数具有同一存储位置用于存储其内容，在函数执行过程中对引用参数的读写操作实际上就是对相应实参变量的读写操作，所以说对引用参数的改变将反映给对应的实参变量。

注意：当值参数为一个指针变量时，虽然对指针变量的值的改变不会影响对应的实参变量，但对指针变量所指存储位置中的内容的修改将影响到实参变量所指存储位置中的内容，因为形参指针变量和实参指针变量所指向的存储位置相同。例如，对于数组就是采用按值传送的，即传送实参的数组名的值（它是数组存储空间的首地址）给形参的数组名，这样对形参数组中元素的访问就是对实参数组中对应元素的访问。

程序1-15中的主函数依次调用了3个函数，其中fun1函数中的参数均为int型值参数，fun2函数中的参数均为int型引用参数，fun3函数中的参数均为int指针型值参数。根据程序和运行结果进行分析，从中体会参数的不同传送方式的作用。
```
