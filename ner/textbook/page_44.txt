把$src$所指字符串复制到$dest$指针所指的存储空间中，该函数返回$dest$指针。

(3) 串连接。

char* strcat (char* dest, const char* src);

把$src$所指字符串复制到$dest$所指字符串后面的存储空间中，连接后$dest$所指串的长度等于$dest$串原有长度与$src$串长度之和，该函数返回$dest$指针。注意，在$dest$所指字符串的后面要有足够的存储空间用于存储待连接的字符串。

(4) 串比较。

int strcmp(const char* s1, const char* s2);

把$s1$所指字符串同$s2$所指字符串比较，若$s1$串大于$s2$串则返回值大于 0 (通常为 1)，若$s1$串小于$s2$串则返回值小于 0 (通常为 -1)；若$s1$串等于$s2$串则返回值等于 0。

(5) 串定位。

char* strchr(const char* s, int c);

从$s$所指字符串的开始顺序查找 ASCII 码为$c$值的字符（也可以把一个字符传递给参数$c$，实际上是传递该字符的 ASCII 码），若查找成功则返回指向该字符的指针，否则返回 NULL。

(6) 串右定位。

char* strrchr(const char* s, int c);

它与串定位函数功能相似，唯一区别是它从$s$串的最后顺序向前查找。

(7) 查找子串。

char* strstr(const char* s1, const char* s2);

从$s1$串中开始位置起顺序查找$s2$串的第 1 次出现，若查找成功则返回$s1$串中指向该子串开始位置的指针，否则返回 NULL。

下面是使用字符串函数的实例。

//程序 1-9.cpp
#include<iostream.h>
#include<string.h>
void main()
{
    char a[20], *str1="hello", *str2="wang", *str3;
    strcpy(a, str1);
    strcat(a, " "); //在a串最后添加一个空格字符
    strcat(a,str2);
    cout<<(strlen(str1)<" "<strlen(a)<endl;
    cout<<(strcmp(a, str1)<" "<strcmp(a+6, str2)
          <" "<strcmp(str1,str2)<endl;
    str3=strchr(str1, 'l');
}
