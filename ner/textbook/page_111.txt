第 3 章 集合、稀疏矩阵和广义表

\section*{3.1 集合的定义和抽象数据类型}

\subsection*{3.1.1 集合定义}

集合 (set) 又称集合结构，由具有相同属性的数据元素组合而成，数据之间没有任何前驱和后继关系。集合中数据元素的个数称为集合的长度，假定用$n$表示，$n \geqslant 0$。当$n=0$时则为空集。若集合为空，则表示为$\{\}$，若非空则表示为：$\left\{a_{1}, a_{2}, \cdots, a_{i}, a_{i+1}, \cdots, a_{n}\right\}$其中每个元素的下标为对该元素的编号，它是为了区别而任意标注的，不代表任何次序。因为集合中的元素可以按任何次序排列，假定按元素前后位置编号的次序排列，那么$a_{1}$就是集合中第 1 个元素，$a_{2}$就是第 2 个元素，$a_{i}$就是第$i$个元素，$a_{n}$就是第$n$个（最后一个）元素。

像线性表一样，集合的长度是变化的，当向它插入一个元素后其长度就增加 1，当从中删除一个元素后其长度就减少 1。

集合中的元素类型可以为任何一种类型，用标识符 ElemType 表示。若实际的元素类型为某一具体类型，如整型，则可以通过 typedef 语句指定为 ElemType 类型。

\subsection*{3.1.2 集合的抽象数据类型}

集合的抽象数据类型同样包括数据和操作两个部分。数据部分为一个集合，假定用标识符 S 表示。操作部分包括对集合进行的各种常用运算，如初始化集合为空、清除集合中的所有元素、求集合中元素个数、判断集合是否为空、判断一个元素是否属于集合、输出集合中所有元素、从集合中查找一个元素、从集合删除一个元素、向集合插入一个元素、修改集合中的一个指定元素、求两个集合的并集、求两个集合的交集、求两个集合的差集等。

集合的抽象数据类型定义如下。

ADT SET is

Data:

一个集合 S，假定用标识符 SetT 表示抽象存储类型

Operation:

void InitSet(SetT& S); // 初始化集合为空

void ClearSet(SetT& S); // 清除集合中的所有元素

int LengthSet(SetT& S); // 求出集合的长度
