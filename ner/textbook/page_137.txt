```cpp
k++;
} //end of while
//若p2不为空,则把剩余结点复制链接到结果矩阵中
while(p2!=NULL) {
    TripleNode* newptr=new TripleNode;
    *newptr=*p2;
    newptr->next=NULL;
    if(p==NULL) M.vector[i]=newptr;
    else p->next=newptr;
    p=newptr;
    p2=p2->next;
    k++;
}
//end of while
} //end of for
M.t=k;        //置和矩阵中结点数
return M;     //返回和矩阵
}

在这个算法中，需要扫描 M1 和 M2 中的每一个结点，并建立新结点和把它链接到结果矩阵中相应行单链表的表尾，因为对每个结点的处理均为时间常量，其时间复杂度为$O(1)$，所以整个算法的时间复杂度为$O(M1.t+M2.t)$，即与两个加数矩阵中结点数（即非零元素个数）之和成正比。当稀疏矩阵相当稀疏时，即非零元素的个数 t 远远小于行列数的乘积 m×n 时，该算法的时间复杂度比采用二维数组表示时进行矩阵求和的时间复杂度$O(m \times n)$要小得多。

\section*{3.5 广义表}

\subsection*{3.5.1 广义表的定义}

广义表 (generalized list) 简称表，它是线性表的推广。一个广义表是$n(n \geqslant 0)$个元素的一个有限序列，当$n=0$时则称为空表。在一个非空的广义表中，其元素可以是某一确定类型的对象，这种元素被称为单元素；也可以是由单元素构成的表，这种元素被称为子表（或表元素）。显然，广义表的定义是递归的，广义表是一种递归的数据结构。

设$a_i$为广义表的第$i$个元素，则广义表的一般表示与线性表相同，具体如下。
\[
(a_1, a_2, \cdots, a_i, a_{i+1}, \cdots, a_n)
\]
其中，$n$表示广义表的长度，即广义表中所含元素的个数，$n \geqslant 0$。

同线性表一样，也可以用一个标识符来命名一个广义表，如用 LS 命名上面的广义表，则为：
\[
\text{LS}=(a_1, a_2, \cdots, a_i, a_{i+1}, \cdots, a_n)
\]

在广义表的讨论中，为了把单元素同表元素区别开来，一般用小写字母表示单元素，用大写字母表示表，如：
```
