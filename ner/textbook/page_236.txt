BTreeNode* p1=BST,*p2=BST->left;
while(p2->right!=NULL) {p1=p2; p2=p2->right;}
BST->data=p2->data;
return Delete(p1->right, p2->data);

}

二叉搜索树的查找、插入、删除元素的运算都具有相同的时间复杂度，都与具体二叉搜索树的深度成正比，时间复杂度的平均情况为$O(\log n)$，最差情况为$O(n)$；它们的空间复杂度，对于递归算法来说，平均情况为$O(\log n)$，最差情况为$O(n)$，对于非递归算法来说均为$O(1)$。

可以采用下面程序调试对二叉搜索树各种运算的算法。

#include<iostream.h>
#include<stdlib.h>
//定义二叉搜索树结点值的类型为整型
typedef int ElemType;
//定义二叉搜索树结点类型
struct BTreeNode {
    ElemType data;
    BTreeNode* left;
    BTreeNode* right;
};

#include"二叉树运算.cpp"
#include"二叉搜索树运算.cpp" //保存对二叉搜索树运算的算法

void main()
{
    ElemType x;
    //定义指向二叉搜索树结点的指针，并用它作为树根指针
    BTreeNode* bst;
    //初始化二叉搜索树，即置树根指针bst为空
    InitBTree(bst);
    //定义数组a并初始化
    ElemType a[10]={30,50,20,40,25,70,54,23,80,92};
    //利用数组a建立树根指针为bst的二叉搜索树
    CreateBSTree(bst,a,10);
    //以广义表形式输出二叉搜索树
    PrintBTree(bst); cout<<endl;
    //求出以bst为树根指针的二叉搜索树的深度
    cout<<"深度：" ; cout<<DepthBTree(bst)<<endl;
    //中序遍历以bst为树根指针的二叉搜索树
