cout<<str3-str1<<" "; //输出 str3 指针所对应的下标位置
str3=strchr(str1, '1');
cout<<str3-str1<<endl;
str3=strstr(str2, "an");
cout<<str2<<" "<<str3<<endl;
}

该程序运行后的显示结果如下，请读者结合程序分析其正确性。

5 10
1 0 -1
2 3
wang ang

\section*{1.4 .2 数据类型}

\section*{1. 简单类型}

在 C++语言中，简单类型包括整数类型、字符类型、布尔类型、浮点类型、指针类型、枚举类型和 void 类型。整数类型又分为短整型 (short int 或 short)、整型 (int) 和长整型 (long int 或 long) 3 种，它们分别表示不同范围内的整数。字符类型的表示范围是 ASCII 字符集和汉字区位码字符集（每一个汉字为两个 ASCII 字符，现在国际上统一使用一种编码，叫做 unicode 编码，它对所有国家的字符统一采用双字节编码）。字符类型和每一种整数类型都可以使用前缀关键字 signed 或 unsigned，使之成为相应的有符号或无符号数据类型，默认为 signed 类型。布尔类型也称为逻辑类型，它只有两个值 0 和 1，分别用符号常量 false 和 true 表示，即为逻辑值“假”和“真”。浮点类型包括 float 类型、double 类型和 long double 类型，用它们表示带小数点的数。指针类型用来表示内存中存储单元（字节）的位置（地址），它的基类型可以为任何类型，一个指针类型用一个类型标识符后缀一个星号 (*) 表示。枚举类型是用户自定义类型。void 为一种特殊类型，它不取任何值，通常用它定义不返回值的函数类型，若带上“*”后缀则定义指向任何类型的指针。

字符类型也可以被看作一种整数类型，每个字符的 ASCII 码被看作其中的一个整数值。每一种类型的数据可以根据需要被强制转换为另一种类型的数据，其转换格式为:

(<类型标识符>)<表达式>

或

(<类型标识符>)(<表达式>)

例如，假定 x 和 y 分别为 int 和 float 型，则 int(y) 的值为 int 型，其值为 y 值的整数部分，(char*)&x 的值为字符指针类型，其值为整型对象 x 的地址。

\section*{2. 结构类型}

在 C++语言中，结构类型包括数组、字符串、记录和文件等。
