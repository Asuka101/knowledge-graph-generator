利用一维数组能够保存一个字符串，若要依次保存多个字符串，则需要定义一个二维数组，其中每一行对应的一维字符数组空间用来保存一个字符串。程序清单如下。

//程序 1-10.cpp
#include<iostream.h>
#include<string.h>
void main()
{
    char a[4][20]={"Beijing","Shanghai","Tianjin","Guangzhou"};
    char p[20];
    for(int i=0;i<4;i++)
        cout<<a[i][0]<<endl;
    strcpy(p,&a[0][0]);
    for(i=1;i<4;i++)
        if(strcmp(p,&a[i][0])<0)
            strcpy(p,&a[i][0]);
    cout<<endl<<p<<endl;
}

在该程序的主函数中，第1条语句定义了一个二维数组$a[4][20]$，该数组的行下标范围为$0\sim3$，列下标范围为$0\sim19$，每一行元素$a[i]$（$0\leq i\leq3$）能够存储一个字符串，其字符串的最大长度应小于等于19，该语句同时对数组a进行初始化。第2条语句定义了一个一维字符数组$p[20]$。第3条语句显示出数组a中保存的每个字符串，其中$\&a[i][0]$可以改写为$a[i]$。第4和第5条语句通过顺序比较查找出数组a中值最大的字符串，字符数组p用做在比较过程中保存当前最大值的字符串，其初值为数组a中第1个字符串$a[0]$（即$\&a[0][0]$）。最后一条语句显示出已经在p中保存的最大值。该程序的运行结果如下。
Beijing
Shanghai
Tianjin
Guangzhou

Tianjin

(3) 记录。

记录类型是多个不同数据类型（当然也可以相同）的组合体。记录类型中的每一个值（即具体记录）是记录类型中的一个实例，它由多个不同类型的具休数据所组成。一个记录中的所有数据成员逻辑上是集合结构，即成员之间没有任何次序，但物理存储上是顺序结构，它是按照记录类型定义中各成员定义的顺序存储的。一个记录所占用存储空间的大小等于各成员所占用存储空间的大小之和，此值可以通过sizeof运算符计算。

在C/C++语言中，记录被称为结构，通过使用struct关键字定义用户需要的记录（结构）类型。在struct关键字后要给出一个标识符作为记录类型名，在其后的大括号中要给出所含的每一个数据类型及其数据域名。访问记录中的某个数据域是通过成员选择操作符（.）或（->）来实现的，前者称为直接成员选择符，后者称为间接成员选择符。直接成员
