求图的最小生成树的算法主要有两个：普里姆（Prim）算法和克鲁斯卡尔（Kruskal）\n算法。下面分别进行讨论。

\section*{8.1.2 普里姆算法}

假设$G=(V, E)$是一个具有$n$个顶点的连通网，$T=(U, TE)$是$G$的最小生成树，其中，\n$U$是$T$的顶点集，$TE$是$T$的边集，$U$和$TE$的初值均为空集。算法开始时，首先从$V$中任\n取一个顶点（取$v_0$），将它并入$U$中，此时$U=\{v_0\}$，然后只要$U$是$V$的真子集（即$U \subset V$），\n就从那些其一个端点已在$T$中，另一个端点仍在$T$外的所有边中，找一条最短（即权值最\n小）边，假定为$(i, j)$，其中$v_i \in U$，$v_j \in (V-U)$，并把该边$(i, j)$和顶点$j$分别并入$T$的边集\n$TE$和顶点集$U$，如此进行下去，每次往生成树里并入一个顶点和一条边，直到$n-1$次后就\n把所有$n$个顶点都并入到生成树$T$的顶点集中，此时$U=V$，$TE$中含有$n-1$条边，$T$就是最后\n得到的最小生成树。

普里姆算法的关键之处是：每次如何从生成树$T$中到$T$外的所有边中，找出一条最短\n边。例如，在第$k$次 ($1 \leq k \leq n-1$) 前，生成树$T$中已有$k$个顶点和$k-1$条边，此时$T$中到$T$\n外的所有边数为$k(n-k)$，当然它包括两顶点间没有直接边相连，其权值被看做为常量\nMaxValue 的边在内，从如此多的边中查找最短边，其时间复杂度为$O(k(n-k))$，显然是很费\n时的。是否有一种好的方法能够降低查找最短边的时间复杂度呢？回答是肯定的，它能\n够使查找最短边的时间复杂度降低到$O(n-k)$。方法是：设在进行第$k$次前已经保留着从$T$\n中到$T$外每一顶点（共$n-k$个顶点）的一条最短边，进行第$k$次时，首先从这$n-k$条最\n短边中，找出一条最短的边，它就是从$T$中到$T$外的所有边中的最短边，设为$(i, j)$，此\n步需进行$n-k$次比较；然后把边$(i, j)$和顶点$j$分别并入$T$中的边集$TE$和顶点集$U$中，此时\n$T$外只有$n-(k+1)$个顶点，对于其中的每个顶点$t$，若$(j, t)$边上的权值小于已保留的从原$T$\n中到顶点$t$的最短边的权值，则用$(j, t)$修改之，使从$T$中到$T$外顶点$t$的最短边为$(j, t)$，\n否则原有最短边保持不变，这样，就把第$k$次后从$T$中到$T$外每一顶点$t$的各一条最短边\n都保留下来了，为进行第$k+1$次运算做好了准备，此步需进行$n-k-1$次比较。所以，利用\n此方法求第$k$次的最短边共需比较$2(n-k)-1$次，即时\n间复杂度为$O(n-k)$。

对于图 8-2 (a) 所示生成树，它的邻接矩阵如图 8-3\n所示，若从$v_0$出发利用普里姆算法构造最小生成树$T$，\n在其过程中，每次（第 0 次为初始状态）向$T$中并入一\n个顶点和一条边后，顶点集$U$、边集$TE$（每条边的后\n面为该边的权）以及从$T$中到$T$外每个顶点的各一条最\n短边所构成的集合（设用$LW$表示）的状态如下。\n

第 0 次$U=\{0\}$\n$TE=\{\}$\n$LW=\{(0,1)8,(0,2)\infty,(0,3)5,(0,4)\infty,(0,5)\infty,(0,6)\infty\}$\n

第 1 次$U=\{0,3\}$\n$TE=\{(0,3)5\}$\n$LW=\{(3,1)3,(0,2)\infty,(0,4)\infty,(3,5)7,(3,6)15\}$\n
