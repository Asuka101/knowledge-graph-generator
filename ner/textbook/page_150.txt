struct Stack {
    ElemType *stack;          //存栈元素
    int top;                  //存栈顶元素的下标位置
    int MaxSize;              //存 stack 数组长度, 即所能存储栈的最大长度
};

在顺序存储的栈中，$top$的值为$-1$表示栈空，每次向栈中压入一个元素时，首先使$top$增 1，用以指示新的栈顶位置，然后再把元素赋值到这个空位置上，每次从栈中弹出一个元素时，首先取出栈顶元素，然后再使$top$减 1，指出前一个元素成为新的栈顶元素。由此可知，对顺序栈的插入和删除运算相当于是在顺序表（即顺序存储的线性表）的表尾进行的，其时间复杂度为$O(1)$。

在一个顺序栈中，若$top$已经指向了$MaxSize-1$的位置，则表示栈满，若再向其插入新元素时就需要进行栈满处理，需分配更大的存储空间满足插入要求，或输出栈满信息告之用户等；相反，若$top$的值已经等于$-1$，则表示栈空，通常利用栈空作为循环结束的条件，表明数据已经处理完毕。

设一个栈$S$为$(a,b,c,d,e)$，对应的顺序存储结构，如图 4-1 (a) 所示。向$S$中插入一个元素$f$，如图 4-1 (b) 所示。接着执行两次出栈操作后，如图 4-1 (c) 所示。依次使栈$S$中的所有元素出栈，则$S$变为空，如图 4-1 (d) 所示。在这里，栈是垂直画出的，并且使下标编号向上递增，这样可以形象地表示出栈顶在上，栈底在下。

\begin{tabular}{|c|c|c|c|}
\hline MaxSize-1 & \multicolumn{1}{|l|}{} & MaxSize-1 & \multicolumn{1}{|l|}{} \\
\hline \vdots & \multicolumn{1}{|l|}{} & \vdots & \multicolumn{1}{|l|}{} \\
\hline 4 & \multicolumn{1}{|l|}{$e$} & 5 & \multicolumn{1}{|l|}{$f$} \\
\hline 3 & \multicolumn{1}{|l|}{$d$} & 4 & \multicolumn{1}{|l|}{$e$} \\
\hline 2 & \multicolumn{1}{|l|}{$c$} & 3 & \multicolumn{1}{|l|}{$d$} \\
\hline 1 & \multicolumn{1}{|l|}{$b$} & 2 & \multicolumn{1}{|l|}{$c$} \\
\hline 0 & \multicolumn{1}{|l|}{$a$} & 1 & \multicolumn{1}{|l|}{$b$} \\
\hline
\end{tabular}

(a)$top=4$\begin{tabular}{|c|c|c|c|}
\hline MaxSize-1 & \multicolumn{1}{|l|}{} & MaxSize-1 & \multicolumn{1}{|l|}{} \\
\hline \vdots & \multicolumn{1}{|l|}{} & \vdots & \multicolumn{1}{|l|}{} \\
\hline 4 & \multicolumn{1}{|l|}{$d$} & 4 & \multicolumn{1}{|l|}{} \\
\hline 3 & \multicolumn{1}{|l|}{$c$} & 3 & \multicolumn{1}{|l|}{$d$} \\
\hline 2 & \multicolumn{1}{|l|}{$b$} & 2 & \multicolumn{1}{|l|}{$c$} \\
\hline 1 & \multicolumn{1}{|l|}{$a$} & 1 & \multicolumn{1}{|l|}{$b$} \\
\hline 0 & \multicolumn{1}{|l|}{} & 0 & \multicolumn{1}{|l|}{$a$} \\
\hline
\end{tabular}

(b)$top=5$\begin{tabular}{|c|c|c|c|}
\hline MaxSize-1 & \multicolumn{1}{|l|}{} & MaxSize-1 & \multicolumn{1}{|l|}{} \\
\hline \vdots & \multicolumn{1}{|l|}{} & \vdots & \multicolumn{1}{|l|}{} \\
\hline 4 & \multicolumn{1}{|l|}{} & 4 & \multicolumn{1}{|l|}{} \\
\hline 3 & \multicolumn{1}{|l|}{$d$} & 3 & \multicolumn{1}{|l|}{} \\
\hline 2 & \multicolumn{1}{|l|}{$c$} & 2 & \multicolumn{1}{|l|}{} \\
\hline 1 & \multicolumn{1}{|l|}{$b$} & 1 & \multicolumn{1}{|l|}{} \\
\hline 0 & \multicolumn{1}{|l|}{$a$} & 0 & \multicolumn{1}{|l|}{} \\
\hline
\end{tabular}

(c)$top=3$(d)$top=-1$图 4-1 栈的顺序存储结构和操作过程示意图

下面是出栈在顺序存储结构下的实现算法。

1. 初始化栈 S 为空

把栈设置为空并完成栈空间的动态存储分配。

void InitStack(Stack& S)
{
    //初始设置栈空间大小为 10 个元素位置
    S.MaxSize=10;
    //动态存储空间分配, 若分配失败则退出运行
