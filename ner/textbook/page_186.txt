必须处在队首位置, 因此, 每次向它插入元素时, 都要按照一定次序调整元素位置, 确保把优先级最高的元素调整到队首, 每次从中删除队首元素 (即优先级最高的元素) 时, 也都要按照一定次序调整队列中的有关元素, 确保把优先级最高的元素调整到队首。优先级队列在操作系统中的各种调度算法中应用广泛, 它需要使用堆结构来实现, 这将在第6章中介绍。

*4.8 队列应用举例

队列在日常生活和计算机领域都有着广泛的应用, 下面以一个轮船渡口管理为例, 来说明队列的具体应用。

有一个渡口, 每条渡轮一次能装载 10 辆汽车过江, 过江车辆分为客车和货车两类, 上渡轮有如下规定:

(1) 同类汽车先到先上船。

(2) 客车先于货车上船。

(3) 每上 4 辆客车才允许上一辆货车, 但若等待的客车不足 4 辆则用货车填补, 反过来, 若没有货车等待则用客车填补。

(4) 装满 10 辆后则自动开船, 当等待时间较长时车辆不足 10 辆也应人为控制发船。

分析: 此题应建立和使用两个队列, 一个为客车队列, 另一个为货车队列, 到渡口需过江的汽车分别进入到相应队列中。当渡口有渡轮时先让客车队列中的 4 个车辆出队并开进渡轮, 再让货车队列中的一个车辆出队并开进渡轮, 若某一类车辆队列为空则从另一个队列中补充。当渡轮上的车辆已装满则自动开船, 此时应打印出已装车辆的每个车号。若装载不足 10 辆, 但两个车辆队列全为空, 应继续等待一段时间, 若等待时间较长, 仍不满载则应人为控制开船。根据分析可编写出如下程序。

#include<iostream.h>
#include<stdlib.h>
#include<time.h> //此头文件中含有 time 函数和 ctime 函数的声明

typedef int ElemType;
struct LNode {
    ElemType data;          //值域
    LNode* next;            //链接指针域
};
struct LinkQueue {
    LNode* front;           //队首指针
    LNode* rear;            //队尾指针
};

#include"链接队列运算.cpp"

//输出每次渡轮所载汽车的编号
void Print(int a[], int n)
