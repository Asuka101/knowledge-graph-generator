3. void main()
{
    ElemType r[8]={1,5,90,5,7,25,34,16};
    SNode* a;
    InitSet(a);
    int i;
    for(i=0; i<8; i++) InsertSet(a,r[i]);
    OutputSet(a);
    ElemType x=34;
    DeleteSet(a,x);
    InsertSet(a,48);
    x=5; DeleteSet(a,x);
    OutputSet(a);
    ClearSet(a);
}

4. void main()
{
    SNode* a; InitSet(a);
    SNode* b; InitSet(b);
    SNode* c; InitSet(c);
    int i;
    ElemType r[8]={1,5,90,5,7,25,34,16};
    ElemType r1[5]={5,60,16,30,8};
    for(i=0; i<8; i++) InsertSet(a,r[i]);
    for(i=0; i<5; i++) InsertSet(b,r1[i]);
    UnionSet(a,b,c);
    OutputSet(c);
    InterseSet(a,b,c);
    OutputSet(c);
}

【习题3-4】根据下列每个题目的要求编写算法。

1. 比较两个集合的大小。若两集合长度不等则退出运行。在两集合长度相等的情况下，若各集合的元素值的累加和相等则认为它们相等，返回0；若第1个集合的元素值的累加和大于第2个集合的元素值的累加和，则认为第1个集合大于第2个集合，返回1；若第1个集合的元素值的累加和小于第2个集合的元素值的累加和，则认为第1个集合小于第2个集合，返回-1。

2. 定义等于号运算符重载函数，比较两个集合是否相等。若两集合长度不等则退出运行。在两集合长度相等情况下，若各集合的元素值的累加和相等则认为它们相等，返回真；否则认为它们不等，返回假。

3. 从键盘上输入一个三元组线性表，当输入(0,0,0)元素时结束，实现稀疏矩阵的带行指针向量的链接存储。

4. 以三元组线性表的形式输出一个稀疏矩阵，其中稀疏矩阵采用的是带行指针向量的链接存储。

5. 实现稀疏矩阵的十字链表存储的三元组线性表输出。

6. 采用顺序存储方式实现稀疏矩阵$M1$和$M2$相加的运算，运算结果由引用参数$M$带回。

7. 编写一个建立广义表链接存储结构的算法，广义表由字符串值参提供。

8. 编写一个从广义表中查找单元素字符等于给定值的算法，若查找成功则返回真，否则返回假。
