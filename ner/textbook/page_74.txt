```cpp
//检查 pos 值是否有效, 若无效则无法插入, 返回假
if(pos<-1 || pos>L.size+1) {
    cout<<"pos 值无效!"<<endl; return false;
}
//求出按值有序插入时 item 的插入位置, 使之保存到 pos 中
int i;
if(pos==0) {
    for(i=0; i<L.size; i++)
        if(item<L.list[i]) break;
    pos=i+1; //pos 中保存新插入的元素的序号
}
//得到表尾插入位置, 被保存在 pos 中
else if(pos==-1) pos=L.size+1;
//若线性表存储空间用完, 则重新分配大一倍的存储空间
if(L.size==L.MaxSize) {
    int k=sizeof(ElemType); //计算每个元素存储空间的长度
    L.list=(ElemType*)realloc(L.list, 2*L.MaxSize*k);
    //线性表动态存储空间扩展为原来的 2 倍, 原内容不变
    if(L.list==NULL) {
        cout<<"动态可分配的存储空间用完, 退出运行!"<<endl;
        exit(1);
    }
    L.MaxSize=2*L.MaxSize; //把线性表空间大小修改为新的长度
}
//待插入位置及所有后续位置元素, 从后向前依次后移一个位置
for(i=L.size-1; i>=pos-1; i--)
    L.list[i+1]=L.list[i];
//把 item 的值赋给已空出的、下标为 pos-1 的位置, 它为第 pos 个元素位置
L.list[pos-1]=item;
//线性表长度增 1
L.size++;
//返回真表示插入成功
return true;
}

在这个算法中, 运行时间主要花费在第 2 步为寻找插入位置所需的比较元素的次数和第 5 步为空出插入位置所需的移动元素的次数。新元素插入的下标位置为$i$, 则元素的比较次数为$i+1$次, 元素的移动次数为$n-i$次 ($n$为线性表的长度$L$.size), 两者相加为$n+1$次。也就是说, 当进行有序插入时, 不管新元素插入在什么位置上, 进行元素比较和移动的总次数不变, 均为$n+1$, 当进行按位置插入时, 只需要考虑移动元素的次数, 在插入所有位置概率相等情况下, 平均移动次数为$\frac{1}{n+1}\sum_{i=0}^{n}(n-i)=\frac{n}{2}$, 所以此算法的时间复杂度为$O(n)$。特殊地, 当规定在表尾插入时, 其时间复杂度为$O(1)$。
```
