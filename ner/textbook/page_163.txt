char* a="10 3.5 - 4.3 2.48 + * 5 /";

对应的中缀算术表达式为$(10-3.5)*(4.3+2.48)/5$，则使用如下语句调用上述函数得到的输出结果为8.814。

cout<<Compute(a)<<endl;

在进行这个后缀算术表达式求值的过程中，每处理一个操作数或运算符后，栈S中保存的操作数和中间结果的情况，如图4-4所示。

| (a) 10 | (b) 3.5 | (c) - | (d) 4.3 | (e) 2.48 |
| --- | --- | --- | --- | --- |
| 10 | 3.5 | 6.5 | 4.3 | 2.48 |
|  | 10 |  | 6.5 | 4.3 |
|  |  |  |  | 6.5 |

| (f) + | (g) * | (h) 5 | (i) / |
| --- | --- | --- | --- |
| 6.78 | 44.07 | 5 | 8.814 |
| 6.5 |  | 44.07 |  |
|  |  |  |  |

图4-4 栈S中数据的变化

\section*{4.5.3 把中缀表达式转换为后缀表达式的算法}

设中缀算术表达式已经保存在S1字符串中，转换后得到的后缀算术表达式拟存于S2字符串中。由中缀表达式转换为后缀表达式的规则可知：转换前后，表达式中的数值项的次序不变，而运算符的次序发生了变化，由处在两个运算对象的中间变为处在两个运算对象的后面，同时去掉了所有的括号。为了使转换正确，必须设定一个运算符栈，并在栈底放入一个特殊算符，假定为“@”字符，让它具有最低的运算符优先级，假定为数值0，此栈用来保存扫描中缀表达式时得到的暂不能放入后缀表达式中的运算符，待它的两个运算对象都放入到后缀表达式以后，再令其出栈并写入到后缀表达式中。

把中缀表达式转换为后缀表达式算法的基本思路是：从头到尾扫描中缀表达式中的每个字符，对于不同类型的字符按不同情况进行处理。若遇到的是空格则认为是分隔符，不需要进行任何处理；若遇到的是数字或小数点，则直接写入到S2中，并在每个数值的最后写入一个空格；若遇到的是左括号，则应把它压入到运算符栈中，待以它开始的括号内的表达式转换完毕后再出栈；若遇到的是右括号，则表明括号内的中缀表达式已经扫描完毕，把从栈顶直到保存着的对应左括号之间的运算符依次退栈并写入S2串中；若遇到的是运算符，当该运算符的优先级大于栈顶运算符的优先级（加减运算符的优先级设定为1，乘除运算符的优先级设定为2，在栈中保存的特殊运算符“@”和“(”的优先级设定为0
