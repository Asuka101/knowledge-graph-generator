7. 从集合中查找一个元素

bool FindSet (SNode* HT, ElemType& item)
{
    //从集合单链表中顺序查找是否存在值为$item$的结点
    while(HT!=NULL) {
        if(HT->data==item) break;
        else HT=HT->next;
    }
    //若存在由$item$带回已查找到的元素并返回真,否则返回假
    if(HT!=NULL) {
        item=HT->data; return true;
    }
    else return false;
}

8. 修改集合中的一个指定元素

bool ModifySet(SNode* HT, const ElemType& item)
{
    //从集合单链表中顺序查找是否存在值为$item$的结点
    while(HT!=NULL) {
        if(HT->data==item) break;
        else HT=HT->next;
    }
    //若存在,由$item$修改已查找到的元素并返回真,否则返回假
    if(HT!=NULL) {
        HT->data=item; return true;
    }
    else return false;
}

9. 向集合插入一个元素

bool InsertSet(SNode*& HT, ElemType item)
{
    //建立值为$item$的新结点
    SNode* tp=new SNode;
    tp->data=item;
    //从单链表中顺序查找是否存在值为$item$的结点
    SNode* p=HT;
    while(p!=NULL) {
        if(p->data==item) break;
        else p=p->next;
    }
    //若不存在则把新结点插入到表头并返回真,否则不插入返回假
