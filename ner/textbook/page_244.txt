for(i=0;i<8;i++) InsertHeap(b,a[i]);
//按下标位置依次输出堆中的每个元素
for(i=0;i<7;i++) cout<<b.heap[i]<<',';
cout<<b.heap[7]<<endl;
//依次删除堆顶元素并显示出来，直到堆空为止
while (!EmptyHeap(b)) {
    x=DeleteHeap(b);
    cout<<x;
    if (!EmptyHeap(b)) cout<<',';
}
cout<<endl;
ClearHeap(b);

请通过堆的图示操作过程验证下面运行结果的正确性。

10,16,23,38,56,55,40,62
10,16,23,38,40,55,56,62

\section*{6.3 哈夫曼树}

\subsection*{6.3.1 基本术语}

1. 路径和路径长度

在一棵树中存在着一个结点序列$k_1,k_2,\cdots,k_j$，使得$k_i$是$k_{i+1}$的双亲$(1 \leq i < j)$，则称此结点序列是从$k_1$到$k_j$的路径，因树中每个结点只有一个双亲结点，所以它也是这两个结点之间的唯一路径。从$k_1$到$k_j$所经过的分支数称为这两点之间的路径长度，它等于路径上的结点数减 1。在图 6-3(a)所示的二叉树中，从树根结点 L 到叶子结点 P 的路径为结点序列 L,M,S,P，路径长度为 3。

2. 结点的权和带权路径长度

在许多应用中，常常将树中的结点赋上一个有着某种意义的实数，称此实数为该结点的权。结点的带权路径长度规定为从树根结点到该结点之间的路径长度与该结点上权的乘积。

3. 树的带权路径长度

树的带权路径长度定义为树中所有叶子结点的带权路径长度之和，通常记为：$\text{WPL}=\sum_{i=1}^{n} w_i l_i$
