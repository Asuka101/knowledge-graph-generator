bool operator !=(const ElemType& e1, const ElemType& e2)
{
    return e1.exp!=e2.exp;
}
bool operator <(const ElemType& e1, const ElemType& e2)
{
    return e1.exp<e2.exp;
}
ostream& operator <<(ostream& ostr, const ElemType& x)
{
    ostr<<x.coef<<' '<<x.exp<<' ';
    return ostr;
}

#include"list.cpp"               //该程序文件保存着对线性表各种操作的算法

double PolySum2(List& P, double x)
{   //如上面给出的函数定义
}

void main()
{
    List a1,a2;
    InitList(a1); InitList(a2);
    Term r1[4]={{5,0},{3,2},{-6,3},{2,5}};
    Term r2[4]={{1,0},{6,5},{-3,12},{7,60}};
    int i;
    for(i=0; i<4; i++)           //把r1中的每个元素依次插入线性表a1的表尾
        InsertList(a1,r1[i],-1);
    for(i=0; i<4; i++)           //把r2中的每个元素依次插入线性表a2的表尾
        InsertList(a2,r2[i],-1);
    cout<<"线性表a1:";
    TraverseList(a1);
    cout<<"线性表a2:";
    TraverseList(a2);
    double y1=PolySum2(a1,2);
    double y2=PolySum2(a2,2);
    cout<<y1<<' '<<y2<<endl;
    ClearList(a1); ClearList(a2);
}

执行这个程序得到的结果为:

线性表a1:5 0  3 2  -6 3  2 5
线性表a2:1 0  6 5  -3 12  7 60
33 8.07045e+018
