第5章 树51 树的概念511 树的定义树是树形结构的简称它是一种重要的非线性数据结构树或者是一棵空树即不含有任何结点元素或者是一棵非空树即至少含有一个结点在一棵非空树中它有且仅有一个称作根的结点其余所有结点被分为棵   0 互不相交的子树即称做根的子树每棵子树又同样是一棵树并且每棵子树的根结点是整个树根结点的后继而整个树根结点又是所有子树根结点的前驱显然树的定义是递归的树是一种递归的数据结构树的递归定义将为以后实现树的各种运算提供方便一棵树  如图 51 所示它由根结点  和两棵子树 1 和 2 所组成1 和 2 如图 51 和图 51 所示1 又由它的根结点  和三棵子树 1112 和 13 所组成这 3 棵子树分别对应如图 51图 51 和图 51 所示11 和 13 只含有根结点不含于子树或者说子树为空树不可再分12 又由它的根结点  和两棵只含有根结点的子树所组成每棵子树的根结点分别为  和 2 由它的根结点  和一棵子树所组成该子树也只含有一个根结点 不可再分08在一颗树中每个结点被定义为它的每个子树的根结点的前驱而它的每个子树的根结点就成为它的后继由此可用二元组给出树的定义      1       0      其中为树中结点数0则为空树0则为非空树对于一棵非空树 关系应满足下列条件1 有且仅有一个结点没有前驱 该结点被称为树的根2 除树根结点外 其余每个结点有且仅有一个前驱结点3 包括树根结点在内的每个结点 可以有任意多个 含 0 个 后继上面的树若采用二元组表示 则结点的集合和上二元关系分别为                           其中结点无前驱结点 被称为树的根结点 其余每个结点有且仅有一个前驱结点 在所有结点中结点有三个后继结点结点和结点分别有两个后继结点结点有一个后继结点 其余结点均没有后继结点在日常生活和计算机领域 树结构广泛存在例51可把一个家族看作一棵树 树中的结点为家族成员的姓名及相关信息 树中的关系为父子关系 即父亲是儿子的前驱 儿子是父亲的后继一棵家族树 如图 52 所示 王庭贵有两个儿子王万胜和王万利 王万胜又有 3 个儿子王家新王家中和王家国例52可把一个地区或一个单位的组织结构看作一棵树 树中的结点为机构的名称及相关信息 树中的关系为上下级关系如一个城市分为若干个区 每个区又分为若干个街道 每个街道又分为若干个居委会等例53可把一本书的结构看作一棵树 树中的结点为书章节的名称及相关信息 树中的关系为包含关系一本书的结构 如图 52 所示 根结点为书的名称数学 它包含 3 章 每章名称分别为加法减法和乘法 加法一章又包含两节 分别为一位加和两位和 减法和乘法也分别包含若干节例54可把一个算术表达式表示成一棵树 运算符作为根结点 它的前后两个运算对象分别作为根的左右两棵子树如把算术表达式  表示成树 如图 52 所示图像内容 家族树 书的结构树 算术表达式树图 52 树应用的例子例55在计算机领域 每个逻辑盘上信息组织的目录结构就是一棵树 树中的结点为包含有目录名或文件名的每个目录项或文件项 树中的根目录用反斜线表示 根目录下包含有若干个子目录项和文件项 每个子目录下又包含有若干个子目录项和文件项 以此类推目录结构树如图 53 所示目录结构树图 53 目录结构树512 树的表示树的表示方法有多种图 51图 52 和图 53 中的树形表示法是其中的一种也是最常用的一种图 51 和图 52 中的结点是从上向下展开的而图 53 中的结点是从左向右展开的在树形表示法中结点之间的关系是通过连线表示的虽然每条连线上都不带有箭头即方向但它并不是无向的而是有向的其方向隐含为从上向下或从左向右即连线的上方或左边结点是下方或右边结点的前驱下方或左边结点是上方或右边结点的后继树的另一种表示法是二元组表示法除这两种之外通常还有 3 种一是集合图表示每棵树对应一个圆形圆内包含根结点和子树图 51 所示的树  对应的集合图表示如图 54  所示二是凹入表示每棵树的根对应着一个条形子树的根对应着一个较短的条形且树根在上子树的根在下树  的凹入表示如图 54  所示三是广义表表示每棵树的根作为由子树构成的表的名字而放在表的前面图 51 中的树  的广义表示如图 54  所示树的其他几种表示2 集合图 凹入表 广义表图 54 树的其他几种表示513 树的基本术语1 结点的度和树的度每个结点具有的子树数或者说后继结点数被定义为该结点的度树中所有结点的度的最大值被定义为该树的度在图 51 的树  中 结点的度为 3 结点的度均为 2 结点的度为 1其余结点的度均为 0因所有结点的最大度为 3所以树  的度为 32 分支结点和叶子结点在一棵树中度等于 0 的结点称作叶子结点或终端结点度大于 0 的结点称作分支结点或非终端结点在分支结点中每个结点的分支数就是该结点的度数如对于度为 1 的结点其分支数为 1所以被称之为单分支结点对于度为 2 的结点其分支数为 2所以被称之为双分支结点其余类推在树  中 都是叶子结点 是分支结点其中  为单分支结点 和  为双分支结点 为三分支结点3 孩子结点双亲结点和兄弟结点在一棵树中每个结点的子树的根或者说每个结点的后继被习惯地称为该结点的孩子儿子或子女相应地该结点被称为孩子结点的双亲父亲或父母具有同一双亲的孩子互称兄弟一个结点的所有子树中的结点被称为该结点的子孙一个结点的祖先则被定义为从树根结点到达该结点的路径上经过的所有结点在树  中 结点的孩子为  结点双亲为  结点 互为兄弟 结点的子孙为  结点 结点的祖先为  结点对于树  中的其他结点亦可进行类似的分析由孩子结点和双亲结点的定义可知在一棵树中根结点没有双亲结点叶子结点没有孩子结点其余结点既有双亲结点也有孩子结点在树  中根结点  没有双亲叶子结点  没有孩子4 结点的层数和树的深度树既是一种递归结构也是一种层次结构树中的每个结点都处在一定的层数上结点的层数从树根开始定义根结点为第 1 层它的孩子结点为第 2 层以此类推树中所有结点的最大层数称为树的深度或高度在树  中 结点处于第 1 层 结点处于第 2 层 结点处于第 3 层 结点所处的第 4 层为树  中所有结点的最大层数所以树  的深度为 45 有序树和无序树若树中各结点的子树是按照一定的次序从左向右安排的则称之为有序树否则称之为无序树如图 55 中的两棵树若被看作无序树则是相同的若被看作有序树则不同因为根结点的两棵子树的次序不同又如对于一棵反映父子关系的家族树兄弟结点之间是按照排行大小有序的所以它是一棵有序树再如对于一个机关或单位的机构设置树若各层机构是按照一定的次序排列的则为一棵有序树否则为一棵无序树因为任何无序树都可以当作任一次序的有序树来处理所以以后若不特别指明均认为树是有序的6 森林森林是  0棵互不相交的树的集合例如对于树中每个分支结点来说其子树的集合就是森林在树中由结点的子树所构成的森林为12由结点的子树所构成的森林为11121351 4 树的性质性质1树中的结点数等于所有结点的度数加1证明根据树的定义在一棵树中除树根结点外每个结点有且仅有一个前驱结点也就是说每个结点与指向它的一个分支一一对应所以除树根结点之外的结点数等于所有结点的分支数即度数从而可得树中的结点数等于所有结点的度数加1性质2度为的树中第层上至多有1个结点  1下面用数学归纳法证明对于第1层显然是成立的因为树中的第1层上只有一个结点即整个树的根结点而由1代入1计算也同样得到只有一个结点即11101假设对于第1层1命题成立即度为的树中第1层上至多有112个结点则根据树的度的定义度为的树中每个结点至多有个孩子所以第层上的结点数至多为第1层上结点数的倍即至多为2  1个这与命题相同故命题成立性质3深度为的叉树至多有11个结点证明显然当深度为的叉树即度为的树上每一层都达到最多结点数时所有结点的总和才能最大即整个叉树具有最多结点数1 1012111当一棵叉树上的结点数等于11时则称该树为满叉树例如对于一棵深度为4的满二叉树其结点数为241即15对于一棵深度为4的满三叉树其结点数为3412即40性质4具有个结点的叉树的最小深度为 11 其中公式两边的符号表示对内部的数值进行向上取整即  是取大于等于的最小整数如 4  43 和 56 的值分别为45和6同样一对和符号表示对内部的数值进行向下取整  是取小于等于的最大整数如 4  42 和 58 的值分别为44和5证明设具有个结点的叉树的深度为若在该树中前1层都是满的即每 1 层的结点数都等于1个1    1第层即最后一层的结点数可能满也可能不满则该树具有最小的深度根据性质 3其深度的计算公式为111    11可变换为1  1  1  以为底取对数后得1  11  即11    11  1因只能是整数所以   11 因此得到具有个结点的一般叉树的最小深度为 11 例如对于二叉树求最小深度的计算公式为 21 若20则最小深度为 5对于三叉树求最小深度的计算公式为 321 若20则最小深度为 452 二叉树521 二叉树的定义二叉树 是指树的度为 2 的有序树它是一种最简单而且最重要的树在计算机领域有着广泛的应用二叉树的递归定义为二叉树或者是一棵空树或者是一棵由一个根结点和两棵互不相交的分别称做根的左子树和右子树所组成的非空树左子树和右子树又同样都是一棵二叉树一棵二叉树  如图 56 所示它由根结点  和左子树 ₁右子树 ₂ 所组成₁ 和 ₂ 分别如图 56 和图 56 所示₁ 又由根结点  和左子树 ₁₁只含有根结点 右子树 ₁₂此为空树所组成对于 ₂ 树也可进行类似的分析图 56 二叉树在二叉树中每个结点的左子树的根结点被称之为左孩子 右子树的根结点被称之为右孩子 在二叉树  中 结点的左孩子为  结点右孩子为 结点 结点的左孩子为  结点右孩子为空或者说没有右孩子 结点的左孩子为 结点右孩子为  结点 结点没有左孩子右孩子为  结点 结点为叶子结点其左右孩子均为空52 2 二叉树的性质二叉树具有下列一些重要性质性质 1二叉树上终端结点数等于双分支结点数加 1证明设二叉树上终端结点数用0表示单分支结点数用1表示双分支结点数用2表示则总结点数为0  1  2另一方面在一棵二叉树中所有结点的分支数即度数应等于单分支结点数加上双分支结点数的 2 倍即等于1  22由树的性质 1 可得0  1  2  1  22  1  即  0  2  1例如在二叉树  中度为 2 的结点数为 2 个度为 0 的结点数为 3 个它比度为2 的结点数正好多 1 个性质 2二叉树上第  层上至多有21个结点  1证明由树的性质 2 可知度为  的树中第  层上至多有1个结点对于二叉树树的度为 2将2代入1即可得到此性质性质 3深度为  的二叉树至多有2  1个结点证明由树的性质 3 可知深度为  的  叉树至多有  1  1个结点对于二叉树树的度为 2将2代入  1  1即可得到此性质在一棵二叉树中当第  层的结点数为21个时则称此层的结点数是满的当树中的每一层都满时则称此树为满二叉树由性质 3 可知深度为  的满二叉树中的结点数为2  1个一棵深度为 4 的满二叉树如图 57所示其结点数为 15图中每个结点的值是用该结点的编号来表示的编号从树根为 1 开始按照层数从小到大同一层从左到右的次序进行在一棵二叉树中除最后一层外若其余层都是满的并且最后一层或者是满的或者是在右边缺少连续若干个结点则称此树为完全二叉树由此可知满二叉树是完全二叉树的特例一棵完全二叉树如图 57所示它与等高度的满二叉树相比在最后一层的右边缺少了 5 个结点该树中每个结点上面的数字为对该结点的编号编号的方法同满二叉树 满二叉树 完全二叉树图 57 满二叉树和完全二叉树性质 4对完全二叉树中编号为的结点1       1 为结点数有如下性质1 若编号为的结点有左孩子则左孩子结点的编号为2若编号为的结点有右孩子则右孩子结点的编号为212 除树根结点外若一个结点的编号为则它的双亲结点的编号为2也就是说当为偶数时其双亲结点的编号为2它是双亲结点的左孩子当为奇数时其双亲结点的编号为12它是双亲结点的右孩子3 若   2 即2  则编号为的结点为分支结点否则为叶子结点4 若为奇数则每个分支结点都既有左孩子又有右孩子若为偶数则编号最大的分支结点编号为2只有左孩子没有右孩子其余分支结点左右孩子都有例如在图57  所示的完全二叉树中因树中结点数10所以编号小于等于 5 的结点为分支结点大于 5 的结点为叶子结点因10为偶数所以编号为 5 的结点  只有左孩子 没有右孩子其余分支结点即编号1  4的结点左右孩子都有对于编号为 2 的结点  来说它的左孩子是编号为 4 的结点 右孩子是编号为 5 的结点 它的双亲是编号为 1 的结点对于树中的其他结点也可进行类似的分析在有的教科书中把完全二叉树中结点的编号从 0 开始定义这样对于一个具有个结点的完全二叉树来说分支结点的编号为0   2   1叶子结点的编号为 2     1编号为的左右孩子结点的编号分别为2  1和2  2双亲结点的编号为 12 根据孩子结点的编号可推出双亲结点的编号因为若编号为左孩子则2  1  就等于12其值是一个整数也可表示为 12 若编号为右孩子则2  2  就等于2  1因只能是整数所以必然是偶数则2  1的值与 12 的值相等故对于除根结点之外的任何编号为的结点其双亲结点的编号必然为 12 那么又是如何得到一个编号为的左右孩子结点的编号为2  1和2  2呢这可用数学归纳法证明当等于 0 时结论是成立的根结点左右孩子的编号分别为 1 和 2这与公式所求相同对于编号为的结点其左右孩子结点的编号为2  1和2  2是成立的则对于编号为  1的结点其左右孩子结点的编号应为2  1  1和2  1  2也可写成2  1  1和2  1  2所以命题成立性质 5具有个   0 结点的完全二叉树的深度为 2  1 或 2    1证明设所求完全二叉树的深度为由完全二叉树的定义可知它的前  1层都是满的最后一层可以满也可以不满由此得到如下不等式21  1    2  1可变换为21    1  2取对数后得  1  2  1  即2  1    2  1  1因只能取整数所以   2  1 完全二叉树的深度和结点数的关系还可表示为21    2取对数后得1  即   1因只能取整数 所以 1在一棵二叉树中 若除最后一层外 其余层都是满的 而最后一层上的结点可以任意分布 则称此树为理想平衡二叉树 简称理想平衡树或理想二叉树显然 理想平衡树包含满二叉树和完全二叉树完全二叉树中深度和结点数之间的关系 在理想平衡树中同样成立 因为性质 5 的证明结果实际上是根据理想平衡树的定义推导出来的如图 58所示是一棵理想平衡树 但它不是完全二叉树 如图 58所示不是一棵理想平衡树 因它的最后两层都未满 理想平衡树 普通二叉树图 58 理想平衡树和普通二叉树52 3 二叉树的抽象数据类型二叉树的抽象数据类型的的数据部分为一棵二叉树 操作部分包括初始化二叉树建立二叉树遍历二叉树查找二叉树输出二叉树和清除二叉树等一些常用操作下面给出二叉树的抽象数据类型的具体定义  采用任一种方式存储的二叉树 假定其存储类型用  标识符表示该类型的一个对象 即二叉树 用  标识符表示   初始化二叉树 即把它置为一棵空树     根据广义表表示的二叉树建立对应的存储结构   判断一棵二叉树是否为空 若是则返回  否则返回    按照一定次序遍历一棵二叉树 使得每个结点的值均被访问一次     从二叉树中查找值为  的结点 若存在该结点则由  带回它的完整值 并返回  否则返回  表示查找失败   求出一棵二叉树的深度  按照树的一种表示方法输出一棵二叉树  清除二叉树中的所有结点使之变为一棵空树 52 4 二叉树的存储结构同线性表一样 二叉树也有顺序和链接两种存储结构1 顺序存储结构顺序存储一棵二叉树时 首先对该树中每个结点进行编号 然后以各结点的编号为下标 把各结点的值对应存储到一个一维数组中每个结点的编号与等深度的满二叉树中对应结点的编号相同 即树根结点的编号为1 接着按照从上到下和从左到右的次序 若一个结点的编号为 则左右孩子的编号分别为2和21在如图 59 所示的二叉树中 各结点上方的数字就是该结点的编号 完全二叉树 一般二叉树图 59 带结点编号的二叉树假定分别采用一维数组 1 和 2 来顺序存储图 59  和图 59  中的二叉树则两数组中各元素的值如图 510 所示1 0  1  2  3  4  5  6  7  8  9  10                          25  15  36  10  20  32  48  4  11  18 2 0  1  2  3  4  5  6  7  8  9  10  11  12  13                                1                       图 510 二叉树的顺序存储结构在二叉树的顺序存储结构中 各结点之间的关系是通过下标计算出来的 因此访问每一个结点的双亲和左右孩子若有的话都非常方便如编号为的结点即下标为的元素其双亲结点的下标为 2 若存在左孩子则左孩子结点的下标为2若存在右孩子则右孩子结点的下标为21二叉树的顺序存储结构对于存储完全二叉树是合适的它能够充分利用存储空间但对于一般二叉树特别是对于那些单支结点较多的二叉树来说是很不合适的因为可能只有少数存储位置被利用而多数或绝大多数的存储位置空闲着因此对于一般二叉树通常采用下面介绍的链接存储结构2 链接存储结构在二叉树的链接存储中通常采用的方法是在每个结点中设置 3 个域值域左指针域和右指针域其结点结构为               其中 表示值域用来存储对应的数据元素 和  分别表示左指针域和右指针域用来分别存储左孩子和右孩子结点的存储位置即指针链接存储的另一种方法是在上面的结点结构中再增加一个  指针域用来指向其双亲结点这种存储结构既便于查找孩子结点也便于查找双亲结点当然也带来存储空间的相应增加对于如图 511  所示的二叉树不带双亲指针的链接存储结构称作二叉链表如图 511  所示其中 1 为指向树根结点的指针简称树根指针或根指针带双亲指针的链接存储结构称作带双亲指针的二叉链表如图 511  所示其中 2 为树根指针 二叉树 不带双亲指针的链接存储结构 带双亲指针的链接存储结构图 511 二叉树的链接存储结构同单链表相同二叉链表既可由独立分配的结点链接而成也可由数组中的元素结点链接而成若采用独立结点则结点类型可定义为                 若采用元素结点则结点类型可定义为             在元素结点中 和  域分别存储左右孩子结点所在单元的下标所以被定义为整型为建立二叉链表而提供元素结点的数组类型可定义为  其中 为全局整型常量其值由用户事先定义由它决定建立二叉链表的最大结点数设用  类型的一维数组存储图 511所示的二叉链表由于在链接存储中结点之间的逻辑关系是通过指针实现的所以各结点在数组中占用的下标位置可以按照任何一种次序安排假定按照层数从小到大同一层从左到右的次序为各结点分配存储位置则得到该二叉链表的存储映像如图 512 所示  0  1  2  3  4  5  6  7  8  9  10  1                         1  2  4  5  0  7  0  0  0         10  3  0  6  0  8  9  0  0  11  0 图 512 利用数组建立二叉树的链接存储结构注意元素结点从下标为 1 的位置起使用下标为 0 的位置的左指针域通常用来存储树根指针右指针域通常用来存储空链表的表头指针空闲链表由空闲结点的  域链接而成在数组中建立二叉树的好处是建立好后可以把整个数组写入到一个文件中保存起来当需要时再从文件整体读入到数组中进行处理53 二叉树遍历设二叉树由具有  类型的通过动态分配产生的独立结点链接而成并设  为指向树根结点的指针从树根指针出发可以访问到树中的每一个结点所以可以用树根指针来指定一棵二叉树二叉树的遍历是二叉树中最重要的运算二叉树的遍历是指按照一定次序访问树中所有结点并且每个结点的值仅被访问一次的过程根据二叉树的递归定义一棵非空二叉树由根结点左子树和右子树所组成因此遍历一棵非空二叉树的问题可分解为3个子问题访问根结点遍历左子树和遍历右子树若分别用和表示上述3个子问题则有等6种次序的遍历方案其中前3种方案都是先遍历左子树后遍历右子树而后3种则相反都是先遍历右子树后遍历左子树由于二者对称故我们只讨论前3种次序的遍历方案熟悉了前3种后3种也就迎刃而解了在遍历方案中因为访问根结点的操作在遍历左右子树之前故称之为前序遍历或先根遍历类似地在方案中访问根结点的操作在遍历左子树之后和遍历右子树之前故称之为中序遍历或中根遍历在方案中访问根结点的操作在遍历左右子树之后故称之为后序遍历或后根遍历显然遍历左右子树的问题仍然是遍历二叉树的问题当二叉树为空时递归结束所以很容易给出这3种遍历的递归算法1 前序遍历算法                        访问根结点              前序遍历左子树             前序遍历右子树    2 中序遍历算法                         中序遍历左子树              访问根结点              中序遍历右子树    3 后序遍历算法                       后序遍历左子树            后序遍历右子树              访问根结点    在3种遍历算法中访问根结点的操作可视具体应用情况而定这里暂以打印根结点的值代之当然若结点的值为用户定义的记录类型则还必须依次输出结点值对象中的每个域的值以中序遍历算法为例结合如图 513 所示的二叉树分析其执行过程 二叉树 链接存储结构图 513 二叉树遍历当从其他函数调用此次称为第0次递归调用中序遍历算法时需要以指向树根结点的指针作为实参把它传递给算法中的值参系统栈中应包括域和返回地址域设进行第0次递归调用后的返回地址为0中序遍历左子树后的返回地址即执行 语句的地址为1中序遍历右子树后的返回地址即算法结束的地址为2并设指向每个结点的指针用该结点的值后缀小写字母表示如指向  结点的指针就用表示则每次进行递归调用时的系统栈的变化状态如图 514 所示                       0   进栈                       1    0   进栈                   1    1    0   进栈           1    1    1    0  空指针进栈           2    1    1    0  输出                2    1    0  输出            1    2    1    0  空指针进栈           2    2    1    0  输入                    2    0  输出            1    2    2    0  空指针进栈           2    2    2    0  输入                1    2    2    0   进栈           1    1    2    2    0  空指针进栈           2    1    2    2    0  输出                        0  输出  返回到其他函数图 514 对图 513 所示的二叉树执行中序遍历算法时系统栈的变化状态由上述分析中序遍历算法的执行过程可知打印出的结点序列为      类似地若按照前序遍历算法和后序遍历算法遍历图 513 所示的二叉树则打印出的结点序列分别为       和       在二叉树的三种递归遍历算法中对于每个算法都访问到了每个结点的每一个域并且每个结点的每一个域仅被访问一次所以其时间复杂度均为表示二叉树中结点的个数另外在执行每个递归遍历算法时系统都要使用一个栈栈的最大深度等于二叉树的深度加 1而二叉树的深度视其具体形态决定若二叉树为理想平衡树或接近理想平衡树则二叉树的深度大致为 2  所以其空间复杂度为2 若二叉树退化为一棵单支树即最差的情况则空间复杂度为同样为二叉树中的结点数上面所述的二叉树的遍历是按二叉树的递归结构进行的另外还可以按照二叉树的层次结构进行遍历即按照从上到下同一层从左到右的次序访问各结点如图 513 所示的二叉树按层遍历各结点的次序为      按层遍历算法需要使用一个队列开始时把整个树的根结点入队然后每从队列中删除一个结点并输出该结点的值时都把它的非空的左右孩子结点入队这样当队列空时算法结束4 按层遍历算法此算法为一个非递归算法具体描述如下      按层遍历由  指针所指向的二叉树      30                 定义用于存储队列的数组长度                     定义队列所使用的数组空间     0 0                  定义队首指针和队尾指针初始为空队                  1                               将树根指针进队                  1          使队首指针指向队首元素                                输出队首元素所指结点的值                     1                          若存在左孩子则左孩子结点指针进队             若存在右孩子则右孩子结点指针进队    1      在这个算法中队列的最大长度不会超过二叉树中一层上的最多结点数在定义队列数组时要使数组的长度大于队列的最大长度这样在结点进队时肯定不会发生溢出因此也就不需要判断是否队满了此算法的时间复杂度为表示二叉树中结点的个数54 二叉树其他运算1 初始化二叉树     初始化二叉树即把树根指针置空    2 建立二叉树二叉树的输入格式不同建立二叉树的算法也不同采用广义表表示的输入法二叉树广义表表示的规定如下1 每棵树的根结点作为由子树构成的表的名字而放在表的前面2 每个结点的左子树和右子树用逗号分开若只有右子树而没有左子树则逗号不能省略例如对于图 511  所示的二叉树其广义表表示为根据二叉树的广义表表示建立二叉树链接存储结构的基本思路是从保存二叉树广义表的字符串  中输入每个字符若遇到的是空格则不进行任何操作若遇到的是字母设以字母作为结点的值则表明是结点的值应为它建立一个新结点并把该结点若它不是整个树的根结点的话作为左孩子若1或右孩子若2链接到其双亲结点上若遇到的是左括号则表明子表开始应首先把指向它前面字母所在结点的指针即根结点指针进栈以便括号内的子结点向双亲结点链接之用然后把置为 1因为左括号后面紧跟着的字母若有的话必为根结点的左孩子若遇到的是右括号则表明子表结束应退栈若遇到的是逗号则表明以左孩子为根的子树处理完毕应接着处理以右孩子为根的子树所以要把置为 2如此处理每一个字符直到处理完所有字符为止建立二叉树的算法描述如下       根据字符串  所给出的用广义表表示的二叉树建立对应的存储结构      10  栈数组长度要大于等于二叉树的深度减1   数组作为存储根结点指针的栈使用     1             作为栈顶指针初值为1表示空栈                   把树根指针置为空即从空树开始               定义  为指向二叉树结点的指针                      用  作为处理结点的左子树和右子树的标记                            1 处理左子树2 处理右子树     0               用  扫描数组  中存储的二叉树广义表字符串                每循环一次处理一个字符直到扫描到字符串结束符0为止                                 对空格不作任何处理                                             1                     栈空间太小请增加  的值                    1                                  1                                             1                     二叉树广义表字符串错 1                                                              2                                                                   作为根结点插入                                     1   作为左孩子插入                          作为右孩子插入                                                                                            为扫描下一个字符修改  值    在这个算法中 栈的最大深度等于二叉树的深度减1而二叉树的深度则等于广义表表示中圆括号嵌套的最大层数加1所以当定义  栈的数组空间时其长度即下标上限值要大于等于二叉树的深度减 1该算法的时间复杂度为表示二叉树广义表中字符的个数由于平均每2  3个字符具有一个元素字符所以也可以看作是二叉树中元素结点的个数3 检查二叉树是否为空      判断一棵二叉树是否为空若为空则返回 否则返回      4 求二叉树深度若一棵二叉树为空则它的深度为 0否则它的深度等于左子树和右子树中的最大深度加 1设 1 为左子树的深度2 为右子树的深度则二叉树的深度为1 21其中函数表示取参数中的大者求二叉树深度的递归算法如下               0                      对于空树返回 0 并结束递归              1   计算左子树的深度         2  计算右子树的深度        12             11               返回树的深度                     21    利用此算法求图 513 所示二叉树的深度则得到的返回结果为 45 从二叉树中查找值为  的结点若存在由  带回完整值并返回真否则返回假该算法类似于前序遍历的算法若树为空则返回  结束递归若树根结点的值就等于  的值则把结点值赋给  后返回  结束递归否则先向左子树查找若找到则返回  结束递归否则再向右子树查找若找到则返回  结束递归若左右子树均未找到则返回  结束递归具体算法描述为                  树为空返回假          树根结点的值等于则由带回结点值并返回真             向左子树查找若成功则继续返回真            向右子树查找若成功则继续返回真            左右子树查找均失败则返回假     6 输出二叉树输出二叉树就是根据二叉树的链接存储结构以某种树的表示形式打印出来通常采用广义表的形式打印用广义表表示一棵二叉树的规则是根结点被放在由左右子树组成的表的前面而表是用一对圆括号括起来的对于图513所示的二叉树其对应的广义表表示为因此用广义表的形式输出一棵二叉树时应首先输出根结点然后再依次输出它的左子树和右子树不过在输出左子树之前要打印出左括号在输出右子树之后要打印出右括号另外依次输出的左右子树要至少有一个不为空若均为空就没有输出的必要了由以上分析可知输出二叉树的算法可在前序遍历算法的基础上作适当修改后得到具体给出如下      输出二叉树的广义表表示                     输出根结点的值                               输出左括号             输出左子树                                  若右子树不为空则首先输出逗号分隔符             输出右子树               输出右括号            7 清除二叉树使之变为一棵空树要清除一棵二叉树必须先清除左子树再清除右子树最后删除即回收根结点并把指向根结点的指针置空由此可知它是一个递归过程类似于后序递归遍历                   删除左子树            删除右子树                         释放根结点                          置根指针为空    采用下面程序上机调试对二叉树运算的算法              定义二叉树结点值的类型为字符型                 二叉树运算          保存对二叉树各种运算的算法                      定义指向二叉树结点的指针并用它作为树根指针                    初始化二叉树即置树根指针为空     50                   定义一个用于存放二叉树广义表的字符数组    输入二叉树用广义表表示的字符串         输入的字符串被放入数组中                建立以作为树根指针的二叉树的链接存储结构        以广义表形式输出二叉树    前序       中序   后序遍历以为树根指针的二叉树后序   按层遍历以为树根指针的二叉树按层   查找以为树根指针的二叉树中的一个结点 输入一个待查字符  查找字符成功 查找字符失败求出以为树根指针的二叉树的深度深度  清除以为树根指针的二叉树屏幕显示结果如下输入二叉树用广义表表示的字符串前序         中序         后序         按层         输入一个待查字符查找字符成功深度 455 树的存储结构和运算551 树的抽象数据类型这里所说的树是指度大于等于3的树通常称为多元树或多叉树树的抽象数据类型的数据部分为一棵普通的叉树它可以采用顺序链接等任一种存储结构设存储类型用标识符表示操作部分包括初始化树建立树遍历树查找树输出树清除树判空树等一些常用运算下面给出普通树的抽象数据类型的具体定义  一棵普通树存储类型用标识符表示  初始化树即把它置为一棵空树    根据广义表表示的树建立对应的存储结构  按照一定次序遍历树使得每个结点的值均被访问一次    从树中查找值为的结点若存在该结点则由带回它的完整值并返回否则返回表示查找失败  按照树的一种表示方法输出一棵树   判断树是否为空若是则返回否则返回  清除树中的所有结点使之变为一棵空树 55 2 树的存储结构1 树的顺序存储结构树的顺序存储结构需要使用一个一维数组 存储方法是 首先对树中每个结点进行编号 然后以各结点的编号为下标 把结点值对应存储到相应元素中若待存储的树的度为 即它是一棵叉树 则结点编号的规则为 树根结点的编号为 1  然后按照从上到下每一层再从左到右的次序依次对每个结点编号若一个结点的编号为 则个孩子结点的编号依次为    2     3      1如对于 3 叉树 若双亲结点的编号为 则 3 个孩子结点的编号依次为3    1 3   3    1又如对于 4 叉树 若双亲结点的编号为 则 4 个孩子结点的编号依次为4    2 4    1 4   4    1若叉树中一个结点的编号为 则它的父亲结点的编号为21 即等于2除以得到的整数商再加上 1 如当3时 父结点的编号为231 若10 则父结点的编号为 3 树的顺序存储适合满树和完全树的情况 否则将非常浪费存储空间故在实际应用中很少使用 本节也不做深入讨论2 树的链接存储结构树的链接存储结构通常采用如下 3 种方式1 标准方式在这种方式中 树中的每个结点除了包含有存储数据元素的值域外 还包含有个指针域 用来分别指向个孩子结点 或者说 用来分别链接棵子树 其中为树的度结点的类型可定义为                 结点值域             结点指针域 01  为事先定义的常量2 广义标准方式广义标准方式是在标准方式的每个结点中增加一个指向其双亲结点的指针域结点的类型可定义为                 结点值域            结点指针域 01  为事先定义的常量           双亲指针如图 515 所示是一棵三叉树 其存储结构的标准形式如图 515 所示 广义标准形式如图 515 所示 三叉树 标准形式 广义标准形式图 515 树的标准形式和广义标准形式的存储结构3 二叉树方式二叉树方式是指首先将树转换为对应的二叉树形式 然后再采用二叉链表存储这棵二叉树将树转换为二叉树的规则是将树中每个结点的第1个孩子结点转换为二叉树中对应结点的左孩子将第2个孩子结点转换为左孩子的右孩子将第3个孩子结点转换为这个右孩子的右孩子也就是说转换后得到的二叉树中的每个结点及右孩子在转换前的树中互为兄弟对于图 515所示的树对应的二叉树形式如图 516所示它的二叉链表如图 516所示 二叉树形式 二叉链表图 516 树的二叉树形式的存储结构在树的以上3种链接存储表示方式中标准方式和广义表示方式能够表示任何树但二叉树方式一般只适合表示无序树不能表示任一结点中缺少前面孩子又存在后面孩子的那样有序树当然树还有其他一些表示方法但都较少使用故不作介绍553 树的运算树的运算包括建立树的存储结构进行树的遍历从树中查找结点值求树的深度和输出树等假定要讨论的树是叉树被事先定义为整型符号常量树的存储结构采用标准链接方式1 建立树的存储结构建立树的存储结构就是在内存中生成一棵树的标准方式的存储映象即叉链表同二叉链表的生成过程一样首先要确定输入树的方法然后再写出相应的算法仍采用广义表的形式输入对于图 515所示的三叉树得到的广义表表示为   其中假定每个结点的非空子树都是靠前面按序排列的子树把所有空子树都留在后面在实际情况中可能会出现缺少前面子树而存在后面子树的情况此时用广义表示时空子树后面的逗号不能省略在树的生成算法中需要设置两个栈一个用来存储指向根结点的指针以便孩子结点向双亲结点链接之用另一个用来存储待链接的孩子结点的序号以便能正确地链接到双亲结点的指针域若这两个栈分别用和表示和栈的深度不会大于整个树的深度树的生成算法与二叉树的生成算法类似设结点值仍为字符类型 整个  叉树用一个广义表形式的字符串  来表示则具体算法描述如下    根据广义表字符串  所给出的  叉树建立对应的存储结构      10 定义符号常量指定栈空间的大小      数组作为存储树中结点指针的栈使用       数组作为存储孩子结点链接到双亲结点指针域的序号的栈使用     1  作为两个栈的栈顶指针     给树根指针置空     定义  为指向树结点的指针     0 用  指示扫描字符串数组  中的当前字符位置          每循环一次处理一个字符直到字符串结束符为止                         对空格不做任何处理                               0                 指针进  栈0 进  栈表明待扫描的孩子结点将链接到  栈顶元素所指结点的第一个指针域                                                              和  退栈                                                             待读入的孩子结点将链接到  栈顶元素所指结点的下一个指针域                             此处处理的必然是字符元素                根据 字符生成新结点                                                  0                   使  结点成为树根结点或链接到双亲结点对应的指针域                                                       准备处理下一个字符2 树的遍历树的遍历包括先根遍历或称深度优先遍历后根遍历和按层遍历或称广度优先遍历3种先根遍历定义为先访问根结点然后从左到右依次先根遍历每棵子树此遍历过程是一个递归过程先根遍历图 515 所示的树得到的结点序列为        后根遍历从左到右依次后根遍历根结点的每棵子树然后再访问根结点此遍历过程也是一个递归过程后根遍历图 515 所示的树得到的结点序列为        按层遍历先访问第1层结点即树根结点再从左到右访问第2层结点依次按层访问直到全树中的所有结点都被访问为止或者说直到访问完最深一层结点为止按层遍历图 515 所示的树得到的结点序列为        同二叉树的先序遍历算法类似树的先根遍历算法如下            先根遍历一棵叉树                           访问根结点            0                        递归遍历每一个子树    树的后根遍历算法如下           后根遍历一棵叉树                    0                       递归遍历每一个子树                   访问根结点    在树的按层遍历算法中需要设置一个队列假定用  表示元素类型应定义为结点指针类型 算法开始时将  初始化为空接着若树根指针不为空则入队然后每从队列中删除一个元素即为指向结点的指针时都输出它的值并且依次使非空的孩子指针入队这样反复进行下去直到队列为空时止此算法是一个非递归算法若使用的队列采用现成的顺序队列的定义和运算算法的具体描述如下       按层遍历由  指针所指向的  叉树                                定义一个队列  其元素类型应为                          初始化队列                 非空的树根指针进队                当队列非空时执行循环                        从队列中删除一个结点指针                  0                                  3 从树中查找结点值此算法要求 当从树中查找值为  的结点时 若存在该结点则由  带回它的完整值并返回  否则返回  表示查找失败此算法类似树的先根遍历算法 它首先访问根结点 若相等则带回结点值并返回真 否则依次查找每个子树具体算法描述如下                    树空返回假                                             0                                           查找不成功返回假    4 树的输出要求输出为树的广义表形式此算法同样类似于树的先根遍历算法 它首先输出树根结点的值 然后若存在非空子树则接着输出表的左括号及输出第一棵子树 再依次输出每个逗号和每棵子树 最后输出表的右括号该算法描述如下      以广义表形式输出按标准方式存储的  叉树                          输出根结点的值 0                 0    1                           5 求树的深度树为空则深度为0否则它等于所有子树的最大深度加1为此设置一个整型变量用来保存已求过的子树中的最大深度当所有子树都求过后返回该变量值加1具体算法描述如下        0              0         0                                              1    6 清除树中的所有结点使之变为一棵空树此算法类似于树的后根遍历首先依次删除树根结点的所有子树然后删除根结点并把指向根结点的指针置为空该算法中的指向树根结点的参数  必须是引用这样才能作用于具体的实参具体算法描述如下               0                        上面讨论的树的一些运算都需要访问树中的所有结点并且每个结点的值仅被访问一次访问时也只是做些简单的操作所以每个算法的时间复杂度均为其中表示树中的结点数各算法的空间复杂度最好情况为 最差情况为用下面程序调试对一般树运算的算法      3  假定定义为常数3      为了与队列中使用的元素类型相区别树中的元素类型用标识符表示      一般树中的结点类型         结点值域         结点指针域01         定义队列的元素类型      队列的顺序存储类型         指向存储队列的数组空间         队首指针队尾指针变量         数组长度    顺序队列运算  一般树运算  注意把查找算法中的修改为                        50      输入一棵广义表字符串        从键盘输入树的广义表字符串        建立叉树的链接存储结构      先根遍历结果        后根遍历结果        按层遍历结果        按广义表形式输出的叉树为                  树的深度 输入待查找的一个字符      查找成功   查找失败      得到的运行结果如下  输入一棵3叉树的广义表字符串    先根遍历结果             后根遍历结果             按层遍历结果             按广义表形式输出的叉树为树的深度4  输入待查找的一个字符  查找成功  习题 5  习题51运算题  1 已知一棵度为的树中有1个度为1的结点2个度为2的结点个度为的结点问树中有多少个叶子结点  2 画出由3个结点组成的所有不同结构的二叉树请问共有多少种不同的结构每一种结构又对应多少种不同的排列次序  3 设一棵二叉树广义表表示为分别写出对它进行先序中序后序按层遍历的结果  先序  中序  后序  按层  4 设一棵普通树的广义表表示为分别写出先根后根按层遍历的结果  先根  后根  按层  5 已知一棵二叉树的先根和中根序列求该二叉树的后根序列  先根序列  中根序列  后根序列  6 已知一棵二叉树的中根和后根序列求该二叉树的高度和双支单支及叶子结点数  中根序列  后根序列  高度 双支 单支 叶子  7 已知一棵二叉树在数组中的链接存储如下写出该二叉树对应的广义表示 0  1  2  3  4  5  6  7  8  9  10  11  12                                  1  2  0  4  0  6  0  8  0  0   0   12  0   11 5  3  0  0  7  0  9  10 0   0   0   0  习题 52算法分析题1 下面函数的功能是返回二叉树  中值为  的结点所在的层数请在划有横线的地方填写合适内容         0 空树的层数为 0       1 根结点的层数为 1              1        11 1         22         3        若树中不存在  结点则返回 0         0    2 指出下面函数的功能                                                            3 已知二叉树中的结点类型  定义如下    其中 为结点值域 和  分别为指向左右孩子结点的指针域 为指向父亲结点的指针域根据下面函数的定义指出函数的功能算法中参数  指向一棵二叉树 保存一个结点的值                                      4 指出下面函数的功能                                                                                                                 5 设  指向一棵二叉树该二叉树的广义表表示为 则依次使用 111和 1调用下面算法时假定每次调用时  的初值均为 0引用变量  的带回值依次为123和4 1                          1          1      6 下面函数的功能是从二叉树  中查找值为  的结点若查找成功则返回结点地址否则返回空请在划有横线的地方填合适内容      1             2                        34  7 指出下面函数的功能           0                                     习题 53算法设计题1 根据下面函数声明编写求一棵二叉树  中结点总数的算法其值由函数返回 2 根据下面函数声明编写求一棵二叉树中叶子结点总数的算法其值由函数返回 3 根据下面函数声明编写判断两棵二叉树是否相等的算法若相等则返回 1否则返回 0算法中参数 1 和 2 分别指向这两棵二叉树的根结点当两棵树的结构完全相同并且对应结点的值也相同时才被认为相等 1 24 根据下面函数声明编写交换一棵二叉树  中所有左右子树的算法 5 根据下面函数声明编写复制一棵二叉树  的算法并返回复制得到的二叉树的根结点指针 6 根据下面函数声明编写从一棵二叉树  中求出结点值大于  的结点个数的算法并返回所求结果   7 根据下面函数声明编写对二叉树进行中序遍历的非递归算法在算法中定义一个数组和栈顶指针作为栈使用 8 根据下面函数声明编写求一棵二叉树  中所有结点数和叶子结点数的算法其值分别由引用参数 1 和 2 带回 1 和 2 的初值均为 0     1   29 已知一棵具有个结点的完全二叉树被顺序存储于一维数组的1元素中根据下面函数声明编写一个算法打印出编号为的结点的双亲和所有孩子       10 根据下面函数声明编写求一棵普通树  中结点总数的算法  11 若一棵树是以二叉树的形式链接存储的根据下面函数声明编写以广义表形式输出对应树的算法  