第 3 章 集合稀疏矩阵和广义表31 集合的定义和抽象数据类型311 集合定义集合  又称集合结构由具有相同属性的数据元素组合而成数据之间没有任何前驱和后继关系集合中数据元素的个数称为集合的长度假定用表示  0当0时则为空集若集合为空则表示为若非空则表示为1 2   1  其中每个元素的下标为对该元素的编号它是为了区别而任意标注的不代表任何次序因为集合中的元素可以按任何次序排列假定按元素前后位置编号的次序排列那么1就是集合中第 1 个元素2就是第 2 个元素就是第个元素就是第个最后一个元素像线性表一样集合的长度是变化的当向它插入一个元素后其长度就增加 1当从中删除一个元素后其长度就减少 1集合中的元素类型可以为任何一种类型用标识符  表示若实际的元素类型为某一具体类型如整型则可以通过  语句指定为  类型312 集合的抽象数据类型集合的抽象数据类型同样包括数据和操作两个部分数据部分为一个集合假定用标识符  表示操作部分包括对集合进行的各种常用运算如初始化集合为空清除集合中的所有元素求集合中元素个数判断集合是否为空判断一个元素是否属于集合输出集合中所有元素从集合中查找一个元素从集合删除一个元素向集合插入一个元素修改集合中的一个指定元素求两个集合的并集求两个集合的交集求两个集合的差集等集合的抽象数据类型定义如下  一个集合 假定用标识符  表示抽象存储类型    初始化集合为空    清除集合中的所有元素    求出集合的长度   判断集合是否为空     判断一个元素是否属于集合   输出集合中所有元素     从集合中查找一个元素      修改集合元素     向集合插入一个元素     从集合删除一个元素  1  2   求两个集合的并集  1  2   求两个集合的交集  1  2   求两个集合的差集 在以上列出的各种运算操作中第 12813 种运算需要改变集合  的状态所以  必须为引用参数而其他运算中的  参数和 1113 种运算中的 1 和 2 参数由于不需要改变它们所以可采用常量引用即在参数前加上  保留字32 集合的顺序存储结构和操作实现集合的顺序存储就是定义一个数组类型的对象来存储集合元素同时要定义一个整数变量来存储当前集合长度和定义一个整型常量或变量来存储数组类型的长度这 3 个对象的定义假定如下  20 定义存储集合元素的数组的长度  定义存储集合所有元素的数组  定义集合当前长度变量取值在 0 之间集合中的元素可以按任何次序存入到  数组中不妨按照元素在集合中的位置次序相应保存到对应元素中即第 1 个元素保存到下标为 0 的元素 0中第 2 个元素保存到下标为 1 的元素 1中以此类推因为集合中的元素与次序无关所以新添的元素则直接加到后面删除一个元素后则把最后一个元素调到这个空出的位置上使得插入和删除不需要移动任何元素从而节省运算时间为了集合操作方便可以把  数组和  变量封装在一个结构类型中结构类型名用  表示具体定义如下            若对存储集合的数组空间采用动态分配并且其数组长度能够随之改变则可以定义出如下的  类型         指向动态分配的数组空间      存集合当前长度      存  数组长度亦即所能存储集合的最大长度定义一个集合对象之后在初始化时要使该对象中的  指针指向由  或分配的动态数组空间同时使  的值为 0表示为空集集合的顺序存储结构如图 31 所示下标012111 123                        图 31 集合的顺序存储结构示意图下面以  为集合的顺序存储类型给出每个集合运算的算法1 初始化集合并置为空初始化集合时让  指向动态数组空间用于保存集合元素数组空间的初始大小可以任意设定假定为 10以后可以在插入元素的过程中根据需要增加      初始定义数组长度为 10以后可增减    10    动态存储空间分配      10              动态可分配的存储空间用完退出运行        1        置集合长度为 0即为空集合    02 清除集合中的所有元素在  集合类型的对象中由于集合数组空间是动态分配的所以清除集合就是释放所拥有的动态存储空间                                003 求出集合的长度 即所含元素的个数此算法返回集合  中的  域的值        4 判断集合是否为空此算法很简单 若集合长度为 0 则返回真表示空 否则返回假表示非空       05 判断一个元素是否属于集合此算法就是一个顺序查找元素的过程若找到表明该元素属于这个集合则返回真否则不属于这个集合则返回假         0                 6 输出集合中所有元素此算法使用一个  循环依次输出  集合中  域数组中保存的每个元素的值       0               若要求输出的所有集合元素是按值的升序排列的并且原有集合  的状态保持不变这时首先把集合  中  数组内容复制到一个临时数组中然后对这个临时数组进行排序并按下标位置依次输出各元素值对数组进行排序有多种不同方法最简单的方法是简单插入排序和简单选择排序设数组  中含有个元素简单选择排序的方法是需要依次进行1次循环每次把  中个元素看为一个有序表和一个无序表第 1 次有序表为空无序表含有全部个元素从无序表中顺序查找出一个最小值把它与此表中第一个元素 0交换其值经此次后 0成为最小值元素接着进行第二次循环处理时有序表中有一个元素 0无序表中有1个元素 11第 2 次从当前无序表中查找一个最小值元素把它与此表中第 1 个元素 1交换其值经此次后 1成为此表的最小值元素当然它小于等于 0然后进入第 3 次循环处理时有序表中有两个元素 01无序表中有2个元素 21以此类推进行1次循环处理时有序表中已有2个元素 03无序表中只有两个元素 21从这两个元素中查找到最小值并交换到 2位置后整个数组中的元素就按值的升序排列好了此排序方法与简单插入排序方法具有相同的时间复杂度即为2采用简单选择排序方法进行有序输出集合元素的算法如下 1             定义临时数组     0          把集合元素赋给数组     0 1            暂存本次最小值元素的下标        1                顺序查找找出本次最小值元素             同 交换其值                      7 从集合中查找一个元素此算法首先从集合中顺序查找值等于待查值  的元素若存在则把该元素值赋给  引用参数带回并返回真表示查找成功若不存在则返回假表示查找失败通常传递给  的待查值是一个元素的关键字不是完整的记录如对于学生记录待查值是学号对于产品记录待查值是产品号若查询到对应值的元素则需要把该元素的完整值赋给  带回以便使用如可以通过  得到某个学生的成绩某个产品的价格等     从集合中查找一个元素     0                   8 修改集合中的一个指定元素此算法与查找算法类似 需要首先在集合中顺序查找待修改的元素 即关键字等于关键字的元素 若找到相应元素则用的完整值修改这个元素 使它具有的值 并返回真 若未找到则无法修改 返回假表示修改失败          0                                           9 向集合插入一个元素此算法包含如下5个步骤1 顺序查找集合中是否存在值为待插值的元素 若存在则不能插入 返回假 因为集合中不允许存在重复的元素2 检查集合空间是否用完 若是则动态重分配 增加存储空间3 把值插入到表尾 即最后一个集合元素的后面空位置 上4 集合长度增 1 5 返回真表示插入成功对应的算法描述如下       向集合插入一个元素         0                    元素已存在 返回假表示不用插入                                若集合存储空间用完 则重新分配较大空间                      计算每个元素存储空间的长度         2        集合动态存储空间扩展为原来的 2 倍 原内容不变                     动态可分配的存储空间用完退出运行            12 把集合空间大小修改为新的长度 在末尾插入新元素 集合长度增1  返回真表示插入成功10 从集合删除一个元素此算法首先从集合中顺序查找值等于待删值  的元素 若存在该元素 则由  带回并删除它 把空出的位置用最后一个元素填补 接着若集合数组空间空余过多可释放一半 然后使集合长度减 1  返回真表示删除成功若集合中不存在 则无法删除 返回假表示删除失败     从集合删除一个元素 0    删除 元素 由  带回被删元素的完整值1 用最后一个元素填补 集合长度减104  10 若集合存储空间空余太多则进行适当削减若不削减可省此步  22 把集合空间大小修改为新的长度  删除成功返回真   删除失败返回假集合的插入和删除元素均需要一个查找过程 所以其算法的时间复杂度均为表示集合长度11 求两个集合的并集该算法是求两个集合 1 和 2 的并集 并将结果存入  引用参数所表示的集合中带回首先把 1 集合复制到  集合中 然后把 2 中的每个元素依次插入到集合  中 当然重复的元素不应该被插入 最后在  中就得到了 1 和 2 的并集 也就是在  所对应的实际参数集合中得到并集把 1 集合复制到  集合中 可以通过遍历 1 集合中的每个元素 并调用插入算法把它插入到  集合来实现 这样其时间复杂度为2 其中表示集合 1 的长度因为每插入一个元素都要比较  集合中的当前所有元素后 才能插入到表尾每插入一个元素的时间复杂度为 所以插入个元素的时间复杂度为2在下面算法中 1 复制到  采用元素直接赋值的方法 其时间复杂度仅为在  集合类型的对象中 存在着动态分配的存储空间 所以不能简单地采用赋值语句进行直接赋值式的复制 若这样的话 不同对象的  指针将指向同一个动态存储空间 即不同的对象共同占用该空间 这是系统所不允许的道理很简单 正常释放一个对象中  所指向的动态存储空间后 共同使用该空间的其他对象中由  所指向的动态存储空间也被非法的释放而无法访问因此 对于含有动态存储空间的对象 在复制时必须使之具有不同的动态存储空间 并且必须把被复制对象中动态存储空间所保存的内容复制到复制对象的动态存储空间中下面算法共包含 4 步 其中前 3 步完成把 1 复制到  的任务 第 4 步通过把 2 中的每个元素插入到  集合中 完成两集合的并运算设 1 和 2 集合的长度分别为和 则此算法的时间复杂度主要由第 4 步求出 为    1  2           1    为了把1复制到重分配动态数组                  1        1        0 1        1集合中的全部元素依次复制到中        1    1                 置集合的长度为1的长度    0 2        向集合依次插入集合2中的每个元素        212 求两个集合的交集此算法首先把存放结果的集合  变为一个空集 然后依次从 2 集合中取出每一个元素 利用它去查找 1 集合 看是否存在 若存在则把它写入交集  中 这样写入  中的元素既属于 1 又属于 2在此算法中 从 1 中查找一个元素的时间复杂度为 所以整个算法的时间复杂度为    1  2                0                      置集合为一个空集    0 2       用2中的每个元素去查找1集合21                    把插入集合末尾                       2        2    13 求两个集合的差集此算法同求交集的算法类似首先把存放结果的集合变为一个空集然后依次从1集合中取出每一个元素利用它去查找2集合看是否存在若不存在则把它写入差集中这样写入中的元素仅属于1而不属于2此算法的时间复杂度同样为   1  2                0                              置集合为一个空集    0 1          1                      用1中的每个元素去查找2集合        2                    把插入集合末尾                                               2                2                        33 集合的链接存储结构和操作实现集合的顺序存储结构是通过数组实现的而集合的链接存储结构是通过存储结点之间的链接实现的链接形成的结果称为链接表通常采用单链表当一个集合利用单链表存储时集合中的每个元素对应单链表中的一个结点把这个元素存储到相应结点的值域中由于集合中的元素是无序的所以在单链表中可以按任何次序链接通常 当向表示集合的单链表中插入一个元素结点时 为操作简便 把它插入到表头 即插入到第1个结点的前面 使它成为新的表头结点 而原来的表头结点成为第2个结点 此时只修改新插入结点的指针域 使其指向原来的表头结点 再修改表头指针使其指向新插入的结点 从而完成结点的插入过程当从单链表中删除一个结点时 就是把该结点的指针域的值 即后一结点的地址 赋给其前一结点的指针域即可 若它本身为表头结点 则应把该结点的指针域的值赋给表头指针表示集合的单链表的结点结构定义如下            其中  为结点类型  为存储元素值的结点值域  为存储下一个结点地址的指针域由于单链表中的结点通常是靠动态分配产生的 不需要事先分配存储空间 所以存储一个单链表只需要存储它的表头指针即可由表头指针就能够访问该单链表假定表头指针用  表示 则  应定义为    集合单链表的表头指针集合单链表的示意图如图 32 所示121图 32 集合单链表的示意图按照集合的抽象数据类型的定义 假定集合存储采用单链表结构 由表头指针  表示 下面给出对集合的各种操作在单链表上的实现熟悉了第 2 章对用单链表表示的进行线性表操作的各种算法 以及上面面对顺序表 数组 表示的进行集合操作的各种算法后同学们也不难写出下面面对用单链表表示的进行集合操作的各种算法1 初始化集合为空      2 清除集合中的所有元素并释放占有的动态存储空间                    指向  单链表                 回收  集合中的每个结点                       指向  的后继结点  删除结点 使指向原来的后继结点 置为空3 求出集合中元素个数   求集合长度     0                              4 判断集合是否为空       5 判断一个元素是否属于集合                                     6 输出集合中所有元素                                7 从集合中查找一个元素         从集合单链表中顺序查找是否存在值为的结点                               若存在由带回已查找到的元素并返回真否则返回假                         8 修改集合中的一个指定元素         从集合单链表中顺序查找是否存在值为的结点                               若存在由修改已查找到的元素并返回真否则返回假                         9 向集合插入一个元素        建立值为的新结点              从单链表中顺序查找是否存在值为的结点                                    若不存在则把新结点插入到表头并返回真否则不插入返回假          10 从集合删除一个元素        从单链表中顺序查找是否存在值为  的结点                                      若不存在则返回假表明删除成功          由  带回待删除结点  的完整值若不需要带回可设  为值参        从单链表中删除已找到的  结点对是否为表头应做不同处理              删除  结点后返回真          11 求两个集合的并集  1  2      置并集的表头指针  为空        把 1 集合单链表复制到  集合单链表中     1             建立新结点并赋值为                           把新结点插入到  集合单链表的表头                 使  指向下一个结点                把 2 集合单链表中的每个元素插入到  集合单链表中2          12 求两个集合的交集  1  2  置交集的表头指针  为空把 1 集合与 2 集合中共同的元素插入到  集合中  2                           将  赋给      1         用  查找 1 集合              若查找成功则把  插入到  集合中                         使  指向下一个结点13 求两个集合的差集  1  2  置差集的表头指针  为空把存在于 1 集合而不存在于 2 集合中的元素插入到  集合中  1                           将  赋给      2         用  查找 2 集合             若查找失败则把  插入到  集合中                         使  指向下一个结点同对线性表的存储一样对集合除了可以进行顺序存储和链接存储外还可以进行散列存储和索引存储相应地也能够根据具体的运算要求编写出利用 语言实现的算法待以后学习过这两种存储结构后能够比较容易地编写出来在集合抽象数据类型中规定的各种操作只是一些典型的操作当然在实际应用中还有许多如根据一个集合建立顺序存储结构或建立链接存储结构 从集合顺序表或单链表中查找出所有具有同一属性值的元素并输出出来 从任一存储结构的集合中查找具有最大或最小值的元素 把一个顺序表或单链表表示的集合按某一条件分解为两个集合等读者只要掌握集合的典型操作 对其他任何操作的算法将不难编写出来34 稀疏矩阵341 稀疏矩阵的定义1 稀疏矩阵的概念为了说明什么是稀疏矩阵 首先要清楚矩阵的概念矩阵  是一个具有行 列的数表 共包含有  个数元素 每个元素处在确定行和列的交点位置上 都与一对行号和列号唯一对应当一个矩阵中的行数和列数相同时 即时则称为阶矩阵或方阵如图 33 就是一个3  4的矩阵 它包含 3 行4 列 具有 12 个元素 每个元素都对应着唯一的行号和列号 如第 1 行与第 1 列交点位置上的元素 5 对应的行号和列号均为 1  第 2 行与第 4 列交点位置上的元素 9 对应的行号和列号分别为 2 和 4 1  2  1  5 284  2  9419  3  0721 一般矩阵1  2  3  1  300500  2  002000  3  104060  4  000000  5  001000 稀疏矩阵图 33 矩阵和稀疏矩阵稀疏矩阵   是矩阵中的一种特殊情况 其非零元素的个数远远小于零元素的个数如图 33 就是一个5  6的稀疏矩阵 该矩阵共有 30 个元素 其中非零元素为 7 个 占元素总数的 730在实际应用中 稀疏矩阵一般都比较大 非零元素所占的比例都比较小如对于一个100  100的稀疏矩阵 若非零元素的个数为 200  则非零元素占总元素个数的比例仅为 1502 稀疏矩阵的三元组线性表示在计算机中存储矩阵的一般方法是采用二维数组 其优点是可以随机地访问任一个元素 因而能够较容易地实现矩阵的各种运算 如转置运算加法运算乘法运算等但对于稀疏矩阵来说 采用二维数组的存储方法既浪费大量的存储单元用来存放零元素 又要在运算中花费大量的时间来进行零元素的无效计算 显然是不可取的一种较好的方法是只考虑存储占元素中极少数的非零元素对于稀疏矩阵中的每个非零元素可用它所在的行号列号以及元素值这三元组来表示若把所有的三元组按照行号为主序即为主关键字列号为辅序即为次关键字当行号相同时再考虑列号次序进行排列则就构成了一个表示稀疏矩阵的三元组线性表图 33  稀疏矩阵所对应的三元组线性表表示为113145232311334356531稀疏矩阵采用三元组线性表表示后可以使用顺序或链接方式存储从而比采用二维数组存储要大大地节省存储空间3 稀疏矩阵的抽象数据类型该抽象数据类型的数据部分为用三元组线性表表示的稀疏矩阵操作部分所包含的操作与对一般矩阵所做的操作相同通常为求一个稀疏矩阵的转置计算两个矩阵的和计算两个矩阵的乘积等一个矩阵的转置结果仍是一个矩阵该矩阵中的第行与第列交点位置上的元素等于被转置矩阵中第行与第列交点位置上的元素两个矩阵的和仍然是一个矩阵该矩阵中的第行第列位置上的元素等于两个相加矩阵中对应位置上的元素之和两矩阵求和的条件是它们的行数和列数必须分别对应相同两个矩阵的乘积仍然是一个矩阵该矩阵中的第行与第列位置上的元素等于第 1 个乘数矩阵中的第行与第 2 个乘数矩阵中的第列上对应元素乘积之累加和假定第 1 个乘数矩阵为第 2 个乘数矩阵为乘积结果矩阵为则中任一元素等于1  其中1    1    两矩阵求积的条件是第 1 个矩阵的列数必须等于第 2 个矩阵的行数下面给出稀疏矩阵的抽象数据类型的定义  采用顺序或链接方式存储的稀疏矩阵假定其存储类型用  标识符表示初始化稀疏矩阵 使它成为不含任何元素的空矩阵  求出稀疏矩阵  的转置矩阵并返回  求出 1 和 2 稀疏矩阵之和并返回  1  2求出 1 和 2 稀疏矩阵之乘积并返回  1  2按照一定格式向稀疏矩阵  输入所对应的三元组线性表      按照一定格式输出稀疏矩阵    342 稀疏矩阵的存储结构稀疏矩阵的存储结构包括顺序存储结构和链接存储结构两种在任一种存储结构中除了存储三元组线性表中的所有元素之外通常还需要存储稀疏矩阵的行数列数和非零元素的个数这 3 个整型量1 顺序存储稀疏矩阵的顺序存储就是对其相应的三元组线性表进行顺序存储假定每个非零元素的三元组用如下记录结构定义             其中  和  用来分别存储元素的行号和列号  用来存储元素值一个稀疏矩阵的顺序存储类型定义如下              1其中  和  域分别用来存储稀疏矩阵的行数列数和非零元素的个数  数组域用来顺序存储每个三元组元素 假定下标为 0 的元素 0不用 从下标为 1 起使用 为一个事先定义的全局常量 由它决定  数组的大小 该数组最多能够存储  个三元组元素例如 若用  类型的对象存储图 33 所示的稀疏矩阵 则  和  域的值应分别为 56 和 7  常量应大于等于 7  数组中的内容如图 34 所示下标1  1  1  3 2  1  4  5 3  2  3  2 4  3  1  1 5  3  3  4 6  3  5  6 7  5  3  1                图 34 稀疏矩阵的顺序存储结构2 链接存储稀疏矩阵的链接存储就是对其相应的三元组线性表进行链接存储下面介绍两种链接存储方法1 带行指针向量的链接存储在这种链接存储中 需要把具有相同行号的三元组结点按照列号从小到大的顺序链接成一个单链表 每个三元组结点的类型定义如下                         存储行号和列号                      存储元素值                  指向同一行的下一个结点稀疏矩阵中的每一行对应一个单链表 每一个单链表都有一个表头指针 为了把它们保存起来 便于访问每一个单链表 需要使用一个行指针向量 即一维数组 该向量中的第个分量 即对应数组中下标为的元素 用来存储稀疏矩阵中第行所对应的单链表的表头指针带行指针向量的链接存储类型定义如下              1其中 整数域  和分别用来保存稀疏矩阵的行数列数和非零元素的个数  数组 向量 域用来保存稀疏矩阵所对应的个行单链表的表头指针 第 0 分量未用 第行单链表的表头指针存于第分量  中  为全局变量 其值要大于等于所存储矩阵的行数利用  类型的对象存储图 33 所示的稀疏矩阵 则链接存储结构如图 35 所示 其中每个单链表中的结点由动态分配链接而成分量编号 行指针向量1  1 1 31 4 52  2 3 23  3 1 13 3 43 5 645  5 3 1图 35 带行指针向量的链接存储结构2 十字链接存储十字链接存储是既带行指针向量又带列指针向量的链接存储在这种链接存储中 每个三元组结点既处于同一行的单链表中 又处于同一列的单链表中 即处于所在的行单链表和列单链表的交点处在十字链接存储中每个结点的类型可定义如下                   其中  和  域分别用来存储非零元素的行号列号和元素值 域用来存储指向同一列下一个结点的指针 域用来存储指向同一行下一个结点的指针当然若不存在下一个结点则相应的指针域为空值在稀疏矩阵的十字链接存储中需要使用两个指针向量一个是行指针向量用来存储行单链表的表头指针另一个是列指针向量用来存储列单链表的表头指针稀疏矩阵的十字链接存储类型定义如下 1             1     1其中全局常量  用来规定行指针向量的大小全局常量  用来规定列指针向量的大小它们应分别大于等于所存稀疏矩阵的行数和列数同样在  和  向量中下标为 0 的元素未用利用图 33 所示的稀疏矩阵则得到十字链接存储结构的示意图如图 36 所示列向量 1 2 3 4 5 6行向量1 1 1 3  1 4 52 2 3 23 3 1 1  3 3 4  3 5 64 5 3 1图 36 稀疏矩阵的十字链接存储结构343 稀疏矩阵的运算1 初始化运算稀疏矩阵的存储类型不同其初始化过程也不同1 对于  类型的对象初始化过程如下      0 0 02 对于  类型的对象其初始化如下      0 0 0     1          3 对于  类型的对象初始化如下      0 0 0     1              1          2 稀疏矩阵的输入稀疏矩阵的输入应按照对应三元组线性表中三元组排列的次序输入每行输入一个三元组行号列号和元素值之间用空格分开最后以回车键结束当输入完所有三元组后以输入一个特殊的三元组000结束整个输入过程假定稀疏矩阵采用  类型存储下面给出相应的输入算法其中引用参数  表示  类型的稀疏矩阵 和  分别表示矩阵的行数和列数                       0    0                     若稀疏矩阵采用十字链表存储则相应的输入算法如下                       0        0                           建立一个新结点                                                 把新结点链接到所在行单链表的末尾                                                                   把新结点链接到所在列单链表的末尾                                                                   输入一个新三元组                请自行编写出采用带行指针向量的链接存储所对应的输入算法3 稀疏矩阵的输出对于采用顺序存储的稀疏矩阵按三元组线性表的格式输出其输出算法如下             1                                    0                                 对于采用其他存储结构的稀疏矩阵不难写出其相应的输出算法4 稀疏矩阵的转置运算以稀疏矩阵的顺序存储结构为例讨论稀疏矩阵的转置运算设图 33 所示的稀疏矩阵命名为它所对应的顺序存储类型的对象命名为则图 34 就是该对象中数组  中的内容矩阵的转置矩阵如图 37 所示其命名为用顺序存储类型的对象来存储它中  数组的内容如图 37 所示3  0  1  0  0  0  0  0  0  0  0  2  4  0  1  5  0  0  0  0  0  0  6  0  0  0  0  0  0  0的转置矩阵                    1  1  1  3   2  1  3  1   3  2  2    4  3  3  4   5  3  5  1   6  4  1  5   7  5  3  6         的顺序存储结构图 37 稀疏矩阵和它的顺序存储结构下面根据稀疏矩阵的顺序存储对象求它的转置矩阵的顺序存储对象来讨论进行稀疏矩阵转置运算的两种方法普通转置方法和快速转置方法1 普通转置方法普通转置方法要对  中的  数组进行次扫描 为  的列数 即  的行数 才能完成具体地说 第 1 次扫描  域的值等于 1 即列为 1 所在的三元组 即对应  中第 1 行非零元素 按照从上到下 因行号为从小到大 所以对应  中是列号从小到大的 的顺序 行列值互换写入到对象  的  数组中 第 2 次扫描把  域的值等于 2 即列为 2 所在的三元组 即对应  中第 2 行非零元素 按照从上到下的顺序接着写入到对象  的  数组中 以此类推具体算法描述如下        用  暂存转置结果               用    分别暂存  的行数列数和非零元素的个数          分别置  的行数域列数域和非零元素的个数域为   和           若是矩矩阵 即非零元素的个数为 0 的矩阵 则转换完毕返回    0      按列进行每个元素的转换     1 用  指示  数组中待存元素的下标     1          用  扫描  数组中的  域         1              用  指示  数组中当前元素下标                                                                                               返回转置矩阵 此算法的运行时间主要取决于最后的双重  循环 故算法的时间复杂度为   即同  的列数与非零元素的个数的乘积成正比当稀疏矩阵接近一般矩阵时 非零元素的个数等于矩阵中的行数乘以列数 此时算法的时间复杂度为  2 它比采用二维数组存储时进行转置运算的时间复杂度  要坏得多因此 对于一般矩阵最好采用二维数组存储和运算2 快速转置方法用快速转置的方法进行稀疏矩阵转置要对  中的  数组进行两次扫描 第 1 次扫描统计出对应  矩阵中每一列 即对应转置矩阵  中每一行 非零元素的个数 由此求出每一列的第 1 个非零元素 即对应  中每一行的第 1 个非零元素 在  数组中应有的位置 第 2 次扫描把数组  中的每一个三元组 行列值互换写入到数组  中确定的位置上设表示中元素的列号即对应转置矩阵中元素的行号和均表示具有为中的列数即中的行数个分量的向量向量的第分量即用来统计第列中的非零元素的个数向量的第分量即用来指向第列待转换的非零元素被存储在数组中的下标位置显然向量的第分量的初始值即第列的第一个非零元素被存储在数组中的下标位置由下式计算 11  11  2    根据稀疏矩阵和顺序存储对象得到向量的各分量值和向量的各分量初始值如表 31 所示表 31  和  向量初始值        1  2  3  4  5  6      1  2  3  4  5  6    2  0  3  1  1  0    1  3  3  6  7  8 结合图 37 进行分析验证和数组中各分量值的正确性数组中的第个分量值等于稀疏矩阵中第行上非零元素的个数数组中的第个分量值等于中第行上第一个即列号最小的非零元素在数组中的下标位置用 语言描述稀疏矩阵的快速转置方法的算法如下        用  暂存转置结果               用  分别暂存  的行数列数和非零元素的个数          分别置  的行数域列数域和非零元素的个数域为  和           若是零矩阵即非零元素的个数为 0 的矩阵则转换完毕返回    0      为  和  向量动态分配存储空间      1      1    对  向量进行初始化 置每个分量为 0         1   0    对第 1 遍扫描数组  统计出每一列即转换后的每一行非零元素的个数    1                            计算每一列即转换后的每一行的第 1 个非零元素在  中存储位置112      11对进行第2遍扫描把每个元素行列值互换写入到的确定位置1                              取待转换元素的列号                                取待转换元素在中的位置                              以下3行存储被转换的元素                                           使指向下个位置删除动态分配的数组  返回转置矩阵 此算法的运行时间主要取决于4个单重循环故时间复杂度为显然它比第一种转置算法的时间复杂度要好得多当稀疏矩阵接近一般矩阵时其时间复杂度变为 与采用二维数组表示时相同当然进行每一个元素转换的运算步骤要比使用二维数组时的直接赋值即操作要复杂一些5 稀疏矩阵的加法运算假定采用带行指针向量的存储结构进行稀疏矩阵的加法运算设1和2为两个加数矩阵为和矩阵即结果矩阵两矩阵相加的前提条件是两矩阵的大小相同即行数和列数分别对应相等两矩阵相加的结果仍为一个具有相同大小的矩阵结果矩阵中每个行单链表仍然要按列号有序它是对1和2中对应行单链表的按列号有序的合并结果当1和2中对应行单链表的两个结点分别具有相同的行号和列号时若它们的元素值之和为0则不在结果矩阵中建立结点只有当其和不为0或者列号不同时才需要在结果矩阵中建立结点具体算法描述如下  1  2       暂存运算结果以便返回    若两个矩阵尺寸不同则给出错误信息并停止运行    12  12                     1    把其中一个加数矩阵的尺寸赋给结果矩阵    1 1若两个矩阵均为零矩阵则无须计算返回10  20  进行两矩阵相加产生和矩阵 0 用统计结果矩阵中结点的个数 1 1  循环的次数等于矩阵的行数     1 2     11 1指向1矩阵中第行单链表的待相加的结点    22 2指向2矩阵中第行单链表的待相加的结点     指向矩阵中第行单链表的表尾结点    当1和2均不为空时进行比较和加法运算把结点复制到结果矩阵中    12                   12  赋值新结点1指针后移            1 11                 12  赋值新结点2指针后移            2 22                 对具有相同列号的结点进行处理            120  不建立新结点和链接                11 22 1和2指针后移                                          新结点值为两结点值之和1和2指针后移                1                2                11 22                     将新结点的指针域置空        把新结点链接到结果矩阵的第行单链表的表尾                           修改指针使之指向新的表尾         结果矩阵中的结点数加1           若1不为空则把剩余结点复制链接到结果矩阵中    1                   1                                          11       若2不为空则把剩余结点复制链接到结果矩阵中2           2                      22                 置和矩阵中结点数      返回和矩阵在这个算法中需要扫描 1 和 2 中的每一个结点并建立新结点和把它链接到结果矩阵中相应行单链表的表尾因为对每个结点的处理均为时间常量其时间复杂度为1所以整个算法的时间复杂度为12即与两个加数矩阵中结点数即非零元素个数之和成正比当稀疏矩阵相当稀疏时即非零元素的个数  远远小于行列数的乘积  时该算法的时间复杂度比采用二维数组表示时进行矩阵求和的时间复杂度  要小得多35 广义表351 广义表的定义广义表   简称表它是线性表的推广一个广义表是  0个元素的一个有限序列当0时则称为空表在一个非空的广义表中其元素可以是某一确定类型的对象这种元素被称为单元素也可以是由单元素构成的表这种元素被称为子表或表元素显然广义表的定义是递归的广义表是一种递归的数据结构设为广义表的第个元素则广义表的一般表示与线性表相同具体如下1 2   1  其中表示广义表的长度即广义表中所含元素的个数  0同线性表一样也可以用一个标识符来命名一个广义表如用  命名上面的广义表则为1 2   1  在广义表的讨论中为了把单元素同表元素区别开来一般用小写字母表示单元素用大写字母表示表如 其中是一个空表其长度为0是一个只含有单元素的表其长度为1中有两个元素一个是单元素另一个是表元素的长度为2中有三个元素其中每个元素又都是一个表的长度为3中只含有一个元素该元素是一个表该表中包含有三个元素其中后两个元素又都是表若把每个表的名字若有的话写在其表的前面则上面的五个广义表可相应地表示为若用圆圈和方框分别表示表和单元素并用线段把表和它的元素元素结点应在其表结点的下方连接起来则可得到一个广义表的图形表示上面5个广义表的图形表示如图38所示可以看出广义表的图形表示像倒着画的一棵树树根结点代表整个广义表各层树枝结点代表相应的子表树叶结点代表单元素或空表一个表的深度是指该表中括号嵌套的最大次数在图形表示中则是从树根结点到每个树枝结点所经过的结点个数的最大值如表和的深度为1表的深度分别为 23 和 435 2 广义表的存储结构广义表是一种递归的数据结构 因此很难为每个广义表分配固定大小的存储空间 所以其存储结构只好采用动态链接结构在一个广义表中 其数据元素有单元素和子表之分 所以在对应的存储结构中 其存储结点也有单元素结点和子表结点之分对于单元素结点 应包括值域和指向其后继结点的指针域 对于子表结点 应包括指向子表中第一个结点的表头指针域和指向其后继结点的指针域为了把广义表中的单元素结点和子表结点区别开来 还必须在每个结点中增设一个标志域 让标志域取两种不同的值 从而区分两种不同的结点根据分析 广义表中的结点类型在 语言中可定义如下        标志域              值域或子表的表头指针域                   指向后继结点的指针域其中  作为标志域 其值为  时表示单元素结点 使用无名联合中的  域 用来存储元素值 其值为  时表示子表结点 使用无名联合中的  域 用来存储指向子表中第一个结点的指针 即子表的表头指针 通过它实现向子表的链接 即实现广义表的递归结构 结点中的  作为指向其后继结点的指针域 通过它把表中同一层的所有结点依次链接起来上述 5 个广义表的存储结构的示意图 如图 39 所示0  1 11 1 0 10 0  10  0   0  10 0 0  0  0 10 0 0  0 0  0 0  图 39 广义表的链接存储结构若把整个广义表也同样用一个表结点来表示则应在每个广义表的表头结点即表中第一个结点之前增加一个表结点称此为表头附加结点此表结点的  域指向表头结点 域为空表头指针则指向这个表结点例如若在广义表  的表头结点之前增加这样的表结点对应的示意图如图 310 所示1  1 1  0 1 0   0 0 0  图 310 带表头附加结点的广义表的链存储结构这种带表头附加结点的广义表表示将给广义表的某些运算带来方便35 3 广义表的运算广义表的运算主要有求广义表的长度和深度向广义表插入元素和从广义表中查找或删除元素建立广义表的存储结构打印广义表等由于广义表是一种递归的数据结构所以对广义表的运算一般采用递归的算法全面介绍广义表的各种运算的算法超出了本课程的教学内容这里只讨论其中一些算法1 求广义表的长度在广义表中同一层次的每个结点是通过  域链接起来的所以可把它看作是由  域链接起来的单链表这样求广义表的长度就是求单链表的长度可以采用以前介绍的求单链表长度的方法求其长度由于单链表的结构也是一种递归结构即每个结点的指针域均指向一个单链表称为该结点的后继单链表它所指向的结点为该单链表的第一个结点即表头结点所以求单链表的长度也可以采用递归算法即若单链表非空的话其长度等于 1 加上表头结点的后继单链表的长度若单链表为空则长度为 0这是递归的终止条件求广义表长度的递归算法如下   求值参  所指向的广义表的长度              1             0此算法每次被调用时无论是从外部对它的非递归调用还是从内部对它的递归调用都需要给值参  分配存储空间用以存储由实参传来的指针值所以算法的空间复杂度为若采用非递归算法其空间复杂度为1两者的时间复杂度均为为广义表的长度这里介绍递归算法是想通过这个简单的例子为后面介绍更复杂的递归算法做准备2 求广义表的深度广义表深度的递归定义是它等于所有子表中表的最大深度加 1若一个表为空或仅由单元素所组成则深度为 1设  表示任一子表的深度 表示所有子表中表的最大深度 表示广义表的深度则有1因一个表不包含任何子表时其深度为 1所以  的初值应为 0求一个广义表深度的算法如下   求值参  所指向的广义表的深度     0 给  赋初值 0                              递归调用求出子表的深度               让  为同层求过子表深度的最大值                 使  指向同一层的下一个结点         1 返回表的深度从这个算法可以看出当  为一个空表或仅由单元素组成的线性表时不进入下一层的递归调用而结束本次调用并返回 1当  含有子表时才会进入求子表深度的递归调用返回后修改  的值使之为所求过的本层次子表中深度的最大值本层次的所有结点都扫描完毕后结束本次调用并返回表的深度设一个广义表为它的存储结构如图 311 所示为了便于分析在图中每个链接指针上都标明数字假定它为该指针的具体值在第 1 次非递归调用和以后每次递归调用  算法时系统都要在动态堆存储区中为值参 局部变量  和  以及保存调用后的返回地址分配存储空间每次调用结束按所保存的返回地址返回后系统都释放为本次调用所分配的存储空间从而使上一层调用所分配的存储空间成为变量的当前存储空间若以表头指针  作为实参去调用  算法则在算法的执行过程中动态堆栈的数据变化情况如图 312 所示其中用  表示返回地址域第 1 次调用即非递归调用又称为第 0 次递归调用后的返回地址用 1 表示以后每次递归调用的返回地址用 2 表示 第 0 次递归调用                 10  0     1  第 1 次递归调用                   0     2  10  0     1  返回                 10  1  1  1   指向 20 结点                 20  1  1  1   指向 30 结点                 30  1  1  1  第 2 次递归调用                 40  0     2  30  1  1  1  第 3 次递归调用                 50  0     2  40  0     2  30  1  1  1   指向 60 结点                 60  0     2  40  0     2  30  1  1  1   变为空                   0     2  40  0     2  30  1  1  1  返回                 40  1  1  2  30  1  1  1   指向 70 结点                 70  1  1  2  30  1  1  1   变为空                   1  1  2  30  1  1  1  返回                 30  2  2  1   变为空                   2  2  1  返回 3图 312 系统动态堆栈中数据的变化情况可以分析出该算法需要扫描广义表中的所有结点对于单元素结点需要访问两次一次为读取  域值另一次为读取  域值对于子表结点需要访问 3 次分别为读取  和  域的值所以此算法的时间复杂度为其中为广义表中所有结点的个数该算法的空间复杂度为为广义表的深度3 建立广义表的存储结构设广义表中的元素类型  为字符类型 每个单元素的值被限定为英文字母广义表由键盘输入其格式为元素之间用一个逗号分隔表元素的起止符号分别为左右圆括号空表在其圆括号内使用一个  字符表示最后使用一个分号作为整个广义表的结束符号如  就是一个符合上述规定的广义表输入格式建立广义表存储结构的算法同样是一个递归算法该算法使用一个具有类型的引用指针参数用以返回所建广义表的表头指针用  表示在算法的执行过程中对于从键盘上输入的一个广义表需要从头到尾扫描每一个字符当碰到左括号时表明它是一个表元素的开始则应建立一个由  指向的表结点并用它的  域作为子表的表头指针进行递归调用来建立子表的存储结构当碰到一个英文字母时表明它是一个单元素则应建立一个由  指向的单元素结点当碰到一个字符时表明它是一个空表则应置  为空当建立了一个由  指向的结点后接着碰到逗号字符时表明存在后继结点需要建立当前结点即由  指向的结点的后继表当碰到右括号或分号字符时表明当前所处理的表已结束应置当前结点的  域为空根据广义表输入格式和建立存储结构的思路可知所建立的广义表存储结构将带有表头附加结点因为一开始就会遇到左括号就会建立起整个表的表元素结点若要建立不带表头附加结点的广义表存储结构则只要使输入格式中省去最外层的一对圆括号即可根据分析编写算法如下           读入一个字符此处只可能读入左括号和英文字母        若输入为则置  为空         若输入为左括号则建立由  所指向的子表结点并递归构造子表                                       建立由  所指向的单元素结点                                      此处读入的字符必为逗号右括号或分号        若  为空此时输入的字符必然为 则什么都不用做        若输入为逗号则递归构造后继表          若输入为右括号或分号则置  的后继指针域为空      该算法需要扫描输入广义表中的所有字符并且处理每个字符都是简单的比较或赋值操作其时间复杂度为1所以整个算法的时间复杂度为表示广义表中所有字符的个数由于平均每两个字符可以生成一个表结点或单元素结点所以也可以看做生成的广义表中所有结点的个数在这个算法中既包含向子表的递归调用也包含向后继表的递归调用所以递归调用的最大深度即动态堆栈的最大深度不会超过生成的广义表中所有结点的个数因此其空间复杂度也为4 打印输出广义表根据以  为带表头附加结点的广义表的表头指针打印输出该广义表同样需要向子表递归调用和向后继表递归调用当  结点为元素结点时则应首先输出作为一个表的起始符号的左括号然后再输出以  为表头指针的表当  结点为单元素结点时则应输出该元素的值当以  为表头指针的表输出完毕后应在其最后输出一个作为表终止符的右括号当  结点输出结束后若存在后继结点则应首先输出一个逗号作为分隔符然后再递归输出由  指针所指向的后继表打印输出一个广义表的算法描述如下其中值参  指向一个带有表头附加结点的广义表 也可采用指针引用参数                                                                                                     该算法的时间复杂度和空间复杂度与建立广义表存储结构的情况相同均为为广义表中所有结点的个数354 简单程序举例以上介绍的几种进行广义表运算的算法假定被保存在 广义表运算 程序文件中现要求利用它们编写一个程序首先建立广义表  的存储结构然后输出该广义表最后求该广义表的长度和深度该程序比较简单如下所示                                        广义表运算                      广义表的长度    广义表的深度该程序运行后从键盘上输入如下一行字符  则得到的输出结果如下  广义表的长度5广义表的深度4习 题 3习题 31按要求进行稀疏矩阵运算已知一个稀疏矩阵如图 313 所示0  4  0  0  0  0  0 0  0  0  3  0  0  1 8  0  0  0  0  0  0 0  0  0  5  0  0  0 0  7  0  0  0  2  0 0  0  0  6  0  0  0图 313 具有6行7列的一个稀疏矩阵1 写出它的三元组线性表2 给出它的顺序存储表示3 给出它的转置矩阵的三元组线性表和顺序存储表示4 给出对它进行快速转置时 向量中各分量的值5 给出对它进行快速转置前和转置后 向量中各分量的值习题 32按要求进行广义表运算画出下列每个广义表的带表头附加结点的链接存储结构图并分别计算它们的长度和深度1 2 3 4 5 6 习题 33写出下列每个主程序段的运行输出结果1                8159057253416         0 8       2590                 2       8159057253416     165601630348                           0 8      0 6  1                              3       8159057253416                  0 8           34        48    5         4                              8159057253416     1556016308    0 8      0 5  1                习题34根据下列每个题目的要求编写算法1 比较两个集合的大小若两集合长度不等则退出运行在两集合长度相等的情况下若各集合的元素值的累加和相等则认为它们相等返回0若第1个集合的元素值的累加和大于第2个集合的元素值的累加和则认为第1个集合大于第2个集合返回1若第1个集合的元素值的累加和小于第2个集合的元素值的累加和则认为第1个集合小于第2个集合返回12 定义等于号运算符重载函数比较两个集合是否相等若两集合长度不等则退出运行在两集合长度相等情况下若各集合的元素值的累加和相等则认为它们相等返回真否则认为它们不等返回假3 从键盘上输入一个三元组线性表当输入000元素时结束实现稀疏矩阵的带行指针向量的链接存储4 以三元组线性表的形式输出一个稀疏矩阵其中稀疏矩阵采用的是带行指针向量的链接存储5 实现稀疏矩阵的十字链表存储的三元组线性表输出6 采用顺序存储方式实现稀疏矩阵1和2相加的运算运算结果由引用参数带回7 编写一个建立广义表链接存储结构的算法广义表由字符串值参提供8 编写一个从广义表中查找单元素字符等于给定值的算法若查找成功则返回真否则返回假