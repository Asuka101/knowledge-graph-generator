第7章 图71 图的概念711 图的定义图  是图型结构的简称是一种复杂的非线性数据结构图在各个领域都有着广泛的应用图的二元组定义为其中是顶点集合0  1  0  为顶点值的类型同以前使用的一样可以代表任何类型为顶点数当0时则为空集是上二元关系的集合通常讨论仅含一个二元关系的情况且直接用表示这个关系这样就是上顶点的序偶或无序对每个无序对是两个对称序偶 和 的简写形式的集合对于上的每个顶点在中都允许有任意多个前驱和任意多个后继即对每个顶点的前驱和后继个数均不加限制回顾一下线性表和树的二元组定义都是在其二元关系上规定了某种限制线性表的限制是只允许每个结点有一个前驱和一个后继树的限制是只允许每个结点有一个前驱因此图比线性表和树更具有广泛性它包含线性表和树在内线性表和树可看作图的简单情况对于一个图若是序偶的集合则每个序偶对应图形中的一条有向边若是无序对的集合则每个无序对对应图形中的一条无向边所以可把看作为边的集合这样图的二元组定义可叙述为图由顶点集和边集所组成针对图顶点集和边集可分别记为和若顶点集为空则边集必然为空若顶点集非空则边集可空可不空当边集为空时图中的顶点均为孤立顶点对于一个图若边集中为有向边则称此图为有向图 若边集中为无向边则称此图为无向图 如图 71 所示1和2分别为一个无向图和有向图1中每个顶点里的数字为该顶点的序号序号从 0 开始顶点的值没有在图形中给出2中每个顶点里的字母为该顶点的值或关键字顶点外面的数字为该顶点的序号在一般的图型结构讨论中只关心顶点的序号而不关心顶点的值所有顶点的值通常被另外保存在一个数组或文件中待需要时取用1和2对应的顶点集和边集分别如下所示这里假定用每个顶点的序号代替顶点的值10123451010203041424253545201234201021214212343若用2顶点的值表示其顶点集和边集则如下所示22在日常生活中图的应用到处可见如各种交通图线路图结构图和流程图等712 图的基本术语1 端点和邻接点在一个无向图中若存在一条边则称为此边的两个端点并称它们互为邻接点 即是的一个邻接点也是的一个邻接点在图 71 中以顶点0为端点的 4 条边是010203和040的 4 个邻接点分别为123和4以顶点3为端点的两条边是30和353的两个邻接点分别为0和5在一个有向图中若存在一条边则称此边是顶点的一条出边顶点的一条入边称为此边的起始点简称起点或始点为此边的终止端点简称终点称和互为邻接点并称是的出边邻接点是的入边邻接点在图 71 中顶点  有两条出边和两条入边和顶点  的两个出边邻接点为  和 两个入边邻接点为  和 2 顶点的度无向图中顶点的度为以该顶点为一个端点的边的数目简单地说就是该顶点的边的数目记为在图 1 中0顶点的度为 41顶点的度为 2有向图中顶点的度有入度和出度之分入度是该顶点的入边的数目记为出度是该顶点的出边的数目记为顶点的度等于它的入度和出度之和即在图 2 中顶点  的入度为 0出度为 2度为 2顶点  的入度为 2出度为 2度为 4若一个图中有个顶点和条边则该图所有顶点的度数之和同边数满足下面关系12 01 因为每条边各为两个端点增加度数 1合起来为图中添加度数 2所以全部顶点的度数之和为所有边数的 2 倍或者说边数为全部顶点的度数之和的一半3 完全图稠密图稀疏图若无向图中的每两个顶点之间都存在着一条边有向图中的每两个顶点之间都存在着方向相反的两条边则称此图为完全图显然若完全图是无向的则图中包含有12 1条边它等于从个元素中每次取出 2 个元素的所有组合数若完全图是有向的则图中包含有1条边即每个顶点到其余1个顶点之间都有一条出边当一个图接近完全图时则称它为稠密图相反当一个图含有较少的边数即1双小于号表示远远小于此边数通常与顶点数同数量级时则称它为稀疏图如图 72 所示3 就是一个含有 5 个顶点的无向完全图4 就是一个含有 6 个顶点的稀疏图 3 4图 72 完全图和稀疏图4 子图设有两个图和若是的子集即 且是的子集即 并且中所涉及到的顶点全部包含在中则称是的子图例如由 3 中的全部顶点和同一0相连的所有边可构成 3 的一个子图由 3 中的顶点012和它们之间的所有边可构成 3 的另一个子图5 路径和回路在一个图中从顶点到顶点的一条路径  是一个顶点序列1 2  其中1若此图是无向图则1  2  若此图是有向图则1  2  从顶点到顶点的路径长度是指该路径上经过的边的数目若在一条路径上的所有顶点均不同则称为简单路径若一条路径上的前后两端点相同则称为回路或环 若回路中除前后两端点相同外基余顶点均不同则称为简单回路或简单环在图 4 中 从顶点  到顶点  的一条简单路径为  其路径长度为 4 路径  为一条简单回路 其路径长度为 3 路径  不是一条简单路径 因为存在着从顶点  到  的一条回路6 连通和连通分量在无向图中 若从顶点到顶点有路径 则称和是连通的若图中任意两个顶点都连通 则称为连通图 否则若存在顶点之间不连通的情况则称为非连通图无向图的极大连通子图称为的连通分量显然 任何连通图都可以通过一个连通分量把所有顶点连通起来 而非连通图有多个连通分量例如 上面给出的图 1 和图 3 都是连通图下面图 73  所示为一个非连通图 它包含有 3 个连通分量 如图 73 图 73 图 73  所示 无向图 第一个连通分量 第二个连通分量 第三个连通分量图 73 非连通图和连通分量7 强连通图和强连通分量在有向图中 从顶点到顶点有路径 则称从到是连通的若图中的任意两个顶点和都连通 即从到和从到都存在路径 则称是强连通图有向图的极大强连通子图称为的强连通分量显然 强连通图可以通过一个强连通分量把所有顶点连通起来 非强连通图有多个强连通分量如图 74  所示有 3 个强连通分量 如图 74 图 74 图 74  所示 有向量 第一个强连通分量 第二个强连通分量 第三个强连通分量图 74 有向图和强连通分量8 权和网在一个图中 每条边可以标上具有某种含义的数值 通常为非负实数 此数值称为该边的权 例如 对于一个反映城市交通线路的图 边上的权可表示该条线路的长度或等级 对于一个反映电子线路的图 边上的权可表示两端点间的电阻电流或电压 对于一个反映零件装配的图 边上的权可表示一个端点零件需要装配另一个端点零件的数量量对于一个反映工程进度的图边上的权可表示从前一子工程到后一子工程所需要的天数边上带有权的图称作带权图也常称做网 如图 75 所示的5和6就分别是一个无向带权图和有向带权图 5 6图 75 无向带权图和有向带权图对于带权图若用图的顶点集和边集表示则边集中每条边的后面应附加该边上的权值图5和6的边集分别为501502712121331482362420341560120230381312206236241344713 图的抽象数据类型图的抽象数据类型的数部分为一个图它可以采用顺序链接等任一种存储结构存储类型用  标识符表示操作部分包括初始化图建立图遍历图查找图输出图清除图等常用运算以及求图的最小生成树最短路径拓扑排序关键路径等特定运算图的抽象数据类型的具体定义如下  一个图 存储类型用标识符  表示  初始化图的存储空间     根据图的边集  建立图的存储结构      按照一定次序从顶点  开始遍历图      从图中查找给定值顶点    按照图的一种表示方法输出一个图  清除图中动态分配的存储空间    求图中的最小生成树    求图中顶点之间的最短路径    求有向图中顶点之间的拓扑序列    求有向带权图中的关键路径 本章将结合图的存储结构和遍历讨论图的常用运算的算法对于图的特定运算的方法和算法将留到第8章专门讨论72 图的存储结构图的存储结构又称图的存储表示或图的表示图有多种表示方法这里介绍比较常用的邻接矩阵邻接表和边集数组3种721 邻接矩阵邻接矩阵 是表示图形中顶点之间相邻关系的矩阵设是具有个顶点的图顶点序号依次为0121则的邻接矩阵是具有如下定义的阶方阵 1  对于无向图或   1  对于有向图    0  中不存在 的边 对于图71中的1和2它们的邻接矩阵分别为如1和2所示由1可以看出无向图的邻接矩阵是按主对角线为轴对称的1 0  1  1  1  1  0  1  0  0  0  1  0  1  0  0  0  1  0  1  0  0  0  0  1  1  1  1  0  0  1  0  0  1  1  1  0  2 0  1  1  0  0  0  0  1  0  1  0  1  0  1  0  0  0  0  0  0  0  0  0  1  0 若图是一个带权图则用邻接矩阵表示也很方便只要把1换为相应边上的权值把非对角线上的0换为某一个很大的特定实数表示这个边不存在这个特定实数通常用或表示它要大于图中所有边上的权值之和例如对于图75中的带权图5和6它们的邻接矩阵分别用3和4所示1 0  5  7      5  0  12  3  8    12  0  6  20    3  6  0  15    8  20  15  0  2 0  2  3  8      0    12    6    0  6  1        0  4          0 采用邻接矩阵表示图便于查找图中任一条边或边上的权如要查找边或 则只要查找邻接矩阵中第行第列的元素是否为一个有效值即非零值和非  值若该元素为一个有效值则表明此边存在否则此边不存在邻接矩阵中的元素可以随机存取所以查找一条边的时间复杂度为1这种存储表示也便于查找图中任一点的度对于无向图顶点的度就是对应第行或第列上有效元素的个数对于有向图顶点的出度就是对应第行上有效元素的个数顶点的入度就是对应第列上有效元素的个数由于求任一点的度需访问对应一行或一列中的所有元素所以其时间复杂度为表示图中的顶点数即邻接矩阵的阶数从图的邻接矩阵中查任一项点的一个邻接点或所有邻接点同样也很方便如查找的一个邻接点对于无向图或出边邻接点对于有向图则只要在第行上查找出一个有效元素以该元素所在的列号为序号的顶点就是所求的一个邻接点或出边邻接点一般算法要求是依次查找出一个顶点的所有邻接点对于有向图则为出边邻接点或入边邻接点此时需访问对应第行或第列上的所有元素所以其时间复杂度为图的邻接矩阵的存储需要占用  个整数存储位置因顶点的序号为整数所以其空间复杂度为2这种存储结构用于表示稠密图能够充分利用存储空间但若用于表示稀疏图则将使邻接矩阵变为稀疏矩阵从而造成存储空间的很大浪费图的邻接矩阵表示只是使用一个二维数组存储顶点之间相邻的关系为了存储图中个顶点元素的信息通常还需要使用一个一维数组用数组中下标为的元素存储顶点的信息这两种数组的类型可定义如下  图的最大顶点数它要大于等于具体图的顶点数  图的最大边数它要大于等于具体图的边数   定义边的权值类型  特定权值它要大于图中所有有效权值之和   定义  为存储顶点信息的数组类型  定义  为存储邻接矩阵的数组类型图的顶点信息利用  类型的一维数组存储后能够根据顶点序号直接访问到相应元素图中顶点之间的邻接关系利用邻接矩阵存储后也能够根据任一条边的两个端点直接访问到相应元素所以可把它们看作是图的一种顺序存储1 图的邻接矩阵存储的初始化算法    假定等于 0 为无权图不等于 0 为有权图 0  0    0   02 根据一个图的边集生成图的邻接矩阵的算法       1  21为0则为无向图否则为有向图2为0则为无权图否则为有权图字符串用来保存一个图的边集为图的顶点数      定义为字符串输入流与边集对应     123 用来保存从输入流中读入的字符      用保存一条边的起点和终点序号      用保存一条边的权值    1 从输入流中读入第1个字符    10  20 建立无向无权图                     123 依次读入一条边的5个数据            1 置相应的对称元素为1            1 读入逗号或右花括号            1  边集处理完毕退出循环         1     10  20 建立无向有权图                     123             置相应的对称元素为            1            1          1     10  20 建立有向无权图                     123            1 置相应的元素为1            1            1          1     10  20 建立有向有权图                     123             置相应的元素为            1            1          1在算法中的每条语句之后可增加一条语句或函数调用检查和是否在0 1范围内若不在则退出运行3 根据图的邻接矩阵输出图的二元组表示顶点集和边集的算法      1  2    输出用邻接矩阵表示一个图的顶点集和边集                                             输出顶点集开始    0 1      1                           输出顶点集结束                                        输出边集开始    20         对无权图的处理情况        0              0                  1                    10                         对无向无权图的处理                                                                                         对有向无权图的处理                                         对有权图的处理情况        0              0                  0                      10                         对无向有权图的处理                                                                                         对有向有权图的处理                                                                注意边集的最后一条边的后面多出一个逗号在上面的各算法中邻接矩阵参数  为值参由于它是指针参数只占用 4 个字节的存储空间与调用它的实参指向同一个二维数组共同访问该实参数组中的相应元素所以对于指针值参也同样具有一般引用参数的作用72 2 邻接表邻接表   是对图中的每个顶点建立一个邻接关系的单链表并把它们的表头指针用一维向量数组存储的一种图的表示方法为顶点建立的邻接关系的单链表称作邻接表邻接表中的每个结点用来存储以该顶点为端点或起点的一条边的信息因而被称为边结点邻接表中的结点数对于无向图来说等于的度数邻接点数或出度数对于有向图来说等于的出边数出边邻接点数或出度数边结点的类型通常被定义为 3 个域一是邻接点域 用以存储顶点的一个邻接顶点的序号二是权域 用以存储边或上的权三是链域 用以链接邻接表中的下一个结点在这 3 个域中邻接点域和链域是必不可少的权域可根据情况取舍若表示的是无权图则可省去此域对于每个顶点的邻接表需要设置一个表头指针若图中有个顶点则就有个表头指针为了便于随机访问任一顶点的邻接表需要把这个表头指针用一个一维数组数组存储起来其中第个分量存储邻接表的表头指针这样图就可以由这个表头向量来表示和存取图 71 中的 1 和图 75 中的 6 对应的邻接表如图 76 所示 1 所示的邻接表 6 所示的邻接表图 76 1 和 6 的邻接表图的邻接表不是唯一的因为在每个顶点的邻接表中各边结点的链接次序可以任意安排其具体链接次序与边的输入次序和生成算法有关建立图的邻接表中边结点的类型定义和表头向量的类型定义如下        邻接点域      权值域对无权图可省去      指向下个边结点的链域    定义  为存储  个表头指针的数组类型1 初始化一个图邻接表的算法       0   2 根据一个图的边集生成其邻接表的算法       1  2 1 为 0 则为无向图否则为有向图2 为 0 则为无权图否则为有权图          123  120             从输入流中读入一条边        123                  1  假定无权图的每条边的权为1                        对于无向图还需向序号为的单链表的表头插入一个边结点        10                          1                                    1             从输入流中读入一条边        123                                          对于无向图还需向序号为的单链表的表头插入一个边结点        10                                                              13 把邻接表表示的图用顶点集和边集的形式输出的算法      1  2输出用邻接表表示一个图的顶点集和边集                 0 1      1        0           20                                                          10                     对无向无权图的处理情况                                                     使用条件 是为了避免输出重复边                                        对有向无权图的处理                                                         对有权图的处理情况                                                         10                      对无向有权图的处理                                                                        对有向有权图的处理                                                                    注意边集的最后一条边的后面多出一个逗号在图的邻接表中查找一个顶点的边出边或邻接点出边邻接点只要首先从表头向量中取出对应的表头指针然后从表头指针出发进行查找即可由于每个顶点单链表的平均长度为对于有向图或2对于无向图所以此查找运算的时间复杂度为但从有向图的邻接表中查找一个顶点的入边或入边邻接点那就不方便了它需要扫描所有顶点邻接表中的边结点因此其时间复杂度为对于那些需要经常查找顶点入边或入边邻接点的运算 可以为此专门建立一个逆邻接表  该表中每个顶点的单链表不是存储该顶点的所有出边的信息 而是存储所有入边的信息邻接域存储的是入边邻接点的序号如图 75 所示是为图 75 中的6建立的逆邻接表从此表中很容易求出每个顶点的入边入边上的权入边邻接点和入度0  2 6 1  0 2 2  0 3 3  0 8   1 12   2 6 4  2 1   3 4 图 77 6 的逆邻接表在有向图的邻接表中 求顶点的出边信息较方便 在逆邻接表中 则求顶点的入边信息较方便 若把它们合起来构成一个十字邻接表    则求顶点的出边信息和入边信息都将很方便如图 78 所示是为图 75 中的6建立的十字邻接表0  0 1 2   0 2 3   0 3 8 1  1 3 12 2  2 0 6   2 3 6   2 4 1 3  3 4 4 4  图 78 6 的十字邻接表在十字邻接表中 每个边结点对应图中的一条有向边 它包含 5 个域 边的起点域终点域边上的权域入边链域和出边链域其中 入边链域用于指向同一个顶点的下一条入边结点 通过它把入边链接起来 出边链域用于指向同一个顶点的下一条出边结点通过它把出边链接起来表头向量中的每个分量包括两个域 入边表的表头指针域和出边表的表头指针域在图的邻接表逆邻接表或十字邻接表示中 表头向量需要占用个或2个指针存储空间 所有边结点需要占用2对于无向图 或对于有向图 个边结点空间 所以其空间复杂度为这种存储结构用于表示稀疏图比较节省存储空间 因为只需要很少的边结点 若用于表示稠密图 则将占用较多的存储空间 同时也将增加在每个顶点邻接表中查找结点的时间图的邻接表表示和图的邻接矩阵表示 虽然方法不同 但也存在着对应的关系邻接表中每个顶点的单链表对应邻接矩阵中的第行整个邻接表可看做是邻接矩阵的带行指针向量的链接存储整个逆邻接表可看成邻接矩阵的带列指针向量的链接存储整个十字邻接表可看成邻接矩阵的十字链接存储对于稀疏矩阵若采用链接存储是比较节省存储空间的所以稀疏图的邻接表示比邻接矩阵表示要节省存储空间72 3 边集数组边集数组   是利用一维数组存储图中所有边的一种图的表示方法该数组中所含元素的个数要大于等于图中边的条数每个元素用来存储一条边的起点终点对于无向图可选定边的任一端点为起点或终点和权若有的话各边在数组中的次序可任意安排也可根据具体要求而定边集数组只是存储图中所有边的信息若需要存储顶点信息同样需要一个具有个元素的一维数组图 71 中的 2 和图 75 中的 5 所对应的边集数组如图 79 所示 2 的边集数组 5 的边集数组图 79 2 和 5 的边集数组1 边集数组中的元素类型和边集数组类型定义        边的起点域      边的终点域      边的权值域 对于无权图可省去此域   定义  为边集数组类型2 初始化图的边集数组的算法       0          1            3 根据图的边集生成图的边集数组的算法         为 0 则无权图否则为有权图  123 0 10   建立无权图             从输入流中读入一条边        123        置边集数组中下标为  的元素值                        1  假定无权图的每条边的权为 1                读入逗号或右花括号        1     1       建立有权图             从输入流中读入一条边        123        置边集数组中下标为  的元素值                                        读入逗号或右花括号        1     14 根据图的边集数组表示输出图的二元组表示的算法      1  2    输出用边集数组表示一个图的顶点集和边集             0 1      1        1    1        访问边集数组中的每条边        20             10                  对无向无权图的处理                                对有向无权图的处理                             10   对无向有权图的处理                                                     对有向有权图的处理                                      注意边集的最后一条边的后面多出一个逗号若一个图中有条边在边集数组中查找一条边或一个顶点的度都需要扫描整个数组所以其时间复杂度为边集数组适合那些对边依次进行处理的运算不适合对顶点的运算和对任一条边的运算边集数组表示的空间复杂度为从空间复杂度上讲边集数组也适合表示稀疏图图的邻接矩阵邻接表和边集数组表示各有利弊具体应用时要根据图的稠密和稀疏程度以及算法的要求进行选择73 图的遍历图的遍历就是从指定的某个顶点称此为初始点出发按照一定的搜索方法对图中的所有顶点都做一次访问的过程图的遍历比树的遍历要复杂因为从树根到达树中的每个结点只有一条路径而从图的初始点到达图中的每个顶点可能存在着多条路径当顺着图中的一条路径访问过某一个顶点后可能还会顺着另一条路径回到该顶点为了避免重复访问图中的同一个顶点必须记住每个顶点是否被访问过为此可设置一个辅助数组 它的每个元素的初值均为逻辑值假即常量 0表明未被访问过一旦访问了顶点就把对应元素 置为逻辑值真即常量 1表明已被访问过根据搜索方法的不同图的遍历有两种深度优先搜索遍历和广度优先搜索遍历731 深度优先搜索遍历深度优先搜索 遍历类似于对树的先根遍历它是一个递归过程可叙述为首先访问一个顶点一开始为初始点并将其标记为已访问过然后从的任一个未被访问过的邻接点有向图的入边邻接点除外下同出发进行深度优先搜索遍历 当1的所有邻接点均被访问过时 则退回到上一个顶点 从的另一个未被访问过的邻接点出发进行深度优先搜索遍历 直到退回到初始点并且没有未被访问过的邻接点为止结合如图 710所示的无向图 7分析以0作为初始点的深度优先搜索遍历的过程1 访问顶点0 并将 0置为真 表明0已被访问过 接着从0的一个未被访问过的邻接点10的3个邻接点12和3都未被访问过 先访问1 出发进行深度优先搜索遍历2 访问顶点1 并将 1置为真 表明1已被访问过 接着从1的一个未被访问过的邻接点41的4个邻接点中只有0被访问过 其余3个邻接点456均未被访问过 先访问4 出发进行深度优先搜索遍历3 访问顶点4 并将 4置为真 表明4已被访问过 接着从4的一个未被访问过的邻接点54的两个邻接点为1和51被访问过 只剩5一个未被访问 出发进行深度优先搜索遍历4 访问顶点5 并将 5置为真 表明5已被访问过 接着因5的两个邻接点1和4都已被访问过 所以退回到上一个顶点4 又因4的两个邻接点1和5都已被访问过 所以再退回到上一个顶点11的4个邻接点中有3个已被访问过 此时只能从未被访问过的邻接点6出发进行深度优先搜索遍历5 访问顶点6 并将 6置为真 表明6已被访问过 接着从6的一个未被访问过的邻接点2只此一个 出发进行深度优先搜索遍历6 访问顶点2 并将 2置为真 表明2已被访问过 接着因2的所有邻接点 即0和6 都被访问过 所以退回到上一个顶点6 同理 由6退回到1 再从1的一个未被访问过的邻接点3只此一个 出发进行深度优先搜索遍历7 访问顶点3 并将 3置为真 表明3已被访问过 接着因3的所有邻接点 它仅有一个邻接点0 都被访问过 所以退回到上一个顶点0 又因0的所有邻接点都已被访问过 所以再退回 实际上就结束了对 7 的深度优先搜索遍历的过程 返回到调用此算法的函数中去从对无向图 7 进行深度优先搜索遍历的过程分析可知 从初始点0出发 访问 7 中各顶点的次序为0145623图的深度优先搜索遍历的过程是递归的 为保存顶点访问标记的逻辑型数组 每个元素的初值均为假下面分别以邻接矩阵和邻接表作为图的存储结构 给出相应的深度优先搜索遍历的算法描述           从初始点  出发深度优先搜索由邻接矩阵  表示的图         假设访问顶点  以输出该顶点的序号代之        标记  已被访问过     0          依次搜索  的每个邻接点        0            若从初始点的一个有效邻接点未被访问过则从出发进行递归调用                                          假设访问顶点以输出该顶点的序号代之          标记已被访问过          取邻接表的表头指针           依次搜索的每个邻接点               为的一个邻接点序号              若未被访问过则从出发进行递归调用                                 使指向单链表的下一个边结点            图 710 中的 7 所对应的邻接矩阵和邻接表如图 711 所示请结合图分析以上的两个算法判断从顶点1出发得到的深度优先搜索遍历的顶点序列是否分别为以下序列序列11026345序列21620354 邻接矩阵 邻接表图 711 7 所对应的邻接矩阵和邻接表当图中每个顶点的序号确定后图的邻接矩阵表示是唯一的所以从某一项点出发进行深度优先搜索遍历时访问各顶点的次序也是唯一的但图的邻接表表示不是唯一的它与边的输入次序和链接次序有关所以对于同一个图的不同邻接表从某一项点出发进行深度优先搜索遍历时访问各顶点的次序也可能不同另外对于同一个邻接矩阵或邻接表如果指定的出发点不同则将得到不同的遍历序列从以上两个算法可以看出对邻接矩阵表示的图进行深度优先搜索遍历时需要扫描邻接矩阵中的每一个元素所以其时间复杂度为2对邻接表表示的图进行深度优先搜索遍历时 需要扫描邻接表中的每个边结点 所以其时间复杂度为 两者的空间复杂度均为73 2 广度优先搜索遍历广度优先搜索   遍历类似于对树的按层遍历 其过程为 首先访问初始点0 并将其标记为已访问过 接着访问0的所有未被访问过的邻接点 其访问次序可以任意 假定依次为1 2   并均标记为已访问过 然后再按照1 2  的次序 访问每一个顶点的所有未被访问过的邻接点次序任意 并均标记为已访问过 以此类推 直到图中所有和初始点0有路径相通的顶点都被访问过为止结合如图 712 所示的有向图 8 分析从0出发进行广度优先搜索遍历的过程1 访问初始点0 并将其标记为已访问过2 访问0的所有未被访问过的邻接点1和2 并将它们标记为已访问过3 访问顶点1的所有未被访问过的邻接点34和5 并将它们标记为已访问过4 访问顶点2的所有未被访问过的邻接点6它的两个邻接点中的一个顶点5已被访问过并将其标记为已访问过5 访问顶点3的所有未被访问过的邻接点7只此一个邻接点且没有被访问并将其标记为已访问过6 访问顶点4的所有未被访问过的邻接点因4的邻接点7只此一个已被访问过所以此次不访问任何顶点7 访问顶点5的所有未被访问过的邻接点8 并将其标记为已访问过8 访问顶点6的所有未被访问过的邻接点因6的仅一个邻接点8已被访问过所以此次不访问任何顶点9 依次访问7和8的所有未被访问的邻接点因它们均没有邻接点所以整个遍历过程到此结束从以上对有向图 8 进行广度优先搜索遍历的过程分析可知从初始点0出发得到的访问各顶点的次序为0 1 2 3 4 5 6 7 8在广度优先搜索遍历中先被访问的顶点其邻接点亦先被访问所以在算法的实现中需要使用一个队列用来依次记住被访问过的顶点算法开始时将初始点0访问后插入队列中以后每次从队列中删除一个元素就依次访问它的每一个未被访问过的邻接点并令其进队这样当队列为空时表明所有与初始点有路径相通的顶点都已访问完毕算法到此结束下面分别以邻接矩阵和邻接表作为图的存储结构给出相应的广度优先搜索遍历的算法在算法中使用的队列可以采用第 4 章已经给出的顺序或链接队列类型也可以直接定义队列和进行运算操作图片            从初始点出发广度优先搜索由邻接矩阵表示的图      30          定义队列的最大长度     0            定义一个队列其元素类型应为整型     0 0           定义队首和队尾指针                        标记初始点已访问过                       将已访问过的初始点序号入队             1                     删除队首元素第1次执行时的值为 0      依次搜索的每一个可能的邻接点            0                             访问一个未被访问过的邻接点    标记已访问过                1                          顶点序号入队                                    从初始点出发广度优先搜索由邻接表表示的图      30          给出顺序队列的最大长度     0            定义一个队列其元素类型应为整型     0 0           定义队首和队尾指针                        标记初始点已访问过                       将已访问过的初始点序号入队             1                     删除队首元素第1次执行时的值为          取邻接表的表头指针                             依次搜索的每一个邻接点                   若没有被访问过则进行处理                                                 1                         顶点序号入队                                     使指向邻接表的下一个边结点            结合图 711  和图 711  分析上面的两个算法判断从顶点1出发得到的广度优先搜索遍历的顶点序列是否分别为以下序列序列 11045623序列 21654023与图的深度优先搜索遍历一样对于图的广度优先搜索遍历若采用邻接矩阵表示其时间复杂度为2若采用邻接表表示其时间复杂度为两者的空间复杂度均为由图的某个顶点出发进行广度优先搜索遍历时访问各顶点的次序对于邻接矩阵来说是唯一的对于邻接表来说可能因邻接表的不同而不同这一点也与图的深度优先搜索遍历时的情形一样73 3 非连通图的遍历在图的深度优先搜索遍历算法和图的广度优先搜索遍历算法中对于无向图来说若无向图是连通图则能够访问到图中的所有顶点若无向图是非连通图则只能访问到初始点所在连通分量中的所有顶点其他连通分量中的顶点是不可能访问到的为此需要从其他每个连通分量中选定初始点分别进行搜索遍历才能够访问到图中的所有顶点对于有向图来说若从初始点到图中的每个顶点都有路径则能够访问到图中的所有顶点否则不能够访问到所有顶点为此需要从未被访问的顶点中再选一些顶点作为初始点进行搜索遍历直到图中的所有顶点都被访问过为止为了能够访问到任何图中的所有顶点要以图中未被访问到的每一个顶点作为初始点去调用上面的任何一个算法在某个函数中执行下面的语句 0               也可以调用其他遍历算法若一个无向图是连通的或从一个有向图的顶点0到其余每个顶点都是有路径的则此循环语句只执行一次调用即0调用就结束遍历过程否则要执行多次调用才能结束遍历过程对无向图来说每次调用将遍历一个连通分量有多少次调用过程就说明该图有多少个连通分量采用图的邻接矩阵进行图的遍历运算的程序举例如下                      使用字符串流所需的系统头文件                      定义顶点值的类型                      定义边上权值的类型  10                 定义图的最多顶点数  1000 定义无边上的特定权值          定义  为存储顶点信息的数组类型           定义  为存储邻接矩阵的数组类型采用邻接矩阵存储的图的常用运算      12    输入待处理图的顶点数        输入图的有无向和有无权选择 0 为无 非 0 为有    12         定义并动态分配标志数组         2    输入图的边集     100                          输入一个图的边集    12    按图的邻接矩阵得到的深度优先遍历序列    0       0        按图的邻接矩阵得到的广度优先遍历序列    0       0        12该程序的一次运行结果如下输入待处理图的顶点数7输入图的有无向和有无权选择 0 为无 非 0 为有0 0输入图的边集0102031415162645按图的邻接矩阵得到的深度优先遍历序列0 1 4 5 6 2 3按图的邻接矩阵得到的广度优先遍历序列0 1 2 3 4 5 601234560102031415162645习题 7习题71运算题1 如图713和图713所示求1 每一个图的二元组表示2 图713中每个顶点的度以及每个顶点的所有邻接点和所有边3 图713中每个顶点的入度出度和度以及每个顶点的所有入边的出边4 图713中从0到4的所有简单路径及相应带权路径长度5 图713中从0到4的所有简单路径及相应带权路径长度 无向图 有向图图713 运算题图12 根据图713和图713画出1 每个图的邻接矩阵2 每个图的邻接表3 图713的逆邻接表和十字邻接表4 每个图的边集数组3 如图714所示按下列条件分别写出从顶点0出发按深度优先搜索遍历得到的顶点序列和按广度优先搜索遍历得到的顶点序列1 假定它们均采用邻接矩阵表示2 假定它们均采用邻接表表示并且每个顶点邻接表中的结点都是按顶点序号从大到小的次序链接的 无向图 有向图图714 运算题图24 已知一个图的二元组表示如下0123456780304121424253637475867781画出对应的图形2假定从顶点 0 出发给出邻接矩阵表示的图的深度优先和广度优先搜索遍历的顶点序列3假定从顶点 0 出发给出邻接表表示的图的深度优先和广度优先搜索遍历的顶点序列假定每个顶点邻接表中的结点都是按顶点序号从大到小的次序链接的习题 72算法设计题1 根据邻接矩阵所表示的图求序号为  的顶点的度数2 根据无向图的邻接表求序号为  的顶点的度数3 求出一个用邻接矩阵表示的图中所有顶点的最大出度值4 对用邻接矩阵表示的图的深度优先搜索算法做适当的修改输出依次访问顶点所经过的各条边的算法5 若图采用邻接矩阵表示编写进行深度优先遍历的非递归算法6 对用邻接表示的图的广度优先搜索算法做修改使算法中使用的队列是在第 4 章已经定义过的顺序队列7 根据图的邻接矩阵得到图的邻接表8 根据图的邻接矩阵得到图的边集数组