次序的圆括号连接而成的式子。操作数可以是常量、变量和函数，同时还可以是表达式。运算符包括单目运算符和双目运算符两类，单目运算符只要求一个操作数，并被放在该操作数的前面，双目运算符要求有两个操作数，并被放在这两个操作数的中间。单目运算符为取正“+”和取负“-”，双目运算符有加“+”，减“-”，乘“*”和除“/”等。为了方便，在讨论中只考虑双目运算符，并且仅限于“+”、“-”、“*”、“/”这4种运算。

如对于一个算术表达式$2+5 \times 6$，乘法运算符“*”的两个操作数是它两边的5和6；对于加法运算符“+”的两个操作数，一个是它前面的2，另一个是它后面的$5 \times 6$的结果即30。把双目运算符出现在两个操作数中间的这种习惯表示叫做算术表达式的中缀表示，这种算术表达式被称为中缀算术表达式或中缀表达式。

中缀表达式的计算比较复杂，它必须遵守以下3条规则。

(1) 先计算括号内，后计算括号外。

(2) 在无括号或同层括号内，先进行乘除运算，后进行加减运算，即乘除运算的优先级高于加减运算的优先级。

(3) 同一优先级运算，从左向右依次进行。

可以看出，在中缀表达式的计算过程中，既要考虑括号的作用，又要考虑运算符的优先级，还要考虑运算符出现的先后次序。因此，各运算符实际的运算次序往往同它们在表达式中出现的先后次序是不一致的，是不可预测的。当然凭直观判别一个中缀表达式中哪个运算符最先算，哪个次之，哪个最后算并不困难，但通过计算机处理将困难得多。

那么，能否把中缀算术表达式转换成另一种形式的算术表达式，使计算简单化呢？回答是肯定的。波兰科学家卢卡谢维奇（Lukasiewicz）很早就提出了算术表达式的另一种表示，即后缀表示，又称逆波兰式，其定义是把运算符放在两个运算对象的后面。采用后缀表示的算术表达式被称为后缀算术表达式或后缀表达式。在后缀表达式中，不存在括号，也不存在运算符优先级的差别，计算过程完全按照运算符出现的先后次序进行，整个计算过程仅需扫描一遍便可完成，显然比中缀表达式的计算要简单得多。例如，对于后缀表达式$12\text{□}40\text{□}5\text{□}$，其中“□”字符表示空格，因减法运算符在前，除法运算符在后，所以应先做减法，后做除法；减法的两个操作数是它前面的12和4，其中第1个数12是被减数，第2个数4是减数；除法的两个操作数是它前面的$12-4$的差（即8）和5，其中8是被除数，5是除数。

中缀算术表达式转换成对应的后缀算术表达式的规则是：把每个运算符都移到它的两个运算对象的后面，然后删除掉所有的括号即可。

例如，对于下列各中缀表达式：

(1)$3 / 5 + 6$(2)$16 - 9 \times (4 + 3)$(3)$2 \times (x + y) \times (1 - x)$(4)$(25 + x) \times (a \times (a + b) + b)$对应的后缀表达式分别为：

(1)$3\text{□}5\text{□}/\text{□}6\text{□}+$(2)$16\text{□}9\text{□}4\text{□}3\text{□}+\text{□}\times\text{□}-$
