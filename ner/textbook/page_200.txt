证明：设具有$n$个结点的$k$叉树的深度为$h$，若在该树中前$h-1$层都是满的，即每 1 层的结点数都等于$k^{i-1}$个$(1 \leq i \leq h-1)$，第$h$层（即最后一层）的结点数可能满，也可能不满，则该树具有最小的深度。根据性质 3，其深度$h$的计算公式为：$\frac{k^{h-1}-1}{k-1} < n \leq \frac{k^h-1}{k-1}$可变换为$k^{h-1} < n(k-1) + 1 \leq k^h$以$k$为底取对数后得$h-1 < \log_k(n(k-1)+1) \leq h$即$\log_k(n(k-1)+1) \leq h < \log_k(n(k-1)+1) + 1$因$h$只能是整数，所以$h = \left\lceil \log_k(n(k-1)+1) \right\rceil$因此得到具有$n$个结点的一般$k$叉树的最小深度为$\left\lceil \log_k(n(k-1)+1) \right\rceil$。

例如，对于二叉树，求最小深度的计算公式为$\left\lceil \log_2(n+1) \right\rceil$，若$n=20$，则最小深度为 5；对于三叉树，求最小深度的计算公式为$\left\lceil \log_3(2n+1) \right\rceil$，若$n=20$，则最小深度为 4。

\section*{5.2 二叉树}

\subsection*{5.2.1 二叉树的定义}

二叉树（binary tree）是指树的度为 2 的有序树。它是一种最简单、而且最重要的树，在计算机领域有着广泛的应用。二叉树的递归定义为：二叉树或者是一棵空树，或者是一棵由一个根结点和两棵互不相交的分别称做根的左子树和右子树所组成的非空树，左子树和右子树又同样都是一棵二叉树。

一棵二叉树 BT 如图 5-6(a) 所示，它由根结点 A 和左子树 BT₁、右子树 BT₂ 所组成，BT₁ 和 BT₂ 分别如图 5-6(b) 和图 5-6(c) 所示；BT₁ 又由根结点 B 和左子树 BT₁₁（只含有根结点 D）、右子树 BT₁₂（此为空树）所组成；对于 BT₂ 树也可进行类似的分析。

(a)

(b)

(c)

图 5-6 二叉树

在二叉树中，每个结点的左子树的根结点被称之为左孩子（left child），右子树的根结点被称之为右孩子（right child）。在二叉树 BT 中，A 结点的左孩子为 B 结点，右孩子为 C
