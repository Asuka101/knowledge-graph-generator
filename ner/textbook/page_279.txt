表中每个顶点$v_i$的单链表对应邻接矩阵中的第$i$行，整个邻接表可看做是邻接矩阵的带行指针向量的链接存储；整个逆邻接表可看成邻接矩阵的带列指针向量的链接存储；整个十字邻接表可看成邻接矩阵的十字链接存储。对于稀疏矩阵，若采用链接存储是比较节省存储空间的，所以稀疏图的邻接表示比邻接矩阵表示要节省存储空间。

\section*{7.2 .3 边集数组}

边集数组 (edgeset array) 是利用一维数组存储图中所有边的一种图的表示方法。该数组中所含元素的个数要大于等于图中边的条数，每个元素用来存储一条边的起点、终点（对于无向图，可选定边的任一端点为起点或终点）和权（若有的话），各边在数组中的次序可任意安排，也可根据具体要求而定。边集数组只是存储图中所有边的信息，若需要存储顶点信息，同样需要一个具有$n$个元素的一维数组。图 7-1 中的 G2 和图 7-5 中的 G5 所对应的边集数组如图 7-9 所示。

(a) G2 的边集数组

(b) G5 的边集数组

图 7-9 G2 和 G5 的边集数组

\section*{1. 边集数组中的元素类型和边集数组类型定义}

struct edge {
    int fromvex; //边的起点域
    int endvex; //边的终点域
    WeightType weight; //边的权值域, 对于无权图可省去此域
};
typedef edge edgeset[MaxEdgeNum]; //定义 edgeset 为边集数组类型

\section*{2. 初始化图的边集数组的算法}

void InitArray(edgeset GE)
{
    for(int i=0; i<MaxEdgeNum; i++){
        GE[i].fromvex=GE[i].endvex=-1;
        GE[i].weight=MaxValue;
    }
}

\section*{3. 根据图的边集生成图的边集数组的算法}

void CreateArray(edgeset GE, int n, char*s, int k)
{ //k 为 0 则无权图否则为有权图
