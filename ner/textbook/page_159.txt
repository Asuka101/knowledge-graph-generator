while(!EmptyStack(a)) //由高到低输出 r 进制数的每一位
    cout<<Pop(a);
cout<<endl;
}

用下面程序调用 Transform 函数的过程。

#include<iostream.h>
#include<stdlib.h>
typedef int ElemType;
struct SNode {
    ElemType data;
    SNode* next;
};
#include"链栈运算.cpp"
void Transform(long num, int r); //实际运行时需要加上函数定义
void main()
{
    cout<<"3425 的八进制数为: ";
    Transform(3425,8);
    cout<<"3425 的六进制数为: ";
    Transform(3425,6);
    cout<<"3425 的四进制数为: ";
    Transform(3425,4);
    cout<<"3425 的二进制数为: ";
    Transform(3425,2);
}

运行结果如下。$3425$的八进制数为:$6541$3425$的六进制数为:$23505$3425$的四进制数为:$311201$3425$的二进制数为:$110101100001$\section*{4.5 算术表达式的计算}

在计算机中进行算术表达式的计算是通过栈来实现的。本节首先讨论算术表达式的两种表示方法，即中缀表示法和后缀表示法，接着讨论后缀表达式求值的算法，最后讨论中缀表达式转换为后缀表达式的算法。

\subsection*{4.5.1 算术表达式的两种表示}

通常书写的算术表达式是由操作数（又叫运算对象或运算量）和运算符以及改变运算
