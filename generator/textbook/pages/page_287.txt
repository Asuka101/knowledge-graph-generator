const WeightType MaxValue=1000; //定义无边上的特定权值

typedef VertexType vexlist[MaxVertexNum];
        //定义 vexlist 为存储顶点信息的数组类型
typedef int adjmatrix[MaxVertexNum][MaxVertexNum];
        // 定义 adjmatrix 为存储邻接矩阵的数组类型

#include"采用邻接矩阵存储的图的常用运算.cpp"

void main()
{
    int i,n,k1,k2;
    cout<<"输入待处理图的顶点数:";
    cin>>n;
    cout<<"输入图的有无向和有无权选择 (0 为无, 非 0 为有):";
    cin>>k1>>k2;
    bool* visited=new bool[n];   //定义并动态分配标志数组
    adjmatrix ga;
    InitMatrix(ga,k2);
    cout<<"输入图的边集:";
    char*a=new char[100];
    cin>>a;                      //输入一个图的边集
    CreateMatrix(ga,n,a,k1,k2);
    cout<<"按图的邻接矩阵得到的深度优先遍历序列:"<<endl;
    for(i=0; i<n; i++) visited[i]=false;
    dfsMatrix(ga,0,n,visited);
    cout<<endl;
    cout<<"按图的邻接矩阵得到的广度优先遍历序列:"<<endl;
    for(i=0; i<n; i++) visited[i]=false;
    bfsMatrix(ga,0,n,visited);
    cout<<endl;
    PrintMatrix(ga,n,k1,k2);
}

该程序的一次运行结果如下:

输入待处理图的顶点数:7
输入图的有无向和有无权选择 (0 为无, 非 0 为有):0 0
输入图的边集:{(0,1),(0,2),(0,3),(1,4),(1,5),(1,6),(2,6),(4,5)}
按图的邻接矩阵得到的深度优先遍历序列:
0 1 4 5 6 2 3
按图的邻接矩阵得到的广度优先遍历序列:
0 1 2 3 4 5 6
V={0,1,2,3,4,5,6}
E={(0,1),(0,2),(0,3),(1,4),(1,5),(1,6),(2,6),(4,5),}
