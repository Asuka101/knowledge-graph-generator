2. 链接存储

稀疏矩阵的链接存储就是对其相应的三元组线性表进行链接存储。下面介绍两种链接存储方法。

(1) 带行指针向量的链接存储。

在这种链接存储中, 需要把具有相同行号的三元组结点按照列号从小到大的顺序链接成一个单链表, 每个三元组结点的类型定义如下。

struct TripleNode {
    int row, col;                // 存储行号和列号
    ElemType val;                // 存储元素值
    TripleNode* next;            // 指向同一行的下一个结点
};

稀疏矩阵中的每一行对应一个单链表, 每一个单链表都有一个表头指针, 为了把它们保存起来, 便于访问每一个单链表, 需要使用一个行指针向量 (即一维数组), 该向量中的第$i$个分量 (即对应数组中下标为$i$的元素) 用来存储稀疏矩阵中第$i$行所对应的单链表的表头指针。带行指针向量的链接存储类型定义如下。

struct LMatrix {
    int m, n, t;
    TripleNode* vector[MaxRows+1];
};

其中, 整数域$\mathrm{m} 、 \mathrm{n}$和$\mathrm{t}$分别用来保存稀疏矩阵的行数、列数和非零元素的个数, vector 数组 (向量) 域用来保存稀疏矩阵所对应的$\mathrm{m}$个行单链表的表头指针, 第 0 分量未用, 第$i$行单链表的表头指针存于第$i$分量 vector[i] 中, MaxRows 为全局变量, 其值要大于等于所存储矩阵的行数。

利用 LMatrix 类型的对象存储图 3-3(b) 所示的稀疏矩阵, 则链接存储结构如图 3-5 所示, 其中每个单链表中的结点由动态分配链接而成。

分量编号 行指针向量

1 |-> [1 1 3]->[1 4 5]

2 |-> [2 3 -2]

3 |-> [3 1 1]->[3 3 4]->[3 5 6]

4

5 |-> [5 3 -1]

图 3-5 带行指针向量的链接存储结构

(2) 十字链接存储。

十字链接存储是既带行指针向量又带列指针向量的链接存储。在这种链接存储中, 每个三元组结点既处于同一行的单链表中, 又处于同一列的单链表中, 即处于所在的行单链
