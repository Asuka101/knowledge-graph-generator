```cpp
for(j=0; j<n; j++)
    if(i==j) s[i][j]=true;
    else s[i][j]=false;
}
//定义相应变量
int k=1;      //k表示待获取的最小生成树中的边数,初值为1
int d=0;      //d表示在GE中待扫描边元素的下标位置,初值为0
int m1,m2;    //m1和m2分别保存一条边的两个顶点所在集合的序号
//进行n-1次循环,得到最小生成树中的n-1条边
while(k<n)
{
    for(i=0; i<n; i++)
    {
        //求出边GE[d]的两个顶点所在集合的序号m1和m2
        if(s[i][GE[d].fromvex]==true) m1=i;
        if(s[i][GE[d].endvex]==true) m2=i;
    }
    if(m1!=m2)
    {
        //若两集合序号不等,则表明GE[d]是生成树中的一条边
        //应将它加入到数组CT中
        CT[k-1]=GE[d];
        k++;
        for(j=0; j<n; j++)
        {
            //合并两个集合,并将另一个置为空集
            s[m1][j]=s[m1][j] || s[m2][j];
            s[m2][j]=false;
        }
    }
    d++;       //d后移一个位置,以便扫描GE中的下一条边
}
//释放为s动态分配的数组空间
for(i=0;i<n;i++) delete[] s[i];
delete[] s;
}

若利用图8-5(d)所示的边集数组调用此算法,则最后得到的CT数组如表8-2所示。

表8-2 数组CT

\begin{tabular}{c|c|c|c|c|c|}
\hline
CT & 0 & 1 & 2 & 3 & 4 \\
\hline
fromvex & 0 & 1 & 1 & 1 & 0 \\
\hline
endvex & 4 & 2 & 3 & 5 & 1 \\
\hline
weight & 4 & 5 & 8 & 12 & 18 \\
\hline
\end{tabular}

以上两个算法的时间复杂度均为$O(n^2)$,普里姆算法的空间复杂度为$O(1)$,克鲁斯卡尔算法的空间复杂度为$O(n^2)$。
```
