义表的结束符号。如 “$(a,(\#),b,c,(d,(e)))$”; 就是一个符合上述规定的广义表输入格式。

建立广义表存储结构的算法同样是一个递归算法，该算法使用一个具有$GLNode^*$类型的引用指针参数，用以返回所建广义表的表头指针，用 GL 表示。在算法的执行过程中，对于从键盘上输入的一个广义表，需要从头到尾扫描每一个字符，当碰到左括号时，表明它是一个表元素的开始，则应建立一个由 GL 指向的表结点，并用它的 sublist 域作为子表的表头指针进行递归调用，来建立子表的存储结构：当碰到一个英文字母时，表明它是一个单元素，则应建立一个由 GL 指向的单元素结点；当碰到一个“$\#$”字符时，表明它是一个空表，则应置 GL 为空。当建立了一个由 GL 指向的结点后，接着碰到逗号字符时，表明存在后继结点，需要建立当前结点（即由 GL 指向的结点）的后继表，当碰到右括号或分号字符时，表明当前所处理的表已结束，应置当前结点的 next 域为空。

根据广义表输入格式和建立存储结构的思路，可知所建立的广义表存储结构将带有表头附加结点，因为一开始就会遇到左括号，就会建立起整个表的表元素结点。若要建立不带表头附加结点的广义表存储结构，则只要使输入格式中省去最外层的一对圆括号即可。

根据分析，编写算法如下。

void Create(GLNode*& GL)

{
    char ch;
    //读入一个字符,此处只可能读入#,左括号和英文字母
    cin>>ch;
    //若输入为#,则置 GL 为空
    if(ch=='#') GL=NULL;
    //若输入为左括号则建立由 GL 所指向的子表结点并递归构造子表
    else if(ch=='(') {
        GL=new GLNode;
        GL->tag=true;
        Create(GL->sublist);
    }
    //建立由 GL 所指向的单元素结点
    else {
        GL=new GLNode;
        GL->tag=false;
        GL->data=ch;
    }
    //此处读入的字符必为逗号、右括号或分号
    cin>>ch;
    //若 GL 为空,此时输入的字符必然为 ')',则什么都不用做
    if(GL==NULL);
    //若输入为逗号则递归构造后继表
    else if(ch==',') Create(GL->next);
    //若输入为右括号或分号则置 GL 的后继指针域为空
    else if((ch==')')||(ch==';')) GL->next=NULL;
}
