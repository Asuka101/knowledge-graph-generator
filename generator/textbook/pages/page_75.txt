10. 从线性表中删除符合给定条件的第 1 个元素

此算法同插入元素的算法类似，具体描述如下。

bool DeleteList(List &L, ElemType& item, int pos)
{
    //检查线性表是否为空，若是则无法删除，返回假
    if(L.size==0) {
        cout<<"线性表为空，删除无效!"<<endl;
        return false;
    }
    //检查 pos 值是否有效，若无效则无法删除，返回假
    if(pos<-1 || pos>L.size) {
        cout<<"pos 值无效!"<<endl; return false;
    }
    //求出按值删除时 item 的删除位置，使之保存到 pos 中
    int i;
    if(pos==0) {
        for(i=0; i<L.size; i++)
            if(item==L.list[i]) break;
        if(i==L.size) return false; //无元素可删返回假
        pos=i+1;
    }
    //得到被表尾元素的序号，被保存在 pos 中
    else if(pos==-1) pos=L.size;
    //把被删除元素的值赋给变参 item 带回
    item=L.list[pos-1];
    //将待删除元素位置后面的所有的元素，从前向后依次前移一个位置
    for(i=pos; i<L.size; i++)
        L.list[i-1]=L.list[i];
    //线性表长度减 1
    L.size--;
    //若线性表存储空间空余太多，则进行适当缩减
    if((float)(L.size)/L.MaxSize<0.4 && L.MaxSize>10) {
        int k=sizeof(ElemType); //计算每个元素存储空间的长度
        L.list=(ElemType*)realloc(L.list, L.MaxSize*k/2);
        //线性表动态存储空间缩减为原来的一半
        L.MaxSize=L.MaxSize/2; //把线性表空间大小修改为新的长度
    }
    //返回真表示删除成功
    return true;
}

在这个算法中，运行时间主要花费在第 3 步为寻找删除元素位置所需的比较元素的次数和第 6 步为填补删除元素位置所需的移动元素的次数上。被删除元素的下标位置为$i$，
