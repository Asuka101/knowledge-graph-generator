当一个顺序队列中的$len$域的值为 0 时, 表明该队列为空, 则不能进行出队和读取队首元素的操作, 当$len$域的值等于$MaxSize$时, 表明队列已满, 即存储空间已被用完, 此时应动态扩大存储空间, 然后才能插入新元素。

在队列类型的定义中, 若省略长度$len$域也是可行的, 但此时的长度为$MaxSize$的数组空间最多只能存储长度为$MaxSize-1$的队列, 也就是说必须有一个位置空闲着。因为,若使用全部$MaxSize$个位置存储队列, 则当队首和队尾指针指向同一个位置时, 也可能为空队, 也可能为满队, 就存在二义性, 无法进行判断。为了解决这个矛盾, 只有牺牲一个位置的存储空间, 让队首指针所指的存储位置始终空闲着, 利用队首和队尾指针是否相等只作为判断空队的条件, 而利用队尾指针加 1 并对$MaxSize$取模后是否等于队首指针 (即队尾是否从后面又追上了队首) 作为判断满队的条件。

采用顺序存储结构的队列被称为顺序队列。下面给出在顺序队列上进行各种队列运算的算法。

\section*{1. 初始化队列}

初始化队列为空并带有动态存储空间分配。

void InitQueue (Queue& Q)

{

//初始设置队列空间大小为 10 个元素位置

Q.MaxSize=10;

//动态存储空间分配

Q.queue=new ElemType[Q.MaxSize];

//初始置队列为空

Q.front=Q.rear=0;

}

\section*{2. 向队列插入元素, 若队列已满需重新分配更大的存储空间}

void EnQueue(Queue& Q, ElemType item)

{

//对存储空间用完情况进行处理

if ((Q.rear+1)\%Q.MaxSize==Q.front) {

//扩大 2 倍的存储空间

int k=sizeof(ElemType);

Q.queue=(ElemType*)realloc(Q.queue, 2*Q.MaxSize*k);

//把原队列的尾部内容向后移动 MaxSize 个位置

if(Q.rear != Q.MaxSize-1) {

for(int i=0; i<Q.rear; i++)

Q.queue[i+Q.MaxSize]=Q.queue[i];

Q.rear+=Q.MaxSize; //队尾指针后移 MaxSize 个位置

}

//把队列空间大小修改为原值的 2 倍

Q.MaxSize=2*Q.MaxSize;

}
