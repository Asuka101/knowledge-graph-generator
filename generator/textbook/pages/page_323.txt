作为查找对象的表的结构不同，其查找方法一般也不同。但无论哪一种方法，其查找过程都是用给定值$K$同关键项上的关键字按照一定的次序进行比较的过程，比较次数的多少就是相应算法的时间复杂度，它是衡量一个查找算法优劣的重要指标。

对于一个查找算法的时间复杂度，即可以采用数量级的形式表示，也可以采用平均查找长度（Average Search Length, ASL），即在查找成功情况下的平均比较次数来表示。平均查找长度的计算公式为:$\text{ASL}=\sum_{i=0}^{n} p_{i} c_{i}$其中，$n$为查找表的长度，即表中所含元素的个数，$p_{i}$为查找第$i$个元素的概率，若不特别指明，均认为查找每个元素的概率相同，即$p_{1}=p_{2}=\cdots=p_{n}$，$c_{i}$是查找第$i$个元素时同给定值$K$所需比较的次数。若查找每个元素的概率相同，即为$1/n$，则平均查找长度的计算公式可简化为:$\text{ASL}=\frac{1}{n} \sum_{i=1}^{n} c_{i}$在具有$n$个元素的线性表上顺序查找其关键字域的值等于$K$的元素时，$c_{i}=i$，所以平均查找长度为:$\sum_{i=1}^{n} p_{i} c_{i}=\frac{1}{n} \sum_{i=1}^{n} i=\frac{n+1}{2}$对应的时间复杂度为$O(n)$。

\section*{9.2 顺序表查找}

顺序表（sequential list）是指集合或线性表的顺序存储结构。在本章讨论中，顺序表采用一维数组 A 表示，其元素类型为 ElemType，它含有关键字 key 域和其他一些数据域，key 域的类型假定为 KeyType，并假定一维数组 A 的大小为整型常量 MaxSize，该数组中所含元素的个数为$n$，$n$应小于等于 MaxSize，元素的存储位置依次为$0,1,2,\cdots,n-1$。当然，元素类型 ElemType 也可以是任何简单类型，此时关键字 key 域就是该元素类型本身，元素的关键字 A[i].key 同给定关键字$K$的比较就变成元素整体值 A[i] 同$K$的比较。

在顺序表上进行查找主要有两种方法：顺序查找方法和二分查找方法。

\subsection*{9.2.1 顺序查找}

顺序查找（sequential search）又称线性查找，它是一种最简单和最基本的查找方法。它从顺序表的一端开始，依次将每个元素的关键字同给定值$K$进行比较，若某个元素的关键字等于给定值$K$，则表明查找成功，返回该元素所在的下标，若直到所有元素都比较完毕，
