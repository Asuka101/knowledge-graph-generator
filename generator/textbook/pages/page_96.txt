```cpp
if(cp==NULL && i+1<pos) {
    cout<<"pos 值超出单链表长度加 1!"<<endl;
    return false;
}
//完成新结点插入操作
if(ap==NULL) {
    newptr->next=HL; //把新结点插入到表头
    HL=newptr;
} else {
    //把新结点插入到非表头位置，即插入到 ap 和 cp 结点之间
    newptr->next=cp; //cp 指针也可能为空,此时为表尾
    ap->next=newptr;
}
return true;
}

10. 从单链表中删除符合给定条件的第 1 个元素

删除算法的执行步骤如下。
(1) 若单链表为空则返回假。
(2) 若 pos 值小于-1 时则返回假。
(3) 根据 pos 的值所表示的条件从单链表中查找被删除的结点，为此需要从单链表中顺序查找，直到查找成功或失败为止。在查找过程中需要保留待比较的当前结点和前驱结点的地址，以便删除结点时使用。
(4) 删除查找到的结点，对表头结点和非表头结点要做不同处理。
(5) 回收被删除结点的存储空间。
(6) 删除成功返回真。

bool DeleteList(LNode* &HL, ElemType& item, int pos) //从L删除元素
{
    //单链表为空，无法删除，返回假
    if(HL==NULL){
        cerr<<"单链表为空，删除操作无效!"<<endl;
        return false;
    }
    //pos 值小于-1 返回假
    if(pos<-1) {
        cout<<"pos 值无效!"<<endl; return false;
    }
    //寻找被删除的元素结点
    LNode* cp=HL; //用 cp 指向当前结点 (即待查结点)，初始指向表头
    LNode* ap=NULL; //用 ap(ahead pointer)指向 cp 的前驱结点，初始为空
    if(pos==0) { //按值查找被删除结点
```
