}
S.MaxSize=2*S.MaxSize; //把集合空间大小修改为新的长度
}
S.set[S.len]=item; //在末尾插入新元素
S.len++; //集合长度增1
return true; //返回真表示插入成功
}

10. 从集合删除一个元素

此算法首先从集合中顺序查找值等于待删值 item 的元素, 若存在该元素, 则由 item 带回并删除它, 把空出的位置用最后一个元素填补, 接着若集合数组空间空余过多可释放一半, 然后使集合长度减 1 , 返回真表示删除成功。若集合中不存在, 则无法删除, 返回假表示删除失败。

bool DeleteSet(Set& S, ElemType& item) //从集合删除一个元素
{
int i;
for(i=0; i<S.len; i++)
if(S.set[i]==item) break;
if(i<S.len) {
//删除 set[i]元素
item=S.set[i]; //由 item 带回被删元素的完整值
S.set[i]=S.set[S.len-1]; //用最后一个元素填补
S.len--; //集合长度减1
if((float(S.len)/S.MaxSize<0.4 && S.MaxSize>10))
{ //若集合存储空间空余太多,则进行适当削减,若不削减可省此步
int k=sizeof(ElemType);
S.set=(ElemType*)realloc(S.set, S.MaxSize*k/2);
S.MaxSize=S.MaxSize/2; //把集合空间大小修改为新的长度
}
return true; //删除成功返回真
}
else return false; //删除失败返回假
}

集合的插入和删除元素均需要一个查找过程, 所以其算法的时间复杂度均为$O(n)$,$n$表示集合长度。

11. 求两个集合的并集

该算法是求两个集合 S1 和 S2 的并集, 并将结果存入 S 引用参数所表示的集合中带回。首先把 S1 集合复制到 S 集合中, 然后把 S2 中的每个元素依次插入到集合 S 中, 当然重复的元素不应该被插入, 最后在 S 中就得到了 S1 和 S2 的并集, 也就是在 S 所对应的实际参数集合中得到并集。

把 S1 集合复制到 S 集合中, 可以通过遍历 S1 集合中的每个元素, 并调用插入算法把
