```cpp
cout<<endl;
}

void FTwoMerge(fstream &A, fstream &B, fstream &R,
                int sa, int ca, int sb, int cb)
{
    //把文件 A 和 B 中对应位置上的两个有序表(归并段)归并到文件 R 中
    //其中文件 A 中归并段的开始位置和长度分别为 sa 和 ca
    //文件 B 中归并段的开始位置和长度分别为 sb 和 cb
}
//函数体同上

void FMergePass(fstream &Al,fstream &A2,fstream &R1,fstream &R2,int len)
{
    //把归并段长度为 len 的文件 Al 和 A2,进行对应归并段归并到文件 R1 和
    //R2 中,使它们的归并段长度均为 2*len,当然末尾段长度可能短些
}
//函数体同上

void FMergeSort(fstream &Al,fstream &A2, int BlockSize)
{
    //采用归并排序的方法对文件 Al 和 A2 中的、每个初始归并段
    //(有序子表)长度为 BlockSize 的记录进行二路归并排序
}
//函数体同上

void InsertSort(ElemType A[], int n)
{
    //对数组 A 中的 n 个元素进行直接插入排序
    ElemType x;
    int i,j;
    for(i=1; i<n; i++) {
        //i 表示插入次数,共进行 n-1 次插入
        x=A[i];
        //暂存待插入有序表中的元素 A[i]的值
        for(j=i-1; j>=0; j--) {
            if(x.stn<A[j].stn) A[j+1]=A[j]; //进行顺序比较和移动
            else break;
            //查询到 j+1 位置时离开 j 循环
        }
        A[j+1]=x;
        //把原 A[i]的值插入到下标为 j+1 的位置
    }
}

void LoadFile(const char*fname, int n)
{
    //向物理文件名为 fname 指针所指字符串的文件中输入 n 个记录
    //定义一个输出文件流对象 f,它是与物理文件相对应的逻辑文件
    fstream f(fname,ios::out|ios::binary);
    if(!f) {
        cerr<<fname<<' '<<"not open!"<<endl;
        exit(1);
    }
    //假定只向每个记录的排序码域输入数据,并由随机产生
    for(int i=0; i<n; i++) {
        ElemType x;
        x.stn=rand()%500;
        //每个排序码为 0~499 之间的整数
    }
}
```
