{
  "entities": [
    {
      "type": "数据结构",
      "ID": "06DS001",
      "name": "二叉搜索树",
      "attributes": {
        "难度": "中等",
        "内容": "又称二叉排序树。它或是一棵空树，或者是一棵具有如下特性的非空二叉树：（1）若左子树非空，则左子树上所有结点的关键字均小于根结点的关键字；（2）若右子树非空，则右子树上所有结点的关键字均大于（或大于等于）根结点的关键字；（3）左、右子树本身又各是一棵二叉搜索树。中序遍历结果为有序序列。适用于需要高效查找、插入、删除、更新的场景。",
        "存储开销": "O(n)",
        "核心特性": "有序性（中序遍历），可查找性",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON001",
      "name": "关键字",
      "attributes": {
        "难度": "入门",
        "内容": "二叉搜索树中结点用于比较的值。当结点元素为简单类型时，是结点值本身；当为记录类型时，是记录的某个域（如学号）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG001",
      "name": "中序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "遍历二叉树的一种方式（左子树-根结点-右子树）。对二叉搜索树进行中序遍历，可以得到一个有序的结点序列。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归), O(1) (线索化)",
        "设计思想": "递归/栈/线索",
        "适用场景": "获取有序序列、线索化二叉树",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG002",
      "name": "二叉搜索树查找",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉搜索树中查找具有给定关键字的元素。从根结点开始，若相等则成功；若小于根，则在左子树查找；若大于根，则在右子树查找。有递归和非递归实现。",
        "时间复杂度": "平均 O(log n), 最差 O(n)",
        "空间复杂度": "递归: 平均 O(log n), 最差 O(n); 非递归: O(1)",
        "设计思想": "递归/迭代，分治",
        "适用场景": "在二叉搜索树中定位元素",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG003",
      "name": "二叉搜索树更新",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉搜索树中查找具有给定关键字的元素，若找到则用新值更新该元素。",
        "时间复杂度": "平均 O(log n), 最差 O(n)",
        "空间复杂度": "O(1) (非递归)",
        "设计思想": "查找与修改",
        "适用场景": "修改二叉搜索树中结点的值",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG004",
      "name": "二叉搜索树插入",
      "attributes": {
        "难度": "入门",
        "内容": "向二叉搜索树中添加一个新元素，同时保持二叉搜索树的性质。查找合适的插入位置（一个空链接），然后将新结点链接上去。有递归和非递归实现。",
        "时间复杂度": "平均 O(log n), 最差 O(n)",
        "空间复杂度": "递归: 平均 O(log n), 最差 O(n); 非递归: O(1)",
        "设计思想": "递归/迭代，查找与链接",
        "适用场景": "构建或扩展二叉搜索树",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG005",
      "name": "二叉搜索树删除",
      "attributes": {
        "难度": "中等",
        "内容": "从二叉搜索树中移除具有给定关键字的结点，同时保持二叉搜索树的性质。需要分情况处理：删除叶子结点、删除只有单支子树的结点、删除有双支子树的结点（通常用中序前驱或中序后继替换）。",
        "时间复杂度": "平均 O(log n), 最差 O(n)",
        "空间复杂度": "递归: 平均 O(log n), 最差 O(n); 非递归: O(1)",
        "设计思想": "递归，分类讨论，结点替换",
        "适用场景": "从二叉搜索树中移除元素",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON002",
      "name": "中序前驱",
      "attributes": {
        "难度": "入门",
        "内容": "在中序遍历序列中，位于某结点之前的那个结点。在二叉搜索树中，一个结点的中序前驱是其左子树中值最大的结点（即左子树的“最右下”结点）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON003",
      "name": "递归",
      "attributes": {
        "难度": "入门",
        "内容": "一种算法设计技术，函数直接或间接调用自身来解决问题。常用于处理具有自相似结构的树形数据。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON004",
      "name": "非递归",
      "attributes": {
        "难度": "入门",
        "内容": "使用循环（如while循环）代替递归调用的算法实现方式。通常可以优化空间复杂度（避免函数调用栈开销）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON005",
      "name": "理想平衡树",
      "attributes": {
        "难度": "中等",
        "内容": "高度尽可能小的二叉树，对于n个结点的二叉树，其高度约为log2(n)。用作衡量二叉搜索树性能的基准（最佳情况）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON006",
      "name": "单支树",
      "attributes": {
        "难度": "入门",
        "内容": "所有结点都只有左子树或只有右子树的二叉树，形状类似链表。代表二叉搜索树的最坏情况，高度为O(n)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON007",
      "name": "二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "一种树形数据结构，其中每个结点最多有两个子结点，分别称为左孩子和右孩子。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS002",
      "name": "堆",
      "attributes": {
        "难度": "中等",
        "内容": "一种特殊的完全二叉树。分为小根堆和大根堆。常用于实现优先级队列。",
        "存储开销": "O(n) (通常使用数组)",
        "核心特性": "堆属性（父子结点关系），完全二叉树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS003",
      "name": "小根堆",
      "attributes": {
        "难度": "中等",
        "内容": "堆的一种，其中每个父结点的值都小于或等于其子结点的值。根结点是整个堆中的最小值。",
        "存储开销": "O(n)",
        "核心特性": "最小堆属性，完全二叉树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS004",
      "name": "大根堆",
      "attributes": {
        "难度": "中等",
        "内容": "堆的一种，其中每个父结点的值都大于或等于其子结点的值。根结点是整个堆中的最大值。",
        "存储开销": "O(n)",
        "核心特性": "最大堆属性，完全二叉树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON008",
      "name": "完全二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "一种二叉树，除了最底层外，其他各层结点数都达到最大，并且最底层的结点都连续集中在最左边。适合使用顺序存储（数组）表示。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG006",
      "name": "堆插入",
      "attributes": {
        "难度": "入门",
        "内容": "向堆中添加一个新元素。通常将新元素放在堆的末尾（数组末尾），然后通过与其父结点比较和交换（向上调整或sift-up），直到满足堆属性或到达根结点。",
        "时间复杂度": "O(log n)",
        "空间复杂度": "O(1) (迭代)",
        "设计思想": "末尾添加，向上调整",
        "适用场景": "向堆中添加元素，维护堆结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG007",
      "name": "堆删除",
      "attributes": {
        "难度": "入门",
        "内容": "从堆中删除堆顶元素（最小值或最大值）。通常将堆的最后一个元素移到堆顶，然后通过与子结点比较和交换（向下调整或sift-down），直到满足堆属性或到达叶子结点。",
        "时间复杂度": "O(log n)",
        "空间复杂度": "O(1) (迭代)",
        "设计思想": "替换堆顶，向下调整",
        "适用场景": "获取并移除堆的最小/最大元素",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON009",
      "name": "优先级队列",
      "attributes": {
        "难度": "中等",
        "内容": "一种抽象数据类型，允许存储元素及其关联的优先级，并支持高效地取出最高（或最低）优先级的元素。堆是实现优先级队列的常用数据结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS005",
      "name": "数组",
      "attributes": {
        "难度": "入门",
        "内容": "一种线性数据结构，用于存储固定大小的同类型元素序列。元素存储在连续的内存位置，可通过索引（下标）快速访问。",
        "存储开销": "O(n)",
        "核心特性": "连续存储, O(1)索引访问",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON010",
      "name": "路径",
      "attributes": {
        "难度": "入门",
        "内容": "树中从一个结点到另一个结点的结点序列 k_1, k_2, ..., k_j，其中 k_i 是 k_{i+1} 的双亲 (1 <= i < j)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON011",
      "name": "路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "路径上所经过的分支（边）的数量，等于路径上的结点数减 1。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON012",
      "name": "权",
      "attributes": {
        "难度": "入门",
        "内容": "赋予树中结点的一个具有某种意义的实数值。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON013",
      "name": "结点的带权路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "从树根结点到该结点之间的路径长度与该结点上的权值的乘积。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON014",
      "name": "树的带权路径长度 (WPL)",
      "attributes": {
        "难度": "入门",
        "内容": "树中所有叶子结点的带权路径长度之和，记为 WPL = Σ(w_i * l_i)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS006",
      "name": "哈夫曼树",
      "attributes": {
        "难度": "中等",
        "内容": "又称最优二叉树。对于给定的n个带权叶子结点，哈夫曼树是使得树的带权路径长度（WPL）最小的二叉树。构造原则是权值越大的叶子结点离根越近。",
        "存储开销": "O(n)",
        "核心特性": "最优性（最小WPL），无度为1的结点",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG008",
      "name": "哈夫曼树构造算法",
      "attributes": {
        "难度": "中等",
        "内容": "构造哈夫曼树的贪心算法：(1) 初始化n个单结点树构成森林。(2) 重复n-1次：选取森林中权值最小的两棵树，合并成一棵新树（权值为两者之和），从森林中删除这两棵树，并将新树加入森林。(3) 最终森林中剩下的唯一一棵树即为哈夫曼树。",
        "时间复杂度": "O(n log n) (使用优先队列)",
        "空间复杂度": "O(n)",
        "设计思想": "贪心算法",
        "适用场景": "构建哈夫曼树以用于哈夫曼编码等",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG009",
      "name": "计算WPL算法",
      "attributes": {
        "难度": "入门",
        "内容": "计算给定哈夫曼树的带权路径长度。通常采用递归方法：若当前结点是叶子，返回其权值乘以其深度（路径长度）；否则，递归计算左、右子树的WPL并求和。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归深度)",
        "设计思想": "递归",
        "适用场景": "计算树的带权路径长度",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON015",
      "name": "哈夫曼编码",
      "attributes": {
        "难度": "中等",
        "内容": "一种基于哈夫曼树构造的可变长度前缀编码方案。通过给出现频率高的字符分配较短的编码，给出现频率低的字符分配较长的编码，来达到数据压缩的目的。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON016",
      "name": "前缀编码",
      "attributes": {
        "难度": "入门",
        "内容": "一种编码方案，其中任何一个字符的编码都不是另一个字符编码的前缀。这保证了编码序列在解码时不会产生歧义。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON017",
      "name": "编码二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "用于表示编码方案的二叉树。通常约定左分支代表0，右分支代表1。从根到每个叶子结点的路径构成了该叶子结点代表字符的编码。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG010",
      "name": "生成哈夫曼编码算法",
      "attributes": {
        "难度": "入门",
        "内容": "从已构造的哈夫曼树生成每个叶子结点（字符）的哈夫曼编码。通常采用递归遍历，从根结点开始，向左走记录0，向右走记录1，到达叶子结点时，路径形成的01序列即为该字符的编码。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归深度或最长编码长度)",
        "设计思想": "递归/深度优先遍历",
        "适用场景": "从哈夫曼树获取字符编码",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS007",
      "name": "线索二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "一种改进的二叉链表存储结构。它利用结点中原本为空的指针域（left 或 right）来存放指向该结点在特定遍历序列（如中序）中的前驱或后继结点的指针（称为线索）。需要额外的标志位区分指针是孩子指针还是线索。",
        "存储开销": "O(n) + 2n个标志位",
        "核心特性": "线索化指针，支持快速非递归遍历",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON018",
      "name": "线索",
      "attributes": {
        "难度": "入门",
        "内容": "在线索二叉树中，存放在结点空指针域中的、指向该结点在特定遍历序列中前驱或后继结点的指针。分为左线索（指向前驱）和右线索（指向后继）。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG011",
      "name": "线索化",
      "attributes": {
        "难度": "中等",
        "内容": "将普通二叉树转换为线索二叉树的过程。即在遍历二叉树（如中序遍历）的同时，修改结点的空指针域，使其指向相应的前驱或后继结点，并设置线索标志位。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归) 或 O(1) (迭代)",
        "设计思想": "遍历（中序/前序/后序），指针修改",
        "适用场景": "创建线索二叉树以优化遍历",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG012",
      "name": "中序线索化",
      "attributes": {
        "难度": "中等",
        "内容": "按照中序遍历的顺序对二叉树进行线索化。在访问结点时，检查其空左指针域是否可以指向其中序前驱，以及其空右指针域是否可以指向其中序后继。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归)",
        "设计思想": "中序遍历，指针修改",
        "适用场景": "创建中序线索二叉树",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG013",
      "name": "前序线索化",
      "attributes": {
        "难度": "中等",
        "内容": "按照前序遍历的顺序对二叉树进行线索化。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) / O(1)",
        "设计思想": "前序遍历，指针修改",
        "适用场景": "创建前序线索二叉树",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG014",
      "name": "后序线索化",
      "attributes": {
        "难度": "中等",
        "内容": "按照后序遍历的顺序对二叉树进行线索化。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) / O(1)",
        "设计思想": "后序遍历，指针修改",
        "适用场景": "创建后序线索二叉树",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON019",
      "name": "线索标志域",
      "attributes": {
        "难度": "入门",
        "内容": "在线索二叉树的结点结构中增加的两个布尔型标志位（如 ltag, rtag），用于区分对应的指针域（left, right）存放的是指向孩子结点的指针还是指向前驱/后继结点的线索。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG015",
      "name": "寻找中序后继 (线索化)",
      "attributes": {
        "难度": "入门",
        "内容": "在中序线索二叉树中查找给定结点p的中序后继。若p的右指针是线索（rtag为真），则右指针指向的就是后继；否则，后继是其右子树中进行中序遍历时访问的第一个结点（即右子树的“最左下”结点）。",
        "时间复杂度": "O(h)",
        "空间复杂度": "O(1)",
        "设计思想": "利用线索和树结构",
        "适用场景": "中序线索二叉树的遍历",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG016",
      "name": "线索中序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "利用中序线索二叉树的线索进行中序遍历。首先找到中序序列的第一个结点（树的最左下结点），然后反复查找当前结点的中序后继并访问，直到遍历完成。此过程不需要递归或栈。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "利用线索指针",
        "适用场景": "高效地对线索二叉树进行中序遍历",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "06DS008",
      "name": "平衡二叉树 (AVL树)",
      "attributes": {
        "难度": "高级",
        "内容": "一种自平衡的二叉搜索树。其核心特性是任何结点的左子树和右子树的高度差（平衡因子）的绝对值不超过1。通过在插入和删除操作后进行旋转调整来维持平衡，保证查找、插入、删除操作的时间复杂度维持在O(log n)。",
        "存储开销": "O(n) + n个平衡因子",
        "核心特性": "自平衡，严格O(log n)操作性能",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON020",
      "name": "平衡因子",
      "attributes": {
        "难度": "入门",
        "内容": "定义为结点的左子树高度减去其右子树高度。在平衡二叉树（AVL树）中，每个结点的平衡因子只能是 -1, 0, 或 1。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON021",
      "name": "最小不平衡子树",
      "attributes": {
        "难度": "中等",
        "内容": "在向AVL树插入或删除结点后，可能导致树失衡。最小不平衡子树是指以离插入/删除结点最近的、且平衡因子绝对值大于1的结点作为根的子树。平衡调整操作（旋转）通常针对这个子树进行。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON022",
      "name": "旋转操作 (平衡二叉树)",
      "attributes": {
        "难度": "中等",
        "内容": "在平衡二叉树（如AVL树）中，用于恢复平衡状态的基本操作。通过改变结点之间的父子关系（修改指针），在保持二叉搜索树性质的前提下，降低不平衡子树的高度。常见的有LL、RR、LR、RL四种类型。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG017",
      "name": "LL型调整",
      "attributes": {
        "难度": "中等",
        "内容": "AVL树的单旋转调整。当在最小不平衡子树根结点A的左孩子B的左子树上插入导致不平衡时（A的平衡因子变为2），进行一次右旋操作：B提升为新根，A成为B的右孩子，B原来的右子树成为A的左子树。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "右单旋转，指针调整",
        "适用场景": "AVL树插入/删除后LL型失衡的调整",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG018",
      "name": "RR型调整",
      "attributes": {
        "难度": "中等",
        "内容": "AVL树的单旋转调整。当在最小不平衡子树根结点A的右孩子B的右子树上插入导致不平衡时（A的平衡因子变为-2），进行一次左旋操作：B提升为新根，A成为B的左孩子，B原来的左子树成为A的右子树。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "左单旋转，指针调整",
        "适用场景": "AVL树插入/删除后RR型失衡的调整",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG019",
      "name": "LR型调整",
      "attributes": {
        "难度": "中等",
        "内容": "AVL树的双旋转调整。当在最小不平衡子树根结点A的左孩子B的右子树（根为C）上插入导致不平衡时（A的平衡因子变为2），先对B进行左旋，再对A进行右旋。最终C提升为新根。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "先左后右双旋转，指针调整",
        "适用场景": "AVL树插入/删除后LR型失衡的调整",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG020",
      "name": "RL型调整",
      "attributes": {
        "难度": "中等",
        "内容": "AVL树的双旋转调整。当在最小不平衡子树根结点A的右孩子B的左子树（根为C）上插入导致不平衡时（A的平衡因子变为-2），先对B进行右旋，再对A进行左旋。最终C提升为新根。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "先右后左双旋转，指针调整",
        "适用场景": "AVL树插入/删除后RL型失衡的调整",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "06ALG021",
      "name": "平衡二叉树插入",
      "attributes": {
        "难度": "高级",
        "内容": "向平衡二叉树（AVL树）中插入新结点的过程。首先按照二叉搜索树的规则插入结点，然后从插入点开始向上回溯，检查路径上每个结点的平衡因子，如果发现不平衡（绝对值大于1），则根据情况执行相应的旋转操作（LL, RR, LR, RL）来恢复平衡。",
        "时间复杂度": "O(log n)",
        "空间复杂度": "O(log n) (递归) 或 O(1) (迭代)",
        "设计思想": "BST插入 + 回溯检查 + 旋转调整",
        "适用场景": "向AVL树添加元素并保持平衡",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "06CON023",
      "name": "特殊二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "指具有特定结构限制或特定应用目的的二叉树，本章讨论的包括二叉搜索树、堆、哈夫曼树、线索二叉树和平衡二叉树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "关系ID": "06REL001",
      "source": "06DS001",
      "target": "06CON001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL002",
      "source": "06ALG001",
      "target": "06DS001",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL003",
      "source": "06ALG002",
      "target": "06DS001",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL004",
      "source": "06ALG003",
      "target": "06DS001",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL005",
      "source": "06ALG004",
      "target": "06DS001",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL006",
      "source": "06ALG005",
      "target": "06DS001",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL007",
      "source": "06ALG005",
      "target": "06CON002",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL008",
      "source": "06ALG002",
      "target": "06CON003",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL009",
      "source": "06ALG004",
      "target": "06CON003",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL010",
      "source": "06ALG005",
      "target": "06CON003",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL011",
      "source": "06ALG002",
      "target": "06CON004",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL012",
      "source": "06ALG004",
      "target": "06CON004",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL013",
      "source": "06ALG002",
      "target": "06CON005",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL014",
      "source": "06ALG002",
      "target": "06CON006",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL015",
      "source": "06ALG003",
      "target": "06CON005",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL016",
      "source": "06ALG003",
      "target": "06CON006",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL017",
      "source": "06ALG004",
      "target": "06CON005",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL018",
      "source": "06ALG004",
      "target": "06CON006",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL019",
      "source": "06ALG005",
      "target": "06CON005",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL020",
      "source": "06ALG005",
      "target": "06CON006",
      "attributes": {
        "依赖强度": "弱"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL021",
      "source": "06DS001",
      "target": "06CON007",
      "attributes": {
        "约束条件": "左子树关键字 < 根关键字 < 右子树关键字"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL022",
      "source": "06DS003",
      "target": "06DS002",
      "attributes": {
        "约束条件": "父结点值 <= 子结点值"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL023",
      "source": "06DS004",
      "target": "06DS002",
      "attributes": {
        "约束条件": "父结点值 >= 子结点值"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL024",
      "source": "06DS002",
      "target": "06CON008",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL025",
      "source": "06ALG006",
      "target": "06DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL026",
      "source": "06ALG007",
      "target": "06DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "使用",
      "关系ID": "06REL027",
      "source": "06DS002",
      "target": "06DS005",
      "attributes": {
        "使用角色": "常用存储结构"
      }
    },
    {
      "type": "使用",
      "关系ID": "06REL028",
      "source": "06CON009",
      "target": "06DS002",
      "attributes": {
        "使用角色": "常用实现方式"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL029",
      "source": "06CON011",
      "target": "06CON010",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL030",
      "source": "06CON013",
      "target": "06CON011",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL031",
      "source": "06CON013",
      "target": "06CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL032",
      "source": "06CON014",
      "target": "06CON013",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL033",
      "source": "06DS006",
      "target": "06CON014",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL034",
      "source": "06DS006",
      "target": "06CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL035",
      "source": "06ALG008",
      "target": "06DS006",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL036",
      "source": "06ALG008",
      "target": "06CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL037",
      "source": "06ALG009",
      "target": "06DS006",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "使用",
      "关系ID": "06REL038",
      "source": "06CON015",
      "target": "06DS006",
      "attributes": {
        "使用角色": "基础结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL039",
      "source": "06CON015",
      "target": "06CON016",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL040",
      "source": "06CON015",
      "target": "06CON017",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL041",
      "source": "06ALG010",
      "target": "06DS006",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL042",
      "source": "06ALG010",
      "target": "06CON015",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL043",
      "source": "06DS007",
      "target": "06CON018",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL044",
      "source": "06DS007",
      "target": "06CON019",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL045",
      "source": "06ALG011",
      "target": "06DS007",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL046",
      "source": "06ALG012",
      "target": "06ALG011",
      "attributes": {
        "约束条件": "按中序遍历顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL047",
      "source": "06ALG013",
      "target": "06ALG011",
      "attributes": {
        "约束条件": "按前序遍历顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL048",
      "source": "06ALG014",
      "target": "06ALG011",
      "attributes": {
        "约束条件": "按后序遍历顺序"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL049",
      "source": "06ALG015",
      "target": "06DS007",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL050",
      "source": "06ALG016",
      "target": "06DS007",
      "attributes": {
        "必需性": "否"
      }
    },
    {
      "type": "使用",
      "关系ID": "06REL051",
      "source": "06ALG016",
      "target": "06ALG015",
      "attributes": {
        "使用角色": "核心步骤"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL052",
      "source": "06DS007",
      "target": "06CON007",
      "attributes": {
        "约束条件": "增加线索指针和线索标志域"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL053",
      "source": "06DS008",
      "target": "06DS001",
      "attributes": {
        "约束条件": "任意结点的平衡因子绝对值不超过1"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL054",
      "source": "06DS008",
      "target": "06CON020",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL055",
      "source": "06DS008",
      "target": "06CON022",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "06REL056",
      "source": "06CON022",
      "target": "06CON021",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL057",
      "source": "06ALG017",
      "target": "06CON022",
      "attributes": {
        "约束条件": "处理LL型失衡"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL058",
      "source": "06ALG018",
      "target": "06CON022",
      "attributes": {
        "约束条件": "处理RR型失衡"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL059",
      "source": "06ALG019",
      "target": "06CON022",
      "attributes": {
        "约束条件": "处理LR型失衡"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL060",
      "source": "06ALG020",
      "target": "06CON022",
      "attributes": {
        "约束条件": "处理RL型失衡"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "06REL061",
      "source": "06ALG021",
      "target": "06DS008",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "使用",
      "关系ID": "06REL062",
      "source": "06ALG021",
      "target": "06ALG004",
      "attributes": {
        "使用角色": "基础插入步骤"
      }
    },
    {
      "type": "使用",
      "关系ID": "06REL063",
      "source": "06ALG021",
      "target": "06CON022",
      "attributes": {
        "使用角色": "平衡维护机制"
      }
    },
    {
      "type": "优化",
      "关系ID": "06REL064",
      "source": "06DS008",
      "target": "06DS001",
      "attributes": {
        "优化方向": "最坏情况性能保证 (维持O(log n))"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL065",
      "source": "06DS001",
      "target": "06CON023",
      "attributes": {
        "约束条件": "无"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL066",
      "source": "06DS002",
      "target": "06CON023",
      "attributes": {
        "约束条件": "通常基于完全二叉树"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL067",
      "source": "06DS006",
      "target": "06CON023",
      "attributes": {
        "约束条件": "最小带权路径长度"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL068",
      "source": "06DS007",
      "target": "06CON023",
      "attributes": {
        "约束条件": "包含线索指针"
      }
    },
    {
      "type": "继承",
      "关系ID": "06REL069",
      "source": "06DS008",
      "target": "06CON023",
      "attributes": {
        "约束条件": "自平衡"
      }
    }
  ]
}