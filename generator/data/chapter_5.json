{
  "entities": [
    {
      "type": "数据结构",
      "ID": "05DS001",
      "name": "树",
      "attributes": {
        "难度": "入门",
        "内容": "树是n(n>=0)个结点的有限集。n=0时称为空树。在任意一棵非空树中：(1)有且仅有一个特定的称为根(Root)的结点；(2)当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1,T2,...,Tm，其中每一个集合本身又是一棵树，并且称为根的子树(Subtree)。树是一种重要的非线性、递归定义的数据结构，广泛用于表示层次关系。",
        "存储开销": "依赖具体存储实现",
        "核心特性": "层次结构, 递归定义, 非线性",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON001",
      "name": "空树",
      "attributes": {
        "难度": "入门",
        "内容": "不含有任何结点的树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON002",
      "name": "非空树",
      "attributes": {
        "难度": "入门",
        "内容": "至少含有一个结点的树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON003",
      "name": "根结点",
      "attributes": {
        "难度": "入门",
        "内容": "在一棵非空树中，有且仅有的一个没有前驱的结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON004",
      "name": "子树",
      "attributes": {
        "难度": "入门",
        "内容": "非空树中，根结点之外的结点被分为m(m>=0)棵互不相交的树，每棵树称为根的子树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON005",
      "name": "结点",
      "attributes": {
        "难度": "入门",
        "内容": "树的基本组成单元，包含数据元素及指向子树的分支。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON006",
      "name": "前驱",
      "attributes": {
        "难度": "入门",
        "内容": "在树结构中，指一个结点的上一层直接连接的结点（即双亲结点）。除根结点外，每个结点有且仅有一个前驱。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON007",
      "name": "后继",
      "attributes": {
        "难度": "入门",
        "内容": "在树结构中，指一个结点的下一层直接连接的结点（即孩子结点）。一个结点可以有任意多个后继。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON008",
      "name": "树形表示法",
      "attributes": {
        "难度": "入门",
        "内容": "最常用的树的表示方法，用结点和连线（隐含方向，通常上/左为前驱，下/右为后继）直观地表示树的逻辑结构。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON009",
      "name": "二元组表示法",
      "attributes": {
        "难度": "入门",
        "内容": "使用结点集合K和结点间关系集合R来定义树的方法，Tree = (K, R)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON010",
      "name": "集合图表示",
      "attributes": {
        "难度": "入门",
        "内容": "一种树的表示法，每棵树对应一个圆形，圆内包含根结点和表示子树的圆形。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON011",
      "name": "凹入表示",
      "attributes": {
        "难度": "入门",
        "内容": "一种树的表示法，使用不同长度和缩进的条形表示结点及其层次关系。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON012",
      "name": "广义表表示",
      "attributes": {
        "难度": "入门",
        "内容": "一种树的表示法，根结点作为表名放在前面，子树列表用括号括起，子树间用逗号分隔。如 A(B(D,E),C)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON013",
      "name": "结点的度",
      "attributes": {
        "难度": "入门",
        "内容": "结点拥有的子树的数目，或称为后继结点的数目。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON014",
      "name": "树的度",
      "attributes": {
        "难度": "入门",
        "内容": "树中所有结点度的最大值。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON015",
      "name": "叶子结点",
      "attributes": {
        "难度": "入门",
        "内容": "度为0的结点，也称为终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON016",
      "name": "分支结点",
      "attributes": {
        "难度": "入门",
        "内容": "度大于0的结点，也称为非终端结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON017",
      "name": "孩子结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的子树的根结点，即该结点的直接后继。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON018",
      "name": "双亲结点",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的直接前驱结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON019",
      "name": "兄弟结点",
      "attributes": {
        "难度": "入门",
        "内容": "具有相同双亲结点的结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON020",
      "name": "子孙",
      "attributes": {
        "难度": "入门",
        "内容": "一个结点的所有子树中的所有结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON021",
      "name": "祖先",
      "attributes": {
        "难度": "入门",
        "内容": "从根结点到该结点路径上经过的所有结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON022",
      "name": "结点的层数",
      "attributes": {
        "难度": "入门",
        "内容": "结点在树中所处的层次。根结点为第1层，其孩子为第2层，以此类推。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON023",
      "name": "树的深度",
      "attributes": {
        "难度": "入门",
        "内容": "树中所有结点的最大层数，也称为树的高度。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON024",
      "name": "有序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中各结点的子树是按照一定的次序从左向右安排的，子树的次序不能颠倒。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON025",
      "name": "无序树",
      "attributes": {
        "难度": "入门",
        "内容": "树中各结点的子树之间没有固定的次序，可以任意交换位置。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON026",
      "name": "森林",
      "attributes": {
        "难度": "入门",
        "内容": "m(m>=0)棵互不相交的树的集合。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON027",
      "name": "k叉树",
      "attributes": {
        "难度": "入门",
        "内容": "树的度为k的树，即每个结点的度最多为k。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON028",
      "name": "满k叉树",
      "attributes": {
        "难度": "中等",
        "内容": "深度为h的k叉树，其结点总数达到最大值 (k^h - 1) / (k - 1)。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS002",
      "name": "二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "度为2的有序树。递归定义：或者为空树，或者由一个根结点和两棵互不相交的左、右子树组成，左、右子树也分别是二叉树。是最简单且重要的树结构。",
        "存储开销": "依赖具体存储实现 (顺序O(2^h), 链式O(n))",
        "核心特性": "度最多为2, 左右子树有序",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON029",
      "name": "左子树",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树根结点的左边的子树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON030",
      "name": "右子树",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树根结点的右边的子树。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON031",
      "name": "左孩子",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树中一个结点的左子树的根结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON032",
      "name": "右孩子",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树中一个结点的右子树的根结点。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS003",
      "name": "满二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "一棵深度为h且有2^h-1个结点的二叉树。除叶子结点外，每个结点的度都为2。",
        "存储开销": "O(n)或O(2^h)",
        "核心特性": "完全填充, 所有非叶结点度为2",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS004",
      "name": "完全二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "深度为h的二叉树，除第h层外，其它各层(1～h-1)的结点数都达到最大个数，第h层的所有结点都连续集中在最左边。",
        "存储开销": "适合顺序存储 O(n)",
        "核心特性": "层序编号连续, 最后一层左对齐",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS005",
      "name": "理想平衡二叉树",
      "attributes": {
        "难度": "中等",
        "内容": "一棵二叉树，若除最后一层外，其余层都是满的，而最后一层上的结点可以任意分布。",
        "存储开销": "O(n)",
        "核心特性": "除最后一层外均满",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG001",
      "name": "初始化二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树的根指针置为NULL，表示创建一棵空树。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建新的二叉树实例之前",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG002",
      "name": "建立二叉树(广义表)",
      "attributes": {
        "难度": "中等",
        "内容": "根据表示二叉树的广义表字符串，使用栈辅助，递归或迭代地构建二叉树的链接存储结构。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "栈辅助, 递归/迭代构建",
        "适用场景": "从序列化字符串恢复二叉树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG003",
      "name": "判空二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "检查二叉树的根指针是否为NULL，判断二叉树是否为空。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "在对二叉树进行操作前检查其状态",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG004",
      "name": "遍历二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "按照特定的次序（如前序、中序、后序、层序）访问二叉树中的所有结点，且每个结点仅被访问一次。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) (递归) 或 O(W) (层序)",
        "设计思想": "递归 或 队列/栈辅助迭代",
        "适用场景": "需要处理树中所有结点的场景",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG005",
      "name": "查找二叉树结点",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉树中查找是否存在值为特定item的结点，通常采用类似遍历的方式进行搜索。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归搜索",
        "适用场景": "判断元素是否存在或获取元素信息",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG006",
      "name": "求二叉树深度",
      "attributes": {
        "难度": "入门",
        "内容": "计算二叉树的最大层数。递归定义：空树深度0，非空树深度 = max(左子树深度, 右子树深度) + 1。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "获取树的高度信息，评估树的平衡性等",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG007",
      "name": "输出二叉树(广义表)",
      "attributes": {
        "难度": "入门",
        "内容": "将二叉树的结构以广义表的形式（例如 A(B(C,D),E)）输出。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归输出 (类似前序)",
        "适用场景": "可视化或序列化二叉树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG008",
      "name": "清除二叉树",
      "attributes": {
        "难度": "入门",
        "内容": "删除二叉树中的所有结点，释放其占用的内存空间，使之变为空树。通常采用后序遍历的方式进行。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "后序递归删除",
        "适用场景": "销毁二叉树对象，回收资源",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS006",
      "name": "二叉树顺序存储结构",
      "attributes": {
        "难度": "入门",
        "内容": "使用一维数组存储二叉树结点，按照层序遍历的顺序（或类似满二叉树的编号规则）将结点存入数组。结点间的逻辑关系通过数组下标计算得出。",
        "存储开销": "O(2^h) 或 O(n) (取决于是否为完全二叉树)",
        "核心特性": "数组存储, 下标隐含关系, 适用于完全二叉树",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS007",
      "name": "二叉链表",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的链接存储结构，每个结点包含数据域、指向左孩子的指针域和指向右孩子的指针域。",
        "存储开销": "O(n)",
        "核心特性": "指针链接, 存储灵活, 常用",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS008",
      "name": "带双亲指针的二叉链表",
      "attributes": {
        "难度": "入门",
        "内容": "在二叉链表的基础上，为每个结点增加一个指向其双亲结点的指针域。",
        "存储开销": "O(n)",
        "核心特性": "指针链接, 便于查找双亲结点",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG009",
      "name": "前序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的一种遍历方式：先访问根结点，然后前序遍历左子树，再前序遍历右子树 (DLR)。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "构建前缀表达式、复制树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG010",
      "name": "中序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的一种遍历方式：先中序遍历左子树，然后访问根结点，再中序遍历右子树 (LDR)。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "二叉搜索树排序输出",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG011",
      "name": "后序遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的一种遍历方式：先后序遍历左子树，然后后序遍历右子树，最后访问根结点 (LRD)。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "计算表达式树的值、释放树结点内存",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG012",
      "name": "按层遍历",
      "attributes": {
        "难度": "入门",
        "内容": "二叉树的一种遍历方式：按照从上到下、同一层从左到右的次序访问结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(W)",
        "设计思想": "队列辅助迭代 (BFS)",
        "适用场景": "广度优先搜索、求最短路径（无权图）",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "概念",
      "ID": "05CON033",
      "name": "递归",
      "attributes": {
        "难度": "入门",
        "内容": "一种解决问题的方法，函数（或过程）在其定义中直接或间接调用自身。常用于处理具有递归结构的数据（如树）或问题。",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS009",
      "name": "栈",
      "attributes": {
        "难度": "入门",
        "内容": "一种后进先出（LIFO）的线性数据结构。主要操作是压栈（push）和弹栈（pop）。",
        "存储开销": "O(n)",
        "核心特性": "LIFO",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS010",
      "name": "队列",
      "attributes": {
        "难度": "入门",
        "内容": "一种先进先出（FIFO）的线性数据结构。主要操作是入队（enqueue）和出队（dequeue）。",
        "存储开销": "O(n)",
        "核心特性": "FIFO",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS011",
      "name": "多元树",
      "attributes": {
        "难度": "入门",
        "内容": "指度大于等于3的树，也称多叉树或普通树。",
        "存储开销": "依赖具体存储实现",
        "核心特性": "度>=3",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG013",
      "name": "初始化树",
      "attributes": {
        "难度": "入门",
        "内容": "将普通树（多元树）的根指针置为NULL，表示创建一棵空树。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "创建新的树实例之前",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG014",
      "name": "建立树(广义表)",
      "attributes": {
        "难度": "中等",
        "内容": "根据表示k叉树的广义表字符串，使用栈辅助，递归或迭代地构建树的标准链接存储结构。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "双栈辅助, 递归/迭代构建",
        "适用场景": "从序列化字符串恢复k叉树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG015",
      "name": "遍历树",
      "attributes": {
        "难度": "入门",
        "内容": "按照特定的次序（如先根、后根、层序）访问普通树中的所有结点，且每个结点仅被访问一次。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h) 或 O(W)",
        "设计思想": "递归 或 队列/栈辅助迭代",
        "适用场景": "需要处理树中所有结点的场景",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG016",
      "name": "查找树结点",
      "attributes": {
        "难度": "入门",
        "内容": "在普通树中查找是否存在值为特定item的结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归搜索 (类似先根遍历)",
        "适用场景": "判断元素是否存在或获取元素信息",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG017",
      "name": "输出树(广义表)",
      "attributes": {
        "难度": "入门",
        "内容": "将普通树的结构以广义表的形式输出。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归输出 (类似先根遍历)",
        "适用场景": "可视化或序列化树结构",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG018",
      "name": "判空树",
      "attributes": {
        "难度": "入门",
        "内容": "检查普通树的根指针是否为NULL，判断树是否为空。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "基本操作",
        "适用场景": "在对树进行操作前检查其状态",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG019",
      "name": "清除树",
      "attributes": {
        "难度": "入门",
        "内容": "删除普通树中的所有结点，释放其占用的内存空间，使之变为空树。通常采用后根遍历的方式进行。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "后根递归删除",
        "适用场景": "销毁树对象，回收资源",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG020",
      "name": "求树深度",
      "attributes": {
        "难度": "入门",
        "内容": "计算普通树（k叉树）的最大层数。递归定义：空树深度0，非空树深度 = max(所有子树深度) + 1。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "获取树的高度信息",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS012",
      "name": "树的顺序存储结构",
      "attributes": {
        "难度": "中等",
        "内容": "使用一维数组存储k叉树结点，按照特定编号规则将结点存入。结点间的逻辑关系通过下标计算，规则比二叉树复杂。",
        "存储开销": "对于满k叉树或完全k叉树合适，否则浪费空间",
        "核心特性": "数组存储, 下标隐含关系复杂, 适用性有限",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS013",
      "name": "树的标准链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "树的链接存储结构，每个结点包含数据域和k个指针域，分别指向k个孩子结点（k为树的度）。",
        "存储开销": "O(n*k)",
        "核心特性": "指针链接, 直接表示多叉关系, 指针域可能过多",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS014",
      "name": "树的广义标准链接存储",
      "attributes": {
        "难度": "中等",
        "内容": "在标准链接存储的基础上，为每个结点增加一个指向其双亲结点的指针域。",
        "存储开销": "O(n*(k+1))",
        "核心特性": "指针链接, 便于查找双亲, 空间开销更大",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "数据结构",
      "ID": "05DS015",
      "name": "树的孩子兄弟表示法",
      "attributes": {
        "难度": "中等",
        "内容": "将任意树转换为二叉树进行存储的方法。结点的左指针指向其第一个孩子，右指针指向其下一个兄弟。也称为二叉树表示法。",
        "存储开销": "O(n)",
        "核心特性": "用二叉链表表示任意树, 空间效率高",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG021",
      "name": "先根遍历(树)",
      "attributes": {
        "难度": "入门",
        "内容": "普通树的一种遍历方式：先访问根结点，然后依次先根遍历根的各棵子树。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "树的复制",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG022",
      "name": "后根遍历(树)",
      "attributes": {
        "难度": "入门",
        "内容": "普通树的一种遍历方式：先依次后根遍历根的各棵子树，然后访问根结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(h)",
        "设计思想": "递归",
        "适用场景": "计算依赖子节点值的场景、释放树内存",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    },
    {
      "type": "算法",
      "ID": "05ALG023",
      "name": "按层遍历(树)",
      "attributes": {
        "难度": "入门",
        "内容": "普通树的一种遍历方式：按照从上到下、同一层从左到右的次序访问结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(W)",
        "设计思想": "队列辅助迭代 (BFS)",
        "适用场景": "广度优先搜索",
        "教学视频": "未知",
        "教学材料": "未知",
        "外部资源": "未知"
      }
    }
  ],
  "relations": [
    {
      "type": "继承",
      "关系ID": "05REL001",
      "source": "05DS002",
      "target": "05DS001",
      "attributes": {
        "约束条件": "度最大为2, 左右子树有序"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL002",
      "source": "05DS003",
      "target": "05DS002",
      "attributes": {
        "约束条件": "每层结点数均达到最大值"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL003",
      "source": "05DS004",
      "target": "05DS002",
      "attributes": {
        "约束条件": "除最后一层外均满, 最后一层结点左对齐"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL004",
      "source": "05DS005",
      "target": "05DS002",
      "attributes": {
        "约束条件": "除最后一层外均满"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL005",
      "source": "05DS003",
      "target": "05DS004",
      "attributes": {
        "约束条件": "最后一层也是满的"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL006",
      "source": "05DS004",
      "target": "05DS005",
      "attributes": {
        "约束条件": "最后一层结点需左对齐"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL007",
      "source": "05DS003",
      "target": "05DS005",
      "attributes": {
        "约束条件": "所有层均满"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL008",
      "source": "05ALG001",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL009",
      "source": "05ALG002",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL010",
      "source": "05ALG003",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL011",
      "source": "05ALG004",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL012",
      "source": "05ALG005",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL013",
      "source": "05ALG006",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL014",
      "source": "05ALG007",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL015",
      "source": "05ALG008",
      "target": "05DS002",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL016",
      "source": "05ALG009",
      "target": "05ALG004",
      "attributes": {
        "约束条件": "DLR顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL017",
      "source": "05ALG010",
      "target": "05ALG004",
      "attributes": {
        "约束条件": "LDR顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL018",
      "source": "05ALG011",
      "target": "05ALG004",
      "attributes": {
        "约束条件": "LRD顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL019",
      "source": "05ALG012",
      "target": "05ALG004",
      "attributes": {
        "约束条件": "按层顺序"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL020",
      "source": "05DS002",
      "target": "05CON033",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL021",
      "source": "05ALG009",
      "target": "05CON033",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL022",
      "source": "05ALG010",
      "target": "05CON033",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL023",
      "source": "05ALG011",
      "target": "05CON033",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL024",
      "source": "05ALG002",
      "target": "05DS009",
      "attributes": {
        "使用角色": "辅助结构"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL025",
      "source": "05ALG012",
      "target": "05DS010",
      "attributes": {
        "使用角色": "核心结构"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL026",
      "source": "05ALG008",
      "target": "05ALG011",
      "attributes": {
        "约束条件": "增加结点删除操作"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL027",
      "source": "05ALG006",
      "target": "05CON033",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL028",
      "source": "05ALG005",
      "target": "05ALG009",
      "attributes": {
        "约束条件": "增加结点比较和返回逻辑"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL029",
      "source": "05ALG007",
      "target": "05ALG009",
      "attributes": {
        "约束条件": "修改结点访问操作为广义表格式输出"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL030",
      "source": "05DS004",
      "target": "05DS006",
      "attributes": {
        "使用角色": "理想适用"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL031",
      "source": "05DS002",
      "target": "05DS007",
      "attributes": {
        "使用角色": "常用实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL032",
      "source": "05DS002",
      "target": "05DS008",
      "attributes": {
        "使用角色": "变体实现"
      }
    },
    {
      "type": "变体",
      "关系ID": "05REL033",
      "source": "05DS007",
      "target": "05DS008",
      "attributes": {
        "变体类型": "增加双亲指针"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL034",
      "source": "05DS011",
      "target": "05DS001",
      "attributes": {
        "约束条件": "度>=3"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL035",
      "source": "05ALG013",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL036",
      "source": "05ALG014",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL037",
      "source": "05ALG015",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL038",
      "source": "05ALG016",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL039",
      "source": "05ALG017",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL040",
      "source": "05ALG018",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL041",
      "source": "05ALG019",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "05REL042",
      "source": "05ALG020",
      "target": "05DS011",
      "attributes": {
        "必需性": "是"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL043",
      "source": "05ALG021",
      "target": "05ALG015",
      "attributes": {
        "约束条件": "先根顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL044",
      "source": "05ALG022",
      "target": "05ALG015",
      "attributes": {
        "约束条件": "后根顺序"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL045",
      "source": "05ALG023",
      "target": "05ALG015",
      "attributes": {
        "约束条件": "按层顺序"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL046",
      "source": "05ALG014",
      "target": "05DS009",
      "attributes": {
        "使用角色": "辅助结构"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL047",
      "source": "05ALG023",
      "target": "05DS010",
      "attributes": {
        "使用角色": "核心结构"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL048",
      "source": "05ALG019",
      "target": "05ALG022",
      "attributes": {
        "约束条件": "增加结点删除操作"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL049",
      "source": "05ALG016",
      "target": "05ALG021",
      "attributes": {
        "约束条件": "增加结点比较和返回逻辑"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL050",
      "source": "05ALG017",
      "target": "05ALG021",
      "attributes": {
        "约束条件": "修改结点访问操作为广义表格式输出"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL051",
      "source": "05DS001",
      "target": "05DS012",
      "attributes": {
        "使用角色": "存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL052",
      "source": "05DS001",
      "target": "05DS013",
      "attributes": {
        "使用角色": "存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL053",
      "source": "05DS001",
      "target": "05DS014",
      "attributes": {
        "使用角色": "存储实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL054",
      "source": "05DS001",
      "target": "05DS015",
      "attributes": {
        "使用角色": "存储实现 (转换)"
      }
    },
    {
      "type": "变体",
      "关系ID": "05REL055",
      "source": "05DS013",
      "target": "05DS014",
      "attributes": {
        "变体类型": "增加双亲指针"
      }
    },
    {
      "type": "使用",
      "关系ID": "05REL056",
      "source": "05DS015",
      "target": "05DS007",
      "attributes": {
        "使用角色": "核心结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL057",
      "source": "05DS002",
      "target": "05CON024",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL058",
      "source": "05CON027",
      "target": "05CON014",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL059",
      "source": "05CON028",
      "target": "05CON027",
      "attributes": {
        "约束条件": "结点数达到最大值"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL060",
      "source": "05DS002",
      "target": "05CON027",
      "attributes": {
        "约束条件": "k=2"
      }
    },
    {
      "type": "继承",
      "关系ID": "05REL061",
      "source": "05DS011",
      "target": "05CON027",
      "attributes": {
        "约束条件": "k>=3"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL062",
      "source": "05DS001",
      "target": "05CON003",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL063",
      "source": "05DS001",
      "target": "05CON005",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL064",
      "source": "05DS001",
      "target": "05CON004",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL065",
      "source": "05DS001",
      "target": "05CON006",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL066",
      "source": "05DS001",
      "target": "05CON007",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL067",
      "source": "05DS001",
      "target": "05CON013",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL068",
      "source": "05DS001",
      "target": "05CON014",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL069",
      "source": "05DS001",
      "target": "05CON015",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL070",
      "source": "05DS001",
      "target": "05CON016",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL071",
      "source": "05DS001",
      "target": "05CON017",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL072",
      "source": "05DS001",
      "target": "05CON018",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL073",
      "source": "05DS001",
      "target": "05CON019",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL074",
      "source": "05DS001",
      "target": "05CON020",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL075",
      "source": "05DS001",
      "target": "05CON021",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL076",
      "source": "05DS001",
      "target": "05CON022",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL077",
      "source": "05DS001",
      "target": "05CON023",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL078",
      "source": "05DS001",
      "target": "05CON024",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL079",
      "source": "05DS001",
      "target": "05CON025",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL080",
      "source": "05DS001",
      "target": "05CON026",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL081",
      "source": "05DS002",
      "target": "05CON029",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL082",
      "source": "05DS002",
      "target": "05CON030",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL083",
      "source": "05DS002",
      "target": "05CON031",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL084",
      "source": "05DS002",
      "target": "05CON032",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "05REL085",
      "source": "05DS001",
      "target": "05CON033",
      "attributes": {
        "依赖强度": "强"
      }
    }
  ]
}