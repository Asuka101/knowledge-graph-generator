person r1=("shiliang",38), r2=("zhangtongwen",34),
r3=("panweidong",42);
person* p;
r1.next=&r2; r2.next=&r3; r3.next=NULL;
p=&r1;
cout.setf(ios::left);  //使显示数据在规定范围内左对齐,
//若把 left 改为 right 则为右对齐，默认设置为右对齐
while(p!=NULL){
    cout<<setw(15)<<p->name<<setw(5)<<p->age<<endl;
    p=p->next;
};
}

该程序运行后的显示结果如下:

shiliang          38
zhangtongwen      34
panweidong        42

（4）文件。

文件是按位置有序的数据集合。如一篇文章，可看做按位置有序的字符集合；一个统计表，可看做按行位置有序的记录集合；一个二维数值矩阵，可看做先按行位置有序、对于同一行再按列位置有序的数值集合；一个具有树结构的图表，可看做先从上到下的层次有序、在同一层次上再按从左到右的位置有序的数据（结点）集合。它们均可看做相应文件。单从文件中数据的先后排列位置考虑，可以认为它具有线性结构。

在计算机中文件被存储在外存上，其存储结构由操作系统自动实现。在 C++语言中，用户使用文件是通过定义与之相对应的文件流对象来实现的。通过输入文件流对象使文件中的数据按照其位置从前到后的次序依次流入到内存文件缓冲区中，从而被读取到指定的内存变量中；通过输出文件流对象，使输出到文件中的数据首先写入到文件缓冲区中，然后操作系统再把文件缓冲区中的内容写入到外存上相应文件的末尾。当然，对于字节文件，可以从任何指定位臵写入信息，也可以把信息写入到任何指定位臵开始的存储空间中。

对于一个字符文件，通过输入文件流类或输入/输出文件流类的对象打开后，主要采用以下4种操作方法从文件中读取数据。

① 流类对象>>变量。
② 流类对象.get（字符变量）。
③ 流类对象.get()。
④ 流类对象.getline（字符指针变量，整数量）。

第1种操作方法从流类对象所对应的文件中顺序读出一个数据（数据以空格或换行符隔开）到指定的内存变量中。第2种操作方法从流类对象所对应的文件中顺序读出一个字符到内存字符变量中。第3种操作方法同第2种类似，区别仅在于把读到的一个字符作为函数值返回。第4种操作方法从流类对象所对应的文件中顺序读出一行字符（以换行符或文件结束符作为行结束符，或者读到给定的第2个参数“整数量”的值减1个字符也作为
