(1) 数组。

数组是数目固定的具有同一类型的数据元素的顺序组合，按照数组中每个元素的下标位置可认为数组具有线性结构，用二元组描述如下：

array =$(A, R)$，其中$A=\left\{a[i] \mid 0 \leqslant i \leqslant n-1, n \geqslant 1\right\}$R=\left\{\langle a[i], a[i+1]\rangle \mid 0 \leqslant i \leqslant n-2\right\}$a[i]为数组中的下标为$i$的元素，$n$为大于等于 1 的整数，用来表明数组中元素的个数，数组元素的下标从 0 到$n-1$，数组中前后相邻位置上的两个元素为一个序偶，其前一元素 a[i]是后一元素 a[i+1]的前驱，而 a[i+1]是 a[i]的后继，第 1 个元素 a[0]无前驱元素，最后一个元素 a[n-1]无后继元素。

按数组下标的个数，可把数组分为一维、二维、三维等。

一维数组中的每个元素只包含有一个下标，二维数组中的每个元素包含有两个下标，第 1 个称为行下标，第 2 个称为列下标。

二维数组可看作是一维数组或嵌套，即首先把它看作是按行下标顺序排列的一维数组，该数组中的每个元素又都是按列下标顺序排列的一维数组。如对于一个二维数组 b[m][n]，可视为一维数组 b[m]，所含元素依次为 b[0],b[1],…,b[m-1]，其中每一个元素 b[i]（$0 \leqslant i \leqslant m-1$）又都是一个含有$n$个元素的一维数组，所含元素依次为 b[i][0],b[i][1],…,b[i][n-1]。

同样，三维数组包含有 3 个下标，每个元素的位置由一组 3 个下标值唯一确定。三维数组是一维数组的 3 层嵌套结构。如对于一个三维数组 c[p][m][n]，首先可视为一维数组 c[p]，所含元素依次为 c[0],c[1],…,c[p-1]，其中每一个元素 c[k]（$0 \leqslant k \leqslant p-1$）又都是一个含有$m$个元素的一维数组，所含元素依次为 c[k][0],c[k][1],…,c[k][m-1]，这里的每一个元素 c[k][i]（$0 \leqslant i \leqslant m-1$）也都是一个含有$n$个元素的一维数组，所含元素依次为 c[k][i][0],c[k][i][1],…,c[k][i][n-1]。

数组的存储结构是顺序结构，即数组中第$i+1$个元素紧接着存储在第$i$个元素的存储位置的后面。如对于一维数组 a[n]，则每个元素 a[i]的存储位置的首字节地址为：$\text { Address(a[i])=Loc(a)+i*L } \quad(0 \leqslant i \leqslant n-1)$其中 Loc(a)表示数组 a 的存储空间的首地址，L 表示数组 a 中元素类型的大小，即每个元素所占用的字节数，可用 sizeof(a[i])计算。由上述公式可知：元素 a[0]的存储地址为 Loc(a)，它就是整个数组的开始地址，a[1]的存储地址为 Loc(a)+1*L，a[2]的存储地址为 Loc(a)+2*L；…；a[n-1]的存储地址为 Loc(a)+(n-1)*L。

对于一个二维数组 b[m][n]，每一行元素 b[i]的存储位置（即存储该行$n$个元素的首字节地址）为：$\text { Address(b[i])=Loc(b)+i*RS } \quad(0 \leqslant i \leqslant m-1)$其中 Loc(b)表示二维数组 b 的存储空间的首地址，RS 表示顺序存储一行$n$个元素所占用存储空间的大小，它等于每个元素所占用的字节数 L 与一行上元素的个数$n$的乘积。因此上述计算公式可改写为：$\text { Address(b[i])=Loc(b)+i*n*L } \quad(0 \leqslant i \leqslant m-1)$对于二维数组 b 中的第$i$行（即下标为$i$的行），其中下标为$j$的元素 b[i][j]的存储位置为：$\text { Address(b[i][j])=Loc(b)+i*n*L+j*L } \quad(0 \leqslant i \leqslant m-1,0 \leqslant j \leqslant n-1)$
