排序区间。$\begin{aligned}& [45 \quad 53 \quad 18 \quad 36 \quad 72 \quad 30 \quad 48 \quad 93 \quad 15 \quad 36] \\& [30 \quad 36 \quad 18 \quad 36 \quad 15] \quad 45 \quad[48 \quad 93 \quad 72 \quad 53] \\& [18 \quad 15] \quad 30 \quad[36 \quad 36] \quad 45 \quad[48 \quad 93 \quad 72 \quad 53] \\& 15 \quad 18 \quad 30 \quad[36 \quad 36] \quad 45 \quad[48 \quad 93 \quad 72 \quad 53] \\& 15 \quad 18 \quad 30 \quad 36 \quad 36 \quad 45 \quad 48 \quad[53 \quad 72] \quad 93 \\& 15 \quad 18 \quad 30 \quad 36 \quad 36 \quad 45 \quad 48 \quad 53 \quad 72 \quad 93\end{aligned}$图 10-7 快速排序的过程示例

因为在快速排序方法中存在着不相邻元素之间的交换, 所以快速排序也是一种不稳定的排序方法。

在快速排序中, 若把每次划分所用的基准元素看作为根结点, 把划分得到的左区间和右区间看作为根结点的左子树和右子树, 那么整个排序过程就对应着一棵具有$n$个元素的二叉搜索树, 所需划分的层数就等于对应二叉搜索树的高度减 1 , 所需划分的所有区间数 (它包括开始非递归调用使用的区间和每次递归调用所使用的区间的总和) 就等于对应二叉搜索树中分支结点数。图 10-7 的快速排序过程所对应的二叉搜索树, 如图 10-8 (a) 所示。该树的高度为 5 , 分支结点数为 7 , 所以该排序过程需要进行 4 层划分, 共包含有 7 个划分区间, 其中每层包含的划分区间数依次为 1、2、3 和 1。

(a) 一般情况

(b) 特殊情况

图 10-8 快速排序示例所对应的二叉搜索树

在快速排序中, 记录的移动次数通常小于记录的比较次数, 因为只有当记录出现逆序 (即$\mathrm{A}[i].strn > \mathrm{A}[s].strn$或$\mathrm{A}[j].strn < \mathrm{A}[s].strn$) 时才需要把$\mathrm{A}[i]$同$\mathrm{A}[j]$交换其值, 即移动记录。因此, 讨论快速排序算法的时间复杂度只要按它的比较次数讨论即可。为了讨论方便, 假定由快速排序过程得到的二叉搜索树是一棵理想平衡树。在理想平衡树中, 结点数$n$同高度$h$的关系为$\lfloor \lg n \rfloor < h \leqslant \lfloor \lg n \rfloor + 1$, 且前$h - 1$层都是满的, 最后一层为叶子结点。由快速排序算法可知, 进行每一层所有区间的划分时, 需要比较记录的总次数小于等于$n$次, 所以快速
