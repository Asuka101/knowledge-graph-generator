p=HT2;
while(p!=NULL) {
    InsertSet(HT, p->data);
    p=p->next;
}

12. 求两个集合的交集

void InterseSet(SNode* HT1, SNode* HT2, SNode*& HT)
{
//置交集的表头指针 HT 为空
HT=NULL;
//把 HT1 集合与 HT2 集合中共同的元素插入到 HT 集合中
ElemType x;
SNode* p=HT2;
while(p!=NULL) {
    x=p->data;                      //将 p->data 赋给 x
    bool b=FindSet(HT1,x);         //用 x 查找 HT1 集合
    if(b) InsertSet(HT,x);         //若查找成功则把 x 插入到 HT 集合中
    p=p->next;                     //使 p 指向下一个结点
}
}

13. 求两个集合的差集

void DifferenceSet(SNode* HT1, SNode* HT2, SNode*& HT)
{
//置差集的表头指针 HT 为空
HT=NULL;
//把存在于 HT1 集合而不存在于 HT2 集合中的元素插入到 HT 集合中
ElemType x;
SNode* p=HT1;
while(p!=NULL) {
    x=p->data;                      //将 p->data 赋给 x
    bool b=FindSet(HT2,x);         //用 x 查找 HT2 集合
    if(!b) InsertSet(HT,x);        //若查找失败则把 x 插入到 HT 集合中
    p=p->next;                     //使 p 指向下一个结点
}
}

同对线性表的存储一样，对集合除了可以进行顺序存储和链接存储外，还可以进行散列存储和索引存储，相应地也能够根据具体的运算要求编写出利用 C++语言实现的算法，待以后学习过这两种存储结构后能够比较容易地编写出来。\n在集合抽象数据类型中规定的各种操作只是一些典型的操作，当然在实际应用中还有
