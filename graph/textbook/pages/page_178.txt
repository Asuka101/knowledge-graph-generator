行插入, 而在表的另一端进行删除。把进行插入的一端称作队尾 (rear), 进行删除的一端称作队首（front）。向队列中插入新元素称为进队或入队，新元素进队后就成为新的队尾元素；从队列中删除元素称为离队或出队，元素离队后，其后继元素就成为队首元素。由于队列的插入和删除操作分别是在各自的一端进行的，每个元素必然按照进入的次序离队，所以又把队列称为先进先出表（First In First Out，FIFO）。

在日常生活中，人们为购物或等车时所排的队就是一个队列，新来购物或等车的人接到队尾（即进队），站在队首的人购到物品或上车后离开（即出队），当最后一人离队后，则队列为空。

若有$a,b,c,d$共4个元素依次进队，则得到的队列为$(a,b,c,d)$，其中字符$a$为队首元素，字符$d$为队尾元素。若从此队中删除一个元素，则字符$a$出队，字符$b$成为新的队首元素，此队变为$(b,c,d)$；若接着向该队列插入一个字符$e$，则$e$成为新的队尾元素，此队变为$(b,c,d,e)$；若接着做3次删除操作，则队列变为$(e)$，此时只有一个元素$e$，它既是队首元素又是队尾元素，当它被删除后队列变为空。

\section*{4.7 .2 队列的抽象数据类型}

队列的抽象数据类型中的数据部分为具有ElemType元素类型的一个队列，它可以采用任一种存储结构实现；操作部分包括元素进队、出队、读取队首元素、检查队列是否为空等。队列的抽象数据类型的具体定义如下。

ADT QUEUE is

Data:

一个队列Q，假定用标识符QueueType表示队列的存储类型

Operation:

void InitQueue(QueueType& Q); //初始化队列Q，置Q为空

void EnQueue(QueueType& Q, ElemType item); //将新元素插入队尾

ElemType OutQueue(QueueType& Q); //从队列中删除队首元素并返回

ElemType PeekQueue(QueueType& Q); //返回队首元素，不改变队列状态

bool EmptyQueue(QueueType& Q); //判断队列是否为空

void ClearQueue(QueueType& Q); //清除队列Q，使之成为空队

end QUEUE

有一个队列$q$，其元素类型为整型int，下面给出调用上述操作的一些例子。

InitQueue(q); //把队列置空

EnQueue(q,35); //元素35进队

int x=12; EnQueue(q,2*x+3); //元素2*x+3的值27进队

EnQueue(q,-16); //元素-16进队，此时队列为(35,27,-16)

cout<<PeekQueue(q)<<endl; //输出队首元素35

OutQueue(q); OutQueue(q); //依次删除元素35和27

while(!EmptyQueue(q)) cout<<OutQueue(q)<<" "; //依次输出队列q

//中的所有元素，因q中只有一个元素-16，所以此循环只输出它
