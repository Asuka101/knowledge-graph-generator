Push(a,x);
cin>>x;
}
while(!EmptyStack(a)) //栈不为空时依次退栈打印出来
    cout<<Pop(a)<<" ";
cout<<endl;
ClearStack(a);
}

从键盘上输入为:

78 63 45 82 91 34 -1

则输出为:

34 91 82 45 63 78

【例4-2】栈在计算机语言的编译过程中用来进行语法检查, 试编写一个算法, 用来检查一个 C/C++语言程序中的大括号、方括号和圆括号是否配对, 若能够全部配对则返回 1 ,否则返回 0 。

分析: 在这个算法中, 需要扫描待检查程序中的每一个字符, 当扫描到每个大、中、圆左括号时, 令其进栈, 当扫描到每个大、中、圆右括号时, 则检查栈顶是否为相应的左括号, 若是则作退栈处理, 若不是则表明出现了语法错误, 应返回 0 。当扫描到程序文件结尾后, 若栈为空则表明没有发现括号配对错误, 应返回 1 , 否则表明栈中还有未配对的括号, 应返回 0 。另外, 对于一对单引号或双引号内的字符不进行括号配对检查。

根据分析, 编写出算法如下:

int BracketsCheck(char* fname)
{
    //对由fname所指字符串为文件名的文件进行括号配对检查
    ifstream ifstr(fname, ios::in|ios::nocreate);
    //用文件输入流对象ifstr打开以fname所指字符串为文件名的文件
    //C++的系统头文件fstream.h中定义有文件输入流类ifstream
    if(!ifstr) {
        cerr<<"File"<<"\""<<fname<<"\""<< "not found!"<<endl;
        exit(1);
    }
    Stack a;                          //定义一个顺序栈
    InitStack(a);                     //栈a被初始化
    char ch;
    while(ifstr>>ch)                  //顺序从文件中得到一个字符到ch变量中
    {
        if(ch==39) {                  //单引号内的字符不参与配对比较
            while(ifstr>>ch)
                if(ch==39) break;     //39为单引号的ASCII值
            if(!ifstr) return 0;      //读到文件结束返回0
