因为每个指针类型的大小等于一个整型 (int) 的大小（即 4 个字节），所以 LNode 类型的大小等于元素类型的大小 sizeof(ElemType)加上 4 个字节。若 ElemType 表示 int，则 LNode 类型的大小为 8 个字节，也就是说，每个 LNode 类型的结点（对象）占用 8 个字节的存储空间。

程序 2-2 是使用 LNode 类型的一个实例。从键盘上输入的三个数值依次为 5、10 和 8，则该程序的运行结果也是 5、10 和 8。

//程序 2-2.cpp
#include<iostream.h>
typedef int ElemType; //规定元素类型为整型
struct LNode {
    ElemType data;
    LNode* next;
}; //定义单链表结点

void main()
{
    LNode x,y,z; //定义 LNode 类型的三个结点 x, y 和 z
    LNode* p=&x; //定义 LNode 类型的指针变量 p 并初始指向 x 结点
    cin>>x.data>>y.data>>z.data; //给 x, y, z 的数值域输入数据
    x.next=&y; y.next=&z; z.next=NULL; //把 x, y, z 链接为单链表
    while(p!=NULL) { //从表头开始输出每个结点的值（即数据域的值）
        cout<<p->data<<" "; //输出指针 p 所指向的结点的值
        p=p->next; //使 p 指向链表中的下一个结点
    }
    cout<<endl;
}

程序 2-3 同上面程序 2-2 具有相同的功能，都是建立一个具有三个结点的单链表，然后再依次输出单链表中每个结点的值。但在程序 2-2 中，单链表中的每个结点为静态结点，即由静态分配所产生的结点，而在程序 2-3 中，单链表中的每个结点为动态结点，即由动态分配所产生的结点。

//程序 2-3.cpp
#include<iostream.h>
typedef int ElemType; //规定元素类型为整型
struct LNode {
    ElemType data;
    LNode* next;
}; //定义单链表结点类型

void main()
{
    LNode *p,*q,*p1;
    p1=new LNode; //动态产生结点并将其地址赋给 p 和 p1 指针
    for(int i=0; i<3; i++) {
        q=new LNode; //q 指向一个新的动态结点
