3. 把邻接表表示的图用顶点集和边集的形式输出的算法

void PrintAdjJoin(adjlist GL, int n, int k1, int k2)
//输出用邻接表表示一个图的顶点集和边集
{
    int i,j;
    edgenode*p;
    cout<<"V={";
    for(i=0; i<n-1; i++) cout<<i<<',';
    cout<<n-1<<'}'<<endl;
    cout<<"E={";
    for(i=0; i<n; i++) {
        if(k2==0) {
            p=GL[i];
            while(p) {
                j=p->adjvex;
                if(k1==0) {
                    //对无向无权图的处理情况
                    if(i<j) cout<<'('<<i<<','<<j<<')'<<',';
                }
                //使用条件 i<j，是为了避免输出重复边
            }
            else
                //对有向无权图的处理
                cout<<'<'<<i<<','<<j<<'>'<<',';
            p=p->next;
        }
        else {
            //对有权图的处理情况
            p=GL[i];
            while(p) {
                j=p->adjvex;
                if(k1==0) { if(i<j)
                    //对无向有权图的处理
                    cout<<'('<<i<<','<<j<<')'<<p->weight<<',';
                }
                else
                    //对有向有权图的处理
                    cout<<'<'<<i<<','<<j<<'>'<<p->weight<<',';
                p=p->next;
            }
        }
    }
    cout<<'}'<<endl;
    //注意：边集的最后一条边的后面多出一个逗号
}

在图的邻接表中查找一个顶点的边（出边）或邻接点（出边邻接点），只要首先从表头向量中取出对应的表头指针，然后从表头指针出发进行查找即可。由于每个顶点单链表的平均长度为$e/n$（对于有向图）或$2e/n$（对于无向图），所以此查找运算的时间复杂度为$O(e/n)$。但从有向图的邻接表中查找一个顶点的入边或入边邻接点，那就不方便了，它需要扫描所有顶点邻接表中的边结点，因此其时间复杂度为$O(n+e)$。对于那些需要经常查找
