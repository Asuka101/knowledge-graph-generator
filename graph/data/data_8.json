{
  "entities": [
    {
      "type": "数据结构",
      "ID": "08DS001",
      "name": "生成树",
      "attributes": {
        "难度": "中等",
        "内容": "连通图G的子图，包含其全部n个顶点和n-1条边，构成一个既连通又无回路的树结构。用于以最少边数连通图中所有顶点。",
        "存储开销": "取决于图的表示方式及树的存储方式",
        "核心特性": "连通性, 无回路, 包含所有顶点"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS002",
      "name": "深度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过深度优先搜索（DFS）遍历连通图得到的生成树。",
        "存储开销": "取决于图的表示方式及树的存储方式",
        "核心特性": "连通性, 无回路, DFS生成"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS003",
      "name": "广度优先生成树",
      "attributes": {
        "难度": "中等",
        "内容": "通过广度优先搜索（BFS）遍历连通图得到的生成树。",
        "存储开销": "取决于图的表示方式及树的存储方式",
        "核心特性": "连通性, 无回路, BFS生成"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS004",
      "name": "连通网",
      "attributes": {
        "难度": "中等",
        "内容": "指无向的、连通的、带权图。边上的权通常为正实数，代表成本、距离等。",
        "存储开销": "取决于图的表示方式（邻接矩阵O(n^2)，邻接表O(n+e)）",
        "核心特性": "无向, 连通, 带权"
      }
    },
    {
      "type": "概念",
      "ID": "08CON001",
      "name": "树权",
      "attributes": {
        "难度": "入门",
        "内容": "生成树中所有边上权值的总和。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS005",
      "name": "最小生成树",
      "attributes": {
        "难度": "中等",
        "内容": "在连通网中，所有生成树里树权最小的那棵生成树。用于解决以最低总成本连通所有节点的问题。",
        "存储开销": "取决于图的表示方式及树的存储方式",
        "核心特性": "连通性, 无回路, 权值最小"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG001",
      "name": "Prim算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解最小生成树的贪心算法。从任意顶点开始，逐步将权值最小的、连接已选顶点集与未选顶点集的边及其对应顶点加入树中，直至包含所有顶点。",
        "时间复杂度": "O(n^2) (使用邻接矩阵或简单查找)",
        "空间复杂度": "O(n) (辅助数组) 或 O(1) (根据文本比较)",
        "设计思想": "贪心",
        "适用场景": "求解连通网的最小生成树，尤其适用于稠密图。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG002",
      "name": "Kruskal算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解最小生成树的贪心算法。将所有边按权值升序排序，依次选择权值最小且加入后不形成回路的边，直至选够n-1条边。",
        "时间复杂度": "O(E log E) (主要瓶颈在排序) 或 O(n^2) (根据文本比较)",
        "空间复杂度": "O(n^2) (使用文中的特定判断回路方法) 或 O(E+n) (标准实现)",
        "设计思想": "贪心, 并查集（用于判断回路）",
        "适用场景": "求解连通网的最小生成树，尤其适用于稀疏图。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS006",
      "name": "边集数组",
      "attributes": {
        "难度": "入门",
        "内容": "一种存储图（特别是无向图或网）边信息的数组结构，每个元素通常包含边的两个端点（fromvex, endvex）和权值（weight）。",
        "存储开销": "O(e) (e为边数)",
        "核心特性": "直接存储边列表"
      }
    },
    {
      "type": "概念",
      "ID": "08CON002",
      "name": "最短路径",
      "attributes": {
        "难度": "入门",
        "内容": "图中从一个顶点到另一个顶点的所有路径中，长度（无权图指边数，带权图指路径上边权之和）最小的路径。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON003",
      "name": "带权路径长度",
      "attributes": {
        "难度": "入门",
        "内容": "带权图中，一条路径上所有边的权值之和。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON004",
      "name": "源点",
      "attributes": {
        "难度": "入门",
        "内容": "在路径问题或网络流问题中，路径或流的起始顶点。在AOE网中指工程的开始事件。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON005",
      "name": "终点",
      "attributes": {
        "难度": "入门",
        "内容": "在路径问题或网络流问题中，路径或流的终止顶点。在AOE网中指工程的结束事件（汇点）。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG003",
      "name": "Dijkstra算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解非负权图中单源最短路径问题的贪心算法。按路径长度递增的顺序，依次确定源点到各顶点的最短路径。",
        "时间复杂度": "O(n^2) (使用邻接矩阵或简单查找)",
        "空间复杂度": "O(n) (存储距离和路径信息)",
        "设计思想": "贪心, 广度优先思想",
        "适用场景": "求解非负权图的单源最短路径。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG004",
      "name": "Floyd算法",
      "attributes": {
        "难度": "中等",
        "内容": "求解带权图中所有顶点对之间最短路径的动态规划算法。通过考虑允许经过的中间顶点逐步优化路径长度。可以处理负权边（但不能处理负权回路）。",
        "时间复杂度": "O(n^3)",
        "空间复杂度": "O(n^2) (存储距离矩阵)",
        "设计思想": "动态规划",
        "适用场景": "求解所有顶点对之间的最短路径，稠密图，允许负权边（无负权回路）。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS007",
      "name": "邻接矩阵",
      "attributes": {
        "难度": "入门",
        "内容": "使用二维数组表示图中顶点间邻接关系的存储结构。adjMatrix[i][j]存储顶点i到顶点j的边的信息（如权值或1/0表示是否存在）。",
        "存储开销": "O(n^2)",
        "核心特性": "判断边存在性/获取权值 O(1), 适合稠密图"
      }
    },
    {
      "type": "概念",
      "ID": "08CON006",
      "name": "活动",
      "attributes": {
        "难度": "入门",
        "内容": "在项目管理（AOV/AOE网）中表示一项具体的任务或子工程。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS008",
      "name": "顶点活动网 (AOV网)",
      "attributes": {
        "难度": "中等",
        "内容": "一种有向无环图（DAG），其中顶点表示活动，有向边<Vi, Vj>表示活动Vi必须在活动Vj之前完成（Vi是Vj的前驱活动）。",
        "存储开销": "取决于图的表示方式（邻接表/矩阵）",
        "核心特性": "有向无环, 顶点表示活动, 边表示先后关系"
      }
    },
    {
      "type": "概念",
      "ID": "08CON007",
      "name": "前驱活动",
      "attributes": {
        "难度": "入门",
        "内容": "在AOV网中，必须在某个活动开始之前完成的活动。对应图中入边起点的活动。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON008",
      "name": "后续活动",
      "attributes": {
        "难度": "入门",
        "内容": "在AOV网中，某个活动完成后才能开始的活动。对应图中出边终点的活动。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON009",
      "name": "拓扑序列",
      "attributes": {
        "难度": "入门",
        "内容": "AOV网中所有活动的一种线性排序，使得对于任何活动，其所有前驱活动都排在该活动之前。若图有环则不存在拓扑序列。通常不唯一。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG005",
      "name": "拓扑排序",
      "attributes": {
        "难度": "中等",
        "内容": "在AOV网（或任何有向无环图）中构造拓扑序列的过程。常用方法是重复选择并移除入度为0的顶点，将其加入序列，并更新其邻接点的入度。",
        "时间复杂度": "O(n+e) (使用邻接表)",
        "空间复杂度": "O(n) (存储入度及辅助队列/栈)",
        "设计思想": "基于入度的图遍历, Kahn算法",
        "适用场景": "确定依赖任务的执行顺序，检测有向图中的环。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON010",
      "name": "入度",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，指向某个顶点的边的数量。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON011",
      "name": "出度",
      "attributes": {
        "难度": "入门",
        "内容": "在有向图中，从某个顶点出发的边的数量。"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS009",
      "name": "邻接表",
      "attributes": {
        "难度": "入门",
        "内容": "一种存储图的链式结构。包含一个顶点数组（或向量），每个顶点关联一个链表，存储从该顶点出发的边的信息（邻接点、权值等）。",
        "存储开销": "O(n+e)",
        "核心特性": "节省空间（稀疏图）, 方便遍历顶点的邻接点"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS010",
      "name": "链栈",
      "attributes": {
        "难度": "入门",
        "内容": "使用链式存储结构实现的栈。文中特指利用数组下标模拟链表指针实现的静态链栈，用于存储拓扑排序过程中入度为0的顶点。",
        "存储开销": "O(n) (存储栈内元素，最多n个)",
        "核心特性": "后进先出 (LIFO)"
      }
    },
    {
      "type": "数据结构",
      "ID": "08DS011",
      "name": "边活动网 (AOE网)",
      "attributes": {
        "难度": "中等",
        "内容": "一种带权有向无环图，其中边表示活动及其持续时间（权值），顶点表示事件（活动的开始或结束）。用于项目管理和关键路径分析。",
        "存储开销": "取决于图的表示方式（邻接表/矩阵）",
        "核心特性": "有向无环, 带权, 边表示活动, 顶点表示事件"
      }
    },
    {
      "type": "概念",
      "ID": "08CON012",
      "name": "事件",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，表示某些活动完成、另一些活动开始的瞬间状态，是活动的转接点，用顶点表示。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON013",
      "name": "活动持续时间",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，完成一项活动所必需的时间，通常作为边的权值。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON014",
      "name": "事件最早发生时间 (ve)",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，一个事件可能发生的最早时刻。等于从源点到该事件顶点的所有路径中，最长路径的长度。ve[0]=0。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON015",
      "name": "活动最早开始时间 (e)",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，一项活动能够开始的最早时刻。等于其起点事件的最早发生时间 (ve)。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON016",
      "name": "事件最迟发生时间 (vl)",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，为保证整个工程按预定工期（通常是汇点的最早完成时间）完成，一个事件必须发生的最晚时刻。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON017",
      "name": "活动最迟开始时间 (l)",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，一项活动必须开始的最晚时刻，等于其终点事件的最迟发生时间 (vl) 减去该活动的持续时间。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON018",
      "name": "关键活动",
      "attributes": {
        "难度": "入门",
        "内容": "在AOE网中，最早开始时间 (e) 等于最迟开始时间 (l) 的活动，即没有任何时间余量的活动。这些活动的延迟会直接导致整个工程的延期。"
      }
    },
    {
      "type": "概念",
      "ID": "08CON019",
      "name": "关键路径",
      "attributes": {
        "难度": "中等",
        "内容": "在AOE网中，从源点到汇点的、完全由关键活动组成的路径。关键路径的长度决定了整个工程的最短完成时间。可能有多条关键路径。"
      }
    },
    {
      "type": "算法",
      "ID": "08ALG006",
      "name": "关键路径算法",
      "attributes": {
        "难度": "中等",
        "内容": "用于确定AOE网中关键活动的算法。步骤通常包括：计算所有事件的最早发生时间(ve)，计算所有事件的最迟发生时间(vl)，然后计算所有活动的最早(e)和最迟(l)开始时间，找出e[i]=l[i]的关键活动，从而确定关键路径。",
        "时间复杂度": "O(n+e)",
        "空间复杂度": "O(n) (存储ve, vl等)",
        "设计思想": "拓扑排序, 动态规划思想",
        "适用场景": "项目管理、工程调度，识别影响工期的瓶颈任务。"
      }
    }
  ],
  "relations": [
    {
      "type": "继承",
      "关系ID": "08REL001",
      "source": "08DS001",
      "target": "08DS002",
      "attributes": {
        "约束条件": "通过深度优先搜索生成"
      }
    },
    {
      "type": "继承",
      "关系ID": "08REL002",
      "source": "08DS001",
      "target": "08DS003",
      "attributes": {
        "约束条件": "通过广度优先搜索生成"
      }
    },
    {
      "type": "继承",
      "关系ID": "08REL003",
      "source": "08DS001",
      "target": "08DS005",
      "attributes": {
        "约束条件": "连通网中权值最小"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL004",
      "source": "08DS005",
      "target": "08CON001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL005",
      "source": "08ALG001",
      "target": "08DS004",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL006",
      "source": "08ALG002",
      "target": "08DS004",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL007",
      "source": "08ALG002",
      "target": "08DS006",
      "attributes": {
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL008",
      "source": "08ALG001",
      "target": "08DS007",
      "attributes": {
        "使用角色": "图表示 (示例)"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL009",
      "source": "08CON002",
      "target": "08CON003",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL010",
      "source": "08ALG003",
      "target": "08CON002",
      "attributes": {
        "依赖强度": "目标"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL011",
      "source": "08ALG003",
      "target": "08DS007",
      "attributes": {
        "使用角色": "图表示 (示例)"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL012",
      "source": "08ALG004",
      "target": "08CON002",
      "attributes": {
        "依赖强度": "目标"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL013",
      "source": "08ALG004",
      "target": "08DS007",
      "attributes": {
        "使用角色": "核心数据结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL014",
      "source": "08DS008",
      "target": "08CON006",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL015",
      "source": "08DS008",
      "target": "08CON007",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL016",
      "source": "08DS008",
      "target": "08CON008",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL017",
      "source": "08ALG005",
      "target": "08DS008",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL018",
      "source": "08ALG005",
      "target": "08CON009",
      "attributes": {
        "依赖强度": "目标"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL019",
      "source": "08ALG005",
      "target": "08CON010",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL020",
      "source": "08ALG005",
      "target": "08DS009",
      "attributes": {
        "使用角色": "图表示"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL021",
      "source": "08ALG005",
      "target": "08DS010",
      "attributes": {
        "使用角色": "辅助数据结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL022",
      "source": "08DS011",
      "target": "08CON006",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL023",
      "source": "08DS011",
      "target": "08CON012",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL024",
      "source": "08DS011",
      "target": "08CON013",
      "attributes": {
        "依赖强度": "核心"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL025",
      "source": "08ALG006",
      "target": "08DS011",
      "attributes": {
        "使用角色": "操作对象"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL026",
      "source": "08ALG006",
      "target": "08CON014",
      "attributes": {
        "依赖强度": "计算目标"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL027",
      "source": "08ALG006",
      "target": "08CON016",
      "attributes": {
        "依赖强度": "计算目标"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL028",
      "source": "08ALG006",
      "target": "08CON015",
      "attributes": {
        "依赖强度": "计算目标"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL029",
      "source": "08ALG006",
      "target": "08CON017",
      "attributes": {
        "依赖强度": "计算目标"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL030",
      "source": "08ALG006",
      "target": "08CON018",
      "attributes": {
        "依赖强度": "识别目标"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL031",
      "source": "08ALG006",
      "target": "08CON019",
      "attributes": {
        "依赖强度": "识别目标"
      }
    },
    {
      "type": "使用",
      "关系ID": "08REL032",
      "source": "08ALG006",
      "target": "08ALG005",
      "attributes": {
        "使用角色": "子过程"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL033",
      "source": "08CON019",
      "target": "08CON018",
      "attributes": {
        "依赖强度": "构成"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL034",
      "source": "08CON018",
      "target": "08CON015",
      "attributes": {
        "依赖强度": "定义"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL035",
      "source": "08CON018",
      "target": "08CON017",
      "attributes": {
        "依赖强度": "定义"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL036",
      "source": "08CON014",
      "target": "08CON013",
      "attributes": {
        "依赖强度": "计算"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL037",
      "source": "08CON016",
      "target": "08CON013",
      "attributes": {
        "依赖强度": "计算"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL038",
      "source": "08CON017",
      "target": "08CON016",
      "attributes": {
        "依赖强度": "计算"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL039",
      "source": "08CON017",
      "target": "08CON013",
      "attributes": {
        "依赖强度": "计算"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "08REL040",
      "source": "08CON015",
      "target": "08CON014",
      "attributes": {
        "依赖强度": "计算"
      }
    }
  ]
}