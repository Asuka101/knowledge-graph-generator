{
  "entities": [
    {
      "type": "数据结构",
      "ID": "02DS001",
      "name": "线性表",
      "attributes": {
        "难度": "入门",
        "内容": "具有相同属性数据元素的有限序列。序列中元素个数称为长度(n>=0)，n=0时为空表。元素按逻辑顺序排列，除首尾元素外，每个元素有唯一前驱和唯一后继。",
        "存储开销": "取决于具体实现(顺序或链式)",
        "核心特性": "线性有序, 有限性"
      }
    },
    {
      "type": "概念",
      "ID": "02CON001",
      "name": "表头元素",
      "attributes": {
        "难度": "入门",
        "内容": "线性表中第一个元素。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON002",
      "name": "表尾元素",
      "attributes": {
        "难度": "入门",
        "内容": "线性表中最后一个元素。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON003",
      "name": "前驱",
      "attributes": {
        "难度": "入门",
        "内容": "线性表中某个元素逻辑上的前一个元素。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON004",
      "name": "后继",
      "attributes": {
        "难度": "入门",
        "内容": "线性表中某个元素逻辑上的后一个元素。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON005",
      "name": "线性结构",
      "attributes": {
        "难度": "入门",
        "内容": "数据元素之间存在一对一的线性关系的数据结构。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON006",
      "name": "ElemType",
      "attributes": {
        "难度": "入门",
        "内容": "通用数据类型标识符，代表线性表中元素的数据类型。"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS002",
      "name": "有序表",
      "attributes": {
        "难度": "入门",
        "内容": "线性表中元素按某个关键字段的值升序或降序排列。",
        "存储开销": "同线性表",
        "核心特性": "值有序性"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS003",
      "name": "无序表",
      "attributes": {
        "难度": "入门",
        "内容": "线性表中不存在任何按值有序的字段，仅按位置有序。",
        "存储开销": "同线性表",
        "核心特性": "位置有序性"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG001",
      "name": "线性表初始化 (InitList)",
      "attributes": {
        "难度": "入门",
        "内容": "将线性表L初始化为空表。",
        "时间复杂度": "依赖具体实现 (通常 O(1))",
        "空间复杂度": "依赖具体实现",
        "设计思想": "ADT基本操作",
        "适用场景": "创建新的线性表实例时"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG002",
      "name": "线性表清空 (ClearList)",
      "attributes": {
        "难度": "入门",
        "内容": "清除线性表L中所有元素，使其变为空表。",
        "时间复杂度": "依赖具体实现 (顺序 O(1), 链式 O(n))",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "需要重用线性表结构但丢弃内容时"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG003",
      "name": "求线性表长度 (LengthList)",
      "attributes": {
        "难度": "入门",
        "内容": "返回线性表L的当前长度（元素个数）。",
        "时间复杂度": "依赖具体实现 (顺序 O(1), 链式 O(n) 或 O(1) 如果维护长度)",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "获取线性表大小时"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG004",
      "name": "线性表判空 (EmptyList)",
      "attributes": {
        "难度": "入门",
        "内容": "判断线性表L是否为空表。",
        "时间复杂度": "依赖具体实现 (通常 O(1))",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "执行操作前检查线性表状态"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG005",
      "name": "线性表获取元素 (GetList)",
      "attributes": {
        "难度": "入门",
        "内容": "返回线性表L中第pos个位置的元素值。",
        "时间复杂度": "依赖具体实现 (顺序 O(1), 链式 O(n))",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "访问特定位置元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG006",
      "name": "线性表遍历 (TraverseList)",
      "attributes": {
        "难度": "入门",
        "内容": "按逻辑顺序访问线性表L中的每一个元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "处理线性表中所有元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG007",
      "name": "线性表查找 (FindList)",
      "attributes": {
        "难度": "入门",
        "内容": "在线性表L中查找是否存在与给定值item相等的元素。",
        "时间复杂度": "依赖具体实现 (无序 O(n), 有序 O(logn)或O(n))",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "定位线性表中特定值的元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG008",
      "name": "线性表更新 (UpdateList)",
      "attributes": {
        "难度": "入门",
        "内容": "修改线性表L中满足特定条件的元素值。",
        "时间复杂度": "依赖查找效率 (通常 O(n))",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "修改线性表中已有元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG009",
      "name": "线性表插入 (InsertList)",
      "attributes": {
        "难度": "入门",
        "内容": "在线性表L的指定位置pos插入新元素item。",
        "时间复杂度": "依赖具体实现 (顺序 O(n), 链式 O(n)查找+O(1)插入)",
        "空间复杂度": "O(1) (均摊)",
        "设计思想": "ADT基本操作",
        "适用场景": "向线性表添加新元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG010",
      "name": "线性表删除 (DeleteList)",
      "attributes": {
        "难度": "入门",
        "内容": "删除线性表L中指定位置pos的元素或满足特定条件的元素。",
        "时间复杂度": "依赖具体实现 (顺序 O(n), 链式 O(n)查找+O(1)删除)",
        "空间复杂度": "O(1)",
        "设计思想": "ADT基本操作",
        "适用场景": "从线性表移除元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG011",
      "name": "线性表排序 (SortList)",
      "attributes": {
        "难度": "入门",
        "内容": "对线性表L中的所有元素按照给定条件重新排序。",
        "时间复杂度": "依赖具体排序算法 (如插入排序 O(n^2))",
        "空间复杂度": "依赖具体排序算法 (如插入排序 O(1))",
        "设计思想": "ADT基本操作",
        "适用场景": "使线性表元素按值有序"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS004",
      "name": "顺序表",
      "attributes": {
        "难度": "入门",
        "内容": "线性表的顺序存储实现。将元素存储在一块地址连续的存储空间里，逻辑顺序与物理顺序一致。",
        "存储开销": "n * sizeof(ElemType) + 管理开销(size, MaxSize)，可能预分配较多空间",
        "核心特性": "连续存储, 随机访问(O(1))"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS005",
      "name": "数组",
      "attributes": {
        "难度": "入门",
        "内容": "一种基本数据结构，用于存储固定大小的相同类型元素的集合，可通过索引访问。",
        "存储开销": "固定大小 * sizeof(ElemType)",
        "核心特性": "连续存储, 索引访问(O(1))"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG012",
      "name": "顺序表初始化",
      "attributes": {
        "难度": "入门",
        "内容": "为顺序表分配(通常是动态)存储空间，并将长度(size)置为0。",
        "时间复杂度": "O(1) 或 O(MaxSize) (若需初始化空间)",
        "空间复杂度": "O(MaxSize)",
        "设计思想": "顺序表实现",
        "适用场景": "创建顺序表实例"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG013",
      "name": "顺序表清空",
      "attributes": {
        "难度": "入门",
        "内容": "释放顺序表占用的(动态)存储空间，并将长度(size)和容量(MaxSize)置为0。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序表实现",
        "适用场景": "销毁顺序表"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG014",
      "name": "顺序表求长度",
      "attributes": {
        "难度": "入门",
        "内容": "返回顺序表中存储的当前元素个数(size)。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序表实现",
        "适用场景": "获取顺序表大小"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG015",
      "name": "顺序表判空",
      "attributes": {
        "难度": "入门",
        "内容": "检查顺序表的当前长度(size)是否为0。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序表实现",
        "适用场景": "检查顺序表是否为空"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG016",
      "name": "顺序表获取元素",
      "attributes": {
        "难度": "入门",
        "内容": "通过下标(pos-1)直接访问并返回数组中对应位置的元素。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序表实现, 利用数组随机访问特性",
        "适用场景": "访问顺序表中特定位置元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG017",
      "name": "顺序表遍历",
      "attributes": {
        "难度": "入门",
        "内容": "通过循环从数组下标0依次访问到size-1的每个元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序表实现",
        "适用场景": "处理顺序表中所有元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG018",
      "name": "顺序表查找",
      "attributes": {
        "难度": "入门",
        "内容": "从数组头开始逐个比较，查找第一个值等于给定值的元素。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "在无序顺序表中查找元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG019",
      "name": "顺序表更新",
      "attributes": {
        "难度": "入门",
        "内容": "先使用顺序查找定位元素，然后用新值覆盖旧值。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找与赋值",
        "适用场景": "修改顺序表中特定值的元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG020",
      "name": "顺序表插入",
      "attributes": {
        "难度": "入门",
        "内容": "在指定位置pos插入元素。需将pos及之后所有元素后移一位。可能需要检查空间并扩容(realloc)。",
        "时间复杂度": "O(n) (平均/最坏，因元素移动), O(1) (表尾插入且空间足够)",
        "空间复杂度": "O(1) (均摊，若考虑扩容)",
        "设计思想": "元素移动, 动态扩容",
        "适用场景": "向顺序表添加元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG021",
      "name": "顺序表删除",
      "attributes": {
        "难度": "入门",
        "内容": "删除指定位置pos的元素。需将pos之后所有元素前移一位。可能检查空间利用率并缩容。",
        "时间复杂度": "O(n) (平均/最坏，因元素移动), O(1) (表尾删除)",
        "空间复杂度": "O(1)",
        "设计思想": "元素移动, 动态缩容",
        "适用场景": "从顺序表移除元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG022",
      "name": "插入排序",
      "attributes": {
        "难度": "入门",
        "内容": "一种简单的排序算法。将待排序序列分为已排序和未排序两部分，每次从未排序部分取出一个元素，插入到已排序部分的合适位置。",
        "时间复杂度": "O(n^2) (平均/最坏), O(n) (最好)",
        "空间复杂度": "O(1)",
        "设计思想": "比较与插入",
        "适用场景": "小规模数据排序，基本有序数据排序"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG023",
      "name": "顺序表排序",
      "attributes": {
        "难度": "入门",
        "内容": "对顺序表（数组）进行排序的具体实现。文本中示例使用了插入排序。",
        "时间复杂度": "O(n^2) (使用插入排序时)",
        "空间复杂度": "O(1) (使用插入排序时)",
        "设计思想": "调用具体排序算法（如插入排序）",
        "适用场景": "使顺序表元素有序"
      }
    },
    {
      "type": "概念",
      "ID": "02CON007",
      "name": "链接存储",
      "attributes": {
        "难度": "入门",
        "内容": "一种存储结构，每个存储结点除了包含数据元素信息外，还包含指向其他结点（如前驱或后继）的指针。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON008",
      "name": "结点",
      "attributes": {
        "难度": "入门",
        "内容": "链接存储的基本单元，通常包含数据域和（一个或多个）指针域。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON009",
      "name": "值域",
      "attributes": {
        "难度": "入门",
        "内容": "结点中用于存储数据元素本身信息的部分。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON010",
      "name": "指针域",
      "attributes": {
        "难度": "入门",
        "内容": "结点中用于存储其他结点（如前驱或后继）地址（指针）的部分。"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS006",
      "name": "链表",
      "attributes": {
        "难度": "入门",
        "内容": "线性表的链式存储实现。由一系列结点组成，结点间通过指针链接。",
        "存储开销": "n * (sizeof(ElemType) + sizeof(pointer(s)))",
        "核心特性": "非连续存储, 动态大小, 插入删除高效(O(1)若知位置)"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS007",
      "name": "单链表",
      "attributes": {
        "难度": "入门",
        "内容": "链表的一种形式，每个结点只有一个指针域，指向其直接后继结点。",
        "存储开销": "n * (sizeof(ElemType) + sizeof(pointer))",
        "核心特性": "单向遍历"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS008",
      "name": "双向链表",
      "attributes": {
        "难度": "入门",
        "内容": "链表的一种形式，每个结点有两个指针域，分别指向其直接前驱和直接后继结点。",
        "存储开销": "n * (sizeof(ElemType) + 2 * sizeof(pointer))",
        "核心特性": "双向遍历"
      }
    },
    {
      "type": "概念",
      "ID": "02CON011",
      "name": "表头结点",
      "attributes": {
        "难度": "入门",
        "内容": "链表中存储第一个数据元素的结点。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON012",
      "name": "表尾结点",
      "attributes": {
        "难度": "入门",
        "内容": "链表中存储最后一个数据元素的结点。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON013",
      "name": "表头指针",
      "attributes": {
        "难度": "入门",
        "内容": "指向链表中第一个结点（对于带头结点的链表，则指向头结点）的指针变量。"
      }
    },
    {
      "type": "概念",
      "ID": "02CON014",
      "name": "表头附加结点",
      "attributes": {
        "难度": "入门",
        "内容": "在链表的第一个元素结点之前附加的一个结点（通常不存储数据），用于简化链表操作（尤其是头部的插入和删除）。也称哑结点(Dummy Node)或头结点。"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS009",
      "name": "循环链表",
      "attributes": {
        "难度": "入门",
        "内容": "链表的一种变体，表尾结点的指针域不再为空，而是指向表头结点（或头结点），形成一个环。",
        "存储开销": "同对应非循环链表",
        "核心特性": "环状结构, 可从任一结点遍历整个链表"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS010",
      "name": "静态链表",
      "attributes": {
        "难度": "中等",
        "内容": "使用数组来模拟链式存储结构。数组的每个元素（结点）包含数据域和指针域（存储下一个元素在数组中的下标）。需要管理一个备用链表（空闲链表）。",
        "存储开销": "固定大小 (MaxSize * sizeof(ALNode))",
        "核心特性": "数组实现链表逻辑, 无需动态内存管理"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS011",
      "name": "ALNode",
      "attributes": {
        "难度": "入门",
        "内容": "静态链表中数组元素的结构类型，通常包含数据域(data)和整型游标(next)。",
        "存储开销": "sizeof(ElemType) + sizeof(int)",
        "核心特性": "静态链表结点"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS012",
      "name": "LNode",
      "attributes": {
        "难度": "入门",
        "内容": "动态单链表的结点结构类型，通常包含数据域(data)和指向下一个LNode的指针域(next)。",
        "存储开销": "sizeof(ElemType) + sizeof(pointer)",
        "核心特性": "动态单链表结点"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS013",
      "name": "DNode",
      "attributes": {
        "难度": "入门",
        "内容": "动态双向链表的结点结构类型，通常包含数据域(data)和两个指针域(left/prev, right/next)。",
        "存储开销": "sizeof(ElemType) + 2 * sizeof(pointer)",
        "核心特性": "动态双向链表结点"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG024",
      "name": "单链表初始化",
      "attributes": {
        "难度": "入门",
        "内容": "将单链表的头指针置为NULL（对于不带头结点的链表）。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "单链表实现",
        "适用场景": "创建空单链表"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG025",
      "name": "单链表清空",
      "attributes": {
        "难度": "入门",
        "内容": "遍历单链表，逐个释放所有结点所占用的内存空间，最后将头指针置为NULL。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历与释放",
        "适用场景": "销毁单链表"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG026",
      "name": "单链表求长度",
      "attributes": {
        "难度": "入门",
        "内容": "从头指针开始遍历整个单链表，统计结点数量。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "遍历计数",
        "适用场景": "获取单链表大小"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG027",
      "name": "单链表判空",
      "attributes": {
        "难度": "入门",
        "内容": "检查单链表的头指针是否为NULL。",
        "时间复杂度": "O(1)",
        "空间复杂度": "O(1)",
        "设计思想": "单链表实现",
        "适用场景": "检查单链表是否为空"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG028",
      "name": "单链表获取元素",
      "attributes": {
        "难度": "入门",
        "内容": "从头指针开始，沿next指针移动pos-1次，到达第pos个结点并返回其数据域。",
        "时间复杂度": "O(n) (最坏情况需遍历到表尾)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序存取",
        "适用场景": "访问单链表中特定位置元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG029",
      "name": "单链表遍历",
      "attributes": {
        "难度": "入门",
        "内容": "从头指针开始，沿着next指针依次访问每个结点的数据域，直到链表末尾。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "单链表实现",
        "适用场景": "处理单链表中所有元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG030",
      "name": "单链表查找",
      "attributes": {
        "难度": "入门",
        "内容": "从头指针开始遍历，比较每个结点的数据域是否与给定值item相等，找到第一个相等的结点。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "顺序查找",
        "适用场景": "在单链表中查找特定值的元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG031",
      "name": "单链表更新",
      "attributes": {
        "难度": "入门",
        "内容": "先使用单链表查找定位到第一个值等于给定值的结点，然后修改其数据域。",
        "时间复杂度": "O(n)",
        "空间复杂度": "O(1)",
        "设计思想": "查找与修改",
        "适用场景": "修改单链表中特定值的元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG032",
      "name": "单链表插入",
      "attributes": {
        "难度": "入门",
        "内容": "根据pos条件找到插入位置的前驱结点ap和当前结点cp，创建新结点newptr，修改指针使 `ap->next = newptr; newptr->next = cp;` (需处理头插特殊情况或使用头结点)。",
        "时间复杂度": "O(n) (查找位置), O(1) (已知前驱/头插)",
        "空间复杂度": "O(1)",
        "设计思想": "查找位置, 指针修改",
        "适用场景": "向单链表添加元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG033",
      "name": "单链表删除",
      "attributes": {
        "难度": "入门",
        "内容": "根据pos条件找到待删除结点cp及其前驱结点ap，修改指针使 `ap->next = cp->next;`，然后释放cp结点空间 (需处理头删特殊情况或使用头结点)。",
        "时间复杂度": "O(n) (查找位置), O(1) (已知前驱/头删)",
        "空间复杂度": "O(1)",
        "设计思想": "查找位置, 指针修改, 内存释放",
        "适用场景": "从单链表移除元素"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG034",
      "name": "单链表排序",
      "attributes": {
        "难度": "中等",
        "内容": "对单链表元素进行排序。文本示例采用插入排序思想：创建一个新的空有序链表，将原链表结点逐个按值插入到新链表中。",
        "时间复杂度": "O(n^2) (使用插入排序时)",
        "空间复杂度": "O(1) (如果原地修改指针，如文本中实现), O(n) (如果创建全新链表存储)",
        "设计思想": "插入排序",
        "适用场景": "使单链表元素有序"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS014",
      "name": "多项式",
      "attributes": {
        "难度": "入门",
        "内容": "数学中的多项式表达式 P(x) = a0 + a1*x + a2*x^2 + ... + an*x^n。可用线性表表示，常见方式有：(1) 系数数组/链表 (含0系数) (2) 非零项链表/数组。",
        "存储开销": "依赖表示法和实现",
        "核心特性": "系数与指数"
      }
    },
    {
      "type": "数据结构",
      "ID": "02DS015",
      "name": "Term",
      "attributes": {
        "难度": "入门",
        "内容": "用于表示多项式非零项的结构体，包含系数(coef)和指数(exp)两个域。",
        "存储开销": "sizeof(double) + sizeof(int)",
        "核心特性": "表示多项式项"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG035",
      "name": "多项式求值 (系数表示)",
      "attributes": {
        "难度": "入门",
        "内容": "计算以系数数组或链表表示的多项式 P(x) 在给定点 x 的值。遍历系数，累加 a_i * x^i。",
        "时间复杂度": "O(n) (n为最高次幂+1)",
        "空间复杂度": "O(1)",
        "设计思想": "直接按定义计算",
        "适用场景": "稠密多项式求值"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG036",
      "name": "多项式求值 (非零项表示)",
      "attributes": {
        "难度": "入门",
        "内容": "计算以非零项链表或数组表示的多项式 P(x) 在给定点 x 的值。遍历所有非零项，累加 coef * pow(x, exp)。",
        "时间复杂度": "O(m) (m为非零项数，假设pow为O(1))",
        "空间复杂度": "O(1)",
        "设计思想": "遍历非零项计算",
        "适用场景": "稀疏多项式求值"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG037",
      "name": "多项式加法 (链表+InsertList)",
      "attributes": {
        "难度": "中等",
        "内容": "将两个按指数升序排列的多项式链表 P1 和 P2 相加生成 P3。遍历P1和P2，比较当前项指数：小的项直接插入P3，指数相同的项系数相加后（若非零）插入P3。此版本使用通用的 InsertList 操作（可能效率较低）。",
        "时间复杂度": "O((m+n)^2) (m, n为项数，因InsertList可能需遍历)",
        "空间复杂度": "O(m+n)",
        "设计思想": "归并思想, 调用插入",
        "适用场景": "多项式相加（基础实现）"
      }
    },
    {
      "type": "算法",
      "ID": "02ALG038",
      "name": "多项式加法 (链表优化)",
      "attributes": {
        "难度": "中等",
        "内容": "优化的多项式加法。同样使用归并思想，但不调用InsertList，而是维护结果链表P3的尾指针，直接在尾部添加新结点，效率更高。通常使用带头结点的链表简化操作。",
        "时间复杂度": "O(m+n)",
        "空间复杂度": "O(m+n)",
        "设计思想": "归并思想, 尾插法, 附加头结点",
        "适用场景": "高效的多项式相加"
      }
    }
  ],
  "relations": [
    {
      "type": "理论依赖",
      "关系ID": "02REL001",
      "source": "02DS001",
      "target": "02CON001",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL002",
      "source": "02DS001",
      "target": "02CON002",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL003",
      "source": "02DS001",
      "target": "02CON003",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL004",
      "source": "02DS001",
      "target": "02CON004",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL005",
      "source": "02DS001",
      "target": "02CON005",
      "attributes": {
        "父类 ID": "02CON005",
        "子类 ID": "02DS001",
        "约束条件": "线性表是一种线性结构"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL006",
      "source": "02DS001",
      "target": "02CON006",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL007",
      "source": "02DS001",
      "target": "02DS002",
      "attributes": {
        "父类 ID": "02DS001",
        "子类 ID": "02DS002",
        "约束条件": "元素按值有序"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL008",
      "source": "02DS001",
      "target": "02DS003",
      "attributes": {
        "父类 ID": "02DS001",
        "子类 ID": "02DS003",
        "约束条件": "元素不按值有序（仅位置有序）"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL009",
      "source": "02ALG001",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG001",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL010",
      "source": "02ALG002",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG002",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL011",
      "source": "02ALG003",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG003",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL012",
      "source": "02ALG004",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG004",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL013",
      "source": "02ALG005",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG005",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL014",
      "source": "02ALG006",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG006",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL015",
      "source": "02ALG007",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG007",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL016",
      "source": "02ALG008",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG008",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL017",
      "source": "02ALG009",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG009",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL018",
      "source": "02ALG010",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG010",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL019",
      "source": "02ALG011",
      "target": "02DS001",
      "attributes": {
        "算法 ID": "02ALG011",
        "数据结构 ID": "02DS001",
        "必需性": "是"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL020",
      "source": "02DS001",
      "target": "02DS004",
      "attributes": {
        "父类 ID": "02DS001",
        "子类 ID": "02DS004",
        "约束条件": "使用顺序存储结构"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL021",
      "source": "02DS004",
      "target": "02DS005",
      "attributes": {
        "使用方ID": "02DS004",
        "被使用的数据结构 ID": "02DS005",
        "使用角色": "底层存储实现"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL022",
      "source": "02ALG012",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG012",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL023",
      "source": "02ALG013",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG013",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL024",
      "source": "02ALG014",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG014",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL025",
      "source": "02ALG015",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG015",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL026",
      "source": "02ALG016",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG016",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL027",
      "source": "02ALG017",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG017",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL028",
      "source": "02ALG018",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG018",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL029",
      "source": "02ALG019",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG019",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL030",
      "source": "02ALG020",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG020",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL031",
      "source": "02ALG021",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG021",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL032",
      "source": "02ALG011",
      "target": "02ALG022",
      "attributes": {
        "依赖强度": "中",
        "实体 ID": "02ALG011",
        "概念 ID": "02ALG022"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL033",
      "source": "02ALG023",
      "target": "02DS004",
      "attributes": {
        "算法 ID": "02ALG023",
        "数据结构 ID": "02DS004",
        "必需性": "是"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL034",
      "source": "02ALG023",
      "target": "02ALG022",
      "attributes": {
        "依赖强度": "强",
        "实体 ID": "02ALG023",
        "概念 ID": "02ALG022"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL035",
      "source": "02CON007",
      "target": "02CON008",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL036",
      "source": "02CON008",
      "target": "02CON009",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL037",
      "source": "02CON008",
      "target": "02CON010",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL038",
      "source": "02DS006",
      "target": "02CON007",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL039",
      "source": "02DS006",
      "target": "02CON008",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL040",
      "source": "02DS001",
      "target": "02DS006",
      "attributes": {
        "父类 ID": "02DS001",
        "子类 ID": "02DS006",
        "约束条件": "使用链式存储结构"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL041",
      "source": "02DS006",
      "target": "02DS007",
      "attributes": {
        "父类 ID": "02DS006",
        "子类 ID": "02DS007",
        "约束条件": "单指针域 (next)"
      }
    },
    {
      "type": "继承",
      "关系ID": "02REL042",
      "source": "02DS006",
      "target": "02DS008",
      "attributes": {
        "父类 ID": "02DS006",
        "子类 ID": "02DS008",
        "约束条件": "双指针域 (prev/left, next/right)"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL043",
      "source": "02DS006",
      "target": "02CON011",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL044",
      "source": "02DS006",
      "target": "02CON012",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL045",
      "source": "02DS006",
      "target": "02CON013",
      "attributes": {
        "依赖强度": "强"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL046",
      "source": "02DS006",
      "target": "02CON014",
      "attributes": {
        "依赖强度": "中"
      }
    },
    {
      "type": "变体",
      "关系ID": "02REL047",
      "source": "02DS007",
      "target": "02DS009",
      "attributes": {
        "基础 ID": "02DS007",
        "变体 ID": "02DS009",
        "变体类型": "尾结点指向头结点(或附加头结点)"
      }
    },
    {
      "type": "变体",
      "关系ID": "02REL048",
      "source": "02DS008",
      "target": "02DS009",
      "attributes": {
        "基础 ID": "02DS008",
        "变体 ID": "02DS009",
        "变体类型": "头尾结点指针相连"
      }
    },
    {
      "type": "变体",
      "关系ID": "02REL049",
      "source": "02DS007",
      "target": "02DS010",
      "attributes": {
        "基础 ID": "02DS007",
        "变体 ID": "02DS010",
        "变体类型": "数组模拟实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL050",
      "source": "02DS010",
      "target": "02DS005",
      "attributes": {
        "使用方ID": "02DS010",
        "被使用的数据结构 ID": "02DS005",
        "使用角色": "底层存储"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL051",
      "source": "02DS010",
      "target": "02DS011",
      "attributes": {
        "使用方ID": "02DS010",
        "被使用的数据结构 ID": "02DS011",
        "使用角色": "结点类型"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL052",
      "source": "02DS007",
      "target": "02DS012",
      "attributes": {
        "使用方ID": "02DS007",
        "被使用的数据结构 ID": "02DS012",
        "使用角色": "结点类型 (动态)"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL053",
      "source": "02DS008",
      "target": "02DS013",
      "attributes": {
        "使用方ID": "02DS008",
        "被使用的数据结构 ID": "02DS013",
        "使用角色": "结点类型 (动态)"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL054",
      "source": "02ALG024",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG024",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL055",
      "source": "02ALG025",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG025",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL056",
      "source": "02ALG026",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG026",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL057",
      "source": "02ALG027",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG027",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL058",
      "source": "02ALG028",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG028",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL059",
      "source": "02ALG029",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG029",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL060",
      "source": "02ALG030",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG030",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL061",
      "source": "02ALG031",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG031",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL062",
      "source": "02ALG032",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG032",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL063",
      "source": "02ALG033",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG033",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "操作绑定",
      "关系ID": "02REL064",
      "source": "02ALG034",
      "target": "02DS007",
      "attributes": {
        "算法 ID": "02ALG034",
        "数据结构 ID": "02DS007",
        "必需性": "是"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL065",
      "source": "02DS014",
      "target": "02DS001",
      "attributes": {
        "使用方ID": "02DS014",
        "被使用的数据结构 ID": "02DS001",
        "使用角色": "表示方法"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL066",
      "source": "02DS014",
      "target": "02DS015",
      "attributes": {
        "使用方ID": "02DS014",
        "被使用的数据结构 ID": "02DS015",
        "使用角色": "非零项表示"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL067",
      "source": "02ALG035",
      "target": "02DS014",
      "attributes": {
        "使用方ID": "02ALG035",
        "被使用的数据结构 ID": "02DS014",
        "使用角色": "操作对象 (系数表示)"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL068",
      "source": "02ALG036",
      "target": "02DS014",
      "attributes": {
        "使用方ID": "02ALG036",
        "被使用的数据结构 ID": "02DS014",
        "使用角色": "操作对象 (非零项表示)"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL069",
      "source": "02ALG036",
      "target": "02DS015",
      "attributes": {
        "使用方ID": "02ALG036",
        "被使用的数据结构 ID": "02DS015",
        "使用角色": "元素类型"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL070",
      "source": "02ALG037",
      "target": "02DS014",
      "attributes": {
        "使用方ID": "02ALG037",
        "被使用的数据结构 ID": "02DS014",
        "使用角色": "操作对象"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL071",
      "source": "02ALG037",
      "target": "02DS007",
      "attributes": {
        "使用方ID": "02ALG037",
        "被使用的数据结构 ID": "02DS007",
        "使用角色": "底层实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL072",
      "source": "02ALG037",
      "target": "02DS015",
      "attributes": {
        "使用方ID": "02ALG037",
        "被使用的数据结构 ID": "02DS015",
        "使用角色": "元素类型"
      }
    },
    {
      "type": "优化",
      "关系ID": "02REL073",
      "source": "02ALG037",
      "target": "02ALG038",
      "attributes": {
        "原始 ID": "02ALG037",
        "优化 ID": "02ALG038",
        "优化方向": "时间效率 (尾插法替代通用插入)"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL074",
      "source": "02ALG038",
      "target": "02DS014",
      "attributes": {
        "使用方ID": "02ALG038",
        "被使用的数据结构 ID": "02DS014",
        "使用角色": "操作对象"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL075",
      "source": "02ALG038",
      "target": "02DS007",
      "attributes": {
        "使用方ID": "02ALG038",
        "被使用的数据结构 ID": "02DS007",
        "使用角色": "底层实现"
      }
    },
    {
      "type": "使用",
      "关系ID": "02REL076",
      "source": "02ALG038",
      "target": "02DS015",
      "attributes": {
        "使用方ID": "02ALG038",
        "被使用的数据结构 ID": "02DS015",
        "使用角色": "元素类型"
      }
    },
    {
      "type": "理论依赖",
      "关系ID": "02REL077",
      "source": "02ALG038",
      "target": "02CON014",
      "attributes": {
        "依赖强度": "中",
        "实体 ID": "02ALG038",
        "概念 ID": "02CON014"
      }
    }
  ]
}