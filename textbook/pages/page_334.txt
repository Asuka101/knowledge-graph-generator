的第3个位置, 所以经过 3 次比较后查找成功。

分块查找的算法同上面已经给出的索引查找算法类似，其算法描述如下。

int Blocksch (mainlist A, indexlist B, int m, KeyType K)

//利用主表A和大小为m的索引表B分块查找关键字为K的记录

{
    int i,j;
    
    //在索引表中顺序查找关键字为K所对应的索引项
    for(i=0; i<m; i++)
        if(K<=B[i].index) break;
    //若i等于m,则表明查找失败,返回-1
    if(i==m) return -1;
    
    //在已经查找到的第i个子表中顺序查找关键字为K的记录
    j=B[i].start;
    while(j<B[i].start+B[i].length)
        if(K==A[j].key) break;
        else j++;
    
    //若查找成功则返回元素的下标位置,否则返回-1
    if(j<B[i].start+B[i].length) return j;
    else return -1;
}

若在索引表上不是顺序查找, 而是二分查找相应的索引项, 则需要把算法中的for循环语句更换为如下的程序段。

int low=0, high=m-1;
while(low<=high) {
    int mid=(low+high)/2;
    if(K==B[mid].index) {i=mid; break;}
    else if(K<B[mid].index) high=mid-1;
    else low=mid+1;
}
if(low>high) i=low;

其中当二分查找失败时, 应把low的值赋给i, 此时b[i].index是刚大于K的索引值。当然若low的值为m, 则表示真正的查找失败。

\section*{9.4 散列查找}

\subsection*{9.4.1 散列的概念}

散列(Hash)同顺序、链接和索引一样, 是存储集合或线性表的又一种方法。散列存储的基本思想是: 以集合或线性表中的每个元素的关键字$K$为自变量, 通过一种函数$h(K)$计算出函数值, 把这个值解释为一块连续存储空间(即数组空间)的单元地址(即下标), 将
