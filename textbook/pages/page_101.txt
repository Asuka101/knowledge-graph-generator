double PolySum1(List& P, double x)
{
    //用sum计算累加和，首先把常数项$a_0$的值赋给它作为其初值
    double sum=P.list[0];
    //用w计算$x$的次幂，初值为1
    double w=1;
    //累加计算多项式的值
    for(int i=1; i<P.size; i++) {
        w*=x;                          //计算出$x$的$i$次幂
        sum+=P.list[i]*w;              //把一个新项$a_i x^i$的值累加到sum中
    }
    //返回求出的多项式的值
    return sum;
}

若多项式线性表采用链接存储结构，则求值算法描述如下。

double PolySum1(LNode* P, double x)
{
    LNode *t=P;                        //用t指向多项式单链表的表头结点
    double sum=t->data;                //用sum计算累加和，初值为常数项$a_0$的值
    double w=1;                        //用w计算$x$的次幂，初值为1
    t=t->next;                         //t指向第二个结点，即值为$a_1$的结点
    while(t!=NULL) {
        w*=x;                          //使w累乘$x$sum+=t->data*w;                //把一个新项的值累加到sum中
        t=t->next;                     //使t指向下—个结点
    }
    return sum;                        //返回求出的多项式的值
}

假定一个多项式为$5+3x^2-6x^3+2x^5$，对应的线性表为$(5,0,3,-6,0,2)$，若采用链接存储，计算程序如下。

#include<iostream.h>
#include<stdlib.h>
typedef double ElemType;
struct LNode {
    ElemType data;                     //定义单链表结点类型
    LNode* next;
};

//单链表有关操作的函数定义

void main()
{
