在一个线索二叉树中，为了区别各个结点的左、右指针域所存放的是孩子指针，或是线索，必须在结点结构中增加两个线索标志域，一个是左线索标志域，用$ltag$表示，另一个是右线索标志域，用$rtag$表示。$ltag$和$rtag$只需取两种值，以区别其对应的指针域保存的是孩子指针，或是线索，取真时指向线索，取假时指向孩子。

增加线索标志域后的二叉树结点结构如下。

| Left | ltag | data | rtag | right |

该结点结构的类型定义为:

struct TTreeNode {
    ElemType data; // 值域
    bool ltag, rtag; // 线索标志域
    TTreeNode* left; // 左指针域
    TTreeNode* right; // 右指针域
};

如图 6-13 所示是图 6-12 的中序线索二叉树的链接存储结构。

![图 6-13 索引二叉树的链接存储结构]

对一棵结点类型为 TTreeNode 的二叉树进行线索化时，该二叉树的初始状态应为：每个结点的线索标志域均为假（0），若一个结点有左孩子或右孩子，则相应的指针域指向孩子，否则为空，以便在线索化的过程中加入线索。

对一棵二叉树进行某种遍历次序的线索化，显然就是对该二叉树进行这种遍历的过程，只不过在访问根结点时，不是简单地打印根结点的值，而是对指针域为空的结点加线索，具体做法如下。

(1) 若前驱结点不为空，或者说当前结点不是序列中的第 1 个结点，同时前驱结点的右线索标志域为真（表示此结点的右指针域为空）时，则将当前结点的指针赋给前驱结点的右指针域，即给前驱结点加右线索。

(2) 若当前结点的左指针域为空，则将左线索标志域置真，同时把前驱结点的指针赋给当前结点的左指针域，即给当前结点加左线索。

(3) 若当前结点的右指针域为空，则将右线索标志域置为真，以便当访问到下一个（即后继）结点时，给它加右线索。
