cout<<wk;

执行第1条语句时将把实际参数 cin 和 wk 引用（即按址）传送给被调用函数中的 istr 和 x 形参，使得 istr 和 x 分别被取代（或称易名）为 cin 和 wk，函数中对 istr 和 x 的操作实际上就是对 cin 和 wk 的操作。该函数返回 istr（即 cin），以便能够在同一条输入语句中连续使用 “>>” 操作符对多个对象进行输入。

注意：当在同一行上输入多个数据时，从键盘上输入的数据之间必须用空格相隔开。

执行第2条语句时将把实际参数 cout 和 wk 引用（即按址）传送给被调用函数中的 ostr 和 x 形参，使得 ostr 和 x 分别被取代为 cout 和 wk，函数中对 ostr 和 x 的操作实际上就是对 cout 和 wk 的操作。该函数返回 ostr（即 cout），以便能够在同一条输出语句中连续使用 “<<” 操作符对多个数据进行输出。

另外，在使用#include<iostream.h>语句之后的函数中，允许使用换行符常量 endl 和空指针常量 NULL，它们分别表示换行符 “\n” 和数值 0（即空指针值 “0”）。

2. #include<stdlib.h>

在 stdlib.h 头文件中含有 void exit(int)、int rand(void)、void srand(unsigned)等函数的原型。exit(int)函数的作用是结束程序的执行，一般用整数值 0 调用该函数表示正常结束，用整数值 1 调用该函数表示非正常结束。如利用 new 操作符没有分配到所需要的存储块时，应输出 “存储分配失败！” 错误信息并调用 exit(1)函数终止程序运行。rand()函数的作用是返回 0~32767 之间的一个随机整数。利用 rand() %n 可以产生 0~n-1 范围内的一个随机整数。srand(unsigned)函数的作用是初始化随机数发生器，当参数不同时，接着由 rand() 函数所产生的随机数序列也不同。若在 rand()函数前没有执行过 srand 函数，则产生的是参数值为 1 的随机数序列，即相当于调用了一次 srand(1)函数。下面是一个产生随机数的程序。

```cpp
//程序 1-3.cpp
#include<iostream.h>
#include<stdlib.h>
void main(void)
{
    int i;
    for(i=0;i<10;i++)
        cout<<(rand()%100)<" ";
    cout<<endl;
    srand(2);
    for(i=0;i<10;i++)
        cout<<(rand()%100)<" ";
    cout<<endl;
    srand(1);
    for(i=0;i<10;i++)
        cout<<(rand()%100)<" ";
}
```
