flag=0;
}
WriteGoodsFile("a:goods.dat",L2); //把线性表写回文件
}

同学们可以上机运行此程序并分析运行结果。

\section*{2.4 线性表的链接存储结构}

\section*{1. 链接存储的概念}

顺序存储和链接存储是数据的两种最基本的存储结构。在顺序存储中，每个存储结点只含有所存元素本身的信息，元素之间的逻辑关系是通过数组下标位置简单计算出来的。如在线性表的顺序存储中，若一个元素存储在对应数组中的下标位置为$i$，则它的前驱元素在对应数组中的下标位置为$i-1$，它的后继元素在对应数组中的下标位置为$i+1$。在链接存储中，每个存储结点不仅含有所存元素本身的信息，而且含有元素之间逻辑关系的信息，其存储结点（简称结点）的结构如图 2-4所示。

\begin{tabular}{|c|c|c|c|c|}
\hline data &$p_{1}$&$p_{2}$&$\cdots$&$p_{m}$\\
\hline
\end{tabular}\\\hline

图2-4 结点的结构

其中 data 表示值域，用来存储一个元素，$p_{1}, p_{2}, \cdots, p_{m}(m \geqslant 1)$均为指针域，每个指针域的值为其对应的后继元素或前驱元素所在结点（以后简称为后继结点或前驱结点）的存储位置。通过结点的指针域（又称为链域）可以访问到对应的后继结点或前驱结点，该后继结点或前驱结点称为指针域（链域）所指向（或链接）的结点。若一个结点中的某个指针域不需要指向任何结点，则令它的值为空，即数值 0，用常量 NULL 表示。

在数据的顺序存储中，由于每个元素的存储位置都可以通过简单计算得到，所以可以随机存取数据中的任一元素，对任一元素的存取时间都相同，这是一种随机存取机制；而在数据的链接存储中，由于每个元素的存储位置是保存在它的前驱结点或后继结点中的，所以只有当访问到其前驱结点或后继结点后才能够按指针访问到该结点，这是一种顺序存取机制。

数据的链接存储表示又称为链表。当链表中的每个结点只含有一个指针域时，则被称为单链表，否则被称为多链表。

\section*{2. 线性表的链接存储}

由于线性表中的每个元素至多只有一个前驱元素和一个后继元素，即数据元素之间是 1：1 的逻辑关系，所以当进行链接存储时，一种最简单也最常用的方法是：在每个结点中除包含有数值域外，只设置一个指针域，用以指向其后继结点，这样构成的链表被称为线性单向链接表，简称单向链表或单链表；另一种可以采用的方法是：在每个结点中除包
