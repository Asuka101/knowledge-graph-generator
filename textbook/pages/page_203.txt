$h-1\leqslant \operatorname{lb} n<h$即$\operatorname{lb} n<h\leqslant \operatorname{lb} n+1$因$h$只能取整数, 所以$h=\lfloor\operatorname{lb} n\rfloor+1$在一棵二叉树中, 若除最后一层外, 其余层都是满的, 而最后一层上的结点可以任意分布, 则称此树为理想平衡二叉树, 简称理想平衡树或理想二叉树。显然, 理想平衡树包含满二叉树和完全二叉树。完全二叉树中深度$h$和结点数$n$之间的关系, 在理想平衡树中同样成立, 因为性质 5 的证明结果实际上是根据理想平衡树的定义推导出来的。如图 5-8(a)所示是一棵理想平衡树, 但它不是完全二叉树; 如图 5-8(b)所示不是一棵理想平衡树, 因它的最后两层都未满。

![image](attachment://ideal_balanced_tree.png)

(a) 理想平衡树

![image](attachment://ordinary_binary_tree.png)

(b) 普通二叉树

图 5-8 理想平衡树和普通二叉树

\section*{5.2 .3 二叉树的抽象数据类型}

二叉树的抽象数据类型的的数据部分为一棵二叉树, 操作部分包括初始化二叉树、建立二叉树、遍历二叉树、查找二叉树、输出二叉树和清除二叉树等一些常用操作。下面给出二叉树的抽象数据类型的具体定义。

DATA BinaryTree is

Data:

采用任一种方式存储的二叉树, 假定其存储类型用 BTreeType 标识符表示,

该类型的一个对象 (即二叉树) 用 BT 标识符表示

Operations

void InitBTree(BTreeType& BT);

// 初始化二叉树, 即把它置为一棵空树

void CreateBTree(BTreeType& BT, char* a);

// 根据广义表表示的二叉树建立对应的存储结构

bool EmptyBTree(BTreeType& BT);

// 判断一棵二叉树是否为空, 若是则返回 true, 否则返回 false

void TraverseBTree(BTreeType& BT);

// 按照一定次序遍历一棵二叉树, 使得每个结点的值均被访问一次

bool FindBTree(BTreeType& BT, ElemType& item);

// 从二叉树中查找值为 item 的结点, 若存在该结点则由 item 带回它的完整值

// 并返回 true, 否则返回 false 表示查找失败
