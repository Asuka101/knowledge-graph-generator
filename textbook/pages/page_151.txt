S.stack=new ElemType[S.MaxSize];
if(!S.stack) {
    cerr<<"动态存储分配失败!"<<endl;
    exit(1);
}
//初始置栈为空
S.top=-1;
}

2. 元素 item 进栈, 即插入到栈顶

void Push(Stack& S, ElemType item)
{
    //若栈空间用完则自动扩大 2 倍空间,原有栈内容不变
    if(S.top==S.MaxSize-1) {
        int k=sizeof(ElemType); //计算每个元素存储空间的长度
        S.stack=(ElemType*)realloc(S.stack, 2*S.MaxSize*k);
        S.MaxSize=2*S.MaxSize;   //把栈空间大小修改为新的长度
    }
    //栈项指针后移一个位置
    S.top++;
    //将新元素插入到栈顶
    S.stack[S.top]=item;
}

3. 删除栈顶元素并返回

ElemType Pop(Stack& S)
{
    //若栈空则退出运行
    if(S.top==-1) {
        cerr<<"Stack is empty!"<<endl;
        exit(1);
    }
    //栈项指针减 1 表示退栈
    S.top--;
    //返回原栈顶元素的值
    return S.stack[S.top+1];
}

注意: 做出栈操作时, 栈顶指针下移, 但原栈顶位置中保存的元素依然存在, 仍可以被利用, 只是不属于当前栈中的元素而已。当前栈中的元素为从栈顶到栈底之间的所有元素。

4. 读取栈顶元素的值

ElemType Peek(Stack& S)
{
