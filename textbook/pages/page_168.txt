参$n$的值就减 1 , 所以最终必然导致$n$的值为 0 , 从而结束递归调用, 接着不断地执行与递归调用相对应的返回操作, 最后返回到进行非递归调用的调用函数的位置向下执行。

若用$f(4)$去调用$f(n)$函数, 该函数返回$4 \times f(3)$的值, 因返回表达式中包含有函数$f(3)$,所以接着进行递归调用, 返回$3 \times f(2)$的值, 以此类推, 当最后进行$f(0)$递归调用, 返回函数值 1 后, 结束本次递归调用, 返回到调用函数$f(0)$的位置, 从而计算出$1 \times f(0)$的值 1 ,即$1 \times f(0) = 1 \times 1 = 1$, 作为调用函数$f(1)$的返回值, 返回到$2 \times f(1)$表达式中, 计算出值 2 作为$f(2)$函数的返回值, 接着返回到$3 \times f(2)$表达式中, 计算出值 6 作为$f(3)$函数的返回值, 再接着返回到$4 \times f(3)$表达式中, 计算出$f(4)$的返回值 24 , 从而结束整个调用过程, 返回到调用函数$f(4)$的位置继续向下执行。

上述调用和返回过程, 如图 4-5 所示。

![image](attachment://figure_4_5.png)

图 4-5 利用$f(4)$调用$f(n)$递归函数的执行流程

在计算机系统内, 执行递归函数是通过自动使用栈来实现的, 栈中的每个元素包含有递归函数的每个参数域、每个局部变量量和调用后的返回地址域, 其中引用参数域只保存传送来的实参的地址, 以便按此地址访问实参的存储空间存取其值, 其他的每个域是用于存储其值的实际存储空间。每次进行函数调用时, 都把相应的值压入栈, 每次调用结束时,都按照本次返回地址返回到指定的位置执行, 并且自动做一次退栈操作, 使得上一次调用所使用的参数成为新的栈顶项, 继续被使用。

例如对于求$n$阶乘的递归函数$f(n)$, 当调用它时系统自动建立一个栈, 该栈中的元素包含值参$n$的域和返回地址 r 域, 若用$f(4)$去调用$f(n)$函数, 调用后的返回地址用 r1 表示,在$f(n)$函数中, 每次进行$f(n-1)$调用的返回地址用 r2 表示, 则系统所使用栈的数据变化情况如图 4-6 所示。

其中, 每个栈状态的栈顶元素的 n 域是调用$f(n)$函数时为值参$n$所分配的存储空间, r 域为保存当前一次调用结束后的返回地址所分配的存储空间。如进行$f(4)$调用时, 栈顶元素中的值参$n$域保存的值为 4 , 返回地址域保存的值为 r1, 当执行$f(4)$调用结束 (即执行到函数体的右花括号结束符) 后, 就返回到 r1 的位置执行。又如当执行$f(3)$调用时, 栈顶元素中的值参$n$域保存的值为 3 , 返回地址域保存的值为 r2, 当调用$f(3)$结束后, 就返回到 r2 的位置 (即上一层返回表达式中乘号后面的位置) 执行。

当调用$f(n)$算法时, 系统所使用栈的最大深度为$n+1$,$n$为首次调用时传送给来的实参的值, 所以其空间复杂度为$O(n)$。又因为每执行一次递归调用就是执行一条条件语句, 其时
