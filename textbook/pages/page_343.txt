{
//从长度为m的散列表HT中查找元素,返回该元素的下标位置
int d=H(item.key,m); //计算散列地址
int temp=d; //保存初始散列地址到temp
while (HT[d].key!=NullTag) { //当散列地址中的关键字域不为空则循环
    if(HT[d].key==item.key) return d; //查找成功返回下标d
    else d=(d+1)%m;
    if(d==temp) return -1; //查找失败返回-1
}
return -1; //查找失败返回-1
}

（5）从散列表中删除一个元素。

bool Delete(ArrayHashList HT, int m, ElemType& item)
{ //从长度为m的散列表HT中删除元素,由item带回该元素的完整值
int d=H(item.key,m); //计算散列地址
int temp=d; //保存散列地址的初始值
while (HT[d].key!=NullTag) { //不为空记录则循环
    if(HT[d].key==item.key) {
        item=HT[d]; //由item带回被删除元素的完整值
        HT[d].key=DeleteTag; //设置删除标记
        return true; //删除成功返回真
    }
    else d=(d+1)%m; //继续向后查找被删除的元素
    if(d==temp) return false; //循环一周后返回假表示删除失败
}
return false; //没有找到被删除的元素,表明删除失败返回假
}

算法中的$DeleteTag$为一个事先定义的标识符常量，用它作为一个删除标记，表明该记录已被删除，它与记录的关键字具有相同的数据类型，应为关键字取值范围以外的一个特定值。若不是这样，而是把被删除元素所占用的单元置为空记录，则就割断了以后查找元素的路径，致使该路径上的后面元素无法被查到，显然是不行的。另外，该位置同空记录位置一样，都可为以后插入元素使用。

2. 在类型为LinkHashList的链接存储的散列表上进行的运算

（1）初始化散列表。

void InitHashList(LinkHashList HT)
{ //把散列表HT中每一元素均置为空指针
for(int i=0; i<HashMaxSize; i++)
    HT[i]=NULL;
}

（2）清空一个散列表。

void ClearHashList(LinkHashList HT)
