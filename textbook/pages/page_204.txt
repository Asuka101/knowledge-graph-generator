```plaintext
int BTreeDepth(BTreeType & BT);
//求出一棵二叉树的深度
void PrintBTree(BTreeType& BT);
//按照树的一种表示方法输出一棵二叉树
void ClearBTree(BTreeType& BT);
//清除二叉树中的所有结点,使之变为一棵空树
end BinaryTree

\section*{5.2 .4 二叉树的存储结构}

同线性表一样, 二叉树也有顺序和链接两种存储结构。

\section*{1. 顺序存储结构}

顺序存储一棵二叉树时, 首先对该树中每个结点进行编号, 然后以各结点的编号为下标, 把各结点的值对应存储到一个一维数组中。每个结点的编号与等深度的满二叉树中对应结点的编号相同, 即树根结点的编号为1, 接着按照从上到下和从左到右的次序, 若一个结点的编号为$i$, 则左、右孩子的编号分别为$2i$和$2i+1$。在如图 5-9 所示的二叉树中, 各结点上方的数字就是该结点的编号。

(a) 完全二叉树
(b) 一般二叉树

图 5-9 带结点编号的二叉树

假定分别采用一维数组 data1 和 data2 来顺序存储图 5-9 (a) 和图 5-9 (b) 中的二叉树,则两数组中各元素的值如图 5-10 所示。

data1
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
|  | 25 | 15 | 36 | 10 | 20 | 32 | 48 | 4 | 11 | 18 |

data2
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
|  | 1 | D | P | C | F | M |  |  | E | H |  | N |

图 5-10 二叉树的顺序存储结构

在二叉树的顺序存储结构中, 各结点之间的关系是通过下标计算出来的, 因此访问每一个结点的双亲和左、右孩子（若有的话）都非常方便。如编号为$i$的结点（即下标为$i$的元素），其双亲结点的下标为$\lfloor i/2 \rfloor$；若存在左孩子，则左孩子结点的下标为$2i$；若存在右孩子，则右孩子结点的下标为$2i+1$。
```
