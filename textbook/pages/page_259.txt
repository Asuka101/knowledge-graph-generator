虽然平衡树的平衡性比理想平衡树要差一些，但理论上已经证明：具有$n$个结点的平衡树的高度在任何情况下决不会比具有相同结点数的理想平衡树高出45%以上。因此，在平衡树上进行查找运算虽比理想平衡树要慢一些，但通常比任意生成的二叉排序树快得多，当然，其时间复杂度的数量级表示仍为$O(\log n)$。

当向一棵平衡树插入一个新结点时，插入后，某些结点的左、右子树的高度不变，就不会影响这些结点的平衡因子，因而也不会因为这些结点造成不平衡；若插入后某些结点的左子树高度增加1（右子树高度增加1的情况与之类似），则就影响了这些结点的平衡因子，具体分为如下3种情况。

(1) 若插入前一部分结点的左子树高度$h_L$与右子树高度$h_R$相等，即平衡因子为0，则插入后将使平衡因子变为1，但仍符合平衡的条件，不必对它们加以调整。

(2) 若插入前一部分结点的$h_L$小于$h_R$，即平衡因子为-1，则插入后将使平衡因子变为0，平衡更加改善，不必对它们进行调整。

(3) 若插入前一部分结点的$h_L$大于$h_R$，即平衡因子为1，则插入后将使平衡因子变为2，破坏了平衡树的限制条件，需对它们加以调整，使整个二叉排序树恢复为平衡树。

若插入后，某些结点的右子树高度增加1，则也分为相应的3种情况，对于第1种情况，平衡因子将由0变为-1，不必进行调整；对于第2种情况是平衡因子由-1变为-2，则必须对它们进行调整；对于第3种情况是平衡因子由1变为0，平衡更加改善，也不必进行调整。

向平衡树中插入一个结点后破坏了其平衡性，首先要找出最小不平衡子树，然后再调整这个子树中有关结点之间的链接关系，使之成为新的平衡子树。当然，调整前后该子树的二叉搜索树性质不变，即调整前后得到的中序序列要完全相同。稍后便知，最小不平衡子树被调整为平衡子树后，原有其他所有不平衡子树无需调整，整个二叉搜索树就又成为一棵平衡树。

所谓最小不平衡子树是指以离插入结点最近、且平衡因子绝对值大于1的结点做根的子树。在图6-15(b)中，以值为30的结点做根的子树是该树的最小不平衡子树，分别以20和36做根的不平衡子树不是最小不平衡子树；在图6-15(c)中，以值为32的结点做根的子树是该树的最小不平衡子树，当然它也是唯一一个不平衡子树。

\section*{6.5.2 平衡二叉树的调整}

为了便于讨论，不妨设最小不平衡子树的根结点用A表示，则调整该子树的操作可归纳为下列4种。

\section*{1. LL型调整操作}

在A结点的左孩子（用B表示）的左子树上插入结点，使得A结点的平衡因子由1变为2而引起的不平衡所进行的调整操作。调整过程如图6-16所示，图中用长方框表示子树，用长方框的高度表示子树的高度，用带阴影的小方框表示被插入的结点。图6-16(a)为插入前的平衡子树，$\alpha$、$\beta$和$\gamma$的子树高度均为$h$（$h \geq 0$，若$h=0$，则它们均为空树），A结点和B结点的平衡因子分别为1和0。图6-16(b)为在B的左子树$\alpha$上插入一个新结点，
